
iot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b6  00800100  00006994  00006a28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006994  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000354  008003b6  008003b6  00006cde  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006cde  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000170  00000000  00000000  00006d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000881b  00000000  00000000  00006eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001022  00000000  00000000  0000f6c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002847  00000000  00000000  000106e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000544  00000000  00000000  00012f30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002637  00000000  00000000  00013474  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004a33  00000000  00000000  00015aab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000858  00000000  00000000  0001a4de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	df c0       	rjmp	.+446    	; 0x1c4 <__bad_interrupt>
       6:	00 00       	nop
       8:	dd c0       	rjmp	.+442    	; 0x1c4 <__bad_interrupt>
       a:	00 00       	nop
       c:	db c0       	rjmp	.+438    	; 0x1c4 <__bad_interrupt>
       e:	00 00       	nop
      10:	d9 c0       	rjmp	.+434    	; 0x1c4 <__bad_interrupt>
      12:	00 00       	nop
      14:	d7 c0       	rjmp	.+430    	; 0x1c4 <__bad_interrupt>
      16:	00 00       	nop
      18:	d5 c0       	rjmp	.+426    	; 0x1c4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d3 c0       	rjmp	.+422    	; 0x1c4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d1 c0       	rjmp	.+418    	; 0x1c4 <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c1       	rjmp	.+676    	; 0x2ca <__vector_9>
      26:	00 00       	nop
      28:	cd c0       	rjmp	.+410    	; 0x1c4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cb c0       	rjmp	.+406    	; 0x1c4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	1f c1       	rjmp	.+574    	; 0x270 <__vector_12>
      32:	00 00       	nop
      34:	c7 c0       	rjmp	.+398    	; 0x1c4 <__bad_interrupt>
      36:	00 00       	nop
      38:	c5 c0       	rjmp	.+394    	; 0x1c4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ec c0       	rjmp	.+472    	; 0x216 <__vector_15>
      3e:	00 00       	nop
      40:	c1 c0       	rjmp	.+386    	; 0x1c4 <__bad_interrupt>
      42:	00 00       	nop
      44:	bf c0       	rjmp	.+382    	; 0x1c4 <__bad_interrupt>
      46:	00 00       	nop
      48:	9a c1       	rjmp	.+820    	; 0x37e <__vector_18>
      4a:	00 00       	nop
      4c:	bb c0       	rjmp	.+374    	; 0x1c4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	b9 c0       	rjmp	.+370    	; 0x1c4 <__bad_interrupt>
      52:	00 00       	nop
      54:	b7 c0       	rjmp	.+366    	; 0x1c4 <__bad_interrupt>
      56:	00 00       	nop
      58:	b5 c0       	rjmp	.+362    	; 0x1c4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b3 c0       	rjmp	.+358    	; 0x1c4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b1 c0       	rjmp	.+354    	; 0x1c4 <__bad_interrupt>
      62:	00 00       	nop
      64:	af c0       	rjmp	.+350    	; 0x1c4 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c1       	rjmp	.+698    	; 0x324 <__vector_26>
      6a:	00 00       	nop
      6c:	ab c0       	rjmp	.+342    	; 0x1c4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a9 c0       	rjmp	.+338    	; 0x1c4 <__bad_interrupt>
      72:	00 00       	nop
      74:	a7 c0       	rjmp	.+334    	; 0x1c4 <__bad_interrupt>
      76:	00 00       	nop
      78:	bb c1       	rjmp	.+886    	; 0x3f0 <__vector_30>
      7a:	00 00       	nop
      7c:	a3 c0       	rjmp	.+326    	; 0x1c4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a1 c0       	rjmp	.+322    	; 0x1c4 <__bad_interrupt>
      82:	00 00       	nop
      84:	9f c0       	rjmp	.+318    	; 0x1c4 <__bad_interrupt>
      86:	00 00       	nop
      88:	9d c0       	rjmp	.+314    	; 0x1c4 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	00 40       	sbci	r16, 0x00	; 0
      8e:	7a 10       	cpse	r7, r10
      90:	f3 5a       	subi	r31, 0xA3	; 163
      92:	00 a0       	ldd	r0, Z+32	; 0x20
      94:	72 4e       	sbci	r23, 0xE2	; 226
      96:	18 09       	sbc	r17, r8
      98:	00 10       	cpse	r0, r0
      9a:	a5 d4       	rcall	.+2378   	; 0x9e6 <_ZN13iotIrReceiver12stateMachineEv+0x7c>
      9c:	e8 00       	.word	0x00e8	; ????
      9e:	00 e8       	ldi	r16, 0x80	; 128
      a0:	76 48       	sbci	r23, 0x86	; 134
      a2:	17 00       	.word	0x0017	; ????
      a4:	00 e4       	ldi	r16, 0x40	; 64
      a6:	0b 54       	subi	r16, 0x4B	; 75
      a8:	02 00       	.word	0x0002	; ????
      aa:	00 ca       	rjmp	.-3072   	; 0xfffff4ac <__eeprom_end+0xff7ef4ac>
      ac:	9a 3b       	cpi	r25, 0xBA	; 186
      ae:	00 00       	nop
      b0:	00 e1       	ldi	r16, 0x10	; 16
      b2:	f5 05       	cpc	r31, r5
      b4:	00 00       	nop
      b6:	80 96       	adiw	r24, 0x20	; 32
      b8:	98 00       	.word	0x0098	; ????
      ba:	00 00       	nop
      bc:	40 42       	sbci	r20, 0x20	; 32
      be:	0f 00       	.word	0x000f	; ????
      c0:	00 00       	nop
      c2:	a0 86       	std	Z+8, r10	; 0x08
      c4:	01 00       	.word	0x0001	; ????
      c6:	00 00       	nop
      c8:	10 27       	eor	r17, r16
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	e8 03       	fmulsu	r22, r16
      d0:	00 00       	nop
      d2:	00 00       	nop
      d4:	64 00       	.word	0x0064	; ????
      d6:	00 00       	nop
      d8:	00 00       	nop
      da:	0a 00       	.word	0x000a	; ????
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	01 00       	.word	0x0001	; ????
      e2:	00 00       	nop
      e4:	00 00       	nop
      e6:	2c 76       	andi	r18, 0x6C	; 108
      e8:	d8 88       	ldd	r13, Y+16	; 0x10
      ea:	dc 67       	ori	r29, 0x7C	; 124
      ec:	4f 08       	sbc	r4, r15
      ee:	23 df       	rcall	.-442    	; 0xffffff36 <__eeprom_end+0xff7eff36>
      f0:	c1 df       	rcall	.-126    	; 0x74 <__SREG__+0x35>
      f2:	ae 59       	subi	r26, 0x9E	; 158
      f4:	e1 b1       	in	r30, 0x01	; 1
      f6:	b7 96       	adiw	r30, 0x27	; 39
      f8:	e5 e3       	ldi	r30, 0x35	; 53
      fa:	e4 53       	subi	r30, 0x34	; 52
      fc:	c6 3a       	cpi	r28, 0xA6	; 166
      fe:	e6 51       	subi	r30, 0x16	; 22
     100:	99 76       	andi	r25, 0x69	; 105
     102:	96 e8       	ldi	r25, 0x86	; 134
     104:	e6 c2       	rjmp	.+1484   	; 0x6d2 <_ZN11iotTerminal7putCharEcP6__file+0xd2>
     106:	84 26       	eor	r8, r20
     108:	eb 89       	ldd	r30, Y+19	; 0x13
     10a:	8c 9b       	sbis	0x11, 4	; 17
     10c:	62 ed       	ldi	r22, 0xD2	; 210
     10e:	40 7c       	andi	r20, 0xC0	; 192
     110:	6f fc       	.word	0xfc6f	; ????
     112:	ef bc       	out	0x2f, r14	; 47
     114:	9c 9f       	mul	r25, r28
     116:	40 f2       	brcs	.-112    	; 0xa8 <__trampolines_end+0x1c>
     118:	ba a5       	ldd	r27, Y+42	; 0x2a
     11a:	6f a5       	ldd	r22, Y+47	; 0x2f
     11c:	f4 90       	lpm	r15, Z
     11e:	05 5a       	subi	r16, 0xA5	; 165
     120:	2a f7       	brpl	.-54     	; 0xec <__trampolines_end+0x60>
     122:	5c 93       	st	X, r21
     124:	6b 6c       	ori	r22, 0xCB	; 203
     126:	f9 67       	ori	r31, 0x79	; 121
     128:	6d c1       	rjmp	.+730    	; 0x404 <__vector_30+0x14>
     12a:	1b fc       	.word	0xfc1b	; ????
     12c:	e0 e4       	ldi	r30, 0x40	; 64
     12e:	0d 47       	sbci	r16, 0x7D	; 125
     130:	fe f5       	brtc	.+126    	; 0x1b0 <__do_clear_bss+0x4>
     132:	20 e6       	ldi	r18, 0x60	; 96
     134:	b5 00       	.word	0x00b5	; ????
     136:	d0 ed       	ldi	r29, 0xD0	; 208
     138:	90 2e       	mov	r9, r16
     13a:	03 00       	.word	0x0003	; ????
     13c:	94 35       	cpi	r25, 0x54	; 84
     13e:	77 05       	cpc	r23, r7
     140:	00 80       	ld	r0, Z
     142:	84 1e       	adc	r8, r20
     144:	08 00       	.word	0x0008	; ????
     146:	00 20       	and	r0, r0
     148:	4e 0a       	sbc	r4, r30
     14a:	00 00       	nop
     14c:	00 c8       	rjmp	.-4096   	; 0xfffff14e <__eeprom_end+0xff7ef14e>
     14e:	0c 33       	cpi	r16, 0x3C	; 60
     150:	33 33       	cpi	r19, 0x33	; 51
     152:	33 0f       	add	r19, r19
     154:	98 6e       	ori	r25, 0xE8	; 232
     156:	12 83       	std	Z+2, r17	; 0x02
     158:	11 41       	sbci	r17, 0x11	; 17
     15a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     15c:	21 14       	cp	r2, r1
     15e:	89 3b       	cpi	r24, 0xB9	; 185
     160:	e6 55       	subi	r30, 0x56	; 86
     162:	16 cf       	rjmp	.-468    	; 0xffffff90 <__eeprom_end+0xff7eff90>
     164:	fe e6       	ldi	r31, 0x6E	; 110
     166:	db 18       	sub	r13, r11
     168:	d1 84       	ldd	r13, Z+9	; 0x09
     16a:	4b 38       	cpi	r20, 0x8B	; 139
     16c:	1b f7       	brvc	.-58     	; 0x134 <__trampolines_end+0xa8>
     16e:	7c 1d       	adc	r23, r12
     170:	90 1d       	adc	r25, r0
     172:	a4 bb       	out	0x14, r26	; 20
     174:	e4 24       	eor	r14, r4
     176:	20 32       	cpi	r18, 0x20	; 32
     178:	84 72       	andi	r24, 0x24	; 36
     17a:	5e 22       	and	r5, r30
     17c:	81 00       	.word	0x0081	; ????
     17e:	c9 f1       	breq	.+114    	; 0x1f2 <_ZN6iotPin8getpPortENS_8iotPinIdE+0x20>
     180:	24 ec       	ldi	r18, 0xC4	; 196
     182:	a1 e5       	ldi	r26, 0x51	; 81
     184:	3d 27       	eor	r19, r29

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d0 e1       	ldi	r29, 0x10	; 16
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61

00000192 <__do_copy_data>:
     192:	13 e0       	ldi	r17, 0x03	; 3
     194:	a0 e0       	ldi	r26, 0x00	; 0
     196:	b1 e0       	ldi	r27, 0x01	; 1
     198:	e4 e9       	ldi	r30, 0x94	; 148
     19a:	f9 e6       	ldi	r31, 0x69	; 105
     19c:	00 e0       	ldi	r16, 0x00	; 0
     19e:	0b bf       	out	0x3b, r16	; 59
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <__do_copy_data+0x14>
     1a2:	07 90       	elpm	r0, Z+
     1a4:	0d 92       	st	X+, r0
     1a6:	a6 3b       	cpi	r26, 0xB6	; 182
     1a8:	b1 07       	cpc	r27, r17
     1aa:	d9 f7       	brne	.-10     	; 0x1a2 <__do_copy_data+0x10>

000001ac <__do_clear_bss>:
     1ac:	27 e0       	ldi	r18, 0x07	; 7
     1ae:	a6 eb       	ldi	r26, 0xB6	; 182
     1b0:	b3 e0       	ldi	r27, 0x03	; 3
     1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <.do_clear_bss_start>

000001b4 <.do_clear_bss_loop>:
     1b4:	1d 92       	st	X+, r1

000001b6 <.do_clear_bss_start>:
     1b6:	aa 30       	cpi	r26, 0x0A	; 10
     1b8:	b2 07       	cpc	r27, r18
     1ba:	e1 f7       	brne	.-8      	; 0x1b4 <.do_clear_bss_loop>
     1bc:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <main>
     1c0:	0c 94 c8 34 	jmp	0x6990	; 0x6990 <_exit>

000001c4 <__bad_interrupt>:
     1c4:	1d cf       	rjmp	.-454    	; 0x0 <__vectors>

000001c6 <_Znwj>:

volatile uint8_t *
iotPin::getpPin(iotPin::iotPinId id)
{
	return isValid(id) ? pPin[id / iotcNumPinsPerPorts] : NULL;
}
     1c6:	0c 94 80 2c 	jmp	0x5900	; 0x5900 <malloc>
     1ca:	08 95       	ret

000001cc <_ZdlPv>:
     1cc:	0c 94 18 2d 	jmp	0x5a30	; 0x5a30 <free>
     1d0:	08 95       	ret

000001d2 <_ZN6iotPin8getpPortENS_8iotPinIdE>:

volatile uint8_t *
iotPin::getpPort(iotPin::iotPinId id)
{
	return isValid(id) ? pPort[id / iotcNumPinsPerPorts] : NULL;
     1d2:	85 33       	cpi	r24, 0x35	; 53
     1d4:	60 f4       	brcc	.+24     	; 0x1ee <_ZN6iotPin8getpPortENS_8iotPinIdE+0x1c>
     1d6:	86 95       	lsr	r24
     1d8:	86 95       	lsr	r24
     1da:	86 95       	lsr	r24
     1dc:	e8 2f       	mov	r30, r24
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	ee 0f       	add	r30, r30
     1e2:	ff 1f       	adc	r31, r31
     1e4:	e2 5b       	subi	r30, 0xB2	; 178
     1e6:	fe 4f       	sbci	r31, 0xFE	; 254
     1e8:	80 81       	ld	r24, Z
     1ea:	91 81       	ldd	r25, Z+1	; 0x01
     1ec:	08 95       	ret
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	90 e0       	ldi	r25, 0x00	; 0
}
     1f2:	08 95       	ret

000001f4 <_ZN6iotPin7getpDDRENS_8iotPinIdE>:

volatile uint8_t *
iotPin::getpDDR(iotPin::iotPinId id)
{
	return isValid(id) ? pDDR[id / iotcNumPinsPerPorts] : NULL;
     1f4:	85 33       	cpi	r24, 0x35	; 53
     1f6:	60 f4       	brcc	.+24     	; 0x210 <_ZN6iotPin7getpDDRENS_8iotPinIdE+0x1c>
     1f8:	86 95       	lsr	r24
     1fa:	86 95       	lsr	r24
     1fc:	86 95       	lsr	r24
     1fe:	e8 2f       	mov	r30, r24
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	ee 0f       	add	r30, r30
     204:	ff 1f       	adc	r31, r31
     206:	e0 5c       	subi	r30, 0xC0	; 192
     208:	fe 4f       	sbci	r31, 0xFE	; 254
     20a:	80 81       	ld	r24, Z
     20c:	91 81       	ldd	r25, Z+1	; 0x01
     20e:	08 95       	ret
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
}
     214:	08 95       	ret

00000216 <__vector_15>:
void	(* iotTimer::iCallback1) (void) = (void (*) (void)) NULL;
void	(* iotTimer::iCallback2) (void) = (void (*) (void)) NULL;
void	(* iotTimer::iCallback3) (void) = (void (*) (void)) NULL;

ISR(TIMER0_COMP_vect)
{
     216:	1f 92       	push	r1
     218:	0f 92       	push	r0
     21a:	0f b6       	in	r0, 0x3f	; 63
     21c:	0f 92       	push	r0
     21e:	11 24       	eor	r1, r1
     220:	0b b6       	in	r0, 0x3b	; 59
     222:	0f 92       	push	r0
     224:	2f 93       	push	r18
     226:	3f 93       	push	r19
     228:	4f 93       	push	r20
     22a:	5f 93       	push	r21
     22c:	6f 93       	push	r22
     22e:	7f 93       	push	r23
     230:	8f 93       	push	r24
     232:	9f 93       	push	r25
     234:	af 93       	push	r26
     236:	bf 93       	push	r27
     238:	ef 93       	push	r30
     23a:	ff 93       	push	r31
	if(iotTimer::iCallback0) (* iotTimer::iCallback0)();
     23c:	e0 91 e5 06 	lds	r30, 0x06E5
     240:	f0 91 e6 06 	lds	r31, 0x06E6
     244:	30 97       	sbiw	r30, 0x00	; 0
     246:	09 f0       	breq	.+2      	; 0x24a <__vector_15+0x34>
     248:	09 95       	icall
}
     24a:	ff 91       	pop	r31
     24c:	ef 91       	pop	r30
     24e:	bf 91       	pop	r27
     250:	af 91       	pop	r26
     252:	9f 91       	pop	r25
     254:	8f 91       	pop	r24
     256:	7f 91       	pop	r23
     258:	6f 91       	pop	r22
     25a:	5f 91       	pop	r21
     25c:	4f 91       	pop	r20
     25e:	3f 91       	pop	r19
     260:	2f 91       	pop	r18
     262:	0f 90       	pop	r0
     264:	0b be       	out	0x3b, r0	; 59
     266:	0f 90       	pop	r0
     268:	0f be       	out	0x3f, r0	; 63
     26a:	0f 90       	pop	r0
     26c:	1f 90       	pop	r1
     26e:	18 95       	reti

00000270 <__vector_12>:

ISR(TIMER1_COMPA_vect)
{
     270:	1f 92       	push	r1
     272:	0f 92       	push	r0
     274:	0f b6       	in	r0, 0x3f	; 63
     276:	0f 92       	push	r0
     278:	11 24       	eor	r1, r1
     27a:	0b b6       	in	r0, 0x3b	; 59
     27c:	0f 92       	push	r0
     27e:	2f 93       	push	r18
     280:	3f 93       	push	r19
     282:	4f 93       	push	r20
     284:	5f 93       	push	r21
     286:	6f 93       	push	r22
     288:	7f 93       	push	r23
     28a:	8f 93       	push	r24
     28c:	9f 93       	push	r25
     28e:	af 93       	push	r26
     290:	bf 93       	push	r27
     292:	ef 93       	push	r30
     294:	ff 93       	push	r31
	if(iotTimer::iCallback1) (* iotTimer::iCallback1)();
     296:	e0 91 e3 06 	lds	r30, 0x06E3
     29a:	f0 91 e4 06 	lds	r31, 0x06E4
     29e:	30 97       	sbiw	r30, 0x00	; 0
     2a0:	09 f0       	breq	.+2      	; 0x2a4 <__vector_12+0x34>
     2a2:	09 95       	icall
}
     2a4:	ff 91       	pop	r31
     2a6:	ef 91       	pop	r30
     2a8:	bf 91       	pop	r27
     2aa:	af 91       	pop	r26
     2ac:	9f 91       	pop	r25
     2ae:	8f 91       	pop	r24
     2b0:	7f 91       	pop	r23
     2b2:	6f 91       	pop	r22
     2b4:	5f 91       	pop	r21
     2b6:	4f 91       	pop	r20
     2b8:	3f 91       	pop	r19
     2ba:	2f 91       	pop	r18
     2bc:	0f 90       	pop	r0
     2be:	0b be       	out	0x3b, r0	; 59
     2c0:	0f 90       	pop	r0
     2c2:	0f be       	out	0x3f, r0	; 63
     2c4:	0f 90       	pop	r0
     2c6:	1f 90       	pop	r1
     2c8:	18 95       	reti

000002ca <__vector_9>:

ISR(TIMER2_COMP_vect)
{
     2ca:	1f 92       	push	r1
     2cc:	0f 92       	push	r0
     2ce:	0f b6       	in	r0, 0x3f	; 63
     2d0:	0f 92       	push	r0
     2d2:	11 24       	eor	r1, r1
     2d4:	0b b6       	in	r0, 0x3b	; 59
     2d6:	0f 92       	push	r0
     2d8:	2f 93       	push	r18
     2da:	3f 93       	push	r19
     2dc:	4f 93       	push	r20
     2de:	5f 93       	push	r21
     2e0:	6f 93       	push	r22
     2e2:	7f 93       	push	r23
     2e4:	8f 93       	push	r24
     2e6:	9f 93       	push	r25
     2e8:	af 93       	push	r26
     2ea:	bf 93       	push	r27
     2ec:	ef 93       	push	r30
     2ee:	ff 93       	push	r31
	if(iotTimer::iCallback2) (* iotTimer::iCallback2)();
     2f0:	e0 91 e1 06 	lds	r30, 0x06E1
     2f4:	f0 91 e2 06 	lds	r31, 0x06E2
     2f8:	30 97       	sbiw	r30, 0x00	; 0
     2fa:	09 f0       	breq	.+2      	; 0x2fe <__vector_9+0x34>
     2fc:	09 95       	icall
}
     2fe:	ff 91       	pop	r31
     300:	ef 91       	pop	r30
     302:	bf 91       	pop	r27
     304:	af 91       	pop	r26
     306:	9f 91       	pop	r25
     308:	8f 91       	pop	r24
     30a:	7f 91       	pop	r23
     30c:	6f 91       	pop	r22
     30e:	5f 91       	pop	r21
     310:	4f 91       	pop	r20
     312:	3f 91       	pop	r19
     314:	2f 91       	pop	r18
     316:	0f 90       	pop	r0
     318:	0b be       	out	0x3b, r0	; 59
     31a:	0f 90       	pop	r0
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	0f 90       	pop	r0
     320:	1f 90       	pop	r1
     322:	18 95       	reti

00000324 <__vector_26>:

ISR(TIMER3_COMPA_vect)
{
     324:	1f 92       	push	r1
     326:	0f 92       	push	r0
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	0f 92       	push	r0
     32c:	11 24       	eor	r1, r1
     32e:	0b b6       	in	r0, 0x3b	; 59
     330:	0f 92       	push	r0
     332:	2f 93       	push	r18
     334:	3f 93       	push	r19
     336:	4f 93       	push	r20
     338:	5f 93       	push	r21
     33a:	6f 93       	push	r22
     33c:	7f 93       	push	r23
     33e:	8f 93       	push	r24
     340:	9f 93       	push	r25
     342:	af 93       	push	r26
     344:	bf 93       	push	r27
     346:	ef 93       	push	r30
     348:	ff 93       	push	r31
	if(iotTimer::iCallback3) (* iotTimer::iCallback3)();
     34a:	e0 91 df 06 	lds	r30, 0x06DF
     34e:	f0 91 e0 06 	lds	r31, 0x06E0
     352:	30 97       	sbiw	r30, 0x00	; 0
     354:	09 f0       	breq	.+2      	; 0x358 <__vector_26+0x34>
     356:	09 95       	icall
}
     358:	ff 91       	pop	r31
     35a:	ef 91       	pop	r30
     35c:	bf 91       	pop	r27
     35e:	af 91       	pop	r26
     360:	9f 91       	pop	r25
     362:	8f 91       	pop	r24
     364:	7f 91       	pop	r23
     366:	6f 91       	pop	r22
     368:	5f 91       	pop	r21
     36a:	4f 91       	pop	r20
     36c:	3f 91       	pop	r19
     36e:	2f 91       	pop	r18
     370:	0f 90       	pop	r0
     372:	0b be       	out	0x3b, r0	; 59
     374:	0f 90       	pop	r0
     376:	0f be       	out	0x3f, r0	; 63
     378:	0f 90       	pop	r0
     37a:	1f 90       	pop	r1
     37c:	18 95       	reti

0000037e <__vector_18>:

void	(* iotUart::irx0Callback) (void) = (void (*) (void)) NULL;
void	(* iotUart::irx1Callback) (void) = (void (*) (void)) NULL;

ISR(USART0_RX_vect)
{
     37e:	1f 92       	push	r1
     380:	0f 92       	push	r0
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	0f 92       	push	r0
     386:	11 24       	eor	r1, r1
     388:	0b b6       	in	r0, 0x3b	; 59
     38a:	0f 92       	push	r0
     38c:	2f 93       	push	r18
     38e:	3f 93       	push	r19
     390:	8f 93       	push	r24
     392:	9f 93       	push	r25
     394:	ef 93       	push	r30
     396:	ff 93       	push	r31
	if((iotUart::irx0Head + 1) % iotcUartBuffSize != iotUart::irx0Tail) {
     398:	20 91 dc 06 	lds	r18, 0x06DC
     39c:	80 91 db 06 	lds	r24, 0x06DB
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	2f 5f       	subi	r18, 0xFF	; 255
     3a4:	3f 4f       	sbci	r19, 0xFF	; 255
     3a6:	2f 77       	andi	r18, 0x7F	; 127
     3a8:	30 78       	andi	r19, 0x80	; 128
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	28 17       	cp	r18, r24
     3ae:	39 07       	cpc	r19, r25
     3b0:	91 f0       	breq	.+36     	; 0x3d6 <__vector_18+0x58>
		// buffer is not full.
		iotUart::irx0Buff[iotUart::irx0Head] = UDR0;
     3b2:	90 91 dc 06 	lds	r25, 0x06DC
     3b6:	8c b1       	in	r24, 0x0c	; 12
     3b8:	e0 91 d7 06 	lds	r30, 0x06D7
     3bc:	f0 91 d8 06 	lds	r31, 0x06D8
     3c0:	e9 0f       	add	r30, r25
     3c2:	f1 1d       	adc	r31, r1
     3c4:	80 83       	st	Z, r24
		iotUart::irx0Head = (iotUart::irx0Head + 1) % iotcUartBuffSize;
     3c6:	80 91 dc 06 	lds	r24, 0x06DC
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	01 96       	adiw	r24, 0x01	; 1
     3ce:	8f 77       	andi	r24, 0x7F	; 127
     3d0:	90 78       	andi	r25, 0x80	; 128
     3d2:	80 93 dc 06 	sts	0x06DC, r24
	}	// else buffer overflows! - chars are being lost.
}
     3d6:	ff 91       	pop	r31
     3d8:	ef 91       	pop	r30
     3da:	9f 91       	pop	r25
     3dc:	8f 91       	pop	r24
     3de:	3f 91       	pop	r19
     3e0:	2f 91       	pop	r18
     3e2:	0f 90       	pop	r0
     3e4:	0b be       	out	0x3b, r0	; 59
     3e6:	0f 90       	pop	r0
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	0f 90       	pop	r0
     3ec:	1f 90       	pop	r1
     3ee:	18 95       	reti

000003f0 <__vector_30>:

ISR(USART1_RX_vect)
{
     3f0:	1f 92       	push	r1
     3f2:	0f 92       	push	r0
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	0f 92       	push	r0
     3f8:	11 24       	eor	r1, r1
     3fa:	0b b6       	in	r0, 0x3b	; 59
     3fc:	0f 92       	push	r0
     3fe:	2f 93       	push	r18
     400:	3f 93       	push	r19
     402:	8f 93       	push	r24
     404:	9f 93       	push	r25
     406:	ef 93       	push	r30
     408:	ff 93       	push	r31
	if((iotUart::irx1Head + 1) % iotcUartBuffSize != iotUart::irx1Tail) {
     40a:	20 91 d4 06 	lds	r18, 0x06D4
     40e:	80 91 d3 06 	lds	r24, 0x06D3
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	2f 5f       	subi	r18, 0xFF	; 255
     416:	3f 4f       	sbci	r19, 0xFF	; 255
     418:	2f 77       	andi	r18, 0x7F	; 127
     41a:	30 78       	andi	r19, 0x80	; 128
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	28 17       	cp	r18, r24
     420:	39 07       	cpc	r19, r25
     422:	99 f0       	breq	.+38     	; 0x44a <__vector_30+0x5a>
		// buffer is not full.
		iotUart::irx1Buff[iotUart::irx1Head] = UDR1;
     424:	90 91 d4 06 	lds	r25, 0x06D4
     428:	80 91 9c 00 	lds	r24, 0x009C
     42c:	e0 91 cf 06 	lds	r30, 0x06CF
     430:	f0 91 d0 06 	lds	r31, 0x06D0
     434:	e9 0f       	add	r30, r25
     436:	f1 1d       	adc	r31, r1
     438:	80 83       	st	Z, r24
		iotUart::irx1Head = (iotUart::irx1Head + 1) % iotcUartBuffSize;
     43a:	80 91 d4 06 	lds	r24, 0x06D4
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	8f 77       	andi	r24, 0x7F	; 127
     444:	90 78       	andi	r25, 0x80	; 128
     446:	80 93 d4 06 	sts	0x06D4, r24
	}	// else buffer overflows! - chars are being lost.
}
     44a:	ff 91       	pop	r31
     44c:	ef 91       	pop	r30
     44e:	9f 91       	pop	r25
     450:	8f 91       	pop	r24
     452:	3f 91       	pop	r19
     454:	2f 91       	pop	r18
     456:	0f 90       	pop	r0
     458:	0b be       	out	0x3b, r0	; 59
     45a:	0f 90       	pop	r0
     45c:	0f be       	out	0x3f, r0	; 63
     45e:	0f 90       	pop	r0
     460:	1f 90       	pop	r1
     462:	18 95       	reti

00000464 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE>:
			F_CPU * iotcIrUSecPerTick / 1000000);
}
iotIrReceiver::~iotIrReceiver() {
	delete iDecoder; iDecoder = (iotIrDecoder *) NULL;
	if(!iotIrTransmitter::iTimer) delete iTimer;
	iTimer = (iotTimer *) NULL;
     464:	cf 93       	push	r28
     466:	c6 2f       	mov	r28, r22
     468:	80 91 eb 06 	lds	r24, 0x06EB
     46c:	90 91 ec 06 	lds	r25, 0x06EC
     470:	89 2b       	or	r24, r25
     472:	09 f0       	breq	.+2      	; 0x476 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0x12>
     474:	63 c0       	rjmp	.+198    	; 0x53c <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0xd8>
     476:	85 ed       	ldi	r24, 0xD5	; 213
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	a5 de       	rcall	.-694    	; 0x1c6 <_Znwj>
     47c:	90 93 ec 06 	sts	0x06EC, r25
     480:	80 93 eb 06 	sts	0x06EB, r24
     484:	80 91 e7 06 	lds	r24, 0x06E7
     488:	90 91 e8 06 	lds	r25, 0x06E8
     48c:	00 97       	sbiw	r24, 0x00	; 0
     48e:	29 f0       	breq	.+10     	; 0x49a <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0x36>
     490:	90 93 ea 06 	sts	0x06EA, r25
     494:	80 93 e9 06 	sts	0x06E9, r24
     498:	51 c0       	rjmp	.+162    	; 0x53c <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0xd8>
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	93 de       	rcall	.-730    	; 0x1c6 <_Znwj>
     4a0:	fc 01       	movw	r30, r24
     4a2:	10 82       	st	Z, r1
     4a4:	c2 30       	cpi	r28, 0x02	; 2
     4a6:	a1 f0       	breq	.+40     	; 0x4d0 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0x6c>
     4a8:	18 f4       	brcc	.+6      	; 0x4b0 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0x4c>
     4aa:	c1 30       	cpi	r28, 0x01	; 1
     4ac:	31 f0       	breq	.+12     	; 0x4ba <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0x56>
     4ae:	42 c0       	rjmp	.+132    	; 0x534 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0xd0>
     4b0:	c3 30       	cpi	r28, 0x03	; 3
     4b2:	e9 f0       	breq	.+58     	; 0x4ee <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0x8a>
     4b4:	c4 30       	cpi	r28, 0x04	; 4
     4b6:	31 f1       	breq	.+76     	; 0x504 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0xa0>
     4b8:	3d c0       	rjmp	.+122    	; 0x534 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0xd0>
     4ba:	23 b7       	in	r18, 0x33	; 51
     4bc:	27 70       	andi	r18, 0x07	; 7
     4be:	d1 f5       	brne	.+116    	; 0x534 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0xd0>
     4c0:	12 be       	out	0x32, r1	; 50
     4c2:	20 e2       	ldi	r18, 0x20	; 32
     4c4:	21 bf       	out	0x31, r18	; 49
     4c6:	23 b7       	in	r18, 0x33	; 51
     4c8:	20 7f       	andi	r18, 0xF0	; 240
     4ca:	29 60       	ori	r18, 0x09	; 9
     4cc:	23 bf       	out	0x33, r18	; 51
     4ce:	30 c0       	rjmp	.+96     	; 0x530 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0xcc>
     4d0:	2e b5       	in	r18, 0x2e	; 46
     4d2:	27 70       	andi	r18, 0x07	; 7
     4d4:	79 f5       	brne	.+94     	; 0x534 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0xd0>
     4d6:	1d bc       	out	0x2d, r1	; 45
     4d8:	1c bc       	out	0x2c, r1	; 44
     4da:	20 e2       	ldi	r18, 0x20	; 32
     4dc:	33 e0       	ldi	r19, 0x03	; 3
     4de:	3b bd       	out	0x2b, r19	; 43
     4e0:	2a bd       	out	0x2a, r18	; 42
     4e2:	1f bc       	out	0x2f, r1	; 47
     4e4:	2e b5       	in	r18, 0x2e	; 46
     4e6:	20 7f       	andi	r18, 0xF0	; 240
     4e8:	29 60       	ori	r18, 0x09	; 9
     4ea:	2e bd       	out	0x2e, r18	; 46
     4ec:	21 c0       	rjmp	.+66     	; 0x530 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0xcc>
     4ee:	25 b5       	in	r18, 0x25	; 37
     4f0:	27 70       	andi	r18, 0x07	; 7
     4f2:	01 f5       	brne	.+64     	; 0x534 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0xd0>
     4f4:	14 bc       	out	0x24, r1	; 36
     4f6:	20 e2       	ldi	r18, 0x20	; 32
     4f8:	23 bd       	out	0x23, r18	; 35
     4fa:	25 b5       	in	r18, 0x25	; 37
     4fc:	20 7f       	andi	r18, 0xF0	; 240
     4fe:	29 60       	ori	r18, 0x09	; 9
     500:	25 bd       	out	0x25, r18	; 37
     502:	16 c0       	rjmp	.+44     	; 0x530 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0xcc>
     504:	20 91 8a 00 	lds	r18, 0x008A
     508:	27 70       	andi	r18, 0x07	; 7
     50a:	a1 f4       	brne	.+40     	; 0x534 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0xd0>
     50c:	10 92 89 00 	sts	0x0089, r1
     510:	10 92 88 00 	sts	0x0088, r1
     514:	20 e2       	ldi	r18, 0x20	; 32
     516:	33 e0       	ldi	r19, 0x03	; 3
     518:	30 93 87 00 	sts	0x0087, r19
     51c:	20 93 86 00 	sts	0x0086, r18
     520:	10 92 8b 00 	sts	0x008B, r1
     524:	ea e8       	ldi	r30, 0x8A	; 138
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	20 81       	ld	r18, Z
     52a:	20 7f       	andi	r18, 0xF0	; 240
     52c:	29 60       	ori	r18, 0x09	; 9
     52e:	20 83       	st	Z, r18
     530:	fc 01       	movw	r30, r24
     532:	c0 83       	st	Z, r28
     534:	90 93 ea 06 	sts	0x06EA, r25
     538:	80 93 e9 06 	sts	0x06E9, r24
     53c:	cf 91       	pop	r28
     53e:	08 95       	ret

00000540 <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE>:

//-----------------------------------------------------------------------------
//	iotIrRcTransmitter::iotIrRcTransmitter -
//	iotIrRcTransmitter::~iotIrTransmitter -
//-----------------------------------------------------------------------------
iotIrTransmitter::iotIrTransmitter(iotTimer::iotTimerId aTimerId) {
     540:	cf 93       	push	r28
     542:	c6 2f       	mov	r28, r22
	if(iotIrReceiver::iTimer) iTimer = iotIrReceiver::iTimer;
     544:	80 91 e9 06 	lds	r24, 0x06E9
     548:	90 91 ea 06 	lds	r25, 0x06EA
     54c:	00 97       	sbiw	r24, 0x00	; 0
     54e:	29 f0       	breq	.+10     	; 0x55a <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0x1a>
     550:	90 93 e8 06 	sts	0x06E8, r25
     554:	80 93 e7 06 	sts	0x06E7, r24
     558:	51 c0       	rjmp	.+162    	; 0x5fc <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0xbc>
	else
		iTimer = new iotTimer(aTimerId, iotTimer::iotcPsd1,
			F_CPU * iotcIrUSecPerTick / 1000000);
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	33 de       	rcall	.-922    	; 0x1c6 <_Znwj>
		typedef enum {		// 32 & 128 only for 8-bit counters 0 & 2.
			iotcPsdNo, iotcPsd1, iotcPsd8, iotcPsd32, iotcPsd64, iotcPsd128,
			iotcPsd256, iotcPsd1024
		} iotTimerPsd;
		iotTimer(iotTimerId aId, iotTimerPsd aPsd, unsigned int aCount) {
			iId = iotcTimerNone;
     560:	fc 01       	movw	r30, r24
     562:	10 82       	st	Z, r1
					case iotcPsd256: psd = 4; break;
					case iotcPsd1024: psd = 5; break;
					default: return;
				}
			}
			switch(aId) {
     564:	c2 30       	cpi	r28, 0x02	; 2
     566:	a1 f0       	breq	.+40     	; 0x590 <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0x50>
     568:	18 f4       	brcc	.+6      	; 0x570 <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0x30>
     56a:	c1 30       	cpi	r28, 0x01	; 1
     56c:	31 f0       	breq	.+12     	; 0x57a <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0x3a>
     56e:	42 c0       	rjmp	.+132    	; 0x5f4 <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0xb4>
     570:	c3 30       	cpi	r28, 0x03	; 3
     572:	e9 f0       	breq	.+58     	; 0x5ae <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0x6e>
     574:	c4 30       	cpi	r28, 0x04	; 4
     576:	31 f1       	breq	.+76     	; 0x5c4 <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0x84>
     578:	3d c0       	rjmp	.+122    	; 0x5f4 <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0xb4>
				case iotcTimer0:
					if((TCCR0 & 0x07) != 0) return;
     57a:	23 b7       	in	r18, 0x33	; 51
     57c:	27 70       	andi	r18, 0x07	; 7
     57e:	d1 f5       	brne	.+116    	; 0x5f4 <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0xb4>
					TCNT0 = 0; OCR0 = aCount & 0xff; 
     580:	12 be       	out	0x32, r1	; 50
     582:	20 e2       	ldi	r18, 0x20	; 32
     584:	21 bf       	out	0x31, r18	; 49
					TCCR0 = (TCCR0 & ~(0x07)) | (1 << WGM01) | psd;
     586:	23 b7       	in	r18, 0x33	; 51
     588:	20 7f       	andi	r18, 0xF0	; 240
     58a:	29 60       	ori	r18, 0x09	; 9
     58c:	23 bf       	out	0x33, r18	; 51
     58e:	30 c0       	rjmp	.+96     	; 0x5f0 <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0xb0>
					break;
				case iotcTimer1:
					if((TCCR1B & 0x07) != 0) return;
     590:	2e b5       	in	r18, 0x2e	; 46
     592:	27 70       	andi	r18, 0x07	; 7
     594:	79 f5       	brne	.+94     	; 0x5f4 <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0xb4>
					TCNT1 = 0; OCR1A = aCount; TCCR1A = 0;
     596:	1d bc       	out	0x2d, r1	; 45
     598:	1c bc       	out	0x2c, r1	; 44
     59a:	20 e2       	ldi	r18, 0x20	; 32
     59c:	33 e0       	ldi	r19, 0x03	; 3
     59e:	3b bd       	out	0x2b, r19	; 43
     5a0:	2a bd       	out	0x2a, r18	; 42
     5a2:	1f bc       	out	0x2f, r1	; 47
					TCCR1B = (TCCR1B & ~(0x07)) | (1 << WGM12) | psd;
     5a4:	2e b5       	in	r18, 0x2e	; 46
     5a6:	20 7f       	andi	r18, 0xF0	; 240
     5a8:	29 60       	ori	r18, 0x09	; 9
     5aa:	2e bd       	out	0x2e, r18	; 46
     5ac:	21 c0       	rjmp	.+66     	; 0x5f0 <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0xb0>
					break;
				case iotcTimer2:
					if((TCCR2 & 0x07) != 0) return;
     5ae:	25 b5       	in	r18, 0x25	; 37
     5b0:	27 70       	andi	r18, 0x07	; 7
     5b2:	01 f5       	brne	.+64     	; 0x5f4 <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0xb4>
					TCNT2 = 0; OCR2 = aCount & 0xff;
     5b4:	14 bc       	out	0x24, r1	; 36
     5b6:	20 e2       	ldi	r18, 0x20	; 32
     5b8:	23 bd       	out	0x23, r18	; 35
					TCCR2 = (TCCR2 & ~(0x07)) | (1 << WGM21) | psd;
     5ba:	25 b5       	in	r18, 0x25	; 37
     5bc:	20 7f       	andi	r18, 0xF0	; 240
     5be:	29 60       	ori	r18, 0x09	; 9
     5c0:	25 bd       	out	0x25, r18	; 37
     5c2:	16 c0       	rjmp	.+44     	; 0x5f0 <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0xb0>
					break;
				case iotcTimer3:
					if((TCCR3B & 0x07) != 0) return;
     5c4:	20 91 8a 00 	lds	r18, 0x008A
     5c8:	27 70       	andi	r18, 0x07	; 7
     5ca:	a1 f4       	brne	.+40     	; 0x5f4 <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0xb4>
					TCNT3 = 0; OCR3A = aCount; TCCR3A = 0;
     5cc:	10 92 89 00 	sts	0x0089, r1
     5d0:	10 92 88 00 	sts	0x0088, r1
     5d4:	20 e2       	ldi	r18, 0x20	; 32
     5d6:	33 e0       	ldi	r19, 0x03	; 3
     5d8:	30 93 87 00 	sts	0x0087, r19
     5dc:	20 93 86 00 	sts	0x0086, r18
     5e0:	10 92 8b 00 	sts	0x008B, r1
					TCCR3B = (TCCR3B & ~(0x07)) | (1 << WGM32) | psd;
     5e4:	ea e8       	ldi	r30, 0x8A	; 138
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	20 81       	ld	r18, Z
     5ea:	20 7f       	andi	r18, 0xF0	; 240
     5ec:	29 60       	ori	r18, 0x09	; 9
     5ee:	20 83       	st	Z, r18
					break;
				default: return;
			}
			iId = aId;
     5f0:	fc 01       	movw	r30, r24
     5f2:	c0 83       	st	Z, r28
     5f4:	90 93 e8 06 	sts	0x06E8, r25
     5f8:	80 93 e7 06 	sts	0x06E7, r24
}
     5fc:	cf 91       	pop	r28
     5fe:	08 95       	ret

00000600 <_ZN11iotTerminal7putCharEcP6__file>:
			if(iUart) iUart->processOne();
		}
		static int
		putChar(char c, FILE *f)
		{
			if(iUart) return(iUart->putChar(c));
     600:	e0 91 c9 06 	lds	r30, 0x06C9
     604:	f0 91 ca 06 	lds	r31, 0x06CA
     608:	30 97       	sbiw	r30, 0x00	; 0
     60a:	09 f4       	brne	.+2      	; 0x60e <_ZN11iotTerminal7putCharEcP6__file+0xe>
     60c:	9e c0       	rjmp	.+316    	; 0x74a <_ZN11iotTerminal7putCharEcP6__file+0x14a>
				iotmAtomic(itx1Tail = (itx1Tail + 1) % iotcUartBuffSize);
			}
		}
		int
		putChar(char c) {
			if(iId == iotcUart0) {
     60e:	90 81       	ld	r25, Z
     610:	91 30       	cpi	r25, 0x01	; 1
     612:	09 f0       	breq	.+2      	; 0x616 <_ZN11iotTerminal7putCharEcP6__file+0x16>
     614:	46 c0       	rjmp	.+140    	; 0x6a2 <_ZN11iotTerminal7putCharEcP6__file+0xa2>
				if(itx0Head == itx0Tail) {
     616:	20 91 de 06 	lds	r18, 0x06DE
     61a:	90 91 dd 06 	lds	r25, 0x06DD
     61e:	29 13       	cpse	r18, r25
     620:	05 c0       	rjmp	.+10     	; 0x62c <_ZN11iotTerminal7putCharEcP6__file+0x2c>
					// buffer empty
					if(UCSR0A & (1 << UDRE)) {		// register empty
     622:	5d 9b       	sbis	0x0b, 5	; 11
     624:	28 c0       	rjmp	.+80     	; 0x676 <_ZN11iotTerminal7putCharEcP6__file+0x76>
						UDR0 = c;
     626:	8c b9       	out	0x0c, r24	; 12
						return(c);	
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	08 95       	ret
					}
				} else if((itx0Head + 1) % iotcUartBuffSize == itx0Tail) {
     62c:	40 91 de 06 	lds	r20, 0x06DE
     630:	20 91 dd 06 	lds	r18, 0x06DD
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	4f 5f       	subi	r20, 0xFF	; 255
     638:	5f 4f       	sbci	r21, 0xFF	; 255
     63a:	4f 77       	andi	r20, 0x7F	; 127
     63c:	50 78       	andi	r21, 0x80	; 128
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	42 17       	cp	r20, r18
     642:	53 07       	cpc	r21, r19
     644:	c1 f4       	brne	.+48     	; 0x676 <_ZN11iotTerminal7putCharEcP6__file+0x76>
					// buffer full
					// wait until the data register becomes empty.
					while(!(UCSR0A & (1 << UDRE))) ;
     646:	5d 9b       	sbis	0x0b, 5	; 11
     648:	fe cf       	rjmp	.-4      	; 0x646 <_ZN11iotTerminal7putCharEcP6__file+0x46>
					UDR0 = itx0Buff[itx0Tail];
     64a:	90 91 dd 06 	lds	r25, 0x06DD
     64e:	e0 91 d9 06 	lds	r30, 0x06D9
     652:	f0 91 da 06 	lds	r31, 0x06DA
     656:	e9 0f       	add	r30, r25
     658:	f1 1d       	adc	r31, r1
     65a:	90 81       	ld	r25, Z
     65c:	9c b9       	out	0x0c, r25	; 12
					iotmAtomic(itx0Tail = (itx0Tail + 1) % iotcUartBuffSize);
     65e:	9f b7       	in	r25, 0x3f	; 63
     660:	f8 94       	cli
     662:	20 91 dd 06 	lds	r18, 0x06DD
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	2f 5f       	subi	r18, 0xFF	; 255
     66a:	3f 4f       	sbci	r19, 0xFF	; 255
     66c:	2f 77       	andi	r18, 0x7F	; 127
     66e:	30 78       	andi	r19, 0x80	; 128
     670:	20 93 dd 06 	sts	0x06DD, r18
     674:	9f bf       	out	0x3f, r25	; 63
				}
				itx0Buff[itx0Head] = c;
     676:	90 91 de 06 	lds	r25, 0x06DE
     67a:	e0 91 d9 06 	lds	r30, 0x06D9
     67e:	f0 91 da 06 	lds	r31, 0x06DA
     682:	e9 0f       	add	r30, r25
     684:	f1 1d       	adc	r31, r1
     686:	80 83       	st	Z, r24
				iotmAtomic(itx0Head = (itx0Head + 1) % iotcUartBuffSize);
     688:	9f b7       	in	r25, 0x3f	; 63
     68a:	f8 94       	cli
     68c:	20 91 de 06 	lds	r18, 0x06DE
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	2f 5f       	subi	r18, 0xFF	; 255
     694:	3f 4f       	sbci	r19, 0xFF	; 255
     696:	2f 77       	andi	r18, 0x7F	; 127
     698:	30 78       	andi	r19, 0x80	; 128
     69a:	20 93 de 06 	sts	0x06DE, r18
     69e:	9f bf       	out	0x3f, r25	; 63
     6a0:	4f c0       	rjmp	.+158    	; 0x740 <_ZN11iotTerminal7putCharEcP6__file+0x140>
			} else if(iId == iotcUart1) {
     6a2:	92 30       	cpi	r25, 0x02	; 2
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <_ZN11iotTerminal7putCharEcP6__file+0xa8>
     6a6:	4e c0       	rjmp	.+156    	; 0x744 <_ZN11iotTerminal7putCharEcP6__file+0x144>
				if(itx1Head == itx1Tail) {
     6a8:	20 91 d6 06 	lds	r18, 0x06D6
     6ac:	90 91 d5 06 	lds	r25, 0x06D5
     6b0:	29 13       	cpse	r18, r25
     6b2:	08 c0       	rjmp	.+16     	; 0x6c4 <_ZN11iotTerminal7putCharEcP6__file+0xc4>
					// buffer empty
					if(UCSR1A & (1 << UDRE)) {		// register empty
     6b4:	90 91 9b 00 	lds	r25, 0x009B
     6b8:	95 ff       	sbrs	r25, 5
     6ba:	2d c0       	rjmp	.+90     	; 0x716 <_ZN11iotTerminal7putCharEcP6__file+0x116>
						UDR1 = c;
     6bc:	80 93 9c 00 	sts	0x009C, r24
						return(c);
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	08 95       	ret
					}
				} else if((itx1Head + 1) % iotcUartBuffSize == itx1Tail) {
     6c4:	40 91 d6 06 	lds	r20, 0x06D6
     6c8:	20 91 d5 06 	lds	r18, 0x06D5
     6cc:	50 e0       	ldi	r21, 0x00	; 0
     6ce:	4f 5f       	subi	r20, 0xFF	; 255
     6d0:	5f 4f       	sbci	r21, 0xFF	; 255
     6d2:	4f 77       	andi	r20, 0x7F	; 127
     6d4:	50 78       	andi	r21, 0x80	; 128
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	42 17       	cp	r20, r18
     6da:	53 07       	cpc	r21, r19
     6dc:	e1 f4       	brne	.+56     	; 0x716 <_ZN11iotTerminal7putCharEcP6__file+0x116>
					// buffer full
					// wait until the data register becomes empty.
					while(!(UCSR1A & (1 << UDRE))) ;
     6de:	eb e9       	ldi	r30, 0x9B	; 155
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	90 81       	ld	r25, Z
     6e4:	95 ff       	sbrs	r25, 5
     6e6:	fd cf       	rjmp	.-6      	; 0x6e2 <_ZN11iotTerminal7putCharEcP6__file+0xe2>
					UDR1 = itx1Buff[itx1Tail];
     6e8:	90 91 d5 06 	lds	r25, 0x06D5
     6ec:	e0 91 d1 06 	lds	r30, 0x06D1
     6f0:	f0 91 d2 06 	lds	r31, 0x06D2
     6f4:	e9 0f       	add	r30, r25
     6f6:	f1 1d       	adc	r31, r1
     6f8:	90 81       	ld	r25, Z
     6fa:	90 93 9c 00 	sts	0x009C, r25

					iotmAtomic(itx1Tail = (itx1Tail + 1) % iotcUartBuffSize);
     6fe:	9f b7       	in	r25, 0x3f	; 63
     700:	f8 94       	cli
     702:	20 91 d5 06 	lds	r18, 0x06D5
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	2f 5f       	subi	r18, 0xFF	; 255
     70a:	3f 4f       	sbci	r19, 0xFF	; 255
     70c:	2f 77       	andi	r18, 0x7F	; 127
     70e:	30 78       	andi	r19, 0x80	; 128
     710:	20 93 d5 06 	sts	0x06D5, r18
     714:	9f bf       	out	0x3f, r25	; 63
				}
				itx1Buff[itx1Head] = c;
     716:	90 91 d6 06 	lds	r25, 0x06D6
     71a:	e0 91 d1 06 	lds	r30, 0x06D1
     71e:	f0 91 d2 06 	lds	r31, 0x06D2
     722:	e9 0f       	add	r30, r25
     724:	f1 1d       	adc	r31, r1
     726:	80 83       	st	Z, r24
				iotmAtomic(itx1Head = (itx1Head + 1) % iotcUartBuffSize);
     728:	9f b7       	in	r25, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	20 91 d6 06 	lds	r18, 0x06D6
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	2f 5f       	subi	r18, 0xFF	; 255
     734:	3f 4f       	sbci	r19, 0xFF	; 255
     736:	2f 77       	andi	r18, 0x7F	; 127
     738:	30 78       	andi	r19, 0x80	; 128
     73a:	20 93 d6 06 	sts	0x06D6, r18
     73e:	9f bf       	out	0x3f, r25	; 63
			} else return 0;
			return(c);
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	08 95       	ret

					iotmAtomic(itx1Tail = (itx1Tail + 1) % iotcUartBuffSize);
				}
				itx1Buff[itx1Head] = c;
				iotmAtomic(itx1Head = (itx1Head + 1) % iotcUartBuffSize);
			} else return 0;
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
			if(iUart) iUart->processOne();
		}
		static int
		putChar(char c, FILE *f)
		{
			if(iUart) return(iUart->putChar(c));
     748:	08 95       	ret
			return(-1);
     74a:	8f ef       	ldi	r24, 0xFF	; 255
     74c:	9f ef       	ldi	r25, 0xFF	; 255
		}
     74e:	08 95       	ret

00000750 <_ZN11iotTerminal11receiveLineEv>:
		{
			if(iUart) return(iUart->getChar());
			return(-1);
		}
		static void
		receiveLine() {
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
			if(!iUart) return;
     758:	80 91 c9 06 	lds	r24, 0x06C9
     75c:	90 91 ca 06 	lds	r25, 0x06CA
     760:	89 2b       	or	r24, r25
     762:	09 f4       	brne	.+2      	; 0x766 <_ZN11iotTerminal11receiveLineEv+0x16>
     764:	ab c0       	rjmp	.+342    	; 0x8bc <_ZN11iotTerminal11receiveLineEv+0x16c>
				c = irx0Buff[irx0Tail];
				iotmAtomic(irx0Tail = (irx0Tail + 1) % iotcUartBuffSize);
			} else if(iId == iotcUart1) {
				if(irx1Tail == irx1Head) {	// buffer empty
					// wait until the data is received.
					while((UCSR1A & (1 << RXC1)) == 0) ;
     766:	ab e9       	ldi	r26, 0x9B	; 155
     768:	b0 e0       	ldi	r27, 0x00	; 0
					return(UDR1);
     76a:	cc e9       	ldi	r28, 0x9C	; 156
     76c:	d0 e0       	ldi	r29, 0x00	; 0
			while(iUart->peekChar() > -1) {
				c = iUart->getChar();
				if(c == '\n') {
					iLine[iCurChar] = '\0';
					iLineToParse = iLine;
					iLine = (iLine == iLine1) ? iLine2 : iLine1;
     76e:	47 e9       	ldi	r20, 0x97	; 151
     770:	56 e0       	ldi	r21, 0x06	; 6
     772:	65 e6       	ldi	r22, 0x65	; 101
     774:	76 e0       	ldi	r23, 0x06	; 6
     776:	7b c0       	rjmp	.+246    	; 0x86e <_ZN11iotTerminal11receiveLineEv+0x11e>
		getChar(void) {
			char	c;
			if(iId == iotcUart0) {
				if(irx0Tail == irx0Head) {	// buffer empty
					// wait until the data is received.
					while((UCSR0A & (1 << RXC0)) == 0) ;
     778:	5f 9b       	sbis	0x0b, 7	; 11
     77a:	fe cf       	rjmp	.-4      	; 0x778 <_ZN11iotTerminal11receiveLineEv+0x28>
					return(UDR0);
     77c:	8c b1       	in	r24, 0x0c	; 12
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	32 c0       	rjmp	.+100    	; 0x7e6 <_ZN11iotTerminal11receiveLineEv+0x96>
				}
				c = irx0Buff[irx0Tail];
     782:	80 91 db 06 	lds	r24, 0x06DB
     786:	e0 91 d7 06 	lds	r30, 0x06D7
     78a:	f0 91 d8 06 	lds	r31, 0x06D8
     78e:	e8 0f       	add	r30, r24
     790:	f1 1d       	adc	r31, r1
     792:	80 81       	ld	r24, Z
				iotmAtomic(irx0Tail = (irx0Tail + 1) % iotcUartBuffSize);
     794:	9f b7       	in	r25, 0x3f	; 63
     796:	f8 94       	cli
     798:	20 91 db 06 	lds	r18, 0x06DB
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	2f 5f       	subi	r18, 0xFF	; 255
     7a0:	3f 4f       	sbci	r19, 0xFF	; 255
     7a2:	2f 77       	andi	r18, 0x7F	; 127
     7a4:	30 78       	andi	r19, 0x80	; 128
     7a6:	20 93 db 06 	sts	0x06DB, r18
     7aa:	9f bf       	out	0x3f, r25	; 63
     7ac:	1b c0       	rjmp	.+54     	; 0x7e4 <_ZN11iotTerminal11receiveLineEv+0x94>
			} else if(iId == iotcUart1) {
				if(irx1Tail == irx1Head) {	// buffer empty
					// wait until the data is received.
					while((UCSR1A & (1 << RXC1)) == 0) ;
     7ae:	8c 91       	ld	r24, X
     7b0:	88 23       	and	r24, r24
     7b2:	ec f7       	brge	.-6      	; 0x7ae <_ZN11iotTerminal11receiveLineEv+0x5e>
					return(UDR1);
     7b4:	88 81       	ld	r24, Y
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	16 c0       	rjmp	.+44     	; 0x7e6 <_ZN11iotTerminal11receiveLineEv+0x96>
				}
				c = irx1Buff[irx1Tail];
     7ba:	80 91 d3 06 	lds	r24, 0x06D3
     7be:	e0 91 cf 06 	lds	r30, 0x06CF
     7c2:	f0 91 d0 06 	lds	r31, 0x06D0
     7c6:	e8 0f       	add	r30, r24
     7c8:	f1 1d       	adc	r31, r1
     7ca:	80 81       	ld	r24, Z
				iotmAtomic(irx1Tail = (irx1Tail + 1) % iotcUartBuffSize);
     7cc:	9f b7       	in	r25, 0x3f	; 63
     7ce:	f8 94       	cli
     7d0:	20 91 d3 06 	lds	r18, 0x06D3
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	2f 5f       	subi	r18, 0xFF	; 255
     7d8:	3f 4f       	sbci	r19, 0xFF	; 255
     7da:	2f 77       	andi	r18, 0x7F	; 127
     7dc:	30 78       	andi	r19, 0x80	; 128
     7de:	20 93 d3 06 	sts	0x06D3, r18
     7e2:	9f bf       	out	0x3f, r25	; 63
			} else return(-1);
			return(c);
     7e4:	90 e0       	ldi	r25, 0x00	; 0
			if(!iUart) return;
			
			int		c;
			while(iUart->peekChar() > -1) {
				c = iUart->getChar();
				if(c == '\n') {
     7e6:	8a 30       	cpi	r24, 0x0A	; 10
     7e8:	91 05       	cpc	r25, r1
     7ea:	21 f5       	brne	.+72     	; 0x834 <_ZN11iotTerminal11receiveLineEv+0xe4>
					iLine[iCurChar] = '\0';
     7ec:	e0 91 3e 01 	lds	r30, 0x013E
     7f0:	f0 91 3f 01 	lds	r31, 0x013F
     7f4:	80 91 61 06 	lds	r24, 0x0661
     7f8:	90 91 62 06 	lds	r25, 0x0662
     7fc:	e8 0f       	add	r30, r24
     7fe:	f9 1f       	adc	r31, r25
     800:	10 82       	st	Z, r1
					iLineToParse = iLine;
     802:	80 91 3e 01 	lds	r24, 0x013E
     806:	90 91 3f 01 	lds	r25, 0x013F
     80a:	90 93 64 06 	sts	0x0664, r25
     80e:	80 93 63 06 	sts	0x0663, r24
					iLine = (iLine == iLine1) ? iLine2 : iLine1;
     812:	87 59       	subi	r24, 0x97	; 151
     814:	96 40       	sbci	r25, 0x06	; 6
     816:	19 f4       	brne	.+6      	; 0x81e <_ZN11iotTerminal11receiveLineEv+0xce>
     818:	96 2f       	mov	r25, r22
     81a:	87 2f       	mov	r24, r23
     81c:	02 c0       	rjmp	.+4      	; 0x822 <_ZN11iotTerminal11receiveLineEv+0xd2>
     81e:	94 2f       	mov	r25, r20
     820:	85 2f       	mov	r24, r21
     822:	90 93 3e 01 	sts	0x013E, r25
     826:	80 93 3f 01 	sts	0x013F, r24
					iCurChar = 0;
     82a:	10 92 62 06 	sts	0x0662, r1
     82e:	10 92 61 06 	sts	0x0661, r1
     832:	1d c0       	rjmp	.+58     	; 0x86e <_ZN11iotTerminal11receiveLineEv+0x11e>
				} else if(iCurChar < iotcMaxLine - 2) {
     834:	20 91 61 06 	lds	r18, 0x0661
     838:	30 91 62 06 	lds	r19, 0x0662
     83c:	20 33       	cpi	r18, 0x30	; 48
     83e:	31 05       	cpc	r19, r1
     840:	94 f4       	brge	.+36     	; 0x866 <_ZN11iotTerminal11receiveLineEv+0x116>
					if(c != '\r') iLine[iCurChar++] = c;
     842:	8d 30       	cpi	r24, 0x0D	; 13
     844:	91 05       	cpc	r25, r1
     846:	99 f0       	breq	.+38     	; 0x86e <_ZN11iotTerminal11receiveLineEv+0x11e>
     848:	e0 91 3e 01 	lds	r30, 0x013E
     84c:	f0 91 3f 01 	lds	r31, 0x013F
     850:	89 01       	movw	r16, r18
     852:	0f 5f       	subi	r16, 0xFF	; 255
     854:	1f 4f       	sbci	r17, 0xFF	; 255
     856:	10 93 62 06 	sts	0x0662, r17
     85a:	00 93 61 06 	sts	0x0661, r16
     85e:	e2 0f       	add	r30, r18
     860:	f3 1f       	adc	r31, r19
     862:	80 83       	st	Z, r24
     864:	04 c0       	rjmp	.+8      	; 0x86e <_ZN11iotTerminal11receiveLineEv+0x11e>
				} else iCurChar = 0;	// line overflow - thrown away.
     866:	10 92 62 06 	sts	0x0662, r1
     86a:	10 92 61 06 	sts	0x0661, r1
			} else return 0;
			return(c);
		}
		int
		peekChar(void) {
			if(iId == iotcUart0) {
     86e:	e0 91 c9 06 	lds	r30, 0x06C9
     872:	f0 91 ca 06 	lds	r31, 0x06CA
     876:	80 81       	ld	r24, Z
     878:	81 30       	cpi	r24, 0x01	; 1
     87a:	79 f4       	brne	.+30     	; 0x89a <_ZN11iotTerminal11receiveLineEv+0x14a>
				if(irx0Tail != irx0Head) return(irx0Buff[irx0Tail]);
     87c:	90 91 db 06 	lds	r25, 0x06DB
     880:	80 91 dc 06 	lds	r24, 0x06DC
     884:	98 17       	cp	r25, r24
     886:	d1 f0       	breq	.+52     	; 0x8bc <_ZN11iotTerminal11receiveLineEv+0x16c>
     888:	80 91 db 06 	lds	r24, 0x06DB
		}
		int
		getChar(void) {
			char	c;
			if(iId == iotcUart0) {
				if(irx0Tail == irx0Head) {	// buffer empty
     88c:	90 91 db 06 	lds	r25, 0x06DB
     890:	80 91 dc 06 	lds	r24, 0x06DC
     894:	98 13       	cpse	r25, r24
     896:	75 cf       	rjmp	.-278    	; 0x782 <_ZN11iotTerminal11receiveLineEv+0x32>
     898:	6f cf       	rjmp	.-290    	; 0x778 <_ZN11iotTerminal11receiveLineEv+0x28>
		}
		int
		peekChar(void) {
			if(iId == iotcUart0) {
				if(irx0Tail != irx0Head) return(irx0Buff[irx0Tail]);
			} else if(iId == iotcUart1) {
     89a:	82 30       	cpi	r24, 0x02	; 2
     89c:	79 f4       	brne	.+30     	; 0x8bc <_ZN11iotTerminal11receiveLineEv+0x16c>
				if(irx1Tail != irx1Head) return(irx1Buff[irx1Tail]);
     89e:	90 91 d3 06 	lds	r25, 0x06D3
     8a2:	80 91 d4 06 	lds	r24, 0x06D4
     8a6:	98 17       	cp	r25, r24
     8a8:	49 f0       	breq	.+18     	; 0x8bc <_ZN11iotTerminal11receiveLineEv+0x16c>
     8aa:	80 91 d3 06 	lds	r24, 0x06D3
					return(UDR0);
				}
				c = irx0Buff[irx0Tail];
				iotmAtomic(irx0Tail = (irx0Tail + 1) % iotcUartBuffSize);
			} else if(iId == iotcUart1) {
				if(irx1Tail == irx1Head) {	// buffer empty
     8ae:	90 91 d3 06 	lds	r25, 0x06D3
     8b2:	80 91 d4 06 	lds	r24, 0x06D4
     8b6:	98 13       	cpse	r25, r24
     8b8:	80 cf       	rjmp	.-256    	; 0x7ba <_ZN11iotTerminal11receiveLineEv+0x6a>
     8ba:	79 cf       	rjmp	.-270    	; 0x7ae <_ZN11iotTerminal11receiveLineEv+0x5e>
					iCurChar = 0;
				} else if(iCurChar < iotcMaxLine - 2) {
					if(c != '\r') iLine[iCurChar++] = c;
				} else iCurChar = 0;	// line overflow - thrown away.
			}
		}
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	08 95       	ret

000008c6 <_ZN8iotServo9tick10kHzEv>:
			iotcServoDeltaDegree = 10
		};

		static void
		tick10kHz() {
			if(++in10kCycles == iAngle) {
     8c6:	80 91 eb 04 	lds	r24, 0x04EB
     8ca:	90 91 ec 04 	lds	r25, 0x04EC
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	90 93 ec 04 	sts	0x04EC, r25
     8d4:	80 93 eb 04 	sts	0x04EB, r24
     8d8:	20 91 3c 01 	lds	r18, 0x013C
     8dc:	30 91 3d 01 	lds	r19, 0x013D
     8e0:	82 17       	cp	r24, r18
     8e2:	93 07       	cpc	r25, r19
     8e4:	59 f4       	brne	.+22     	; 0x8fc <_ZN8iotServo9tick10kHzEv+0x36>
				*ipPort &= ~iPinMask;
     8e6:	e0 91 e9 04 	lds	r30, 0x04E9
     8ea:	f0 91 ea 04 	lds	r31, 0x04EA
     8ee:	90 81       	ld	r25, Z
     8f0:	80 91 e8 04 	lds	r24, 0x04E8
     8f4:	80 95       	com	r24
     8f6:	89 23       	and	r24, r25
     8f8:	80 83       	st	Z, r24
     8fa:	08 95       	ret
			} else if(in10kCycles == iotcServoPeriod) {
     8fc:	88 3c       	cpi	r24, 0xC8	; 200
     8fe:	91 05       	cpc	r25, r1
     900:	59 f4       	brne	.+22     	; 0x918 <_ZN8iotServo9tick10kHzEv+0x52>
				*ipPort = iPinMask;
     902:	e0 91 e9 04 	lds	r30, 0x04E9
     906:	f0 91 ea 04 	lds	r31, 0x04EA
     90a:	80 91 e8 04 	lds	r24, 0x04E8
     90e:	80 83       	st	Z, r24
				in10kCycles = 0;
     910:	10 92 ec 04 	sts	0x04EC, r1
     914:	10 92 eb 04 	sts	0x04EB, r1
     918:	08 95       	ret

0000091a <_ZN8iotClock6updateEv>:
		static char			iMonthDays[12];
		static bool			iCharLcdCreated;
		
		static void
		update() {
			iSeconds++;
     91a:	80 91 e2 04 	lds	r24, 0x04E2
     91e:	90 91 e3 04 	lds	r25, 0x04E3
     922:	a0 91 e4 04 	lds	r26, 0x04E4
     926:	b0 91 e5 04 	lds	r27, 0x04E5
     92a:	01 96       	adiw	r24, 0x01	; 1
     92c:	a1 1d       	adc	r26, r1
     92e:	b1 1d       	adc	r27, r1
			if(iSeconds >= 31536000L) iSeconds = 0;
     930:	80 38       	cpi	r24, 0x80	; 128
     932:	23 e3       	ldi	r18, 0x33	; 51
     934:	92 07       	cpc	r25, r18
     936:	21 ee       	ldi	r18, 0xE1	; 225
     938:	a2 07       	cpc	r26, r18
     93a:	21 e0       	ldi	r18, 0x01	; 1
     93c:	b2 07       	cpc	r27, r18
     93e:	4c f4       	brge	.+18     	; 0x952 <_ZN8iotClock6updateEv+0x38>
		static char			iMonthDays[12];
		static bool			iCharLcdCreated;
		
		static void
		update() {
			iSeconds++;
     940:	80 93 e2 04 	sts	0x04E2, r24
     944:	90 93 e3 04 	sts	0x04E3, r25
     948:	a0 93 e4 04 	sts	0x04E4, r26
     94c:	b0 93 e5 04 	sts	0x04E5, r27
     950:	08 c0       	rjmp	.+16     	; 0x962 <_ZN8iotClock6updateEv+0x48>
			if(iSeconds >= 31536000L) iSeconds = 0;
     952:	10 92 e2 04 	sts	0x04E2, r1
     956:	10 92 e3 04 	sts	0x04E3, r1
     95a:	10 92 e4 04 	sts	0x04E4, r1
     95e:	10 92 e5 04 	sts	0x04E5, r1
			iFlush = 1;
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	80 93 df 04 	sts	0x04DF, r24
     968:	08 95       	ret

0000096a <_ZN13iotIrReceiver12stateMachineEv>:
				return(iDecoder);
			return ((iotIrDecoder *) NULL);
		}

		static void
		stateMachine() {
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
					iCallback3 = (void (*)(void)) NULL; break;
				default: break;
			}
			iId = iotcTimerNone;
		}
		iotTimerId getId()		{ return(iId); }
     96e:	e0 91 e9 06 	lds	r30, 0x06E9
     972:	f0 91 ea 06 	lds	r31, 0x06EA
			uint8_t	 data;
			// cf.) PB5(OC1A), PE3(OC3A) are used for IrLEDs.
			if(iTimer->getId() == iotTimer::iotcTimer1) {
     976:	80 81       	ld	r24, Z
     978:	82 30       	cpi	r24, 0x02	; 2
     97a:	51 f4       	brne	.+20     	; 0x990 <_ZN13iotIrReceiver12stateMachineEv+0x26>
				data = (PINB & (1 << PB4)) != 0;
     97c:	86 b3       	in	r24, 0x16	; 22
				if(data) PORTB |= 0x08;
     97e:	84 fb       	bst	r24, 4
     980:	22 27       	eor	r18, r18
     982:	20 f9       	bld	r18, 0
     984:	84 ff       	sbrs	r24, 4
     986:	02 c0       	rjmp	.+4      	; 0x98c <_ZN13iotIrReceiver12stateMachineEv+0x22>
     988:	c3 9a       	sbi	0x18, 3	; 24
     98a:	0b c0       	rjmp	.+22     	; 0x9a2 <_ZN13iotIrReceiver12stateMachineEv+0x38>
				else PORTB &= ~0x08;
     98c:	c3 98       	cbi	0x18, 3	; 24
     98e:	09 c0       	rjmp	.+18     	; 0x9a2 <_ZN13iotIrReceiver12stateMachineEv+0x38>
			} else {			// iotTimer::iotcTimer3
				data = (PINE & (1 << PE2)) != 0;
     990:	81 b1       	in	r24, 0x01	; 1
				if(data) PORTE |= 0x80;
     992:	82 fb       	bst	r24, 2
     994:	22 27       	eor	r18, r18
     996:	20 f9       	bld	r18, 0
     998:	82 ff       	sbrs	r24, 2
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <_ZN13iotIrReceiver12stateMachineEv+0x36>
     99c:	1f 9a       	sbi	0x03, 7	; 3
     99e:	01 c0       	rjmp	.+2      	; 0x9a2 <_ZN13iotIrReceiver12stateMachineEv+0x38>
				else PORTE &= ~0x80;
     9a0:	1f 98       	cbi	0x03, 7	; 3
			}
			iDecoder->iTimer++;
     9a2:	e0 91 eb 06 	lds	r30, 0x06EB
     9a6:	f0 91 ec 06 	lds	r31, 0x06EC
     9aa:	df 01       	movw	r26, r30
     9ac:	a5 53       	subi	r26, 0x35	; 53
     9ae:	bf 4f       	sbci	r27, 0xFF	; 255
     9b0:	8d 91       	ld	r24, X+
     9b2:	9c 91       	ld	r25, X
     9b4:	11 97       	sbiw	r26, 0x01	; 1
     9b6:	01 96       	adiw	r24, 0x01	; 1
     9b8:	11 96       	adiw	r26, 0x01	; 1
     9ba:	9c 93       	st	X, r25
     9bc:	8e 93       	st	-X, r24
			if(iDecoder->inIntervals >= iotcIrMaxIntervals)
     9be:	82 81       	ldd	r24, Z+2	; 0x02
     9c0:	84 36       	cpi	r24, 0x64	; 100
     9c2:	10 f0       	brcs	.+4      	; 0x9c8 <_ZN13iotIrReceiver12stateMachineEv+0x5e>
				iDecoder->iState = iotcIrStateStop;
     9c4:	83 e0       	ldi	r24, 0x03	; 3
     9c6:	81 83       	std	Z+1, r24	; 0x01
			switch(iDecoder->iState) {
     9c8:	e0 91 eb 06 	lds	r30, 0x06EB
     9cc:	f0 91 ec 06 	lds	r31, 0x06EC
     9d0:	81 81       	ldd	r24, Z+1	; 0x01
     9d2:	81 30       	cpi	r24, 0x01	; 1
     9d4:	79 f1       	breq	.+94     	; 0xa34 <_ZN13iotIrReceiver12stateMachineEv+0xca>
     9d6:	38 f0       	brcs	.+14     	; 0x9e6 <_ZN13iotIrReceiver12stateMachineEv+0x7c>
     9d8:	82 30       	cpi	r24, 0x02	; 2
     9da:	09 f4       	brne	.+2      	; 0x9de <_ZN13iotIrReceiver12stateMachineEv+0x74>
     9dc:	45 c0       	rjmp	.+138    	; 0xa68 <_ZN13iotIrReceiver12stateMachineEv+0xfe>
     9de:	83 30       	cpi	r24, 0x03	; 3
     9e0:	09 f4       	brne	.+2      	; 0x9e4 <_ZN13iotIrReceiver12stateMachineEv+0x7a>
     9e2:	66 c0       	rjmp	.+204    	; 0xab0 <_ZN13iotIrReceiver12stateMachineEv+0x146>
     9e4:	6b c0       	rjmp	.+214    	; 0xabc <_ZN13iotIrReceiver12stateMachineEv+0x152>
				case iotcIrStateIdle:	// in the middle of a gap
					if(data == iotcIrMark) {
     9e6:	21 11       	cpse	r18, r1
     9e8:	69 c0       	rjmp	.+210    	; 0xabc <_ZN13iotIrReceiver12stateMachineEv+0x152>
						if(iDecoder->iTimer < iotcIrGapTicks) {
     9ea:	df 01       	movw	r26, r30
     9ec:	a5 53       	subi	r26, 0x35	; 53
     9ee:	bf 4f       	sbci	r27, 0xFF	; 255
     9f0:	8d 91       	ld	r24, X+
     9f2:	9c 91       	ld	r25, X
     9f4:	11 97       	sbiw	r26, 0x01	; 1
     9f6:	84 36       	cpi	r24, 0x64	; 100
     9f8:	91 05       	cpc	r25, r1
     9fa:	20 f4       	brcc	.+8      	; 0xa04 <_ZN13iotIrReceiver12stateMachineEv+0x9a>
							// not big enough to be a gap.
							iDecoder->iTimer = 0;
     9fc:	fd 01       	movw	r30, r26
     9fe:	11 82       	std	Z+1, r1	; 0x01
     a00:	10 82       	st	Z, r1
     a02:	5c c0       	rjmp	.+184    	; 0xabc <_ZN13iotIrReceiver12stateMachineEv+0x152>
						} else {
							// gap just ended, record duration and start
							// recording transmission
							iDecoder->inIntervals = 0;
     a04:	12 82       	std	Z+2, r1	; 0x02
							iDecoder->iInterval[iDecoder->inIntervals++]
     a06:	c2 81       	ldd	r28, Z+2	; 0x02
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	8c 0f       	add	r24, r28
     a0c:	82 83       	std	Z+2, r24	; 0x02
     a0e:	d0 e0       	ldi	r29, 0x00	; 0
								= iDecoder->iTimer;
     a10:	df 01       	movw	r26, r30
     a12:	a5 53       	subi	r26, 0x35	; 53
     a14:	bf 4f       	sbci	r27, 0xFF	; 255
     a16:	8d 91       	ld	r24, X+
     a18:	9c 91       	ld	r25, X
     a1a:	11 97       	sbiw	r26, 0x01	; 1
     a1c:	cc 0f       	add	r28, r28
     a1e:	dd 1f       	adc	r29, r29
     a20:	ce 0f       	add	r28, r30
     a22:	df 1f       	adc	r29, r31
     a24:	9c 83       	std	Y+4, r25	; 0x04
     a26:	8b 83       	std	Y+3, r24	; 0x03
							iDecoder->iTimer = 0;
     a28:	11 96       	adiw	r26, 0x01	; 1
     a2a:	1c 92       	st	X, r1
     a2c:	1e 92       	st	-X, r1
							iDecoder->iState = iotcIrStateMark;
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	81 83       	std	Z+1, r24	; 0x01
     a32:	44 c0       	rjmp	.+136    	; 0xabc <_ZN13iotIrReceiver12stateMachineEv+0x152>
						}
					}
					break;
				case iotcIrStateMark:	// timing Mark
					if(data == iotcIrSpace) {
     a34:	21 30       	cpi	r18, 0x01	; 1
     a36:	09 f0       	breq	.+2      	; 0xa3a <_ZN13iotIrReceiver12stateMachineEv+0xd0>
     a38:	41 c0       	rjmp	.+130    	; 0xabc <_ZN13iotIrReceiver12stateMachineEv+0x152>
						iDecoder->iInterval[iDecoder->inIntervals++]
     a3a:	c2 81       	ldd	r28, Z+2	; 0x02
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	8c 0f       	add	r24, r28
     a40:	82 83       	std	Z+2, r24	; 0x02
     a42:	d0 e0       	ldi	r29, 0x00	; 0
							= iDecoder->iTimer;
     a44:	df 01       	movw	r26, r30
     a46:	a5 53       	subi	r26, 0x35	; 53
     a48:	bf 4f       	sbci	r27, 0xFF	; 255
     a4a:	8d 91       	ld	r24, X+
     a4c:	9c 91       	ld	r25, X
     a4e:	11 97       	sbiw	r26, 0x01	; 1
     a50:	cc 0f       	add	r28, r28
     a52:	dd 1f       	adc	r29, r29
     a54:	ce 0f       	add	r28, r30
     a56:	df 1f       	adc	r29, r31
     a58:	9c 83       	std	Y+4, r25	; 0x04
     a5a:	8b 83       	std	Y+3, r24	; 0x03
						iDecoder->iTimer = 0;
     a5c:	11 96       	adiw	r26, 0x01	; 1
     a5e:	1c 92       	st	X, r1
     a60:	1e 92       	st	-X, r1
						iDecoder->iState = iotcIrStateSpace;
     a62:	82 e0       	ldi	r24, 0x02	; 2
     a64:	81 83       	std	Z+1, r24	; 0x01
     a66:	2a c0       	rjmp	.+84     	; 0xabc <_ZN13iotIrReceiver12stateMachineEv+0x152>
					}
					break;
				case iotcIrStateSpace:	// timing Space
					if(data == iotcIrMark) {	// Space just ended
     a68:	21 11       	cpse	r18, r1
     a6a:	17 c0       	rjmp	.+46     	; 0xa9a <_ZN13iotIrReceiver12stateMachineEv+0x130>
						iDecoder->iInterval[iDecoder->inIntervals++]
     a6c:	c2 81       	ldd	r28, Z+2	; 0x02
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	8c 0f       	add	r24, r28
     a72:	82 83       	std	Z+2, r24	; 0x02
     a74:	d0 e0       	ldi	r29, 0x00	; 0
							= iDecoder->iTimer;
     a76:	df 01       	movw	r26, r30
     a78:	a5 53       	subi	r26, 0x35	; 53
     a7a:	bf 4f       	sbci	r27, 0xFF	; 255
     a7c:	8d 91       	ld	r24, X+
     a7e:	9c 91       	ld	r25, X
     a80:	11 97       	sbiw	r26, 0x01	; 1
     a82:	cc 0f       	add	r28, r28
     a84:	dd 1f       	adc	r29, r29
     a86:	ce 0f       	add	r28, r30
     a88:	df 1f       	adc	r29, r31
     a8a:	9c 83       	std	Y+4, r25	; 0x04
     a8c:	8b 83       	std	Y+3, r24	; 0x03
						iDecoder->iTimer = 0;
     a8e:	11 96       	adiw	r26, 0x01	; 1
     a90:	1c 92       	st	X, r1
     a92:	1e 92       	st	-X, r1
						iDecoder->iState = iotcIrStateMark;
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	81 83       	std	Z+1, r24	; 0x01
     a98:	11 c0       	rjmp	.+34     	; 0xabc <_ZN13iotIrReceiver12stateMachineEv+0x152>
					} else {	// Space
						if(iDecoder->iTimer > iotcIrGapTicks) {
     a9a:	df 01       	movw	r26, r30
     a9c:	a5 53       	subi	r26, 0x35	; 53
     a9e:	bf 4f       	sbci	r27, 0xFF	; 255
     aa0:	8d 91       	ld	r24, X+
     aa2:	9c 91       	ld	r25, X
     aa4:	85 36       	cpi	r24, 0x65	; 101
     aa6:	91 05       	cpc	r25, r1
     aa8:	48 f0       	brcs	.+18     	; 0xabc <_ZN13iotIrReceiver12stateMachineEv+0x152>
							// big Space, indicates gap between codes.
							// mark current code as ready for processing.
							// switch to Stop. don't reset iTimer;
							// keep counting space width.
							iDecoder->iState = iotcIrStateStop;
     aaa:	83 e0       	ldi	r24, 0x03	; 3
     aac:	81 83       	std	Z+1, r24	; 0x01
     aae:	06 c0       	rjmp	.+12     	; 0xabc <_ZN13iotIrReceiver12stateMachineEv+0x152>
						}
					}
					break;
				case iotcIrStateStop:	// waiting, measuring gap
					if(data == iotcIrMark) {	// reset gap iTimer
     ab0:	21 11       	cpse	r18, r1
     ab2:	04 c0       	rjmp	.+8      	; 0xabc <_ZN13iotIrReceiver12stateMachineEv+0x152>
						iDecoder->iTimer = 0;
     ab4:	e5 53       	subi	r30, 0x35	; 53
     ab6:	ff 4f       	sbci	r31, 0xFF	; 255
     ab8:	11 82       	std	Z+1, r1	; 0x01
     aba:	10 82       	st	Z, r1
					}
					break;
			}
		}
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	08 95       	ret

00000ac2 <_ZL9toggleFanv>:

// DC Fan Motor
static void
toggleFan()
{
	if(FanCount > 0)
     ac2:	80 91 f2 06 	lds	r24, 0x06F2
     ac6:	90 91 f3 06 	lds	r25, 0x06F3
     aca:	18 16       	cp	r1, r24
     acc:	19 06       	cpc	r1, r25
     ace:	34 f4       	brge	.+12     	; 0xadc <_ZL9toggleFanv+0x1a>
	FanCount--;
     ad0:	01 97       	sbiw	r24, 0x01	; 1
     ad2:	90 93 f3 06 	sts	0x06F3, r25
     ad6:	80 93 f2 06 	sts	0x06F2, r24
     ada:	08 95       	ret
	else {
		if(FanState) {
     adc:	80 91 f1 06 	lds	r24, 0x06F1
     ae0:	88 23       	and	r24, r24
     ae2:	a1 f0       	breq	.+40     	; 0xb0c <_ZL9toggleFanv+0x4a>
			FanState = false;
     ae4:	10 92 f1 06 	sts	0x06F1, r1
			FanCount = cMaxFanSpeed - FanSpeed;
     ae8:	20 91 ef 06 	lds	r18, 0x06EF
     aec:	30 91 f0 06 	lds	r19, 0x06F0
     af0:	84 e0       	ldi	r24, 0x04	; 4
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	82 1b       	sub	r24, r18
     af6:	93 0b       	sbc	r25, r19
     af8:	90 93 f3 06 	sts	0x06F3, r25
     afc:	80 93 f2 06 	sts	0x06F2, r24
			// set the motor pin (PORTE pin 0) to 0.
			PORTF &= ~0x01;
     b00:	e2 e6       	ldi	r30, 0x62	; 98
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	80 81       	ld	r24, Z
     b06:	8e 7f       	andi	r24, 0xFE	; 254
     b08:	80 83       	st	Z, r24
     b0a:	08 95       	ret
			} else {
			FanState = true;
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	80 93 f1 06 	sts	0x06F1, r24
			FanCount = FanSpeed;
     b12:	80 91 ef 06 	lds	r24, 0x06EF
     b16:	90 91 f0 06 	lds	r25, 0x06F0
     b1a:	90 93 f3 06 	sts	0x06F3, r25
     b1e:	80 93 f2 06 	sts	0x06F2, r24
			// set the motor pin to 1.
			PORTF |= 0x01;
     b22:	e2 e6       	ldi	r30, 0x62	; 98
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	80 81       	ld	r24, Z
     b28:	81 60       	ori	r24, 0x01	; 1
     b2a:	80 83       	st	Z, r24
     b2c:	08 95       	ret

00000b2e <_ZN11iotTerminal7getCharEP6__file>:
			return(-1);
		}
		static int
		getChar(FILE *f)
		{
			if(iUart) return(iUart->getChar());
     b2e:	e0 91 c9 06 	lds	r30, 0x06C9
     b32:	f0 91 ca 06 	lds	r31, 0x06CA
     b36:	30 97       	sbiw	r30, 0x00	; 0
     b38:	09 f4       	brne	.+2      	; 0xb3c <_ZN11iotTerminal7getCharEP6__file+0xe>
     b3a:	4f c0       	rjmp	.+158    	; 0xbda <_ZN11iotTerminal7getCharEP6__file+0xac>
			return(-1);
		}
		int
		getChar(void) {
			char	c;
			if(iId == iotcUart0) {
     b3c:	80 81       	ld	r24, Z
     b3e:	81 30       	cpi	r24, 0x01	; 1
     b40:	09 f5       	brne	.+66     	; 0xb84 <_ZN11iotTerminal7getCharEP6__file+0x56>
				if(irx0Tail == irx0Head) {	// buffer empty
     b42:	90 91 db 06 	lds	r25, 0x06DB
     b46:	80 91 dc 06 	lds	r24, 0x06DC
     b4a:	98 13       	cpse	r25, r24
     b4c:	05 c0       	rjmp	.+10     	; 0xb58 <_ZN11iotTerminal7getCharEP6__file+0x2a>
					// wait until the data is received.
					while((UCSR0A & (1 << RXC0)) == 0) ;
     b4e:	5f 9b       	sbis	0x0b, 7	; 11
     b50:	fe cf       	rjmp	.-4      	; 0xb4e <_ZN11iotTerminal7getCharEP6__file+0x20>
					return(UDR0);
     b52:	8c b1       	in	r24, 0x0c	; 12
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	08 95       	ret
				}
				c = irx0Buff[irx0Tail];
     b58:	80 91 db 06 	lds	r24, 0x06DB
     b5c:	e0 91 d7 06 	lds	r30, 0x06D7
     b60:	f0 91 d8 06 	lds	r31, 0x06D8
     b64:	e8 0f       	add	r30, r24
     b66:	f1 1d       	adc	r31, r1
     b68:	80 81       	ld	r24, Z
				iotmAtomic(irx0Tail = (irx0Tail + 1) % iotcUartBuffSize);
     b6a:	9f b7       	in	r25, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	20 91 db 06 	lds	r18, 0x06DB
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	2f 5f       	subi	r18, 0xFF	; 255
     b76:	3f 4f       	sbci	r19, 0xFF	; 255
     b78:	2f 77       	andi	r18, 0x7F	; 127
     b7a:	30 78       	andi	r19, 0x80	; 128
     b7c:	20 93 db 06 	sts	0x06DB, r18
     b80:	9f bf       	out	0x3f, r25	; 63
     b82:	26 c0       	rjmp	.+76     	; 0xbd0 <_ZN11iotTerminal7getCharEP6__file+0xa2>
			} else if(iId == iotcUart1) {
     b84:	82 30       	cpi	r24, 0x02	; 2
     b86:	31 f5       	brne	.+76     	; 0xbd4 <_ZN11iotTerminal7getCharEP6__file+0xa6>
				if(irx1Tail == irx1Head) {	// buffer empty
     b88:	90 91 d3 06 	lds	r25, 0x06D3
     b8c:	80 91 d4 06 	lds	r24, 0x06D4
     b90:	98 13       	cpse	r25, r24
     b92:	09 c0       	rjmp	.+18     	; 0xba6 <_ZN11iotTerminal7getCharEP6__file+0x78>
					// wait until the data is received.
					while((UCSR1A & (1 << RXC1)) == 0) ;
     b94:	eb e9       	ldi	r30, 0x9B	; 155
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	88 23       	and	r24, r24
     b9c:	ec f7       	brge	.-6      	; 0xb98 <_ZN11iotTerminal7getCharEP6__file+0x6a>
					return(UDR1);
     b9e:	80 91 9c 00 	lds	r24, 0x009C
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	08 95       	ret
				}
				c = irx1Buff[irx1Tail];
     ba6:	80 91 d3 06 	lds	r24, 0x06D3
     baa:	e0 91 cf 06 	lds	r30, 0x06CF
     bae:	f0 91 d0 06 	lds	r31, 0x06D0
     bb2:	e8 0f       	add	r30, r24
     bb4:	f1 1d       	adc	r31, r1
     bb6:	80 81       	ld	r24, Z
				iotmAtomic(irx1Tail = (irx1Tail + 1) % iotcUartBuffSize);
     bb8:	9f b7       	in	r25, 0x3f	; 63
     bba:	f8 94       	cli
     bbc:	20 91 d3 06 	lds	r18, 0x06D3
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	2f 5f       	subi	r18, 0xFF	; 255
     bc4:	3f 4f       	sbci	r19, 0xFF	; 255
     bc6:	2f 77       	andi	r18, 0x7F	; 127
     bc8:	30 78       	andi	r19, 0x80	; 128
     bca:	20 93 d3 06 	sts	0x06D3, r18
     bce:	9f bf       	out	0x3f, r25	; 63
			} else return(-1);
			return(c);
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	08 95       	ret
					while((UCSR1A & (1 << RXC1)) == 0) ;
					return(UDR1);
				}
				c = irx1Buff[irx1Tail];
				iotmAtomic(irx1Tail = (irx1Tail + 1) % iotcUartBuffSize);
			} else return(-1);
     bd4:	8f ef       	ldi	r24, 0xFF	; 255
     bd6:	9f ef       	ldi	r25, 0xFF	; 255
			return(-1);
		}
		static int
		getChar(FILE *f)
		{
			if(iUart) return(iUart->getChar());
     bd8:	08 95       	ret
			return(-1);
     bda:	8f ef       	ldi	r24, 0xFF	; 255
     bdc:	9f ef       	ldi	r25, 0xFF	; 255
		}
     bde:	08 95       	ret

00000be0 <_ZN10iotCharLcdC1Ev>:
			public:
				unsigned char	x, y;
				char			c;
		};

		iotCharLcd() {
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	c0 58       	subi	r28, 0x80	; 128
     bea:	d1 09       	sbc	r29, r1
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
			iHead = iTail = iX = iY = 0;
     bf6:	fc 01       	movw	r30, r24
     bf8:	e1 5d       	subi	r30, 0xD1	; 209
     bfa:	fe 4f       	sbci	r31, 0xFE	; 254
     bfc:	10 82       	st	Z, r1
     bfe:	31 97       	sbiw	r30, 0x01	; 1
     c00:	10 82       	st	Z, r1
     c02:	31 97       	sbiw	r30, 0x01	; 1
     c04:	10 82       	st	Z, r1
     c06:	31 97       	sbiw	r30, 0x01	; 1
     c08:	10 82       	st	Z, r1
			
			// DDRs to output
			*(&iotcCharLcdControl - 1) = 0x1c;
     c0a:	2c e1       	ldi	r18, 0x1C	; 28
     c0c:	20 93 64 00 	sts	0x0064, r18
			*(&iotcCharLcdData - 1) = 0xff;
     c10:	2f ef       	ldi	r18, 0xFF	; 255
     c12:	2a bb       	out	0x1a, r18	; 26
				writeControl(0xc0 + aX - 1); iotTimer::delay(1);
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
     c14:	34 96       	adiw	r30, 0x04	; 4
     c16:	20 81       	ld	r18, Z
     c18:	2f 70       	andi	r18, 0x0F	; 15
     c1a:	20 83       	st	Z, r18
     c1c:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     c20:	c1 58       	subi	r28, 0x81	; 129
     c22:	df 4f       	sbci	r29, 0xFF	; 255
     c24:	19 82       	std	Y+1, r1	; 0x01
     c26:	18 82       	st	Y, r1
     c28:	cf 57       	subi	r28, 0x7F	; 127
     c2a:	d0 40       	sbci	r29, 0x00	; 0
     c2c:	c1 58       	subi	r28, 0x81	; 129
     c2e:	df 4f       	sbci	r29, 0xFF	; 255
     c30:	28 81       	ld	r18, Y
     c32:	39 81       	ldd	r19, Y+1	; 0x01
     c34:	cf 57       	subi	r28, 0x7F	; 127
     c36:	d0 40       	sbci	r29, 0x00	; 0
     c38:	12 16       	cp	r1, r18
     c3a:	13 06       	cpc	r1, r19
     c3c:	9c f1       	brlt	.+102    	; 0xca4 <_ZN10iotCharLcdC1Ev+0xc4>
				for(volatile int j = 0; j < 6; j++) ;
     c3e:	ef 96       	adiw	r28, 0x3f	; 63
     c40:	1f ae       	std	Y+63, r1	; 0x3f
     c42:	1e ae       	std	Y+62, r1	; 0x3e
     c44:	ef 97       	sbiw	r28, 0x3f	; 63
     c46:	ef 96       	adiw	r28, 0x3f	; 63
     c48:	2e ad       	ldd	r18, Y+62	; 0x3e
     c4a:	3f ad       	ldd	r19, Y+63	; 0x3f
     c4c:	ef 97       	sbiw	r28, 0x3f	; 63
     c4e:	26 30       	cpi	r18, 0x06	; 6
     c50:	31 05       	cpc	r19, r1
     c52:	8c f4       	brge	.+34     	; 0xc76 <_ZN10iotCharLcdC1Ev+0x96>
     c54:	ef 96       	adiw	r28, 0x3f	; 63
     c56:	2e ad       	ldd	r18, Y+62	; 0x3e
     c58:	3f ad       	ldd	r19, Y+63	; 0x3f
     c5a:	ef 97       	sbiw	r28, 0x3f	; 63
     c5c:	2f 5f       	subi	r18, 0xFF	; 255
     c5e:	3f 4f       	sbci	r19, 0xFF	; 255
     c60:	ef 96       	adiw	r28, 0x3f	; 63
     c62:	3f af       	std	Y+63, r19	; 0x3f
     c64:	2e af       	std	Y+62, r18	; 0x3e
     c66:	ef 97       	sbiw	r28, 0x3f	; 63
     c68:	ef 96       	adiw	r28, 0x3f	; 63
     c6a:	2e ad       	ldd	r18, Y+62	; 0x3e
     c6c:	3f ad       	ldd	r19, Y+63	; 0x3f
     c6e:	ef 97       	sbiw	r28, 0x3f	; 63
     c70:	26 30       	cpi	r18, 0x06	; 6
     c72:	31 05       	cpc	r19, r1
     c74:	7c f3       	brlt	.-34     	; 0xc54 <_ZN10iotCharLcdC1Ev+0x74>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     c76:	c1 58       	subi	r28, 0x81	; 129
     c78:	df 4f       	sbci	r29, 0xFF	; 255
     c7a:	28 81       	ld	r18, Y
     c7c:	39 81       	ldd	r19, Y+1	; 0x01
     c7e:	cf 57       	subi	r28, 0x7F	; 127
     c80:	d0 40       	sbci	r29, 0x00	; 0
     c82:	2f 5f       	subi	r18, 0xFF	; 255
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	c1 58       	subi	r28, 0x81	; 129
     c88:	df 4f       	sbci	r29, 0xFF	; 255
     c8a:	39 83       	std	Y+1, r19	; 0x01
     c8c:	28 83       	st	Y, r18
     c8e:	cf 57       	subi	r28, 0x7F	; 127
     c90:	d0 40       	sbci	r29, 0x00	; 0
     c92:	c1 58       	subi	r28, 0x81	; 129
     c94:	df 4f       	sbci	r29, 0xFF	; 255
     c96:	28 81       	ld	r18, Y
     c98:	39 81       	ldd	r19, Y+1	; 0x01
     c9a:	cf 57       	subi	r28, 0x7F	; 127
     c9c:	d0 40       	sbci	r29, 0x00	; 0
     c9e:	12 16       	cp	r1, r18
     ca0:	13 06       	cpc	r1, r19
     ca2:	6c f6       	brge	.-102    	; 0xc3e <_ZN10iotCharLcdC1Ev+0x5e>
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
     ca4:	fc 01       	movw	r30, r24
     ca6:	e0 5d       	subi	r30, 0xD0	; 208
     ca8:	fe 4f       	sbci	r31, 0xFE	; 254
     caa:	20 81       	ld	r18, Z
     cac:	2b 71       	andi	r18, 0x1B	; 27
     cae:	20 83       	st	Z, r18
     cb0:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     cb4:	ed 96       	adiw	r28, 0x3d	; 61
     cb6:	1f ae       	std	Y+63, r1	; 0x3f
     cb8:	1e ae       	std	Y+62, r1	; 0x3e
     cba:	ed 97       	sbiw	r28, 0x3d	; 61
     cbc:	ed 96       	adiw	r28, 0x3d	; 61
     cbe:	2e ad       	ldd	r18, Y+62	; 0x3e
     cc0:	3f ad       	ldd	r19, Y+63	; 0x3f
     cc2:	ed 97       	sbiw	r28, 0x3d	; 61
     cc4:	12 16       	cp	r1, r18
     cc6:	13 06       	cpc	r1, r19
     cc8:	6c f1       	brlt	.+90     	; 0xd24 <_ZN10iotCharLcdC1Ev+0x144>
				for(volatile int j = 0; j < 6; j++) ;
     cca:	eb 96       	adiw	r28, 0x3b	; 59
     ccc:	1f ae       	std	Y+63, r1	; 0x3f
     cce:	1e ae       	std	Y+62, r1	; 0x3e
     cd0:	eb 97       	sbiw	r28, 0x3b	; 59
     cd2:	eb 96       	adiw	r28, 0x3b	; 59
     cd4:	2e ad       	ldd	r18, Y+62	; 0x3e
     cd6:	3f ad       	ldd	r19, Y+63	; 0x3f
     cd8:	eb 97       	sbiw	r28, 0x3b	; 59
     cda:	26 30       	cpi	r18, 0x06	; 6
     cdc:	31 05       	cpc	r19, r1
     cde:	8c f4       	brge	.+34     	; 0xd02 <_ZN10iotCharLcdC1Ev+0x122>
     ce0:	eb 96       	adiw	r28, 0x3b	; 59
     ce2:	2e ad       	ldd	r18, Y+62	; 0x3e
     ce4:	3f ad       	ldd	r19, Y+63	; 0x3f
     ce6:	eb 97       	sbiw	r28, 0x3b	; 59
     ce8:	2f 5f       	subi	r18, 0xFF	; 255
     cea:	3f 4f       	sbci	r19, 0xFF	; 255
     cec:	eb 96       	adiw	r28, 0x3b	; 59
     cee:	3f af       	std	Y+63, r19	; 0x3f
     cf0:	2e af       	std	Y+62, r18	; 0x3e
     cf2:	eb 97       	sbiw	r28, 0x3b	; 59
     cf4:	eb 96       	adiw	r28, 0x3b	; 59
     cf6:	2e ad       	ldd	r18, Y+62	; 0x3e
     cf8:	3f ad       	ldd	r19, Y+63	; 0x3f
     cfa:	eb 97       	sbiw	r28, 0x3b	; 59
     cfc:	26 30       	cpi	r18, 0x06	; 6
     cfe:	31 05       	cpc	r19, r1
     d00:	7c f3       	brlt	.-34     	; 0xce0 <_ZN10iotCharLcdC1Ev+0x100>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     d02:	ed 96       	adiw	r28, 0x3d	; 61
     d04:	2e ad       	ldd	r18, Y+62	; 0x3e
     d06:	3f ad       	ldd	r19, Y+63	; 0x3f
     d08:	ed 97       	sbiw	r28, 0x3d	; 61
     d0a:	2f 5f       	subi	r18, 0xFF	; 255
     d0c:	3f 4f       	sbci	r19, 0xFF	; 255
     d0e:	ed 96       	adiw	r28, 0x3d	; 61
     d10:	3f af       	std	Y+63, r19	; 0x3f
     d12:	2e af       	std	Y+62, r18	; 0x3e
     d14:	ed 97       	sbiw	r28, 0x3d	; 61
     d16:	ed 96       	adiw	r28, 0x3d	; 61
     d18:	2e ad       	ldd	r18, Y+62	; 0x3e
     d1a:	3f ad       	ldd	r19, Y+63	; 0x3f
     d1c:	ed 97       	sbiw	r28, 0x3d	; 61
     d1e:	12 16       	cp	r1, r18
     d20:	13 06       	cpc	r1, r19
     d22:	9c f6       	brge	.-90     	; 0xcca <_ZN10iotCharLcdC1Ev+0xea>
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
     d24:	fc 01       	movw	r30, r24
     d26:	e0 5d       	subi	r30, 0xD0	; 208
     d28:	fe 4f       	sbci	r31, 0xFE	; 254
     d2a:	20 81       	ld	r18, Z
     d2c:	27 71       	andi	r18, 0x17	; 23
     d2e:	20 83       	st	Z, r18
     d30:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     d34:	e9 96       	adiw	r28, 0x39	; 57
     d36:	1f ae       	std	Y+63, r1	; 0x3f
     d38:	1e ae       	std	Y+62, r1	; 0x3e
     d3a:	e9 97       	sbiw	r28, 0x39	; 57
     d3c:	e9 96       	adiw	r28, 0x39	; 57
     d3e:	2e ad       	ldd	r18, Y+62	; 0x3e
     d40:	3f ad       	ldd	r19, Y+63	; 0x3f
     d42:	e9 97       	sbiw	r28, 0x39	; 57
     d44:	12 16       	cp	r1, r18
     d46:	13 06       	cpc	r1, r19
     d48:	6c f1       	brlt	.+90     	; 0xda4 <_ZN10iotCharLcdC1Ev+0x1c4>
				for(volatile int j = 0; j < 6; j++) ;
     d4a:	e7 96       	adiw	r28, 0x37	; 55
     d4c:	1f ae       	std	Y+63, r1	; 0x3f
     d4e:	1e ae       	std	Y+62, r1	; 0x3e
     d50:	e7 97       	sbiw	r28, 0x37	; 55
     d52:	e7 96       	adiw	r28, 0x37	; 55
     d54:	2e ad       	ldd	r18, Y+62	; 0x3e
     d56:	3f ad       	ldd	r19, Y+63	; 0x3f
     d58:	e7 97       	sbiw	r28, 0x37	; 55
     d5a:	26 30       	cpi	r18, 0x06	; 6
     d5c:	31 05       	cpc	r19, r1
     d5e:	8c f4       	brge	.+34     	; 0xd82 <_ZN10iotCharLcdC1Ev+0x1a2>
     d60:	e7 96       	adiw	r28, 0x37	; 55
     d62:	2e ad       	ldd	r18, Y+62	; 0x3e
     d64:	3f ad       	ldd	r19, Y+63	; 0x3f
     d66:	e7 97       	sbiw	r28, 0x37	; 55
     d68:	2f 5f       	subi	r18, 0xFF	; 255
     d6a:	3f 4f       	sbci	r19, 0xFF	; 255
     d6c:	e7 96       	adiw	r28, 0x37	; 55
     d6e:	3f af       	std	Y+63, r19	; 0x3f
     d70:	2e af       	std	Y+62, r18	; 0x3e
     d72:	e7 97       	sbiw	r28, 0x37	; 55
     d74:	e7 96       	adiw	r28, 0x37	; 55
     d76:	2e ad       	ldd	r18, Y+62	; 0x3e
     d78:	3f ad       	ldd	r19, Y+63	; 0x3f
     d7a:	e7 97       	sbiw	r28, 0x37	; 55
     d7c:	26 30       	cpi	r18, 0x06	; 6
     d7e:	31 05       	cpc	r19, r1
     d80:	7c f3       	brlt	.-34     	; 0xd60 <_ZN10iotCharLcdC1Ev+0x180>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     d82:	e9 96       	adiw	r28, 0x39	; 57
     d84:	2e ad       	ldd	r18, Y+62	; 0x3e
     d86:	3f ad       	ldd	r19, Y+63	; 0x3f
     d88:	e9 97       	sbiw	r28, 0x39	; 57
     d8a:	2f 5f       	subi	r18, 0xFF	; 255
     d8c:	3f 4f       	sbci	r19, 0xFF	; 255
     d8e:	e9 96       	adiw	r28, 0x39	; 57
     d90:	3f af       	std	Y+63, r19	; 0x3f
     d92:	2e af       	std	Y+62, r18	; 0x3e
     d94:	e9 97       	sbiw	r28, 0x39	; 57
     d96:	e9 96       	adiw	r28, 0x39	; 57
     d98:	2e ad       	ldd	r18, Y+62	; 0x3e
     d9a:	3f ad       	ldd	r19, Y+63	; 0x3f
     d9c:	e9 97       	sbiw	r28, 0x39	; 57
     d9e:	12 16       	cp	r1, r18
     da0:	13 06       	cpc	r1, r19
     da2:	9c f6       	brge	.-90     	; 0xd4a <_ZN10iotCharLcdC1Ev+0x16a>
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
     da4:	fc 01       	movw	r30, r24
     da6:	e0 5d       	subi	r30, 0xD0	; 208
     da8:	fe 4f       	sbci	r31, 0xFE	; 254
     daa:	20 81       	ld	r18, Z
     dac:	20 61       	ori	r18, 0x10	; 16
     dae:	20 83       	st	Z, r18
     db0:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     db4:	e5 96       	adiw	r28, 0x35	; 53
     db6:	1f ae       	std	Y+63, r1	; 0x3f
     db8:	1e ae       	std	Y+62, r1	; 0x3e
     dba:	e5 97       	sbiw	r28, 0x35	; 53
     dbc:	e5 96       	adiw	r28, 0x35	; 53
     dbe:	2e ad       	ldd	r18, Y+62	; 0x3e
     dc0:	3f ad       	ldd	r19, Y+63	; 0x3f
     dc2:	e5 97       	sbiw	r28, 0x35	; 53
     dc4:	12 16       	cp	r1, r18
     dc6:	13 06       	cpc	r1, r19
     dc8:	6c f1       	brlt	.+90     	; 0xe24 <_ZN10iotCharLcdC1Ev+0x244>
				for(volatile int j = 0; j < 6; j++) ;
     dca:	e3 96       	adiw	r28, 0x33	; 51
     dcc:	1f ae       	std	Y+63, r1	; 0x3f
     dce:	1e ae       	std	Y+62, r1	; 0x3e
     dd0:	e3 97       	sbiw	r28, 0x33	; 51
     dd2:	e3 96       	adiw	r28, 0x33	; 51
     dd4:	2e ad       	ldd	r18, Y+62	; 0x3e
     dd6:	3f ad       	ldd	r19, Y+63	; 0x3f
     dd8:	e3 97       	sbiw	r28, 0x33	; 51
     dda:	26 30       	cpi	r18, 0x06	; 6
     ddc:	31 05       	cpc	r19, r1
     dde:	8c f4       	brge	.+34     	; 0xe02 <_ZN10iotCharLcdC1Ev+0x222>
     de0:	e3 96       	adiw	r28, 0x33	; 51
     de2:	2e ad       	ldd	r18, Y+62	; 0x3e
     de4:	3f ad       	ldd	r19, Y+63	; 0x3f
     de6:	e3 97       	sbiw	r28, 0x33	; 51
     de8:	2f 5f       	subi	r18, 0xFF	; 255
     dea:	3f 4f       	sbci	r19, 0xFF	; 255
     dec:	e3 96       	adiw	r28, 0x33	; 51
     dee:	3f af       	std	Y+63, r19	; 0x3f
     df0:	2e af       	std	Y+62, r18	; 0x3e
     df2:	e3 97       	sbiw	r28, 0x33	; 51
     df4:	e3 96       	adiw	r28, 0x33	; 51
     df6:	2e ad       	ldd	r18, Y+62	; 0x3e
     df8:	3f ad       	ldd	r19, Y+63	; 0x3f
     dfa:	e3 97       	sbiw	r28, 0x33	; 51
     dfc:	26 30       	cpi	r18, 0x06	; 6
     dfe:	31 05       	cpc	r19, r1
     e00:	7c f3       	brlt	.-34     	; 0xde0 <_ZN10iotCharLcdC1Ev+0x200>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     e02:	e5 96       	adiw	r28, 0x35	; 53
     e04:	2e ad       	ldd	r18, Y+62	; 0x3e
     e06:	3f ad       	ldd	r19, Y+63	; 0x3f
     e08:	e5 97       	sbiw	r28, 0x35	; 53
     e0a:	2f 5f       	subi	r18, 0xFF	; 255
     e0c:	3f 4f       	sbci	r19, 0xFF	; 255
     e0e:	e5 96       	adiw	r28, 0x35	; 53
     e10:	3f af       	std	Y+63, r19	; 0x3f
     e12:	2e af       	std	Y+62, r18	; 0x3e
     e14:	e5 97       	sbiw	r28, 0x35	; 53
     e16:	e5 96       	adiw	r28, 0x35	; 53
     e18:	2e ad       	ldd	r18, Y+62	; 0x3e
     e1a:	3f ad       	ldd	r19, Y+63	; 0x3f
     e1c:	e5 97       	sbiw	r28, 0x35	; 53
     e1e:	12 16       	cp	r1, r18
     e20:	13 06       	cpc	r1, r19
     e22:	9c f6       	brge	.-90     	; 0xdca <_ZN10iotCharLcdC1Ev+0x1ea>
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
     e24:	28 e3       	ldi	r18, 0x38	; 56
     e26:	2b bb       	out	0x1b, r18	; 27
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     e28:	e1 96       	adiw	r28, 0x31	; 49
     e2a:	1f ae       	std	Y+63, r1	; 0x3f
     e2c:	1e ae       	std	Y+62, r1	; 0x3e
     e2e:	e1 97       	sbiw	r28, 0x31	; 49
     e30:	e1 96       	adiw	r28, 0x31	; 49
     e32:	2e ad       	ldd	r18, Y+62	; 0x3e
     e34:	3f ad       	ldd	r19, Y+63	; 0x3f
     e36:	e1 97       	sbiw	r28, 0x31	; 49
     e38:	12 16       	cp	r1, r18
     e3a:	13 06       	cpc	r1, r19
     e3c:	6c f1       	brlt	.+90     	; 0xe98 <_ZN10iotCharLcdC1Ev+0x2b8>
				for(volatile int j = 0; j < 6; j++) ;
     e3e:	af 96       	adiw	r28, 0x2f	; 47
     e40:	1f ae       	std	Y+63, r1	; 0x3f
     e42:	1e ae       	std	Y+62, r1	; 0x3e
     e44:	af 97       	sbiw	r28, 0x2f	; 47
     e46:	af 96       	adiw	r28, 0x2f	; 47
     e48:	2e ad       	ldd	r18, Y+62	; 0x3e
     e4a:	3f ad       	ldd	r19, Y+63	; 0x3f
     e4c:	af 97       	sbiw	r28, 0x2f	; 47
     e4e:	26 30       	cpi	r18, 0x06	; 6
     e50:	31 05       	cpc	r19, r1
     e52:	8c f4       	brge	.+34     	; 0xe76 <_ZN10iotCharLcdC1Ev+0x296>
     e54:	af 96       	adiw	r28, 0x2f	; 47
     e56:	2e ad       	ldd	r18, Y+62	; 0x3e
     e58:	3f ad       	ldd	r19, Y+63	; 0x3f
     e5a:	af 97       	sbiw	r28, 0x2f	; 47
     e5c:	2f 5f       	subi	r18, 0xFF	; 255
     e5e:	3f 4f       	sbci	r19, 0xFF	; 255
     e60:	af 96       	adiw	r28, 0x2f	; 47
     e62:	3f af       	std	Y+63, r19	; 0x3f
     e64:	2e af       	std	Y+62, r18	; 0x3e
     e66:	af 97       	sbiw	r28, 0x2f	; 47
     e68:	af 96       	adiw	r28, 0x2f	; 47
     e6a:	2e ad       	ldd	r18, Y+62	; 0x3e
     e6c:	3f ad       	ldd	r19, Y+63	; 0x3f
     e6e:	af 97       	sbiw	r28, 0x2f	; 47
     e70:	26 30       	cpi	r18, 0x06	; 6
     e72:	31 05       	cpc	r19, r1
     e74:	7c f3       	brlt	.-34     	; 0xe54 <_ZN10iotCharLcdC1Ev+0x274>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     e76:	e1 96       	adiw	r28, 0x31	; 49
     e78:	2e ad       	ldd	r18, Y+62	; 0x3e
     e7a:	3f ad       	ldd	r19, Y+63	; 0x3f
     e7c:	e1 97       	sbiw	r28, 0x31	; 49
     e7e:	2f 5f       	subi	r18, 0xFF	; 255
     e80:	3f 4f       	sbci	r19, 0xFF	; 255
     e82:	e1 96       	adiw	r28, 0x31	; 49
     e84:	3f af       	std	Y+63, r19	; 0x3f
     e86:	2e af       	std	Y+62, r18	; 0x3e
     e88:	e1 97       	sbiw	r28, 0x31	; 49
     e8a:	e1 96       	adiw	r28, 0x31	; 49
     e8c:	2e ad       	ldd	r18, Y+62	; 0x3e
     e8e:	3f ad       	ldd	r19, Y+63	; 0x3f
     e90:	e1 97       	sbiw	r28, 0x31	; 49
     e92:	12 16       	cp	r1, r18
     e94:	13 06       	cpc	r1, r19
     e96:	9c f6       	brge	.-90     	; 0xe3e <_ZN10iotCharLcdC1Ev+0x25e>
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
			iotmCharLcdEnOff; iotTimer::delay(1);
     e98:	fc 01       	movw	r30, r24
     e9a:	e0 5d       	subi	r30, 0xD0	; 208
     e9c:	fe 4f       	sbci	r31, 0xFE	; 254
     e9e:	20 81       	ld	r18, Z
     ea0:	2f 70       	andi	r18, 0x0F	; 15
     ea2:	20 83       	st	Z, r18
     ea4:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     ea8:	ad 96       	adiw	r28, 0x2d	; 45
     eaa:	1f ae       	std	Y+63, r1	; 0x3f
     eac:	1e ae       	std	Y+62, r1	; 0x3e
     eae:	ad 97       	sbiw	r28, 0x2d	; 45
     eb0:	ad 96       	adiw	r28, 0x2d	; 45
     eb2:	2e ad       	ldd	r18, Y+62	; 0x3e
     eb4:	3f ad       	ldd	r19, Y+63	; 0x3f
     eb6:	ad 97       	sbiw	r28, 0x2d	; 45
     eb8:	12 16       	cp	r1, r18
     eba:	13 06       	cpc	r1, r19
     ebc:	6c f1       	brlt	.+90     	; 0xf18 <_ZN10iotCharLcdC1Ev+0x338>
				for(volatile int j = 0; j < 6; j++) ;
     ebe:	ab 96       	adiw	r28, 0x2b	; 43
     ec0:	1f ae       	std	Y+63, r1	; 0x3f
     ec2:	1e ae       	std	Y+62, r1	; 0x3e
     ec4:	ab 97       	sbiw	r28, 0x2b	; 43
     ec6:	ab 96       	adiw	r28, 0x2b	; 43
     ec8:	2e ad       	ldd	r18, Y+62	; 0x3e
     eca:	3f ad       	ldd	r19, Y+63	; 0x3f
     ecc:	ab 97       	sbiw	r28, 0x2b	; 43
     ece:	26 30       	cpi	r18, 0x06	; 6
     ed0:	31 05       	cpc	r19, r1
     ed2:	8c f4       	brge	.+34     	; 0xef6 <_ZN10iotCharLcdC1Ev+0x316>
     ed4:	ab 96       	adiw	r28, 0x2b	; 43
     ed6:	2e ad       	ldd	r18, Y+62	; 0x3e
     ed8:	3f ad       	ldd	r19, Y+63	; 0x3f
     eda:	ab 97       	sbiw	r28, 0x2b	; 43
     edc:	2f 5f       	subi	r18, 0xFF	; 255
     ede:	3f 4f       	sbci	r19, 0xFF	; 255
     ee0:	ab 96       	adiw	r28, 0x2b	; 43
     ee2:	3f af       	std	Y+63, r19	; 0x3f
     ee4:	2e af       	std	Y+62, r18	; 0x3e
     ee6:	ab 97       	sbiw	r28, 0x2b	; 43
     ee8:	ab 96       	adiw	r28, 0x2b	; 43
     eea:	2e ad       	ldd	r18, Y+62	; 0x3e
     eec:	3f ad       	ldd	r19, Y+63	; 0x3f
     eee:	ab 97       	sbiw	r28, 0x2b	; 43
     ef0:	26 30       	cpi	r18, 0x06	; 6
     ef2:	31 05       	cpc	r19, r1
     ef4:	7c f3       	brlt	.-34     	; 0xed4 <_ZN10iotCharLcdC1Ev+0x2f4>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     ef6:	ad 96       	adiw	r28, 0x2d	; 45
     ef8:	2e ad       	ldd	r18, Y+62	; 0x3e
     efa:	3f ad       	ldd	r19, Y+63	; 0x3f
     efc:	ad 97       	sbiw	r28, 0x2d	; 45
     efe:	2f 5f       	subi	r18, 0xFF	; 255
     f00:	3f 4f       	sbci	r19, 0xFF	; 255
     f02:	ad 96       	adiw	r28, 0x2d	; 45
     f04:	3f af       	std	Y+63, r19	; 0x3f
     f06:	2e af       	std	Y+62, r18	; 0x3e
     f08:	ad 97       	sbiw	r28, 0x2d	; 45
     f0a:	ad 96       	adiw	r28, 0x2d	; 45
     f0c:	2e ad       	ldd	r18, Y+62	; 0x3e
     f0e:	3f ad       	ldd	r19, Y+63	; 0x3f
     f10:	ad 97       	sbiw	r28, 0x2d	; 45
     f12:	12 16       	cp	r1, r18
     f14:	13 06       	cpc	r1, r19
     f16:	9c f6       	brge	.-90     	; 0xebe <_ZN10iotCharLcdC1Ev+0x2de>
				writeControl(0xc0 + aX - 1); iotTimer::delay(1);
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
     f18:	fc 01       	movw	r30, r24
     f1a:	e0 5d       	subi	r30, 0xD0	; 208
     f1c:	fe 4f       	sbci	r31, 0xFE	; 254
     f1e:	20 81       	ld	r18, Z
     f20:	2f 70       	andi	r18, 0x0F	; 15
     f22:	20 83       	st	Z, r18
     f24:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     f28:	a9 96       	adiw	r28, 0x29	; 41
     f2a:	1f ae       	std	Y+63, r1	; 0x3f
     f2c:	1e ae       	std	Y+62, r1	; 0x3e
     f2e:	a9 97       	sbiw	r28, 0x29	; 41
     f30:	a9 96       	adiw	r28, 0x29	; 41
     f32:	2e ad       	ldd	r18, Y+62	; 0x3e
     f34:	3f ad       	ldd	r19, Y+63	; 0x3f
     f36:	a9 97       	sbiw	r28, 0x29	; 41
     f38:	12 16       	cp	r1, r18
     f3a:	13 06       	cpc	r1, r19
     f3c:	6c f1       	brlt	.+90     	; 0xf98 <_ZN10iotCharLcdC1Ev+0x3b8>
				for(volatile int j = 0; j < 6; j++) ;
     f3e:	a7 96       	adiw	r28, 0x27	; 39
     f40:	1f ae       	std	Y+63, r1	; 0x3f
     f42:	1e ae       	std	Y+62, r1	; 0x3e
     f44:	a7 97       	sbiw	r28, 0x27	; 39
     f46:	a7 96       	adiw	r28, 0x27	; 39
     f48:	2e ad       	ldd	r18, Y+62	; 0x3e
     f4a:	3f ad       	ldd	r19, Y+63	; 0x3f
     f4c:	a7 97       	sbiw	r28, 0x27	; 39
     f4e:	26 30       	cpi	r18, 0x06	; 6
     f50:	31 05       	cpc	r19, r1
     f52:	8c f4       	brge	.+34     	; 0xf76 <_ZN10iotCharLcdC1Ev+0x396>
     f54:	a7 96       	adiw	r28, 0x27	; 39
     f56:	2e ad       	ldd	r18, Y+62	; 0x3e
     f58:	3f ad       	ldd	r19, Y+63	; 0x3f
     f5a:	a7 97       	sbiw	r28, 0x27	; 39
     f5c:	2f 5f       	subi	r18, 0xFF	; 255
     f5e:	3f 4f       	sbci	r19, 0xFF	; 255
     f60:	a7 96       	adiw	r28, 0x27	; 39
     f62:	3f af       	std	Y+63, r19	; 0x3f
     f64:	2e af       	std	Y+62, r18	; 0x3e
     f66:	a7 97       	sbiw	r28, 0x27	; 39
     f68:	a7 96       	adiw	r28, 0x27	; 39
     f6a:	2e ad       	ldd	r18, Y+62	; 0x3e
     f6c:	3f ad       	ldd	r19, Y+63	; 0x3f
     f6e:	a7 97       	sbiw	r28, 0x27	; 39
     f70:	26 30       	cpi	r18, 0x06	; 6
     f72:	31 05       	cpc	r19, r1
     f74:	7c f3       	brlt	.-34     	; 0xf54 <_ZN10iotCharLcdC1Ev+0x374>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     f76:	a9 96       	adiw	r28, 0x29	; 41
     f78:	2e ad       	ldd	r18, Y+62	; 0x3e
     f7a:	3f ad       	ldd	r19, Y+63	; 0x3f
     f7c:	a9 97       	sbiw	r28, 0x29	; 41
     f7e:	2f 5f       	subi	r18, 0xFF	; 255
     f80:	3f 4f       	sbci	r19, 0xFF	; 255
     f82:	a9 96       	adiw	r28, 0x29	; 41
     f84:	3f af       	std	Y+63, r19	; 0x3f
     f86:	2e af       	std	Y+62, r18	; 0x3e
     f88:	a9 97       	sbiw	r28, 0x29	; 41
     f8a:	a9 96       	adiw	r28, 0x29	; 41
     f8c:	2e ad       	ldd	r18, Y+62	; 0x3e
     f8e:	3f ad       	ldd	r19, Y+63	; 0x3f
     f90:	a9 97       	sbiw	r28, 0x29	; 41
     f92:	12 16       	cp	r1, r18
     f94:	13 06       	cpc	r1, r19
     f96:	9c f6       	brge	.-90     	; 0xf3e <_ZN10iotCharLcdC1Ev+0x35e>
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
     f98:	fc 01       	movw	r30, r24
     f9a:	e0 5d       	subi	r30, 0xD0	; 208
     f9c:	fe 4f       	sbci	r31, 0xFE	; 254
     f9e:	20 81       	ld	r18, Z
     fa0:	2b 71       	andi	r18, 0x1B	; 27
     fa2:	20 83       	st	Z, r18
     fa4:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     fa8:	a5 96       	adiw	r28, 0x25	; 37
     faa:	1f ae       	std	Y+63, r1	; 0x3f
     fac:	1e ae       	std	Y+62, r1	; 0x3e
     fae:	a5 97       	sbiw	r28, 0x25	; 37
     fb0:	a5 96       	adiw	r28, 0x25	; 37
     fb2:	2e ad       	ldd	r18, Y+62	; 0x3e
     fb4:	3f ad       	ldd	r19, Y+63	; 0x3f
     fb6:	a5 97       	sbiw	r28, 0x25	; 37
     fb8:	12 16       	cp	r1, r18
     fba:	13 06       	cpc	r1, r19
     fbc:	6c f1       	brlt	.+90     	; 0x1018 <_ZN10iotCharLcdC1Ev+0x438>
				for(volatile int j = 0; j < 6; j++) ;
     fbe:	a3 96       	adiw	r28, 0x23	; 35
     fc0:	1f ae       	std	Y+63, r1	; 0x3f
     fc2:	1e ae       	std	Y+62, r1	; 0x3e
     fc4:	a3 97       	sbiw	r28, 0x23	; 35
     fc6:	a3 96       	adiw	r28, 0x23	; 35
     fc8:	2e ad       	ldd	r18, Y+62	; 0x3e
     fca:	3f ad       	ldd	r19, Y+63	; 0x3f
     fcc:	a3 97       	sbiw	r28, 0x23	; 35
     fce:	26 30       	cpi	r18, 0x06	; 6
     fd0:	31 05       	cpc	r19, r1
     fd2:	8c f4       	brge	.+34     	; 0xff6 <_ZN10iotCharLcdC1Ev+0x416>
     fd4:	a3 96       	adiw	r28, 0x23	; 35
     fd6:	2e ad       	ldd	r18, Y+62	; 0x3e
     fd8:	3f ad       	ldd	r19, Y+63	; 0x3f
     fda:	a3 97       	sbiw	r28, 0x23	; 35
     fdc:	2f 5f       	subi	r18, 0xFF	; 255
     fde:	3f 4f       	sbci	r19, 0xFF	; 255
     fe0:	a3 96       	adiw	r28, 0x23	; 35
     fe2:	3f af       	std	Y+63, r19	; 0x3f
     fe4:	2e af       	std	Y+62, r18	; 0x3e
     fe6:	a3 97       	sbiw	r28, 0x23	; 35
     fe8:	a3 96       	adiw	r28, 0x23	; 35
     fea:	2e ad       	ldd	r18, Y+62	; 0x3e
     fec:	3f ad       	ldd	r19, Y+63	; 0x3f
     fee:	a3 97       	sbiw	r28, 0x23	; 35
     ff0:	26 30       	cpi	r18, 0x06	; 6
     ff2:	31 05       	cpc	r19, r1
     ff4:	7c f3       	brlt	.-34     	; 0xfd4 <_ZN10iotCharLcdC1Ev+0x3f4>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     ff6:	a5 96       	adiw	r28, 0x25	; 37
     ff8:	2e ad       	ldd	r18, Y+62	; 0x3e
     ffa:	3f ad       	ldd	r19, Y+63	; 0x3f
     ffc:	a5 97       	sbiw	r28, 0x25	; 37
     ffe:	2f 5f       	subi	r18, 0xFF	; 255
    1000:	3f 4f       	sbci	r19, 0xFF	; 255
    1002:	a5 96       	adiw	r28, 0x25	; 37
    1004:	3f af       	std	Y+63, r19	; 0x3f
    1006:	2e af       	std	Y+62, r18	; 0x3e
    1008:	a5 97       	sbiw	r28, 0x25	; 37
    100a:	a5 96       	adiw	r28, 0x25	; 37
    100c:	2e ad       	ldd	r18, Y+62	; 0x3e
    100e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1010:	a5 97       	sbiw	r28, 0x25	; 37
    1012:	12 16       	cp	r1, r18
    1014:	13 06       	cpc	r1, r19
    1016:	9c f6       	brge	.-90     	; 0xfbe <_ZN10iotCharLcdC1Ev+0x3de>
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
    1018:	fc 01       	movw	r30, r24
    101a:	e0 5d       	subi	r30, 0xD0	; 208
    101c:	fe 4f       	sbci	r31, 0xFE	; 254
    101e:	20 81       	ld	r18, Z
    1020:	27 71       	andi	r18, 0x17	; 23
    1022:	20 83       	st	Z, r18
    1024:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1028:	a1 96       	adiw	r28, 0x21	; 33
    102a:	1f ae       	std	Y+63, r1	; 0x3f
    102c:	1e ae       	std	Y+62, r1	; 0x3e
    102e:	a1 97       	sbiw	r28, 0x21	; 33
    1030:	a1 96       	adiw	r28, 0x21	; 33
    1032:	2e ad       	ldd	r18, Y+62	; 0x3e
    1034:	3f ad       	ldd	r19, Y+63	; 0x3f
    1036:	a1 97       	sbiw	r28, 0x21	; 33
    1038:	12 16       	cp	r1, r18
    103a:	13 06       	cpc	r1, r19
    103c:	6c f1       	brlt	.+90     	; 0x1098 <_ZN10iotCharLcdC1Ev+0x4b8>
				for(volatile int j = 0; j < 6; j++) ;
    103e:	6f 96       	adiw	r28, 0x1f	; 31
    1040:	1f ae       	std	Y+63, r1	; 0x3f
    1042:	1e ae       	std	Y+62, r1	; 0x3e
    1044:	6f 97       	sbiw	r28, 0x1f	; 31
    1046:	6f 96       	adiw	r28, 0x1f	; 31
    1048:	2e ad       	ldd	r18, Y+62	; 0x3e
    104a:	3f ad       	ldd	r19, Y+63	; 0x3f
    104c:	6f 97       	sbiw	r28, 0x1f	; 31
    104e:	26 30       	cpi	r18, 0x06	; 6
    1050:	31 05       	cpc	r19, r1
    1052:	8c f4       	brge	.+34     	; 0x1076 <_ZN10iotCharLcdC1Ev+0x496>
    1054:	6f 96       	adiw	r28, 0x1f	; 31
    1056:	2e ad       	ldd	r18, Y+62	; 0x3e
    1058:	3f ad       	ldd	r19, Y+63	; 0x3f
    105a:	6f 97       	sbiw	r28, 0x1f	; 31
    105c:	2f 5f       	subi	r18, 0xFF	; 255
    105e:	3f 4f       	sbci	r19, 0xFF	; 255
    1060:	6f 96       	adiw	r28, 0x1f	; 31
    1062:	3f af       	std	Y+63, r19	; 0x3f
    1064:	2e af       	std	Y+62, r18	; 0x3e
    1066:	6f 97       	sbiw	r28, 0x1f	; 31
    1068:	6f 96       	adiw	r28, 0x1f	; 31
    106a:	2e ad       	ldd	r18, Y+62	; 0x3e
    106c:	3f ad       	ldd	r19, Y+63	; 0x3f
    106e:	6f 97       	sbiw	r28, 0x1f	; 31
    1070:	26 30       	cpi	r18, 0x06	; 6
    1072:	31 05       	cpc	r19, r1
    1074:	7c f3       	brlt	.-34     	; 0x1054 <_ZN10iotCharLcdC1Ev+0x474>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1076:	a1 96       	adiw	r28, 0x21	; 33
    1078:	2e ad       	ldd	r18, Y+62	; 0x3e
    107a:	3f ad       	ldd	r19, Y+63	; 0x3f
    107c:	a1 97       	sbiw	r28, 0x21	; 33
    107e:	2f 5f       	subi	r18, 0xFF	; 255
    1080:	3f 4f       	sbci	r19, 0xFF	; 255
    1082:	a1 96       	adiw	r28, 0x21	; 33
    1084:	3f af       	std	Y+63, r19	; 0x3f
    1086:	2e af       	std	Y+62, r18	; 0x3e
    1088:	a1 97       	sbiw	r28, 0x21	; 33
    108a:	a1 96       	adiw	r28, 0x21	; 33
    108c:	2e ad       	ldd	r18, Y+62	; 0x3e
    108e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1090:	a1 97       	sbiw	r28, 0x21	; 33
    1092:	12 16       	cp	r1, r18
    1094:	13 06       	cpc	r1, r19
    1096:	9c f6       	brge	.-90     	; 0x103e <_ZN10iotCharLcdC1Ev+0x45e>
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
    1098:	fc 01       	movw	r30, r24
    109a:	e0 5d       	subi	r30, 0xD0	; 208
    109c:	fe 4f       	sbci	r31, 0xFE	; 254
    109e:	20 81       	ld	r18, Z
    10a0:	20 61       	ori	r18, 0x10	; 16
    10a2:	20 83       	st	Z, r18
    10a4:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    10a8:	6d 96       	adiw	r28, 0x1d	; 29
    10aa:	1f ae       	std	Y+63, r1	; 0x3f
    10ac:	1e ae       	std	Y+62, r1	; 0x3e
    10ae:	6d 97       	sbiw	r28, 0x1d	; 29
    10b0:	6d 96       	adiw	r28, 0x1d	; 29
    10b2:	2e ad       	ldd	r18, Y+62	; 0x3e
    10b4:	3f ad       	ldd	r19, Y+63	; 0x3f
    10b6:	6d 97       	sbiw	r28, 0x1d	; 29
    10b8:	12 16       	cp	r1, r18
    10ba:	13 06       	cpc	r1, r19
    10bc:	6c f1       	brlt	.+90     	; 0x1118 <__stack+0x19>
				for(volatile int j = 0; j < 6; j++) ;
    10be:	6b 96       	adiw	r28, 0x1b	; 27
    10c0:	1f ae       	std	Y+63, r1	; 0x3f
    10c2:	1e ae       	std	Y+62, r1	; 0x3e
    10c4:	6b 97       	sbiw	r28, 0x1b	; 27
    10c6:	6b 96       	adiw	r28, 0x1b	; 27
    10c8:	2e ad       	ldd	r18, Y+62	; 0x3e
    10ca:	3f ad       	ldd	r19, Y+63	; 0x3f
    10cc:	6b 97       	sbiw	r28, 0x1b	; 27
    10ce:	26 30       	cpi	r18, 0x06	; 6
    10d0:	31 05       	cpc	r19, r1
    10d2:	8c f4       	brge	.+34     	; 0x10f6 <_ZN10iotCharLcdC1Ev+0x516>
    10d4:	6b 96       	adiw	r28, 0x1b	; 27
    10d6:	2e ad       	ldd	r18, Y+62	; 0x3e
    10d8:	3f ad       	ldd	r19, Y+63	; 0x3f
    10da:	6b 97       	sbiw	r28, 0x1b	; 27
    10dc:	2f 5f       	subi	r18, 0xFF	; 255
    10de:	3f 4f       	sbci	r19, 0xFF	; 255
    10e0:	6b 96       	adiw	r28, 0x1b	; 27
    10e2:	3f af       	std	Y+63, r19	; 0x3f
    10e4:	2e af       	std	Y+62, r18	; 0x3e
    10e6:	6b 97       	sbiw	r28, 0x1b	; 27
    10e8:	6b 96       	adiw	r28, 0x1b	; 27
    10ea:	2e ad       	ldd	r18, Y+62	; 0x3e
    10ec:	3f ad       	ldd	r19, Y+63	; 0x3f
    10ee:	6b 97       	sbiw	r28, 0x1b	; 27
    10f0:	26 30       	cpi	r18, 0x06	; 6
    10f2:	31 05       	cpc	r19, r1
    10f4:	7c f3       	brlt	.-34     	; 0x10d4 <_ZN10iotCharLcdC1Ev+0x4f4>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    10f6:	6d 96       	adiw	r28, 0x1d	; 29
    10f8:	2e ad       	ldd	r18, Y+62	; 0x3e
    10fa:	3f ad       	ldd	r19, Y+63	; 0x3f
    10fc:	6d 97       	sbiw	r28, 0x1d	; 29
    10fe:	2f 5f       	subi	r18, 0xFF	; 255
    1100:	3f 4f       	sbci	r19, 0xFF	; 255
    1102:	6d 96       	adiw	r28, 0x1d	; 29
    1104:	3f af       	std	Y+63, r19	; 0x3f
    1106:	2e af       	std	Y+62, r18	; 0x3e
    1108:	6d 97       	sbiw	r28, 0x1d	; 29
    110a:	6d 96       	adiw	r28, 0x1d	; 29
    110c:	2e ad       	ldd	r18, Y+62	; 0x3e
    110e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1110:	6d 97       	sbiw	r28, 0x1d	; 29
    1112:	12 16       	cp	r1, r18
    1114:	13 06       	cpc	r1, r19
    1116:	9c f6       	brge	.-90     	; 0x10be <_ZN10iotCharLcdC1Ev+0x4de>
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
    1118:	2e e0       	ldi	r18, 0x0E	; 14
    111a:	2b bb       	out	0x1b, r18	; 27
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    111c:	69 96       	adiw	r28, 0x19	; 25
    111e:	1f ae       	std	Y+63, r1	; 0x3f
    1120:	1e ae       	std	Y+62, r1	; 0x3e
    1122:	69 97       	sbiw	r28, 0x19	; 25
    1124:	69 96       	adiw	r28, 0x19	; 25
    1126:	2e ad       	ldd	r18, Y+62	; 0x3e
    1128:	3f ad       	ldd	r19, Y+63	; 0x3f
    112a:	69 97       	sbiw	r28, 0x19	; 25
    112c:	12 16       	cp	r1, r18
    112e:	13 06       	cpc	r1, r19
    1130:	6c f1       	brlt	.+90     	; 0x118c <__stack+0x8d>
				for(volatile int j = 0; j < 6; j++) ;
    1132:	67 96       	adiw	r28, 0x17	; 23
    1134:	1f ae       	std	Y+63, r1	; 0x3f
    1136:	1e ae       	std	Y+62, r1	; 0x3e
    1138:	67 97       	sbiw	r28, 0x17	; 23
    113a:	67 96       	adiw	r28, 0x17	; 23
    113c:	2e ad       	ldd	r18, Y+62	; 0x3e
    113e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1140:	67 97       	sbiw	r28, 0x17	; 23
    1142:	26 30       	cpi	r18, 0x06	; 6
    1144:	31 05       	cpc	r19, r1
    1146:	8c f4       	brge	.+34     	; 0x116a <__stack+0x6b>
    1148:	67 96       	adiw	r28, 0x17	; 23
    114a:	2e ad       	ldd	r18, Y+62	; 0x3e
    114c:	3f ad       	ldd	r19, Y+63	; 0x3f
    114e:	67 97       	sbiw	r28, 0x17	; 23
    1150:	2f 5f       	subi	r18, 0xFF	; 255
    1152:	3f 4f       	sbci	r19, 0xFF	; 255
    1154:	67 96       	adiw	r28, 0x17	; 23
    1156:	3f af       	std	Y+63, r19	; 0x3f
    1158:	2e af       	std	Y+62, r18	; 0x3e
    115a:	67 97       	sbiw	r28, 0x17	; 23
    115c:	67 96       	adiw	r28, 0x17	; 23
    115e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1160:	3f ad       	ldd	r19, Y+63	; 0x3f
    1162:	67 97       	sbiw	r28, 0x17	; 23
    1164:	26 30       	cpi	r18, 0x06	; 6
    1166:	31 05       	cpc	r19, r1
    1168:	7c f3       	brlt	.-34     	; 0x1148 <__stack+0x49>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    116a:	69 96       	adiw	r28, 0x19	; 25
    116c:	2e ad       	ldd	r18, Y+62	; 0x3e
    116e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1170:	69 97       	sbiw	r28, 0x19	; 25
    1172:	2f 5f       	subi	r18, 0xFF	; 255
    1174:	3f 4f       	sbci	r19, 0xFF	; 255
    1176:	69 96       	adiw	r28, 0x19	; 25
    1178:	3f af       	std	Y+63, r19	; 0x3f
    117a:	2e af       	std	Y+62, r18	; 0x3e
    117c:	69 97       	sbiw	r28, 0x19	; 25
    117e:	69 96       	adiw	r28, 0x19	; 25
    1180:	2e ad       	ldd	r18, Y+62	; 0x3e
    1182:	3f ad       	ldd	r19, Y+63	; 0x3f
    1184:	69 97       	sbiw	r28, 0x19	; 25
    1186:	12 16       	cp	r1, r18
    1188:	13 06       	cpc	r1, r19
    118a:	9c f6       	brge	.-90     	; 0x1132 <__stack+0x33>
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
			iotmCharLcdEnOff; iotTimer::delay(1);
    118c:	fc 01       	movw	r30, r24
    118e:	e0 5d       	subi	r30, 0xD0	; 208
    1190:	fe 4f       	sbci	r31, 0xFE	; 254
    1192:	20 81       	ld	r18, Z
    1194:	2f 70       	andi	r18, 0x0F	; 15
    1196:	20 83       	st	Z, r18
    1198:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    119c:	65 96       	adiw	r28, 0x15	; 21
    119e:	1f ae       	std	Y+63, r1	; 0x3f
    11a0:	1e ae       	std	Y+62, r1	; 0x3e
    11a2:	65 97       	sbiw	r28, 0x15	; 21
    11a4:	65 96       	adiw	r28, 0x15	; 21
    11a6:	2e ad       	ldd	r18, Y+62	; 0x3e
    11a8:	3f ad       	ldd	r19, Y+63	; 0x3f
    11aa:	65 97       	sbiw	r28, 0x15	; 21
    11ac:	12 16       	cp	r1, r18
    11ae:	13 06       	cpc	r1, r19
    11b0:	6c f1       	brlt	.+90     	; 0x120c <__stack+0x10d>
				for(volatile int j = 0; j < 6; j++) ;
    11b2:	63 96       	adiw	r28, 0x13	; 19
    11b4:	1f ae       	std	Y+63, r1	; 0x3f
    11b6:	1e ae       	std	Y+62, r1	; 0x3e
    11b8:	63 97       	sbiw	r28, 0x13	; 19
    11ba:	63 96       	adiw	r28, 0x13	; 19
    11bc:	2e ad       	ldd	r18, Y+62	; 0x3e
    11be:	3f ad       	ldd	r19, Y+63	; 0x3f
    11c0:	63 97       	sbiw	r28, 0x13	; 19
    11c2:	26 30       	cpi	r18, 0x06	; 6
    11c4:	31 05       	cpc	r19, r1
    11c6:	8c f4       	brge	.+34     	; 0x11ea <__stack+0xeb>
    11c8:	63 96       	adiw	r28, 0x13	; 19
    11ca:	2e ad       	ldd	r18, Y+62	; 0x3e
    11cc:	3f ad       	ldd	r19, Y+63	; 0x3f
    11ce:	63 97       	sbiw	r28, 0x13	; 19
    11d0:	2f 5f       	subi	r18, 0xFF	; 255
    11d2:	3f 4f       	sbci	r19, 0xFF	; 255
    11d4:	63 96       	adiw	r28, 0x13	; 19
    11d6:	3f af       	std	Y+63, r19	; 0x3f
    11d8:	2e af       	std	Y+62, r18	; 0x3e
    11da:	63 97       	sbiw	r28, 0x13	; 19
    11dc:	63 96       	adiw	r28, 0x13	; 19
    11de:	2e ad       	ldd	r18, Y+62	; 0x3e
    11e0:	3f ad       	ldd	r19, Y+63	; 0x3f
    11e2:	63 97       	sbiw	r28, 0x13	; 19
    11e4:	26 30       	cpi	r18, 0x06	; 6
    11e6:	31 05       	cpc	r19, r1
    11e8:	7c f3       	brlt	.-34     	; 0x11c8 <__stack+0xc9>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    11ea:	65 96       	adiw	r28, 0x15	; 21
    11ec:	2e ad       	ldd	r18, Y+62	; 0x3e
    11ee:	3f ad       	ldd	r19, Y+63	; 0x3f
    11f0:	65 97       	sbiw	r28, 0x15	; 21
    11f2:	2f 5f       	subi	r18, 0xFF	; 255
    11f4:	3f 4f       	sbci	r19, 0xFF	; 255
    11f6:	65 96       	adiw	r28, 0x15	; 21
    11f8:	3f af       	std	Y+63, r19	; 0x3f
    11fa:	2e af       	std	Y+62, r18	; 0x3e
    11fc:	65 97       	sbiw	r28, 0x15	; 21
    11fe:	65 96       	adiw	r28, 0x15	; 21
    1200:	2e ad       	ldd	r18, Y+62	; 0x3e
    1202:	3f ad       	ldd	r19, Y+63	; 0x3f
    1204:	65 97       	sbiw	r28, 0x15	; 21
    1206:	12 16       	cp	r1, r18
    1208:	13 06       	cpc	r1, r19
    120a:	9c f6       	brge	.-90     	; 0x11b2 <__stack+0xb3>
				writeControl(0xc0 + aX - 1); iotTimer::delay(1);
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
    120c:	fc 01       	movw	r30, r24
    120e:	e0 5d       	subi	r30, 0xD0	; 208
    1210:	fe 4f       	sbci	r31, 0xFE	; 254
    1212:	20 81       	ld	r18, Z
    1214:	2f 70       	andi	r18, 0x0F	; 15
    1216:	20 83       	st	Z, r18
    1218:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    121c:	61 96       	adiw	r28, 0x11	; 17
    121e:	1f ae       	std	Y+63, r1	; 0x3f
    1220:	1e ae       	std	Y+62, r1	; 0x3e
    1222:	61 97       	sbiw	r28, 0x11	; 17
    1224:	61 96       	adiw	r28, 0x11	; 17
    1226:	2e ad       	ldd	r18, Y+62	; 0x3e
    1228:	3f ad       	ldd	r19, Y+63	; 0x3f
    122a:	61 97       	sbiw	r28, 0x11	; 17
    122c:	12 16       	cp	r1, r18
    122e:	13 06       	cpc	r1, r19
    1230:	6c f1       	brlt	.+90     	; 0x128c <__stack+0x18d>
				for(volatile int j = 0; j < 6; j++) ;
    1232:	2f 96       	adiw	r28, 0x0f	; 15
    1234:	1f ae       	std	Y+63, r1	; 0x3f
    1236:	1e ae       	std	Y+62, r1	; 0x3e
    1238:	2f 97       	sbiw	r28, 0x0f	; 15
    123a:	2f 96       	adiw	r28, 0x0f	; 15
    123c:	2e ad       	ldd	r18, Y+62	; 0x3e
    123e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1240:	2f 97       	sbiw	r28, 0x0f	; 15
    1242:	26 30       	cpi	r18, 0x06	; 6
    1244:	31 05       	cpc	r19, r1
    1246:	8c f4       	brge	.+34     	; 0x126a <__stack+0x16b>
    1248:	2f 96       	adiw	r28, 0x0f	; 15
    124a:	2e ad       	ldd	r18, Y+62	; 0x3e
    124c:	3f ad       	ldd	r19, Y+63	; 0x3f
    124e:	2f 97       	sbiw	r28, 0x0f	; 15
    1250:	2f 5f       	subi	r18, 0xFF	; 255
    1252:	3f 4f       	sbci	r19, 0xFF	; 255
    1254:	2f 96       	adiw	r28, 0x0f	; 15
    1256:	3f af       	std	Y+63, r19	; 0x3f
    1258:	2e af       	std	Y+62, r18	; 0x3e
    125a:	2f 97       	sbiw	r28, 0x0f	; 15
    125c:	2f 96       	adiw	r28, 0x0f	; 15
    125e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1260:	3f ad       	ldd	r19, Y+63	; 0x3f
    1262:	2f 97       	sbiw	r28, 0x0f	; 15
    1264:	26 30       	cpi	r18, 0x06	; 6
    1266:	31 05       	cpc	r19, r1
    1268:	7c f3       	brlt	.-34     	; 0x1248 <__stack+0x149>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    126a:	61 96       	adiw	r28, 0x11	; 17
    126c:	2e ad       	ldd	r18, Y+62	; 0x3e
    126e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1270:	61 97       	sbiw	r28, 0x11	; 17
    1272:	2f 5f       	subi	r18, 0xFF	; 255
    1274:	3f 4f       	sbci	r19, 0xFF	; 255
    1276:	61 96       	adiw	r28, 0x11	; 17
    1278:	3f af       	std	Y+63, r19	; 0x3f
    127a:	2e af       	std	Y+62, r18	; 0x3e
    127c:	61 97       	sbiw	r28, 0x11	; 17
    127e:	61 96       	adiw	r28, 0x11	; 17
    1280:	2e ad       	ldd	r18, Y+62	; 0x3e
    1282:	3f ad       	ldd	r19, Y+63	; 0x3f
    1284:	61 97       	sbiw	r28, 0x11	; 17
    1286:	12 16       	cp	r1, r18
    1288:	13 06       	cpc	r1, r19
    128a:	9c f6       	brge	.-90     	; 0x1232 <__stack+0x133>
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
    128c:	fc 01       	movw	r30, r24
    128e:	e0 5d       	subi	r30, 0xD0	; 208
    1290:	fe 4f       	sbci	r31, 0xFE	; 254
    1292:	20 81       	ld	r18, Z
    1294:	2b 71       	andi	r18, 0x1B	; 27
    1296:	20 83       	st	Z, r18
    1298:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    129c:	2d 96       	adiw	r28, 0x0d	; 13
    129e:	1f ae       	std	Y+63, r1	; 0x3f
    12a0:	1e ae       	std	Y+62, r1	; 0x3e
    12a2:	2d 97       	sbiw	r28, 0x0d	; 13
    12a4:	2d 96       	adiw	r28, 0x0d	; 13
    12a6:	2e ad       	ldd	r18, Y+62	; 0x3e
    12a8:	3f ad       	ldd	r19, Y+63	; 0x3f
    12aa:	2d 97       	sbiw	r28, 0x0d	; 13
    12ac:	12 16       	cp	r1, r18
    12ae:	13 06       	cpc	r1, r19
    12b0:	6c f1       	brlt	.+90     	; 0x130c <__stack+0x20d>
				for(volatile int j = 0; j < 6; j++) ;
    12b2:	2b 96       	adiw	r28, 0x0b	; 11
    12b4:	1f ae       	std	Y+63, r1	; 0x3f
    12b6:	1e ae       	std	Y+62, r1	; 0x3e
    12b8:	2b 97       	sbiw	r28, 0x0b	; 11
    12ba:	2b 96       	adiw	r28, 0x0b	; 11
    12bc:	2e ad       	ldd	r18, Y+62	; 0x3e
    12be:	3f ad       	ldd	r19, Y+63	; 0x3f
    12c0:	2b 97       	sbiw	r28, 0x0b	; 11
    12c2:	26 30       	cpi	r18, 0x06	; 6
    12c4:	31 05       	cpc	r19, r1
    12c6:	8c f4       	brge	.+34     	; 0x12ea <__stack+0x1eb>
    12c8:	2b 96       	adiw	r28, 0x0b	; 11
    12ca:	2e ad       	ldd	r18, Y+62	; 0x3e
    12cc:	3f ad       	ldd	r19, Y+63	; 0x3f
    12ce:	2b 97       	sbiw	r28, 0x0b	; 11
    12d0:	2f 5f       	subi	r18, 0xFF	; 255
    12d2:	3f 4f       	sbci	r19, 0xFF	; 255
    12d4:	2b 96       	adiw	r28, 0x0b	; 11
    12d6:	3f af       	std	Y+63, r19	; 0x3f
    12d8:	2e af       	std	Y+62, r18	; 0x3e
    12da:	2b 97       	sbiw	r28, 0x0b	; 11
    12dc:	2b 96       	adiw	r28, 0x0b	; 11
    12de:	2e ad       	ldd	r18, Y+62	; 0x3e
    12e0:	3f ad       	ldd	r19, Y+63	; 0x3f
    12e2:	2b 97       	sbiw	r28, 0x0b	; 11
    12e4:	26 30       	cpi	r18, 0x06	; 6
    12e6:	31 05       	cpc	r19, r1
    12e8:	7c f3       	brlt	.-34     	; 0x12c8 <__stack+0x1c9>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    12ea:	2d 96       	adiw	r28, 0x0d	; 13
    12ec:	2e ad       	ldd	r18, Y+62	; 0x3e
    12ee:	3f ad       	ldd	r19, Y+63	; 0x3f
    12f0:	2d 97       	sbiw	r28, 0x0d	; 13
    12f2:	2f 5f       	subi	r18, 0xFF	; 255
    12f4:	3f 4f       	sbci	r19, 0xFF	; 255
    12f6:	2d 96       	adiw	r28, 0x0d	; 13
    12f8:	3f af       	std	Y+63, r19	; 0x3f
    12fa:	2e af       	std	Y+62, r18	; 0x3e
    12fc:	2d 97       	sbiw	r28, 0x0d	; 13
    12fe:	2d 96       	adiw	r28, 0x0d	; 13
    1300:	2e ad       	ldd	r18, Y+62	; 0x3e
    1302:	3f ad       	ldd	r19, Y+63	; 0x3f
    1304:	2d 97       	sbiw	r28, 0x0d	; 13
    1306:	12 16       	cp	r1, r18
    1308:	13 06       	cpc	r1, r19
    130a:	9c f6       	brge	.-90     	; 0x12b2 <__stack+0x1b3>
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
    130c:	fc 01       	movw	r30, r24
    130e:	e0 5d       	subi	r30, 0xD0	; 208
    1310:	fe 4f       	sbci	r31, 0xFE	; 254
    1312:	20 81       	ld	r18, Z
    1314:	27 71       	andi	r18, 0x17	; 23
    1316:	20 83       	st	Z, r18
    1318:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    131c:	29 96       	adiw	r28, 0x09	; 9
    131e:	1f ae       	std	Y+63, r1	; 0x3f
    1320:	1e ae       	std	Y+62, r1	; 0x3e
    1322:	29 97       	sbiw	r28, 0x09	; 9
    1324:	29 96       	adiw	r28, 0x09	; 9
    1326:	2e ad       	ldd	r18, Y+62	; 0x3e
    1328:	3f ad       	ldd	r19, Y+63	; 0x3f
    132a:	29 97       	sbiw	r28, 0x09	; 9
    132c:	12 16       	cp	r1, r18
    132e:	13 06       	cpc	r1, r19
    1330:	6c f1       	brlt	.+90     	; 0x138c <__stack+0x28d>
				for(volatile int j = 0; j < 6; j++) ;
    1332:	27 96       	adiw	r28, 0x07	; 7
    1334:	1f ae       	std	Y+63, r1	; 0x3f
    1336:	1e ae       	std	Y+62, r1	; 0x3e
    1338:	27 97       	sbiw	r28, 0x07	; 7
    133a:	27 96       	adiw	r28, 0x07	; 7
    133c:	2e ad       	ldd	r18, Y+62	; 0x3e
    133e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1340:	27 97       	sbiw	r28, 0x07	; 7
    1342:	26 30       	cpi	r18, 0x06	; 6
    1344:	31 05       	cpc	r19, r1
    1346:	8c f4       	brge	.+34     	; 0x136a <__stack+0x26b>
    1348:	27 96       	adiw	r28, 0x07	; 7
    134a:	2e ad       	ldd	r18, Y+62	; 0x3e
    134c:	3f ad       	ldd	r19, Y+63	; 0x3f
    134e:	27 97       	sbiw	r28, 0x07	; 7
    1350:	2f 5f       	subi	r18, 0xFF	; 255
    1352:	3f 4f       	sbci	r19, 0xFF	; 255
    1354:	27 96       	adiw	r28, 0x07	; 7
    1356:	3f af       	std	Y+63, r19	; 0x3f
    1358:	2e af       	std	Y+62, r18	; 0x3e
    135a:	27 97       	sbiw	r28, 0x07	; 7
    135c:	27 96       	adiw	r28, 0x07	; 7
    135e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1360:	3f ad       	ldd	r19, Y+63	; 0x3f
    1362:	27 97       	sbiw	r28, 0x07	; 7
    1364:	26 30       	cpi	r18, 0x06	; 6
    1366:	31 05       	cpc	r19, r1
    1368:	7c f3       	brlt	.-34     	; 0x1348 <__stack+0x249>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    136a:	29 96       	adiw	r28, 0x09	; 9
    136c:	2e ad       	ldd	r18, Y+62	; 0x3e
    136e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1370:	29 97       	sbiw	r28, 0x09	; 9
    1372:	2f 5f       	subi	r18, 0xFF	; 255
    1374:	3f 4f       	sbci	r19, 0xFF	; 255
    1376:	29 96       	adiw	r28, 0x09	; 9
    1378:	3f af       	std	Y+63, r19	; 0x3f
    137a:	2e af       	std	Y+62, r18	; 0x3e
    137c:	29 97       	sbiw	r28, 0x09	; 9
    137e:	29 96       	adiw	r28, 0x09	; 9
    1380:	2e ad       	ldd	r18, Y+62	; 0x3e
    1382:	3f ad       	ldd	r19, Y+63	; 0x3f
    1384:	29 97       	sbiw	r28, 0x09	; 9
    1386:	12 16       	cp	r1, r18
    1388:	13 06       	cpc	r1, r19
    138a:	9c f6       	brge	.-90     	; 0x1332 <__stack+0x233>
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
    138c:	fc 01       	movw	r30, r24
    138e:	e0 5d       	subi	r30, 0xD0	; 208
    1390:	fe 4f       	sbci	r31, 0xFE	; 254
    1392:	20 81       	ld	r18, Z
    1394:	20 61       	ori	r18, 0x10	; 16
    1396:	20 83       	st	Z, r18
    1398:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    139c:	25 96       	adiw	r28, 0x05	; 5
    139e:	1f ae       	std	Y+63, r1	; 0x3f
    13a0:	1e ae       	std	Y+62, r1	; 0x3e
    13a2:	25 97       	sbiw	r28, 0x05	; 5
    13a4:	25 96       	adiw	r28, 0x05	; 5
    13a6:	2e ad       	ldd	r18, Y+62	; 0x3e
    13a8:	3f ad       	ldd	r19, Y+63	; 0x3f
    13aa:	25 97       	sbiw	r28, 0x05	; 5
    13ac:	12 16       	cp	r1, r18
    13ae:	13 06       	cpc	r1, r19
    13b0:	6c f1       	brlt	.+90     	; 0x140c <__stack+0x30d>
				for(volatile int j = 0; j < 6; j++) ;
    13b2:	23 96       	adiw	r28, 0x03	; 3
    13b4:	1f ae       	std	Y+63, r1	; 0x3f
    13b6:	1e ae       	std	Y+62, r1	; 0x3e
    13b8:	23 97       	sbiw	r28, 0x03	; 3
    13ba:	23 96       	adiw	r28, 0x03	; 3
    13bc:	2e ad       	ldd	r18, Y+62	; 0x3e
    13be:	3f ad       	ldd	r19, Y+63	; 0x3f
    13c0:	23 97       	sbiw	r28, 0x03	; 3
    13c2:	26 30       	cpi	r18, 0x06	; 6
    13c4:	31 05       	cpc	r19, r1
    13c6:	8c f4       	brge	.+34     	; 0x13ea <__stack+0x2eb>
    13c8:	23 96       	adiw	r28, 0x03	; 3
    13ca:	2e ad       	ldd	r18, Y+62	; 0x3e
    13cc:	3f ad       	ldd	r19, Y+63	; 0x3f
    13ce:	23 97       	sbiw	r28, 0x03	; 3
    13d0:	2f 5f       	subi	r18, 0xFF	; 255
    13d2:	3f 4f       	sbci	r19, 0xFF	; 255
    13d4:	23 96       	adiw	r28, 0x03	; 3
    13d6:	3f af       	std	Y+63, r19	; 0x3f
    13d8:	2e af       	std	Y+62, r18	; 0x3e
    13da:	23 97       	sbiw	r28, 0x03	; 3
    13dc:	23 96       	adiw	r28, 0x03	; 3
    13de:	2e ad       	ldd	r18, Y+62	; 0x3e
    13e0:	3f ad       	ldd	r19, Y+63	; 0x3f
    13e2:	23 97       	sbiw	r28, 0x03	; 3
    13e4:	26 30       	cpi	r18, 0x06	; 6
    13e6:	31 05       	cpc	r19, r1
    13e8:	7c f3       	brlt	.-34     	; 0x13c8 <__stack+0x2c9>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    13ea:	25 96       	adiw	r28, 0x05	; 5
    13ec:	2e ad       	ldd	r18, Y+62	; 0x3e
    13ee:	3f ad       	ldd	r19, Y+63	; 0x3f
    13f0:	25 97       	sbiw	r28, 0x05	; 5
    13f2:	2f 5f       	subi	r18, 0xFF	; 255
    13f4:	3f 4f       	sbci	r19, 0xFF	; 255
    13f6:	25 96       	adiw	r28, 0x05	; 5
    13f8:	3f af       	std	Y+63, r19	; 0x3f
    13fa:	2e af       	std	Y+62, r18	; 0x3e
    13fc:	25 97       	sbiw	r28, 0x05	; 5
    13fe:	25 96       	adiw	r28, 0x05	; 5
    1400:	2e ad       	ldd	r18, Y+62	; 0x3e
    1402:	3f ad       	ldd	r19, Y+63	; 0x3f
    1404:	25 97       	sbiw	r28, 0x05	; 5
    1406:	12 16       	cp	r1, r18
    1408:	13 06       	cpc	r1, r19
    140a:	9c f6       	brge	.-90     	; 0x13b2 <__stack+0x2b3>
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
    140c:	26 e0       	ldi	r18, 0x06	; 6
    140e:	2b bb       	out	0x1b, r18	; 27
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1410:	21 96       	adiw	r28, 0x01	; 1
    1412:	1f ae       	std	Y+63, r1	; 0x3f
    1414:	1e ae       	std	Y+62, r1	; 0x3e
    1416:	21 97       	sbiw	r28, 0x01	; 1
    1418:	21 96       	adiw	r28, 0x01	; 1
    141a:	2e ad       	ldd	r18, Y+62	; 0x3e
    141c:	3f ad       	ldd	r19, Y+63	; 0x3f
    141e:	21 97       	sbiw	r28, 0x01	; 1
    1420:	12 16       	cp	r1, r18
    1422:	13 06       	cpc	r1, r19
    1424:	1c f1       	brlt	.+70     	; 0x146c <__stack+0x36d>
				for(volatile int j = 0; j < 6; j++) ;
    1426:	1e ae       	std	Y+62, r1	; 0x3e
    1428:	1d ae       	std	Y+61, r1	; 0x3d
    142a:	2d ad       	ldd	r18, Y+61	; 0x3d
    142c:	3e ad       	ldd	r19, Y+62	; 0x3e
    142e:	26 30       	cpi	r18, 0x06	; 6
    1430:	31 05       	cpc	r19, r1
    1432:	5c f4       	brge	.+22     	; 0x144a <__stack+0x34b>
    1434:	2d ad       	ldd	r18, Y+61	; 0x3d
    1436:	3e ad       	ldd	r19, Y+62	; 0x3e
    1438:	2f 5f       	subi	r18, 0xFF	; 255
    143a:	3f 4f       	sbci	r19, 0xFF	; 255
    143c:	3e af       	std	Y+62, r19	; 0x3e
    143e:	2d af       	std	Y+61, r18	; 0x3d
    1440:	2d ad       	ldd	r18, Y+61	; 0x3d
    1442:	3e ad       	ldd	r19, Y+62	; 0x3e
    1444:	26 30       	cpi	r18, 0x06	; 6
    1446:	31 05       	cpc	r19, r1
    1448:	ac f3       	brlt	.-22     	; 0x1434 <__stack+0x335>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    144a:	21 96       	adiw	r28, 0x01	; 1
    144c:	2e ad       	ldd	r18, Y+62	; 0x3e
    144e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1450:	21 97       	sbiw	r28, 0x01	; 1
    1452:	2f 5f       	subi	r18, 0xFF	; 255
    1454:	3f 4f       	sbci	r19, 0xFF	; 255
    1456:	21 96       	adiw	r28, 0x01	; 1
    1458:	3f af       	std	Y+63, r19	; 0x3f
    145a:	2e af       	std	Y+62, r18	; 0x3e
    145c:	21 97       	sbiw	r28, 0x01	; 1
    145e:	21 96       	adiw	r28, 0x01	; 1
    1460:	2e ad       	ldd	r18, Y+62	; 0x3e
    1462:	3f ad       	ldd	r19, Y+63	; 0x3f
    1464:	21 97       	sbiw	r28, 0x01	; 1
    1466:	12 16       	cp	r1, r18
    1468:	13 06       	cpc	r1, r19
    146a:	ec f6       	brge	.-70     	; 0x1426 <__stack+0x327>
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
			iotmCharLcdEnOff; iotTimer::delay(1);
    146c:	fc 01       	movw	r30, r24
    146e:	e0 5d       	subi	r30, 0xD0	; 208
    1470:	fe 4f       	sbci	r31, 0xFE	; 254
    1472:	20 81       	ld	r18, Z
    1474:	2f 70       	andi	r18, 0x0F	; 15
    1476:	20 83       	st	Z, r18
    1478:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    147c:	1c ae       	std	Y+60, r1	; 0x3c
    147e:	1b ae       	std	Y+59, r1	; 0x3b
    1480:	2b ad       	ldd	r18, Y+59	; 0x3b
    1482:	3c ad       	ldd	r19, Y+60	; 0x3c
    1484:	12 16       	cp	r1, r18
    1486:	13 06       	cpc	r1, r19
    1488:	ec f0       	brlt	.+58     	; 0x14c4 <__stack+0x3c5>
				for(volatile int j = 0; j < 6; j++) ;
    148a:	1a ae       	std	Y+58, r1	; 0x3a
    148c:	19 ae       	std	Y+57, r1	; 0x39
    148e:	29 ad       	ldd	r18, Y+57	; 0x39
    1490:	3a ad       	ldd	r19, Y+58	; 0x3a
    1492:	26 30       	cpi	r18, 0x06	; 6
    1494:	31 05       	cpc	r19, r1
    1496:	5c f4       	brge	.+22     	; 0x14ae <__stack+0x3af>
    1498:	29 ad       	ldd	r18, Y+57	; 0x39
    149a:	3a ad       	ldd	r19, Y+58	; 0x3a
    149c:	2f 5f       	subi	r18, 0xFF	; 255
    149e:	3f 4f       	sbci	r19, 0xFF	; 255
    14a0:	3a af       	std	Y+58, r19	; 0x3a
    14a2:	29 af       	std	Y+57, r18	; 0x39
    14a4:	29 ad       	ldd	r18, Y+57	; 0x39
    14a6:	3a ad       	ldd	r19, Y+58	; 0x3a
    14a8:	26 30       	cpi	r18, 0x06	; 6
    14aa:	31 05       	cpc	r19, r1
    14ac:	ac f3       	brlt	.-22     	; 0x1498 <__stack+0x399>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    14ae:	2b ad       	ldd	r18, Y+59	; 0x3b
    14b0:	3c ad       	ldd	r19, Y+60	; 0x3c
    14b2:	2f 5f       	subi	r18, 0xFF	; 255
    14b4:	3f 4f       	sbci	r19, 0xFF	; 255
    14b6:	3c af       	std	Y+60, r19	; 0x3c
    14b8:	2b af       	std	Y+59, r18	; 0x3b
    14ba:	2b ad       	ldd	r18, Y+59	; 0x3b
    14bc:	3c ad       	ldd	r19, Y+60	; 0x3c
    14be:	12 16       	cp	r1, r18
    14c0:	13 06       	cpc	r1, r19
    14c2:	1c f7       	brge	.-58     	; 0x148a <__stack+0x38b>
				writeControl(0xc0 + aX - 1); iotTimer::delay(1);
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
    14c4:	fc 01       	movw	r30, r24
    14c6:	e0 5d       	subi	r30, 0xD0	; 208
    14c8:	fe 4f       	sbci	r31, 0xFE	; 254
    14ca:	20 81       	ld	r18, Z
    14cc:	2f 70       	andi	r18, 0x0F	; 15
    14ce:	20 83       	st	Z, r18
    14d0:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    14d4:	18 ae       	std	Y+56, r1	; 0x38
    14d6:	1f aa       	std	Y+55, r1	; 0x37
    14d8:	2f a9       	ldd	r18, Y+55	; 0x37
    14da:	38 ad       	ldd	r19, Y+56	; 0x38
    14dc:	12 16       	cp	r1, r18
    14de:	13 06       	cpc	r1, r19
    14e0:	ec f0       	brlt	.+58     	; 0x151c <__stack+0x41d>
				for(volatile int j = 0; j < 6; j++) ;
    14e2:	1e aa       	std	Y+54, r1	; 0x36
    14e4:	1d aa       	std	Y+53, r1	; 0x35
    14e6:	2d a9       	ldd	r18, Y+53	; 0x35
    14e8:	3e a9       	ldd	r19, Y+54	; 0x36
    14ea:	26 30       	cpi	r18, 0x06	; 6
    14ec:	31 05       	cpc	r19, r1
    14ee:	5c f4       	brge	.+22     	; 0x1506 <__stack+0x407>
    14f0:	2d a9       	ldd	r18, Y+53	; 0x35
    14f2:	3e a9       	ldd	r19, Y+54	; 0x36
    14f4:	2f 5f       	subi	r18, 0xFF	; 255
    14f6:	3f 4f       	sbci	r19, 0xFF	; 255
    14f8:	3e ab       	std	Y+54, r19	; 0x36
    14fa:	2d ab       	std	Y+53, r18	; 0x35
    14fc:	2d a9       	ldd	r18, Y+53	; 0x35
    14fe:	3e a9       	ldd	r19, Y+54	; 0x36
    1500:	26 30       	cpi	r18, 0x06	; 6
    1502:	31 05       	cpc	r19, r1
    1504:	ac f3       	brlt	.-22     	; 0x14f0 <__stack+0x3f1>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1506:	2f a9       	ldd	r18, Y+55	; 0x37
    1508:	38 ad       	ldd	r19, Y+56	; 0x38
    150a:	2f 5f       	subi	r18, 0xFF	; 255
    150c:	3f 4f       	sbci	r19, 0xFF	; 255
    150e:	38 af       	std	Y+56, r19	; 0x38
    1510:	2f ab       	std	Y+55, r18	; 0x37
    1512:	2f a9       	ldd	r18, Y+55	; 0x37
    1514:	38 ad       	ldd	r19, Y+56	; 0x38
    1516:	12 16       	cp	r1, r18
    1518:	13 06       	cpc	r1, r19
    151a:	1c f7       	brge	.-58     	; 0x14e2 <__stack+0x3e3>
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
    151c:	fc 01       	movw	r30, r24
    151e:	e0 5d       	subi	r30, 0xD0	; 208
    1520:	fe 4f       	sbci	r31, 0xFE	; 254
    1522:	20 81       	ld	r18, Z
    1524:	2b 71       	andi	r18, 0x1B	; 27
    1526:	20 83       	st	Z, r18
    1528:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    152c:	1c aa       	std	Y+52, r1	; 0x34
    152e:	1b aa       	std	Y+51, r1	; 0x33
    1530:	2b a9       	ldd	r18, Y+51	; 0x33
    1532:	3c a9       	ldd	r19, Y+52	; 0x34
    1534:	12 16       	cp	r1, r18
    1536:	13 06       	cpc	r1, r19
    1538:	ec f0       	brlt	.+58     	; 0x1574 <__stack+0x475>
				for(volatile int j = 0; j < 6; j++) ;
    153a:	1a aa       	std	Y+50, r1	; 0x32
    153c:	19 aa       	std	Y+49, r1	; 0x31
    153e:	29 a9       	ldd	r18, Y+49	; 0x31
    1540:	3a a9       	ldd	r19, Y+50	; 0x32
    1542:	26 30       	cpi	r18, 0x06	; 6
    1544:	31 05       	cpc	r19, r1
    1546:	5c f4       	brge	.+22     	; 0x155e <__stack+0x45f>
    1548:	29 a9       	ldd	r18, Y+49	; 0x31
    154a:	3a a9       	ldd	r19, Y+50	; 0x32
    154c:	2f 5f       	subi	r18, 0xFF	; 255
    154e:	3f 4f       	sbci	r19, 0xFF	; 255
    1550:	3a ab       	std	Y+50, r19	; 0x32
    1552:	29 ab       	std	Y+49, r18	; 0x31
    1554:	29 a9       	ldd	r18, Y+49	; 0x31
    1556:	3a a9       	ldd	r19, Y+50	; 0x32
    1558:	26 30       	cpi	r18, 0x06	; 6
    155a:	31 05       	cpc	r19, r1
    155c:	ac f3       	brlt	.-22     	; 0x1548 <__stack+0x449>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    155e:	2b a9       	ldd	r18, Y+51	; 0x33
    1560:	3c a9       	ldd	r19, Y+52	; 0x34
    1562:	2f 5f       	subi	r18, 0xFF	; 255
    1564:	3f 4f       	sbci	r19, 0xFF	; 255
    1566:	3c ab       	std	Y+52, r19	; 0x34
    1568:	2b ab       	std	Y+51, r18	; 0x33
    156a:	2b a9       	ldd	r18, Y+51	; 0x33
    156c:	3c a9       	ldd	r19, Y+52	; 0x34
    156e:	12 16       	cp	r1, r18
    1570:	13 06       	cpc	r1, r19
    1572:	1c f7       	brge	.-58     	; 0x153a <__stack+0x43b>
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
    1574:	fc 01       	movw	r30, r24
    1576:	e0 5d       	subi	r30, 0xD0	; 208
    1578:	fe 4f       	sbci	r31, 0xFE	; 254
    157a:	20 81       	ld	r18, Z
    157c:	27 71       	andi	r18, 0x17	; 23
    157e:	20 83       	st	Z, r18
    1580:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1584:	18 aa       	std	Y+48, r1	; 0x30
    1586:	1f a6       	std	Y+47, r1	; 0x2f
    1588:	2f a5       	ldd	r18, Y+47	; 0x2f
    158a:	38 a9       	ldd	r19, Y+48	; 0x30
    158c:	12 16       	cp	r1, r18
    158e:	13 06       	cpc	r1, r19
    1590:	ec f0       	brlt	.+58     	; 0x15cc <__stack+0x4cd>
				for(volatile int j = 0; j < 6; j++) ;
    1592:	1e a6       	std	Y+46, r1	; 0x2e
    1594:	1d a6       	std	Y+45, r1	; 0x2d
    1596:	2d a5       	ldd	r18, Y+45	; 0x2d
    1598:	3e a5       	ldd	r19, Y+46	; 0x2e
    159a:	26 30       	cpi	r18, 0x06	; 6
    159c:	31 05       	cpc	r19, r1
    159e:	5c f4       	brge	.+22     	; 0x15b6 <__stack+0x4b7>
    15a0:	2d a5       	ldd	r18, Y+45	; 0x2d
    15a2:	3e a5       	ldd	r19, Y+46	; 0x2e
    15a4:	2f 5f       	subi	r18, 0xFF	; 255
    15a6:	3f 4f       	sbci	r19, 0xFF	; 255
    15a8:	3e a7       	std	Y+46, r19	; 0x2e
    15aa:	2d a7       	std	Y+45, r18	; 0x2d
    15ac:	2d a5       	ldd	r18, Y+45	; 0x2d
    15ae:	3e a5       	ldd	r19, Y+46	; 0x2e
    15b0:	26 30       	cpi	r18, 0x06	; 6
    15b2:	31 05       	cpc	r19, r1
    15b4:	ac f3       	brlt	.-22     	; 0x15a0 <__stack+0x4a1>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    15b6:	2f a5       	ldd	r18, Y+47	; 0x2f
    15b8:	38 a9       	ldd	r19, Y+48	; 0x30
    15ba:	2f 5f       	subi	r18, 0xFF	; 255
    15bc:	3f 4f       	sbci	r19, 0xFF	; 255
    15be:	38 ab       	std	Y+48, r19	; 0x30
    15c0:	2f a7       	std	Y+47, r18	; 0x2f
    15c2:	2f a5       	ldd	r18, Y+47	; 0x2f
    15c4:	38 a9       	ldd	r19, Y+48	; 0x30
    15c6:	12 16       	cp	r1, r18
    15c8:	13 06       	cpc	r1, r19
    15ca:	1c f7       	brge	.-58     	; 0x1592 <__stack+0x493>
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
    15cc:	fc 01       	movw	r30, r24
    15ce:	e0 5d       	subi	r30, 0xD0	; 208
    15d0:	fe 4f       	sbci	r31, 0xFE	; 254
    15d2:	20 81       	ld	r18, Z
    15d4:	20 61       	ori	r18, 0x10	; 16
    15d6:	20 83       	st	Z, r18
    15d8:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    15dc:	1c a6       	std	Y+44, r1	; 0x2c
    15de:	1b a6       	std	Y+43, r1	; 0x2b
    15e0:	2b a5       	ldd	r18, Y+43	; 0x2b
    15e2:	3c a5       	ldd	r19, Y+44	; 0x2c
    15e4:	12 16       	cp	r1, r18
    15e6:	13 06       	cpc	r1, r19
    15e8:	ec f0       	brlt	.+58     	; 0x1624 <__stack+0x525>
				for(volatile int j = 0; j < 6; j++) ;
    15ea:	1a a6       	std	Y+42, r1	; 0x2a
    15ec:	19 a6       	std	Y+41, r1	; 0x29
    15ee:	29 a5       	ldd	r18, Y+41	; 0x29
    15f0:	3a a5       	ldd	r19, Y+42	; 0x2a
    15f2:	26 30       	cpi	r18, 0x06	; 6
    15f4:	31 05       	cpc	r19, r1
    15f6:	5c f4       	brge	.+22     	; 0x160e <__stack+0x50f>
    15f8:	29 a5       	ldd	r18, Y+41	; 0x29
    15fa:	3a a5       	ldd	r19, Y+42	; 0x2a
    15fc:	2f 5f       	subi	r18, 0xFF	; 255
    15fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1600:	3a a7       	std	Y+42, r19	; 0x2a
    1602:	29 a7       	std	Y+41, r18	; 0x29
    1604:	29 a5       	ldd	r18, Y+41	; 0x29
    1606:	3a a5       	ldd	r19, Y+42	; 0x2a
    1608:	26 30       	cpi	r18, 0x06	; 6
    160a:	31 05       	cpc	r19, r1
    160c:	ac f3       	brlt	.-22     	; 0x15f8 <__stack+0x4f9>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    160e:	2b a5       	ldd	r18, Y+43	; 0x2b
    1610:	3c a5       	ldd	r19, Y+44	; 0x2c
    1612:	2f 5f       	subi	r18, 0xFF	; 255
    1614:	3f 4f       	sbci	r19, 0xFF	; 255
    1616:	3c a7       	std	Y+44, r19	; 0x2c
    1618:	2b a7       	std	Y+43, r18	; 0x2b
    161a:	2b a5       	ldd	r18, Y+43	; 0x2b
    161c:	3c a5       	ldd	r19, Y+44	; 0x2c
    161e:	12 16       	cp	r1, r18
    1620:	13 06       	cpc	r1, r19
    1622:	1c f7       	brge	.-58     	; 0x15ea <__stack+0x4eb>
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
    1624:	21 e0       	ldi	r18, 0x01	; 1
    1626:	2b bb       	out	0x1b, r18	; 27
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1628:	18 a6       	std	Y+40, r1	; 0x28
    162a:	1f a2       	std	Y+39, r1	; 0x27
    162c:	2f a1       	ldd	r18, Y+39	; 0x27
    162e:	38 a5       	ldd	r19, Y+40	; 0x28
    1630:	12 16       	cp	r1, r18
    1632:	13 06       	cpc	r1, r19
    1634:	ec f0       	brlt	.+58     	; 0x1670 <__stack+0x571>
				for(volatile int j = 0; j < 6; j++) ;
    1636:	1e a2       	std	Y+38, r1	; 0x26
    1638:	1d a2       	std	Y+37, r1	; 0x25
    163a:	2d a1       	ldd	r18, Y+37	; 0x25
    163c:	3e a1       	ldd	r19, Y+38	; 0x26
    163e:	26 30       	cpi	r18, 0x06	; 6
    1640:	31 05       	cpc	r19, r1
    1642:	5c f4       	brge	.+22     	; 0x165a <__stack+0x55b>
    1644:	2d a1       	ldd	r18, Y+37	; 0x25
    1646:	3e a1       	ldd	r19, Y+38	; 0x26
    1648:	2f 5f       	subi	r18, 0xFF	; 255
    164a:	3f 4f       	sbci	r19, 0xFF	; 255
    164c:	3e a3       	std	Y+38, r19	; 0x26
    164e:	2d a3       	std	Y+37, r18	; 0x25
    1650:	2d a1       	ldd	r18, Y+37	; 0x25
    1652:	3e a1       	ldd	r19, Y+38	; 0x26
    1654:	26 30       	cpi	r18, 0x06	; 6
    1656:	31 05       	cpc	r19, r1
    1658:	ac f3       	brlt	.-22     	; 0x1644 <__stack+0x545>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    165a:	2f a1       	ldd	r18, Y+39	; 0x27
    165c:	38 a5       	ldd	r19, Y+40	; 0x28
    165e:	2f 5f       	subi	r18, 0xFF	; 255
    1660:	3f 4f       	sbci	r19, 0xFF	; 255
    1662:	38 a7       	std	Y+40, r19	; 0x28
    1664:	2f a3       	std	Y+39, r18	; 0x27
    1666:	2f a1       	ldd	r18, Y+39	; 0x27
    1668:	38 a5       	ldd	r19, Y+40	; 0x28
    166a:	12 16       	cp	r1, r18
    166c:	13 06       	cpc	r1, r19
    166e:	1c f7       	brge	.-58     	; 0x1636 <__stack+0x537>
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
			iotmCharLcdEnOff; iotTimer::delay(1);
    1670:	fc 01       	movw	r30, r24
    1672:	e0 5d       	subi	r30, 0xD0	; 208
    1674:	fe 4f       	sbci	r31, 0xFE	; 254
    1676:	20 81       	ld	r18, Z
    1678:	2f 70       	andi	r18, 0x0F	; 15
    167a:	20 83       	st	Z, r18
    167c:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1680:	1c a2       	std	Y+36, r1	; 0x24
    1682:	1b a2       	std	Y+35, r1	; 0x23
    1684:	2b a1       	ldd	r18, Y+35	; 0x23
    1686:	3c a1       	ldd	r19, Y+36	; 0x24
    1688:	12 16       	cp	r1, r18
    168a:	13 06       	cpc	r1, r19
    168c:	ec f0       	brlt	.+58     	; 0x16c8 <__stack+0x5c9>
				for(volatile int j = 0; j < 6; j++) ;
    168e:	1a a2       	std	Y+34, r1	; 0x22
    1690:	19 a2       	std	Y+33, r1	; 0x21
    1692:	29 a1       	ldd	r18, Y+33	; 0x21
    1694:	3a a1       	ldd	r19, Y+34	; 0x22
    1696:	26 30       	cpi	r18, 0x06	; 6
    1698:	31 05       	cpc	r19, r1
    169a:	5c f4       	brge	.+22     	; 0x16b2 <__stack+0x5b3>
    169c:	29 a1       	ldd	r18, Y+33	; 0x21
    169e:	3a a1       	ldd	r19, Y+34	; 0x22
    16a0:	2f 5f       	subi	r18, 0xFF	; 255
    16a2:	3f 4f       	sbci	r19, 0xFF	; 255
    16a4:	3a a3       	std	Y+34, r19	; 0x22
    16a6:	29 a3       	std	Y+33, r18	; 0x21
    16a8:	29 a1       	ldd	r18, Y+33	; 0x21
    16aa:	3a a1       	ldd	r19, Y+34	; 0x22
    16ac:	26 30       	cpi	r18, 0x06	; 6
    16ae:	31 05       	cpc	r19, r1
    16b0:	ac f3       	brlt	.-22     	; 0x169c <__stack+0x59d>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    16b2:	2b a1       	ldd	r18, Y+35	; 0x23
    16b4:	3c a1       	ldd	r19, Y+36	; 0x24
    16b6:	2f 5f       	subi	r18, 0xFF	; 255
    16b8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ba:	3c a3       	std	Y+36, r19	; 0x24
    16bc:	2b a3       	std	Y+35, r18	; 0x23
    16be:	2b a1       	ldd	r18, Y+35	; 0x23
    16c0:	3c a1       	ldd	r19, Y+36	; 0x24
    16c2:	12 16       	cp	r1, r18
    16c4:	13 06       	cpc	r1, r19
    16c6:	1c f7       	brge	.-58     	; 0x168e <__stack+0x58f>
    16c8:	18 a2       	std	Y+32, r1	; 0x20
    16ca:	1f 8e       	std	Y+31, r1	; 0x1f
    16cc:	2f 8d       	ldd	r18, Y+31	; 0x1f
    16ce:	38 a1       	ldd	r19, Y+32	; 0x20
    16d0:	24 36       	cpi	r18, 0x64	; 100
    16d2:	31 05       	cpc	r19, r1
    16d4:	ec f4       	brge	.+58     	; 0x1710 <__stack+0x611>
				for(volatile int j = 0; j < 6; j++) ;
    16d6:	1e 8e       	std	Y+30, r1	; 0x1e
    16d8:	1d 8e       	std	Y+29, r1	; 0x1d
    16da:	2d 8d       	ldd	r18, Y+29	; 0x1d
    16dc:	3e 8d       	ldd	r19, Y+30	; 0x1e
    16de:	26 30       	cpi	r18, 0x06	; 6
    16e0:	31 05       	cpc	r19, r1
    16e2:	5c f4       	brge	.+22     	; 0x16fa <__stack+0x5fb>
    16e4:	2d 8d       	ldd	r18, Y+29	; 0x1d
    16e6:	3e 8d       	ldd	r19, Y+30	; 0x1e
    16e8:	2f 5f       	subi	r18, 0xFF	; 255
    16ea:	3f 4f       	sbci	r19, 0xFF	; 255
    16ec:	3e 8f       	std	Y+30, r19	; 0x1e
    16ee:	2d 8f       	std	Y+29, r18	; 0x1d
    16f0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    16f2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    16f4:	26 30       	cpi	r18, 0x06	; 6
    16f6:	31 05       	cpc	r19, r1
    16f8:	ac f3       	brlt	.-22     	; 0x16e4 <__stack+0x5e5>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    16fa:	2f 8d       	ldd	r18, Y+31	; 0x1f
    16fc:	38 a1       	ldd	r19, Y+32	; 0x20
    16fe:	2f 5f       	subi	r18, 0xFF	; 255
    1700:	3f 4f       	sbci	r19, 0xFF	; 255
    1702:	38 a3       	std	Y+32, r19	; 0x20
    1704:	2f 8f       	std	Y+31, r18	; 0x1f
    1706:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1708:	38 a1       	ldd	r19, Y+32	; 0x20
    170a:	24 36       	cpi	r18, 0x64	; 100
    170c:	31 05       	cpc	r19, r1
    170e:	1c f3       	brlt	.-58     	; 0x16d6 <__stack+0x5d7>
				writeControl(0xc0 + aX - 1); iotTimer::delay(1);
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
    1710:	fc 01       	movw	r30, r24
    1712:	e0 5d       	subi	r30, 0xD0	; 208
    1714:	fe 4f       	sbci	r31, 0xFE	; 254
    1716:	20 81       	ld	r18, Z
    1718:	2f 70       	andi	r18, 0x0F	; 15
    171a:	20 83       	st	Z, r18
    171c:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1720:	1c 8e       	std	Y+28, r1	; 0x1c
    1722:	1b 8e       	std	Y+27, r1	; 0x1b
    1724:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1726:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1728:	12 16       	cp	r1, r18
    172a:	13 06       	cpc	r1, r19
    172c:	ec f0       	brlt	.+58     	; 0x1768 <__stack+0x669>
				for(volatile int j = 0; j < 6; j++) ;
    172e:	1a 8e       	std	Y+26, r1	; 0x1a
    1730:	19 8e       	std	Y+25, r1	; 0x19
    1732:	29 8d       	ldd	r18, Y+25	; 0x19
    1734:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1736:	26 30       	cpi	r18, 0x06	; 6
    1738:	31 05       	cpc	r19, r1
    173a:	5c f4       	brge	.+22     	; 0x1752 <__stack+0x653>
    173c:	29 8d       	ldd	r18, Y+25	; 0x19
    173e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1740:	2f 5f       	subi	r18, 0xFF	; 255
    1742:	3f 4f       	sbci	r19, 0xFF	; 255
    1744:	3a 8f       	std	Y+26, r19	; 0x1a
    1746:	29 8f       	std	Y+25, r18	; 0x19
    1748:	29 8d       	ldd	r18, Y+25	; 0x19
    174a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    174c:	26 30       	cpi	r18, 0x06	; 6
    174e:	31 05       	cpc	r19, r1
    1750:	ac f3       	brlt	.-22     	; 0x173c <__stack+0x63d>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1752:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1754:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1756:	2f 5f       	subi	r18, 0xFF	; 255
    1758:	3f 4f       	sbci	r19, 0xFF	; 255
    175a:	3c 8f       	std	Y+28, r19	; 0x1c
    175c:	2b 8f       	std	Y+27, r18	; 0x1b
    175e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1760:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1762:	12 16       	cp	r1, r18
    1764:	13 06       	cpc	r1, r19
    1766:	1c f7       	brge	.-58     	; 0x172e <__stack+0x62f>
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
    1768:	fc 01       	movw	r30, r24
    176a:	e0 5d       	subi	r30, 0xD0	; 208
    176c:	fe 4f       	sbci	r31, 0xFE	; 254
    176e:	20 81       	ld	r18, Z
    1770:	2b 71       	andi	r18, 0x1B	; 27
    1772:	20 83       	st	Z, r18
    1774:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1778:	18 8e       	std	Y+24, r1	; 0x18
    177a:	1f 8a       	std	Y+23, r1	; 0x17
    177c:	2f 89       	ldd	r18, Y+23	; 0x17
    177e:	38 8d       	ldd	r19, Y+24	; 0x18
    1780:	12 16       	cp	r1, r18
    1782:	13 06       	cpc	r1, r19
    1784:	ec f0       	brlt	.+58     	; 0x17c0 <__stack+0x6c1>
				for(volatile int j = 0; j < 6; j++) ;
    1786:	1e 8a       	std	Y+22, r1	; 0x16
    1788:	1d 8a       	std	Y+21, r1	; 0x15
    178a:	2d 89       	ldd	r18, Y+21	; 0x15
    178c:	3e 89       	ldd	r19, Y+22	; 0x16
    178e:	26 30       	cpi	r18, 0x06	; 6
    1790:	31 05       	cpc	r19, r1
    1792:	5c f4       	brge	.+22     	; 0x17aa <__stack+0x6ab>
    1794:	2d 89       	ldd	r18, Y+21	; 0x15
    1796:	3e 89       	ldd	r19, Y+22	; 0x16
    1798:	2f 5f       	subi	r18, 0xFF	; 255
    179a:	3f 4f       	sbci	r19, 0xFF	; 255
    179c:	3e 8b       	std	Y+22, r19	; 0x16
    179e:	2d 8b       	std	Y+21, r18	; 0x15
    17a0:	2d 89       	ldd	r18, Y+21	; 0x15
    17a2:	3e 89       	ldd	r19, Y+22	; 0x16
    17a4:	26 30       	cpi	r18, 0x06	; 6
    17a6:	31 05       	cpc	r19, r1
    17a8:	ac f3       	brlt	.-22     	; 0x1794 <__stack+0x695>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    17aa:	2f 89       	ldd	r18, Y+23	; 0x17
    17ac:	38 8d       	ldd	r19, Y+24	; 0x18
    17ae:	2f 5f       	subi	r18, 0xFF	; 255
    17b0:	3f 4f       	sbci	r19, 0xFF	; 255
    17b2:	38 8f       	std	Y+24, r19	; 0x18
    17b4:	2f 8b       	std	Y+23, r18	; 0x17
    17b6:	2f 89       	ldd	r18, Y+23	; 0x17
    17b8:	38 8d       	ldd	r19, Y+24	; 0x18
    17ba:	12 16       	cp	r1, r18
    17bc:	13 06       	cpc	r1, r19
    17be:	1c f7       	brge	.-58     	; 0x1786 <__stack+0x687>
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
    17c0:	fc 01       	movw	r30, r24
    17c2:	e0 5d       	subi	r30, 0xD0	; 208
    17c4:	fe 4f       	sbci	r31, 0xFE	; 254
    17c6:	20 81       	ld	r18, Z
    17c8:	27 71       	andi	r18, 0x17	; 23
    17ca:	20 83       	st	Z, r18
    17cc:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    17d0:	1c 8a       	std	Y+20, r1	; 0x14
    17d2:	1b 8a       	std	Y+19, r1	; 0x13
    17d4:	2b 89       	ldd	r18, Y+19	; 0x13
    17d6:	3c 89       	ldd	r19, Y+20	; 0x14
    17d8:	12 16       	cp	r1, r18
    17da:	13 06       	cpc	r1, r19
    17dc:	ec f0       	brlt	.+58     	; 0x1818 <__stack+0x719>
				for(volatile int j = 0; j < 6; j++) ;
    17de:	1a 8a       	std	Y+18, r1	; 0x12
    17e0:	19 8a       	std	Y+17, r1	; 0x11
    17e2:	29 89       	ldd	r18, Y+17	; 0x11
    17e4:	3a 89       	ldd	r19, Y+18	; 0x12
    17e6:	26 30       	cpi	r18, 0x06	; 6
    17e8:	31 05       	cpc	r19, r1
    17ea:	5c f4       	brge	.+22     	; 0x1802 <__stack+0x703>
    17ec:	29 89       	ldd	r18, Y+17	; 0x11
    17ee:	3a 89       	ldd	r19, Y+18	; 0x12
    17f0:	2f 5f       	subi	r18, 0xFF	; 255
    17f2:	3f 4f       	sbci	r19, 0xFF	; 255
    17f4:	3a 8b       	std	Y+18, r19	; 0x12
    17f6:	29 8b       	std	Y+17, r18	; 0x11
    17f8:	29 89       	ldd	r18, Y+17	; 0x11
    17fa:	3a 89       	ldd	r19, Y+18	; 0x12
    17fc:	26 30       	cpi	r18, 0x06	; 6
    17fe:	31 05       	cpc	r19, r1
    1800:	ac f3       	brlt	.-22     	; 0x17ec <__stack+0x6ed>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1802:	2b 89       	ldd	r18, Y+19	; 0x13
    1804:	3c 89       	ldd	r19, Y+20	; 0x14
    1806:	2f 5f       	subi	r18, 0xFF	; 255
    1808:	3f 4f       	sbci	r19, 0xFF	; 255
    180a:	3c 8b       	std	Y+20, r19	; 0x14
    180c:	2b 8b       	std	Y+19, r18	; 0x13
    180e:	2b 89       	ldd	r18, Y+19	; 0x13
    1810:	3c 89       	ldd	r19, Y+20	; 0x14
    1812:	12 16       	cp	r1, r18
    1814:	13 06       	cpc	r1, r19
    1816:	1c f7       	brge	.-58     	; 0x17de <__stack+0x6df>
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
    1818:	fc 01       	movw	r30, r24
    181a:	e0 5d       	subi	r30, 0xD0	; 208
    181c:	fe 4f       	sbci	r31, 0xFE	; 254
    181e:	20 81       	ld	r18, Z
    1820:	20 61       	ori	r18, 0x10	; 16
    1822:	20 83       	st	Z, r18
    1824:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1828:	18 8a       	std	Y+16, r1	; 0x10
    182a:	1f 86       	std	Y+15, r1	; 0x0f
    182c:	2f 85       	ldd	r18, Y+15	; 0x0f
    182e:	38 89       	ldd	r19, Y+16	; 0x10
    1830:	12 16       	cp	r1, r18
    1832:	13 06       	cpc	r1, r19
    1834:	ec f0       	brlt	.+58     	; 0x1870 <__stack+0x771>
				for(volatile int j = 0; j < 6; j++) ;
    1836:	1e 86       	std	Y+14, r1	; 0x0e
    1838:	1d 86       	std	Y+13, r1	; 0x0d
    183a:	2d 85       	ldd	r18, Y+13	; 0x0d
    183c:	3e 85       	ldd	r19, Y+14	; 0x0e
    183e:	26 30       	cpi	r18, 0x06	; 6
    1840:	31 05       	cpc	r19, r1
    1842:	5c f4       	brge	.+22     	; 0x185a <__stack+0x75b>
    1844:	2d 85       	ldd	r18, Y+13	; 0x0d
    1846:	3e 85       	ldd	r19, Y+14	; 0x0e
    1848:	2f 5f       	subi	r18, 0xFF	; 255
    184a:	3f 4f       	sbci	r19, 0xFF	; 255
    184c:	3e 87       	std	Y+14, r19	; 0x0e
    184e:	2d 87       	std	Y+13, r18	; 0x0d
    1850:	2d 85       	ldd	r18, Y+13	; 0x0d
    1852:	3e 85       	ldd	r19, Y+14	; 0x0e
    1854:	26 30       	cpi	r18, 0x06	; 6
    1856:	31 05       	cpc	r19, r1
    1858:	ac f3       	brlt	.-22     	; 0x1844 <__stack+0x745>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    185a:	2f 85       	ldd	r18, Y+15	; 0x0f
    185c:	38 89       	ldd	r19, Y+16	; 0x10
    185e:	2f 5f       	subi	r18, 0xFF	; 255
    1860:	3f 4f       	sbci	r19, 0xFF	; 255
    1862:	38 8b       	std	Y+16, r19	; 0x10
    1864:	2f 87       	std	Y+15, r18	; 0x0f
    1866:	2f 85       	ldd	r18, Y+15	; 0x0f
    1868:	38 89       	ldd	r19, Y+16	; 0x10
    186a:	12 16       	cp	r1, r18
    186c:	13 06       	cpc	r1, r19
    186e:	1c f7       	brge	.-58     	; 0x1836 <__stack+0x737>
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
    1870:	22 e0       	ldi	r18, 0x02	; 2
    1872:	2b bb       	out	0x1b, r18	; 27
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1874:	1c 86       	std	Y+12, r1	; 0x0c
    1876:	1b 86       	std	Y+11, r1	; 0x0b
    1878:	2b 85       	ldd	r18, Y+11	; 0x0b
    187a:	3c 85       	ldd	r19, Y+12	; 0x0c
    187c:	12 16       	cp	r1, r18
    187e:	13 06       	cpc	r1, r19
    1880:	ec f0       	brlt	.+58     	; 0x18bc <__stack+0x7bd>
				for(volatile int j = 0; j < 6; j++) ;
    1882:	1a 86       	std	Y+10, r1	; 0x0a
    1884:	19 86       	std	Y+9, r1	; 0x09
    1886:	29 85       	ldd	r18, Y+9	; 0x09
    1888:	3a 85       	ldd	r19, Y+10	; 0x0a
    188a:	26 30       	cpi	r18, 0x06	; 6
    188c:	31 05       	cpc	r19, r1
    188e:	5c f4       	brge	.+22     	; 0x18a6 <__stack+0x7a7>
    1890:	29 85       	ldd	r18, Y+9	; 0x09
    1892:	3a 85       	ldd	r19, Y+10	; 0x0a
    1894:	2f 5f       	subi	r18, 0xFF	; 255
    1896:	3f 4f       	sbci	r19, 0xFF	; 255
    1898:	3a 87       	std	Y+10, r19	; 0x0a
    189a:	29 87       	std	Y+9, r18	; 0x09
    189c:	29 85       	ldd	r18, Y+9	; 0x09
    189e:	3a 85       	ldd	r19, Y+10	; 0x0a
    18a0:	26 30       	cpi	r18, 0x06	; 6
    18a2:	31 05       	cpc	r19, r1
    18a4:	ac f3       	brlt	.-22     	; 0x1890 <__stack+0x791>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    18a6:	2b 85       	ldd	r18, Y+11	; 0x0b
    18a8:	3c 85       	ldd	r19, Y+12	; 0x0c
    18aa:	2f 5f       	subi	r18, 0xFF	; 255
    18ac:	3f 4f       	sbci	r19, 0xFF	; 255
    18ae:	3c 87       	std	Y+12, r19	; 0x0c
    18b0:	2b 87       	std	Y+11, r18	; 0x0b
    18b2:	2b 85       	ldd	r18, Y+11	; 0x0b
    18b4:	3c 85       	ldd	r19, Y+12	; 0x0c
    18b6:	12 16       	cp	r1, r18
    18b8:	13 06       	cpc	r1, r19
    18ba:	1c f7       	brge	.-58     	; 0x1882 <__stack+0x783>
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
			iotmCharLcdEnOff; iotTimer::delay(1);
    18bc:	fc 01       	movw	r30, r24
    18be:	e0 5d       	subi	r30, 0xD0	; 208
    18c0:	fe 4f       	sbci	r31, 0xFE	; 254
    18c2:	80 81       	ld	r24, Z
    18c4:	8f 70       	andi	r24, 0x0F	; 15
    18c6:	80 83       	st	Z, r24
    18c8:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    18cc:	18 86       	std	Y+8, r1	; 0x08
    18ce:	1f 82       	std	Y+7, r1	; 0x07
    18d0:	8f 81       	ldd	r24, Y+7	; 0x07
    18d2:	98 85       	ldd	r25, Y+8	; 0x08
    18d4:	18 16       	cp	r1, r24
    18d6:	19 06       	cpc	r1, r25
    18d8:	cc f0       	brlt	.+50     	; 0x190c <__stack+0x80d>
				for(volatile int j = 0; j < 6; j++) ;
    18da:	1e 82       	std	Y+6, r1	; 0x06
    18dc:	1d 82       	std	Y+5, r1	; 0x05
    18de:	8d 81       	ldd	r24, Y+5	; 0x05
    18e0:	9e 81       	ldd	r25, Y+6	; 0x06
    18e2:	06 97       	sbiw	r24, 0x06	; 6
    18e4:	4c f4       	brge	.+18     	; 0x18f8 <__stack+0x7f9>
    18e6:	8d 81       	ldd	r24, Y+5	; 0x05
    18e8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ea:	01 96       	adiw	r24, 0x01	; 1
    18ec:	9e 83       	std	Y+6, r25	; 0x06
    18ee:	8d 83       	std	Y+5, r24	; 0x05
    18f0:	8d 81       	ldd	r24, Y+5	; 0x05
    18f2:	9e 81       	ldd	r25, Y+6	; 0x06
    18f4:	06 97       	sbiw	r24, 0x06	; 6
    18f6:	bc f3       	brlt	.-18     	; 0x18e6 <__stack+0x7e7>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    18f8:	8f 81       	ldd	r24, Y+7	; 0x07
    18fa:	98 85       	ldd	r25, Y+8	; 0x08
    18fc:	01 96       	adiw	r24, 0x01	; 1
    18fe:	98 87       	std	Y+8, r25	; 0x08
    1900:	8f 83       	std	Y+7, r24	; 0x07
    1902:	8f 81       	ldd	r24, Y+7	; 0x07
    1904:	98 85       	ldd	r25, Y+8	; 0x08
    1906:	18 16       	cp	r1, r24
    1908:	19 06       	cpc	r1, r25
    190a:	3c f7       	brge	.-50     	; 0x18da <__stack+0x7db>
    190c:	1c 82       	std	Y+4, r1	; 0x04
    190e:	1b 82       	std	Y+3, r1	; 0x03
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	9c 81       	ldd	r25, Y+4	; 0x04
    1914:	84 36       	cpi	r24, 0x64	; 100
    1916:	91 05       	cpc	r25, r1
    1918:	cc f4       	brge	.+50     	; 0x194c <__stack+0x84d>
				for(volatile int j = 0; j < 6; j++) ;
    191a:	1a 82       	std	Y+2, r1	; 0x02
    191c:	19 82       	std	Y+1, r1	; 0x01
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	9a 81       	ldd	r25, Y+2	; 0x02
    1922:	06 97       	sbiw	r24, 0x06	; 6
    1924:	4c f4       	brge	.+18     	; 0x1938 <__stack+0x839>
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	9a 81       	ldd	r25, Y+2	; 0x02
    192a:	01 96       	adiw	r24, 0x01	; 1
    192c:	9a 83       	std	Y+2, r25	; 0x02
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	9a 81       	ldd	r25, Y+2	; 0x02
    1934:	06 97       	sbiw	r24, 0x06	; 6
    1936:	bc f3       	brlt	.-18     	; 0x1926 <__stack+0x827>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	9c 81       	ldd	r25, Y+4	; 0x04
    193c:	01 96       	adiw	r24, 0x01	; 1
    193e:	9c 83       	std	Y+4, r25	; 0x04
    1940:	8b 83       	std	Y+3, r24	; 0x03
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	9c 81       	ldd	r25, Y+4	; 0x04
    1946:	84 36       	cpi	r24, 0x64	; 100
    1948:	91 05       	cpc	r25, r1
    194a:	3c f3       	brlt	.-50     	; 0x191a <__stack+0x81b>
			writeControl(0x06);	// increment address for the next data.
			writeControl(0x01);	// cursor clear.
			iotTimer::delay(100);
			writeControl(0x02);	// cursor home.
			iotTimer::delay(100);
		}
    194c:	c0 58       	subi	r28, 0x80	; 128
    194e:	df 4f       	sbci	r29, 0xFF	; 255
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	08 95       	ret

00001960 <_ZN10iotCharLcd5printEhhPKc>:
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
    1960:	9f 92       	push	r9
    1962:	af 92       	push	r10
    1964:	bf 92       	push	r11
    1966:	cf 92       	push	r12
    1968:	df 92       	push	r13
    196a:	ef 92       	push	r14
    196c:	ff 92       	push	r15
    196e:	0f 93       	push	r16
    1970:	1f 93       	push	r17
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	7c 01       	movw	r14, r24
    1978:	a6 2e       	mov	r10, r22
    197a:	e9 01       	movw	r28, r18
			while(*s) print(y, x++, *s++);
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    197c:	fc 01       	movw	r30, r24
    197e:	e4 5d       	subi	r30, 0xD4	; 212
    1980:	fe 4f       	sbci	r31, 0xFE	; 254
    1982:	6c 01       	movw	r12, r24
    1984:	83 ed       	ldi	r24, 0xD3	; 211
    1986:	c8 1a       	sub	r12, r24
    1988:	8e ef       	ldi	r24, 0xFE	; 254
    198a:	d8 0a       	sbc	r13, r24
    198c:	04 e6       	ldi	r16, 0x64	; 100
    198e:	10 e0       	ldi	r17, 0x00	; 0
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    1990:	29 c0       	rjmp	.+82     	; 0x19e4 <_ZN10iotCharLcd5printEhhPKc+0x84>
    1992:	99 24       	eor	r9, r9
    1994:	93 94       	inc	r9
    1996:	94 0e       	add	r9, r20
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    1998:	80 81       	ld	r24, Z
    199a:	d6 01       	movw	r26, r12
    199c:	2c 91       	ld	r18, X
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	01 96       	adiw	r24, 0x01	; 1
    19a2:	b8 01       	movw	r22, r16
    19a4:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <__divmodhi4>
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	82 17       	cp	r24, r18
    19ac:	93 07       	cpc	r25, r19
    19ae:	c9 f0       	breq	.+50     	; 0x19e2 <_ZN10iotCharLcd5printEhhPKc+0x82>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    19b0:	a0 81       	ld	r26, Z
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	cd 01       	movw	r24, r26
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	a8 0f       	add	r26, r24
    19bc:	b9 1f       	adc	r27, r25
    19be:	ae 0d       	add	r26, r14
    19c0:	bf 1d       	adc	r27, r15
			out->x = x; out->y = y; out->c = c;
    19c2:	4c 93       	st	X, r20
    19c4:	11 96       	adiw	r26, 0x01	; 1
    19c6:	ac 92       	st	X, r10
    19c8:	11 97       	sbiw	r26, 0x01	; 1
    19ca:	12 96       	adiw	r26, 0x02	; 2
    19cc:	bc 92       	st	X, r11

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    19ce:	2f b7       	in	r18, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	80 81       	ld	r24, Z
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	01 96       	adiw	r24, 0x01	; 1
    19d8:	b8 01       	movw	r22, r16
    19da:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <__divmodhi4>
    19de:	80 83       	st	Z, r24
    19e0:	2f bf       	out	0x3f, r18	; 63
			iotTimer::delay(100);
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
    19e2:	49 2d       	mov	r20, r9
			while(*s) print(y, x++, *s++);
    19e4:	b9 90       	ld	r11, Y+
    19e6:	b1 10       	cpse	r11, r1
    19e8:	d4 cf       	rjmp	.-88     	; 0x1992 <_ZN10iotCharLcd5printEhhPKc+0x32>
		}
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	1f 91       	pop	r17
    19f0:	0f 91       	pop	r16
    19f2:	ff 90       	pop	r15
    19f4:	ef 90       	pop	r14
    19f6:	df 90       	pop	r13
    19f8:	cf 90       	pop	r12
    19fa:	bf 90       	pop	r11
    19fc:	af 90       	pop	r10
    19fe:	9f 90       	pop	r9
    1a00:	08 95       	ret

00001a02 <_ZN8iotServo4initEN6iotPin8iotPinIdE>:
				*ipPort = iPinMask;
				in10kCycles = 0;
			}
		}
		static void
		init(iotPin::iotPinId pin) {
    1a02:	cf 93       	push	r28
    1a04:	c8 2f       	mov	r28, r24
			ipPort = iotPin::getpPort(pin);
    1a06:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_ZN6iotPin8getpPortENS_8iotPinIdE>
    1a0a:	90 93 ea 04 	sts	0x04EA, r25
    1a0e:	80 93 e9 04 	sts	0x04E9, r24
		}
		static inline bool		isValid(iotPinId id) {
			return (id >= 0 && id < iotcNumPins);
		}
		static inline uint8_t	getPinMask(iotPinId pin) {
			return 1 << (pin % iotcNumPinsPerPorts);		//iotcNumPinsPerPorts = 8;0~7
    1a12:	8c 2f       	mov	r24, r28
    1a14:	87 70       	andi	r24, 0x07	; 7
    1a16:	21 e0       	ldi	r18, 0x01	; 1
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <_ZN8iotServo4initEN6iotPin8iotPinIdE+0x1e>
    1a1c:	22 0f       	add	r18, r18
    1a1e:	33 1f       	adc	r19, r19
    1a20:	8a 95       	dec	r24
    1a22:	e2 f7       	brpl	.-8      	; 0x1a1c <_ZN8iotServo4initEN6iotPin8iotPinIdE+0x1a>
    1a24:	20 93 e8 04 	sts	0x04E8, r18
		}
		static void
		init(iotPin::iotPinId pin) {
			ipPort = iotPin::getpPort(pin);
			iPinMask = iotPin::getPinMask(pin);
			*iotPin::getpDDR(pin) |= iPinMask;
    1a28:	8c 2f       	mov	r24, r28
    1a2a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_ZN6iotPin7getpDDRENS_8iotPinIdE>
    1a2e:	fc 01       	movw	r30, r24
    1a30:	30 81       	ld	r19, Z
    1a32:	20 91 e8 04 	lds	r18, 0x04E8
    1a36:	23 2b       	or	r18, r19
    1a38:	20 83       	st	Z, r18

			iTimer
				= new iotTimer(iotTimer::iotcTimer0, iotTimer::iotcPsd64, 25);
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Znwj>
		typedef enum {		// 32 & 128 only for 8-bit counters 0 & 2.
			iotcPsdNo, iotcPsd1, iotcPsd8, iotcPsd32, iotcPsd64, iotcPsd128,
			iotcPsd256, iotcPsd1024
		} iotTimerPsd;
		iotTimer(iotTimerId aId, iotTimerPsd aPsd, unsigned int aCount) {
			iId = iotcTimerNone;
    1a42:	fc 01       	movw	r30, r24
    1a44:	10 82       	st	Z, r1
					default: return;
				}
			}
			switch(aId) {
				case iotcTimer0:
					if((TCCR0 & 0x07) != 0) return;
    1a46:	23 b7       	in	r18, 0x33	; 51
    1a48:	27 70       	andi	r18, 0x07	; 7
    1a4a:	49 f4       	brne	.+18     	; 0x1a5e <_ZN8iotServo4initEN6iotPin8iotPinIdE+0x5c>
					TCNT0 = 0; OCR0 = aCount & 0xff; 
    1a4c:	12 be       	out	0x32, r1	; 50
    1a4e:	29 e1       	ldi	r18, 0x19	; 25
    1a50:	21 bf       	out	0x31, r18	; 49
					TCCR0 = (TCCR0 & ~(0x07)) | (1 << WGM01) | psd;
    1a52:	23 b7       	in	r18, 0x33	; 51
    1a54:	20 7f       	andi	r18, 0xF0	; 240
    1a56:	2c 60       	ori	r18, 0x0C	; 12
    1a58:	23 bf       	out	0x33, r18	; 51
					TCNT3 = 0; OCR3A = aCount; TCCR3A = 0;
					TCCR3B = (TCCR3B & ~(0x07)) | (1 << WGM32) | psd;
					break;
				default: return;
			}
			iId = aId;
    1a5a:	21 e0       	ldi	r18, 0x01	; 1
    1a5c:	20 83       	st	Z, r18
			ipPort = iotPin::getpPort(pin);
			iPinMask = iotPin::getPinMask(pin);
			*iotPin::getpDDR(pin) |= iPinMask;

			iTimer
				= new iotTimer(iotTimer::iotcTimer0, iotTimer::iotcPsd64, 25);
    1a5e:	90 93 ee 04 	sts	0x04EE, r25
    1a62:	80 93 ed 04 	sts	0x04ED, r24
			in10kCycles = 0;
    1a66:	10 92 ec 04 	sts	0x04EC, r1
    1a6a:	10 92 eb 04 	sts	0x04EB, r1
			*ipPort |= iPinMask;
    1a6e:	e0 91 e9 04 	lds	r30, 0x04E9
    1a72:	f0 91 ea 04 	lds	r31, 0x04EA
    1a76:	90 81       	ld	r25, Z
    1a78:	80 91 e8 04 	lds	r24, 0x04E8
    1a7c:	89 2b       	or	r24, r25
    1a7e:	80 83       	st	Z, r24
				default: return;
			}
		}
		void
		enableInterrupt(void (* aCallback) (void)) {
			switch(iId) {
    1a80:	e0 91 ed 04 	lds	r30, 0x04ED
    1a84:	f0 91 ee 04 	lds	r31, 0x04EE
    1a88:	80 81       	ld	r24, Z
    1a8a:	82 30       	cpi	r24, 0x02	; 2
    1a8c:	99 f0       	breq	.+38     	; 0x1ab4 <_ZN8iotServo4initEN6iotPin8iotPinIdE+0xb2>
    1a8e:	18 f4       	brcc	.+6      	; 0x1a96 <_ZN8iotServo4initEN6iotPin8iotPinIdE+0x94>
    1a90:	81 30       	cpi	r24, 0x01	; 1
    1a92:	31 f0       	breq	.+12     	; 0x1aa0 <_ZN8iotServo4initEN6iotPin8iotPinIdE+0x9e>
    1a94:	2e c0       	rjmp	.+92     	; 0x1af2 <_ZN8iotServo4initEN6iotPin8iotPinIdE+0xf0>
    1a96:	83 30       	cpi	r24, 0x03	; 3
    1a98:	b9 f0       	breq	.+46     	; 0x1ac8 <_ZN8iotServo4initEN6iotPin8iotPinIdE+0xc6>
    1a9a:	84 30       	cpi	r24, 0x04	; 4
    1a9c:	f9 f0       	breq	.+62     	; 0x1adc <_ZN8iotServo4initEN6iotPin8iotPinIdE+0xda>
    1a9e:	29 c0       	rjmp	.+82     	; 0x1af2 <_ZN8iotServo4initEN6iotPin8iotPinIdE+0xf0>
				case iotcTimer0:
					iCallback0 = aCallback; TIMSK |= (1 << OCIE0); break;
    1aa0:	83 e6       	ldi	r24, 0x63	; 99
    1aa2:	94 e0       	ldi	r25, 0x04	; 4
    1aa4:	90 93 e6 06 	sts	0x06E6, r25
    1aa8:	80 93 e5 06 	sts	0x06E5, r24
    1aac:	87 b7       	in	r24, 0x37	; 55
    1aae:	82 60       	ori	r24, 0x02	; 2
    1ab0:	87 bf       	out	0x37, r24	; 55
    1ab2:	1f c0       	rjmp	.+62     	; 0x1af2 <_ZN8iotServo4initEN6iotPin8iotPinIdE+0xf0>
				case iotcTimer1:
					iCallback1 = aCallback; TIMSK |= (1 << OCIE1A); break;
    1ab4:	83 e6       	ldi	r24, 0x63	; 99
    1ab6:	94 e0       	ldi	r25, 0x04	; 4
    1ab8:	90 93 e4 06 	sts	0x06E4, r25
    1abc:	80 93 e3 06 	sts	0x06E3, r24
    1ac0:	87 b7       	in	r24, 0x37	; 55
    1ac2:	80 61       	ori	r24, 0x10	; 16
    1ac4:	87 bf       	out	0x37, r24	; 55
    1ac6:	15 c0       	rjmp	.+42     	; 0x1af2 <_ZN8iotServo4initEN6iotPin8iotPinIdE+0xf0>
				case iotcTimer2:
					iCallback2 = aCallback; TIMSK |= (1 << OCIE2); break;
    1ac8:	83 e6       	ldi	r24, 0x63	; 99
    1aca:	94 e0       	ldi	r25, 0x04	; 4
    1acc:	90 93 e2 06 	sts	0x06E2, r25
    1ad0:	80 93 e1 06 	sts	0x06E1, r24
    1ad4:	87 b7       	in	r24, 0x37	; 55
    1ad6:	80 68       	ori	r24, 0x80	; 128
    1ad8:	87 bf       	out	0x37, r24	; 55
    1ada:	0b c0       	rjmp	.+22     	; 0x1af2 <_ZN8iotServo4initEN6iotPin8iotPinIdE+0xf0>
				case iotcTimer3:
					iCallback3 = aCallback; ETIMSK |= (1 << OCIE3A); break;
    1adc:	83 e6       	ldi	r24, 0x63	; 99
    1ade:	94 e0       	ldi	r25, 0x04	; 4
    1ae0:	90 93 e0 06 	sts	0x06E0, r25
    1ae4:	80 93 df 06 	sts	0x06DF, r24
    1ae8:	ed e7       	ldi	r30, 0x7D	; 125
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	80 61       	ori	r24, 0x10	; 16
    1af0:	80 83       	st	Z, r24
			iTimer
				= new iotTimer(iotTimer::iotcTimer0, iotTimer::iotcPsd64, 25);
			in10kCycles = 0;
			*ipPort |= iPinMask;
			iTimer->enableInterrupt(tick10kHz);
		}
    1af2:	cf 91       	pop	r28
    1af4:	08 95       	ret

00001af6 <_ZN8iotClock7destroyEv>:
			for(iotSchedule *s = iSchedule;
				s < iSchedule + iotcMaxSchedules; s++) s->iTime = 0;
		}
		static void
		destroy() {
			delete iTimer;
    1af6:	80 91 e6 04 	lds	r24, 0x04E6
    1afa:	90 91 e7 04 	lds	r25, 0x04E7
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	09 f4       	brne	.+2      	; 0x1b04 <_ZN8iotClock7destroyEv+0xe>
    1b02:	40 c0       	rjmp	.+128    	; 0x1b84 <_ZN8iotClock7destroyEv+0x8e>
			}
			iId = aId;
//			printf("Timer%d created.\n\r", iId - 1);
		}
		~iotTimer() {
			switch(iId) {
    1b04:	fc 01       	movw	r30, r24
    1b06:	20 81       	ld	r18, Z
    1b08:	22 30       	cpi	r18, 0x02	; 2
    1b0a:	a1 f0       	breq	.+40     	; 0x1b34 <_ZN8iotClock7destroyEv+0x3e>
    1b0c:	18 f4       	brcc	.+6      	; 0x1b14 <_ZN8iotClock7destroyEv+0x1e>
    1b0e:	21 30       	cpi	r18, 0x01	; 1
    1b10:	31 f0       	breq	.+12     	; 0x1b1e <_ZN8iotClock7destroyEv+0x28>
    1b12:	34 c0       	rjmp	.+104    	; 0x1b7c <_ZN8iotClock7destroyEv+0x86>
    1b14:	23 30       	cpi	r18, 0x03	; 3
    1b16:	c9 f0       	breq	.+50     	; 0x1b4a <_ZN8iotClock7destroyEv+0x54>
    1b18:	24 30       	cpi	r18, 0x04	; 4
    1b1a:	11 f1       	breq	.+68     	; 0x1b60 <_ZN8iotClock7destroyEv+0x6a>
    1b1c:	2f c0       	rjmp	.+94     	; 0x1b7c <_ZN8iotClock7destroyEv+0x86>
				case iotcTimer0: TCCR0 &= ~0x07; TIMSK &= ~(1 << OCIE0);
    1b1e:	23 b7       	in	r18, 0x33	; 51
    1b20:	28 7f       	andi	r18, 0xF8	; 248
    1b22:	23 bf       	out	0x33, r18	; 51
    1b24:	27 b7       	in	r18, 0x37	; 55
    1b26:	2d 7f       	andi	r18, 0xFD	; 253
    1b28:	27 bf       	out	0x37, r18	; 55
					iCallback0 = (void (*)(void)) NULL; break;
    1b2a:	10 92 e6 06 	sts	0x06E6, r1
    1b2e:	10 92 e5 06 	sts	0x06E5, r1
    1b32:	24 c0       	rjmp	.+72     	; 0x1b7c <_ZN8iotClock7destroyEv+0x86>
				case iotcTimer1: TCCR1B &= ~0x07; TIMSK &= ~(1 << OCIE1A);
    1b34:	2e b5       	in	r18, 0x2e	; 46
    1b36:	28 7f       	andi	r18, 0xF8	; 248
    1b38:	2e bd       	out	0x2e, r18	; 46
    1b3a:	27 b7       	in	r18, 0x37	; 55
    1b3c:	2f 7e       	andi	r18, 0xEF	; 239
    1b3e:	27 bf       	out	0x37, r18	; 55
					iCallback1 = (void (*)(void)) NULL; break;
    1b40:	10 92 e4 06 	sts	0x06E4, r1
    1b44:	10 92 e3 06 	sts	0x06E3, r1
    1b48:	19 c0       	rjmp	.+50     	; 0x1b7c <_ZN8iotClock7destroyEv+0x86>
				case iotcTimer2: TCCR2 &= ~0x07; TIMSK &= ~(1 << OCIE2);
    1b4a:	25 b5       	in	r18, 0x25	; 37
    1b4c:	28 7f       	andi	r18, 0xF8	; 248
    1b4e:	25 bd       	out	0x25, r18	; 37
    1b50:	27 b7       	in	r18, 0x37	; 55
    1b52:	2f 77       	andi	r18, 0x7F	; 127
    1b54:	27 bf       	out	0x37, r18	; 55
					iCallback2 = (void (*)(void)) NULL; break;
    1b56:	10 92 e2 06 	sts	0x06E2, r1
    1b5a:	10 92 e1 06 	sts	0x06E1, r1
    1b5e:	0e c0       	rjmp	.+28     	; 0x1b7c <_ZN8iotClock7destroyEv+0x86>
				case iotcTimer3: TCCR3B &= ~0x07; ETIMSK &= ~(1 << OCIE3A);
    1b60:	ea e8       	ldi	r30, 0x8A	; 138
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	20 81       	ld	r18, Z
    1b66:	28 7f       	andi	r18, 0xF8	; 248
    1b68:	20 83       	st	Z, r18
    1b6a:	ed e7       	ldi	r30, 0x7D	; 125
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	20 81       	ld	r18, Z
    1b70:	2f 7e       	andi	r18, 0xEF	; 239
    1b72:	20 83       	st	Z, r18
					iCallback3 = (void (*)(void)) NULL; break;
    1b74:	10 92 e0 06 	sts	0x06E0, r1
    1b78:	10 92 df 06 	sts	0x06DF, r1
				default: break;
			}
			iId = iotcTimerNone;
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	10 82       	st	Z, r1
			for(iotSchedule *s = iSchedule;
				s < iSchedule + iotcMaxSchedules; s++) s->iTime = 0;
		}
		static void
		destroy() {
			delete iTimer;
    1b80:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_ZdlPv>
			if(iCharLcdCreated) delete iCharLcd;
    1b84:	80 91 de 04 	lds	r24, 0x04DE
    1b88:	88 23       	and	r24, r24
    1b8a:	41 f0       	breq	.+16     	; 0x1b9c <_ZN8iotClock7destroyEv+0xa6>
    1b8c:	80 91 e0 04 	lds	r24, 0x04E0
    1b90:	90 91 e1 04 	lds	r25, 0x04E1
    1b94:	00 97       	sbiw	r24, 0x00	; 0
    1b96:	11 f0       	breq	.+4      	; 0x1b9c <_ZN8iotClock7destroyEv+0xa6>
    1b98:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_ZdlPv>
			iTimer = (iotTimer *) NULL;
    1b9c:	10 92 e7 04 	sts	0x04E7, r1
    1ba0:	10 92 e6 04 	sts	0x04E6, r1
			iCharLcd = (iotCharLcd *) NULL;
    1ba4:	10 92 e1 04 	sts	0x04E1, r1
    1ba8:	10 92 e0 04 	sts	0x04E0, r1
    1bac:	08 95       	ret

00001bae <_ZN8iotClock9parseLineEPc>:
				*ps = s;
			}
			return secs;
		}
		static bool
		parseLine(char *s) {
    1bae:	5f 92       	push	r5
    1bb0:	6f 92       	push	r6
    1bb2:	7f 92       	push	r7
    1bb4:	8f 92       	push	r8
    1bb6:	9f 92       	push	r9
    1bb8:	af 92       	push	r10
    1bba:	bf 92       	push	r11
    1bbc:	cf 92       	push	r12
    1bbe:	df 92       	push	r13
    1bc0:	ef 92       	push	r14
    1bc2:	ff 92       	push	r15
    1bc4:	0f 93       	push	r16
    1bc6:	1f 93       	push	r17
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	ec 01       	movw	r28, r24
			long	secs;
			if(strncmp(s, "time", 4) == 0) {
    1bce:	44 e0       	ldi	r20, 0x04	; 4
    1bd0:	50 e0       	ldi	r21, 0x00	; 0
    1bd2:	6c e8       	ldi	r22, 0x8C	; 140
    1bd4:	71 e0       	ldi	r23, 0x01	; 1
    1bd6:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <strncmp>
    1bda:	89 2b       	or	r24, r25
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <_ZN8iotClock9parseLineEPc+0x32>
    1bde:	95 c1       	rjmp	.+810    	; 0x1f0a <_ZN8iotClock9parseLineEPc+0x35c>
				s += 4; while(isspace(*s)) s++;
    1be0:	24 96       	adiw	r28, 0x04	; 4
    1be2:	8e 01       	movw	r16, r28
    1be4:	d9 90       	ld	r13, Y+
    1be6:	ed 2c       	mov	r14, r13
    1be8:	f1 2c       	mov	r15, r1
    1bea:	c7 01       	movw	r24, r14
    1bec:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <isspace>
    1bf0:	89 2b       	or	r24, r25
    1bf2:	b9 f7       	brne	.-18     	; 0x1be2 <_ZN8iotClock9parseLineEPc+0x34>
    1bf4:	e8 01       	movw	r28, r16
		toSeconds(char **ps) {
			long	secs;
			char	*s;

			s = *ps;
			if(isalpha(*s)) {
    1bf6:	c7 01       	movw	r24, r14
    1bf8:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <isalpha>
    1bfc:	89 2b       	or	r24, r25
    1bfe:	09 f4       	brne	.+2      	; 0x1c02 <_ZN8iotClock9parseLineEPc+0x54>
    1c00:	5e c0       	rjmp	.+188    	; 0x1cbe <_ZN8iotClock9parseLineEPc+0x110>
    1c02:	0f 2e       	mov	r0, r31
    1c04:	f3 e1       	ldi	r31, 0x13	; 19
    1c06:	cf 2e       	mov	r12, r31
    1c08:	f1 e0       	ldi	r31, 0x01	; 1
    1c0a:	df 2e       	mov	r13, r31
    1c0c:	f0 2d       	mov	r31, r0
    1c0e:	0f 2e       	mov	r0, r31
    1c10:	f7 e0       	ldi	r31, 0x07	; 7
    1c12:	af 2e       	mov	r10, r31
    1c14:	f1 e0       	ldi	r31, 0x01	; 1
    1c16:	bf 2e       	mov	r11, r31
    1c18:	f0 2d       	mov	r31, r0
    1c1a:	e1 2c       	mov	r14, r1
    1c1c:	f1 2c       	mov	r15, r1
    1c1e:	00 e0       	ldi	r16, 0x00	; 0
    1c20:	10 e0       	ldi	r17, 0x00	; 0
				int		m, days = 0;
				for(m = 0; m < 12; m++) {
					if(strncasecmp(s, iMonth[m], 3) == 0) break;
    1c22:	d6 01       	movw	r26, r12
    1c24:	6d 91       	ld	r22, X+
    1c26:	7d 91       	ld	r23, X+
    1c28:	6d 01       	movw	r12, r26
    1c2a:	43 e0       	ldi	r20, 0x03	; 3
    1c2c:	50 e0       	ldi	r21, 0x00	; 0
    1c2e:	ce 01       	movw	r24, r28
    1c30:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <strncasecmp>
    1c34:	89 2b       	or	r24, r25
    1c36:	59 f0       	breq	.+22     	; 0x1c4e <_ZN8iotClock9parseLineEPc+0xa0>
					days += iMonthDays[m];
    1c38:	f5 01       	movw	r30, r10
    1c3a:	81 91       	ld	r24, Z+
    1c3c:	5f 01       	movw	r10, r30
    1c3e:	e8 0e       	add	r14, r24
    1c40:	f1 1c       	adc	r15, r1
			char	*s;

			s = *ps;
			if(isalpha(*s)) {
				int		m, days = 0;
				for(m = 0; m < 12; m++) {
    1c42:	0f 5f       	subi	r16, 0xFF	; 255
    1c44:	1f 4f       	sbci	r17, 0xFF	; 255
    1c46:	0c 30       	cpi	r16, 0x0C	; 12
    1c48:	11 05       	cpc	r17, r1
    1c4a:	59 f7       	brne	.-42     	; 0x1c22 <_ZN8iotClock9parseLineEPc+0x74>
    1c4c:	44 c1       	rjmp	.+648    	; 0x1ed6 <_ZN8iotClock9parseLineEPc+0x328>
					if(strncasecmp(s, iMonth[m], 3) == 0) break;
					days += iMonthDays[m];
				}
				if((m == 12) || s[3] != '-' || !isdigit(s[4]) || !isdigit(s[5]))
    1c4e:	0c 30       	cpi	r16, 0x0C	; 12
    1c50:	11 05       	cpc	r17, r1
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <_ZN8iotClock9parseLineEPc+0xa8>
    1c54:	40 c1       	rjmp	.+640    	; 0x1ed6 <_ZN8iotClock9parseLineEPc+0x328>
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	8d 32       	cpi	r24, 0x2D	; 45
    1c5a:	09 f0       	breq	.+2      	; 0x1c5e <_ZN8iotClock9parseLineEPc+0xb0>
    1c5c:	3c c1       	rjmp	.+632    	; 0x1ed6 <_ZN8iotClock9parseLineEPc+0x328>
    1c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	20 53       	subi	r18, 0x30	; 48
    1c66:	31 09       	sbc	r19, r1
    1c68:	2a 30       	cpi	r18, 0x0A	; 10
    1c6a:	31 05       	cpc	r19, r1
    1c6c:	08 f0       	brcs	.+2      	; 0x1c70 <_ZN8iotClock9parseLineEPc+0xc2>
    1c6e:	33 c1       	rjmp	.+614    	; 0x1ed6 <_ZN8iotClock9parseLineEPc+0x328>
    1c70:	4d 81       	ldd	r20, Y+5	; 0x05
    1c72:	24 2f       	mov	r18, r20
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	20 53       	subi	r18, 0x30	; 48
    1c78:	31 09       	sbc	r19, r1
    1c7a:	2a 30       	cpi	r18, 0x0A	; 10
    1c7c:	31 05       	cpc	r19, r1
    1c7e:	08 f0       	brcs	.+2      	; 0x1c82 <_ZN8iotClock9parseLineEPc+0xd4>
    1c80:	2a c1       	rjmp	.+596    	; 0x1ed6 <_ZN8iotClock9parseLineEPc+0x328>
					return -1;
				secs = 86400L * (days + 10 * (s[4] - '0') + s[5] - '0' - 1);
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	c0 97       	sbiw	r24, 0x30	; 48
    1c86:	dc 01       	movw	r26, r24
    1c88:	aa 0f       	add	r26, r26
    1c8a:	bb 1f       	adc	r27, r27
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	88 0f       	add	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	88 0f       	add	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	a8 0f       	add	r26, r24
    1c9a:	b9 1f       	adc	r27, r25
    1c9c:	ae 0d       	add	r26, r14
    1c9e:	bf 1d       	adc	r27, r15
    1ca0:	a4 0f       	add	r26, r20
    1ca2:	b1 1d       	adc	r27, r1
    1ca4:	d1 97       	sbiw	r26, 0x31	; 49
    1ca6:	20 e8       	ldi	r18, 0x80	; 128
    1ca8:	31 e5       	ldi	r19, 0x51	; 81
    1caa:	41 e0       	ldi	r20, 0x01	; 1
    1cac:	50 e0       	ldi	r21, 0x00	; 0
    1cae:	0e 94 0b 2c 	call	0x5816	; 0x5816 <__mulshisi3>
    1cb2:	6b 01       	movw	r12, r22
    1cb4:	7c 01       	movw	r14, r24
				s += 7;
    1cb6:	8e 01       	movw	r16, r28
    1cb8:	09 5f       	subi	r16, 0xF9	; 249
    1cba:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbc:	2b c0       	rjmp	.+86     	; 0x1d14 <_ZN8iotClock9parseLineEPc+0x166>
			} else if(*s == '+') {
    1cbe:	fb e2       	ldi	r31, 0x2B	; 43
    1cc0:	df 12       	cpse	r13, r31
    1cc2:	0b c0       	rjmp	.+22     	; 0x1cda <_ZN8iotClock9parseLineEPc+0x12c>
				secs = iSeconds; s++;
    1cc4:	c0 90 e2 04 	lds	r12, 0x04E2
    1cc8:	d0 90 e3 04 	lds	r13, 0x04E3
    1ccc:	e0 90 e4 04 	lds	r14, 0x04E4
    1cd0:	f0 90 e5 04 	lds	r15, 0x04E5
    1cd4:	0f 5f       	subi	r16, 0xFF	; 255
    1cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd8:	1d c0       	rjmp	.+58     	; 0x1d14 <_ZN8iotClock9parseLineEPc+0x166>
			} else if(*s == '-') {
    1cda:	2d e2       	ldi	r18, 0x2D	; 45
    1cdc:	d2 12       	cpse	r13, r18
    1cde:	17 c0       	rjmp	.+46     	; 0x1d0e <_ZN8iotClock9parseLineEPc+0x160>
				secs = iSeconds - iSeconds % 86400L; s++;
    1ce0:	c0 90 e2 04 	lds	r12, 0x04E2
    1ce4:	d0 90 e3 04 	lds	r13, 0x04E3
    1ce8:	e0 90 e4 04 	lds	r14, 0x04E4
    1cec:	f0 90 e5 04 	lds	r15, 0x04E5
    1cf0:	c7 01       	movw	r24, r14
    1cf2:	b6 01       	movw	r22, r12
    1cf4:	20 e8       	ldi	r18, 0x80	; 128
    1cf6:	31 e5       	ldi	r19, 0x51	; 81
    1cf8:	41 e0       	ldi	r20, 0x01	; 1
    1cfa:	50 e0       	ldi	r21, 0x00	; 0
    1cfc:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <__divmodsi4>
    1d00:	c6 1a       	sub	r12, r22
    1d02:	d7 0a       	sbc	r13, r23
    1d04:	e8 0a       	sbc	r14, r24
    1d06:	f9 0a       	sbc	r15, r25
    1d08:	0f 5f       	subi	r16, 0xFF	; 255
    1d0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0c:	03 c0       	rjmp	.+6      	; 0x1d14 <_ZN8iotClock9parseLineEPc+0x166>
			} else secs = 0;
    1d0e:	c1 2c       	mov	r12, r1
    1d10:	d1 2c       	mov	r13, r1
    1d12:	76 01       	movw	r14, r12
			
			if(!isdigit(s[0])) return -1;
    1d14:	d8 01       	movw	r26, r16
    1d16:	2c 91       	ld	r18, X
    1d18:	82 2f       	mov	r24, r18
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	c0 97       	sbiw	r24, 0x30	; 48
    1d1e:	0a 97       	sbiw	r24, 0x0a	; 10
    1d20:	08 f0       	brcs	.+2      	; 0x1d24 <_ZN8iotClock9parseLineEPc+0x176>
    1d22:	d9 c0       	rjmp	.+434    	; 0x1ed6 <_ZN8iotClock9parseLineEPc+0x328>
			if(isdigit(s[1]) && s[2] == ':') {
    1d24:	11 96       	adiw	r26, 0x01	; 1
    1d26:	4c 91       	ld	r20, X
    1d28:	11 97       	sbiw	r26, 0x01	; 1
    1d2a:	84 2f       	mov	r24, r20
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	c0 97       	sbiw	r24, 0x30	; 48
    1d30:	0a 97       	sbiw	r24, 0x0a	; 10
    1d32:	08 f0       	brcs	.+2      	; 0x1d36 <_ZN8iotClock9parseLineEPc+0x188>
    1d34:	9c c0       	rjmp	.+312    	; 0x1e6e <_ZN8iotClock9parseLineEPc+0x2c0>
    1d36:	12 96       	adiw	r26, 0x02	; 2
    1d38:	8c 91       	ld	r24, X
    1d3a:	12 97       	sbiw	r26, 0x02	; 2
    1d3c:	8a 33       	cpi	r24, 0x3A	; 58
    1d3e:	09 f0       	breq	.+2      	; 0x1d42 <_ZN8iotClock9parseLineEPc+0x194>
    1d40:	96 c0       	rjmp	.+300    	; 0x1e6e <_ZN8iotClock9parseLineEPc+0x2c0>
				if( !isdigit(s[3]) || !isdigit(s[4]) || (s[5] != ':') ||
    1d42:	13 96       	adiw	r26, 0x03	; 3
    1d44:	cc 91       	ld	r28, X
    1d46:	13 97       	sbiw	r26, 0x03	; 3
    1d48:	8c 2f       	mov	r24, r28
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	c0 97       	sbiw	r24, 0x30	; 48
    1d4e:	0a 97       	sbiw	r24, 0x0a	; 10
    1d50:	08 f0       	brcs	.+2      	; 0x1d54 <_ZN8iotClock9parseLineEPc+0x1a6>
    1d52:	c1 c0       	rjmp	.+386    	; 0x1ed6 <_ZN8iotClock9parseLineEPc+0x328>
    1d54:	14 96       	adiw	r26, 0x04	; 4
    1d56:	ec 91       	ld	r30, X
    1d58:	14 97       	sbiw	r26, 0x04	; 4
    1d5a:	8e 2f       	mov	r24, r30
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	c0 97       	sbiw	r24, 0x30	; 48
    1d60:	0a 97       	sbiw	r24, 0x0a	; 10
    1d62:	08 f0       	brcs	.+2      	; 0x1d66 <_ZN8iotClock9parseLineEPc+0x1b8>
    1d64:	b8 c0       	rjmp	.+368    	; 0x1ed6 <_ZN8iotClock9parseLineEPc+0x328>
    1d66:	15 96       	adiw	r26, 0x05	; 5
    1d68:	8c 91       	ld	r24, X
    1d6a:	15 97       	sbiw	r26, 0x05	; 5
    1d6c:	8a 33       	cpi	r24, 0x3A	; 58
    1d6e:	09 f0       	breq	.+2      	; 0x1d72 <_ZN8iotClock9parseLineEPc+0x1c4>
    1d70:	b2 c0       	rjmp	.+356    	; 0x1ed6 <_ZN8iotClock9parseLineEPc+0x328>
					!isdigit(s[6]) || !isdigit(s[7]) ) return -1;
    1d72:	16 96       	adiw	r26, 0x06	; 6
    1d74:	fc 91       	ld	r31, X
    1d76:	16 97       	sbiw	r26, 0x06	; 6
    1d78:	8f 2f       	mov	r24, r31
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	c0 97       	sbiw	r24, 0x30	; 48
				secs = iSeconds - iSeconds % 86400L; s++;
			} else secs = 0;
			
			if(!isdigit(s[0])) return -1;
			if(isdigit(s[1]) && s[2] == ':') {
				if( !isdigit(s[3]) || !isdigit(s[4]) || (s[5] != ':') ||
    1d7e:	0a 97       	sbiw	r24, 0x0a	; 10
    1d80:	08 f0       	brcs	.+2      	; 0x1d84 <_ZN8iotClock9parseLineEPc+0x1d6>
    1d82:	a9 c0       	rjmp	.+338    	; 0x1ed6 <_ZN8iotClock9parseLineEPc+0x328>
					!isdigit(s[6]) || !isdigit(s[7]) ) return -1;
    1d84:	17 96       	adiw	r26, 0x07	; 7
    1d86:	dc 91       	ld	r29, X
    1d88:	8d 2f       	mov	r24, r29
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	c0 97       	sbiw	r24, 0x30	; 48
    1d8e:	0a 97       	sbiw	r24, 0x0a	; 10
    1d90:	08 f0       	brcs	.+2      	; 0x1d94 <_ZN8iotClock9parseLineEPc+0x1e6>
    1d92:	a1 c0       	rjmp	.+322    	; 0x1ed6 <_ZN8iotClock9parseLineEPc+0x328>
				secs += 36000L * (s[0] - '0');
    1d94:	a2 2f       	mov	r26, r18
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	d0 97       	sbiw	r26, 0x30	; 48
    1d9a:	20 ea       	ldi	r18, 0xA0	; 160
    1d9c:	3c e8       	ldi	r19, 0x8C	; 140
    1d9e:	0e 94 05 2c 	call	0x580a	; 0x580a <__usmulhisi3>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	8c 0d       	add	r24, r12
    1da8:	9d 1d       	adc	r25, r13
    1daa:	ae 1d       	adc	r26, r14
    1dac:	bf 1d       	adc	r27, r15
				secs += 3600 * (s[1] - '0');
    1dae:	64 2f       	mov	r22, r20
    1db0:	70 e0       	ldi	r23, 0x00	; 0
    1db2:	60 53       	subi	r22, 0x30	; 48
    1db4:	71 09       	sbc	r23, r1
    1db6:	20 e1       	ldi	r18, 0x10	; 16
    1db8:	3e e0       	ldi	r19, 0x0E	; 14
    1dba:	62 9f       	mul	r22, r18
    1dbc:	a0 01       	movw	r20, r0
    1dbe:	63 9f       	mul	r22, r19
    1dc0:	50 0d       	add	r21, r0
    1dc2:	72 9f       	mul	r23, r18
    1dc4:	50 0d       	add	r21, r0
    1dc6:	11 24       	eor	r1, r1
    1dc8:	66 27       	eor	r22, r22
    1dca:	57 fd       	sbrc	r21, 7
    1dcc:	60 95       	com	r22
    1dce:	76 2f       	mov	r23, r22
    1dd0:	84 0f       	add	r24, r20
    1dd2:	95 1f       	adc	r25, r21
    1dd4:	a6 1f       	adc	r26, r22
    1dd6:	b7 1f       	adc	r27, r23
				secs += 600 * (s[3] - '0');
    1dd8:	6c 2f       	mov	r22, r28
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	60 53       	subi	r22, 0x30	; 48
    1dde:	71 09       	sbc	r23, r1
    1de0:	28 e5       	ldi	r18, 0x58	; 88
    1de2:	32 e0       	ldi	r19, 0x02	; 2
    1de4:	62 9f       	mul	r22, r18
    1de6:	a0 01       	movw	r20, r0
    1de8:	63 9f       	mul	r22, r19
    1dea:	50 0d       	add	r21, r0
    1dec:	72 9f       	mul	r23, r18
    1dee:	50 0d       	add	r21, r0
    1df0:	11 24       	eor	r1, r1
    1df2:	66 27       	eor	r22, r22
    1df4:	57 fd       	sbrc	r21, 7
    1df6:	60 95       	com	r22
    1df8:	76 2f       	mov	r23, r22
    1dfa:	84 0f       	add	r24, r20
    1dfc:	95 1f       	adc	r25, r21
    1dfe:	a6 1f       	adc	r26, r22
    1e00:	b7 1f       	adc	r27, r23
				secs += 60 * (s[4] - '0');
    1e02:	2e 2f       	mov	r18, r30
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	20 53       	subi	r18, 0x30	; 48
    1e08:	31 09       	sbc	r19, r1
    1e0a:	6c e3       	ldi	r22, 0x3C	; 60
    1e0c:	62 9f       	mul	r22, r18
    1e0e:	a0 01       	movw	r20, r0
    1e10:	63 9f       	mul	r22, r19
    1e12:	50 0d       	add	r21, r0
    1e14:	11 24       	eor	r1, r1
    1e16:	66 27       	eor	r22, r22
    1e18:	57 fd       	sbrc	r21, 7
    1e1a:	60 95       	com	r22
    1e1c:	76 2f       	mov	r23, r22
    1e1e:	84 0f       	add	r24, r20
    1e20:	95 1f       	adc	r25, r21
    1e22:	a6 1f       	adc	r26, r22
    1e24:	b7 1f       	adc	r27, r23
				secs += 10 * (s[6] - '0');
    1e26:	2f 2f       	mov	r18, r31
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	20 53       	subi	r18, 0x30	; 48
    1e2c:	31 09       	sbc	r19, r1
    1e2e:	a9 01       	movw	r20, r18
    1e30:	44 0f       	add	r20, r20
    1e32:	55 1f       	adc	r21, r21
    1e34:	22 0f       	add	r18, r18
    1e36:	33 1f       	adc	r19, r19
    1e38:	22 0f       	add	r18, r18
    1e3a:	33 1f       	adc	r19, r19
    1e3c:	22 0f       	add	r18, r18
    1e3e:	33 1f       	adc	r19, r19
    1e40:	42 0f       	add	r20, r18
    1e42:	53 1f       	adc	r21, r19
    1e44:	66 27       	eor	r22, r22
    1e46:	57 fd       	sbrc	r21, 7
    1e48:	60 95       	com	r22
    1e4a:	76 2f       	mov	r23, r22
    1e4c:	84 0f       	add	r24, r20
    1e4e:	95 1f       	adc	r25, r21
    1e50:	a6 1f       	adc	r26, r22
    1e52:	b7 1f       	adc	r27, r23
				secs += (s[7] - '0');
    1e54:	4d 2f       	mov	r20, r29
    1e56:	50 e0       	ldi	r21, 0x00	; 0
    1e58:	40 53       	subi	r20, 0x30	; 48
    1e5a:	51 09       	sbc	r21, r1
    1e5c:	66 27       	eor	r22, r22
    1e5e:	57 fd       	sbrc	r21, 7
    1e60:	60 95       	com	r22
    1e62:	76 2f       	mov	r23, r22
    1e64:	84 0f       	add	r24, r20
    1e66:	95 1f       	adc	r25, r21
    1e68:	a6 1f       	adc	r26, r22
    1e6a:	b7 1f       	adc	r27, r23
    1e6c:	2a c0       	rjmp	.+84     	; 0x1ec2 <_ZN8iotClock9parseLineEPc+0x314>
    1e6e:	f8 01       	movw	r30, r16
    1e70:	31 96       	adiw	r30, 0x01	; 1
				s += 7;
			} else if(*s == '+') {
				secs = iSeconds; s++;
			} else if(*s == '-') {
				secs = iSeconds - iSeconds % 86400L; s++;
			} else secs = 0;
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	dc 01       	movw	r26, r24
				secs += 10 * (s[6] - '0');
				secs += (s[7] - '0');
				*ps = s + 8;
			} else {
				long	n = 0;
				while(isdigit(*s)) n = 10 * n + *s++ - '0';
    1e78:	88 0f       	add	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	aa 1f       	adc	r26, r26
    1e7e:	bb 1f       	adc	r27, r27
    1e80:	ac 01       	movw	r20, r24
    1e82:	bd 01       	movw	r22, r26
    1e84:	44 0f       	add	r20, r20
    1e86:	55 1f       	adc	r21, r21
    1e88:	66 1f       	adc	r22, r22
    1e8a:	77 1f       	adc	r23, r23
    1e8c:	44 0f       	add	r20, r20
    1e8e:	55 1f       	adc	r21, r21
    1e90:	66 1f       	adc	r22, r22
    1e92:	77 1f       	adc	r23, r23
    1e94:	84 0f       	add	r24, r20
    1e96:	95 1f       	adc	r25, r21
    1e98:	a6 1f       	adc	r26, r22
    1e9a:	b7 1f       	adc	r27, r23
    1e9c:	82 0f       	add	r24, r18
    1e9e:	91 1d       	adc	r25, r1
    1ea0:	a1 1d       	adc	r26, r1
    1ea2:	b1 1d       	adc	r27, r1
    1ea4:	c0 97       	sbiw	r24, 0x30	; 48
    1ea6:	a1 09       	sbc	r26, r1
    1ea8:	b1 09       	sbc	r27, r1
    1eaa:	21 91       	ld	r18, Z+
    1eac:	42 2f       	mov	r20, r18
    1eae:	50 e0       	ldi	r21, 0x00	; 0
    1eb0:	40 53       	subi	r20, 0x30	; 48
    1eb2:	51 09       	sbc	r21, r1
    1eb4:	4a 30       	cpi	r20, 0x0A	; 10
    1eb6:	51 05       	cpc	r21, r1
    1eb8:	f8 f2       	brcs	.-66     	; 0x1e78 <_ZN8iotClock9parseLineEPc+0x2ca>
				secs += n;
    1eba:	8c 0d       	add	r24, r12
    1ebc:	9d 1d       	adc	r25, r13
    1ebe:	ae 1d       	adc	r26, r14
    1ec0:	bf 1d       	adc	r27, r15
		static bool
		parseLine(char *s) {
			long	secs;
			if(strncmp(s, "time", 4) == 0) {
				s += 4; while(isspace(*s)) s++;
				if((secs = toSeconds(&s)) >= 0) iSeconds = secs;
    1ec2:	bb 23       	and	r27, r27
    1ec4:	44 f0       	brlt	.+16     	; 0x1ed6 <_ZN8iotClock9parseLineEPc+0x328>
    1ec6:	80 93 e2 04 	sts	0x04E2, r24
    1eca:	90 93 e3 04 	sts	0x04E3, r25
    1ece:	a0 93 e4 04 	sts	0x04E4, r26
    1ed2:	b0 93 e5 04 	sts	0x04E5, r27
				printf("time %ld\n", iSeconds);
    1ed6:	80 91 e5 04 	lds	r24, 0x04E5
    1eda:	8f 93       	push	r24
    1edc:	80 91 e4 04 	lds	r24, 0x04E4
    1ee0:	8f 93       	push	r24
    1ee2:	80 91 e3 04 	lds	r24, 0x04E3
    1ee6:	8f 93       	push	r24
    1ee8:	80 91 e2 04 	lds	r24, 0x04E2
    1eec:	8f 93       	push	r24
    1eee:	81 e9       	ldi	r24, 0x91	; 145
    1ef0:	91 e0       	ldi	r25, 0x01	; 1
    1ef2:	9f 93       	push	r25
    1ef4:	8f 93       	push	r24
    1ef6:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <printf>
				return true;
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	aa c3       	rjmp	.+1876   	; 0x265e <_ZN8iotClock9parseLineEPc+0xab0>
			} else if(strncmp(s, "at", 2) == 0) {
    1f0a:	42 e0       	ldi	r20, 0x02	; 2
    1f0c:	50 e0       	ldi	r21, 0x00	; 0
    1f0e:	6b e9       	ldi	r22, 0x9B	; 155
    1f10:	71 e0       	ldi	r23, 0x01	; 1
    1f12:	ce 01       	movw	r24, r28
    1f14:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <strncmp>
    1f18:	89 2b       	or	r24, r25
    1f1a:	09 f0       	breq	.+2      	; 0x1f1e <_ZN8iotClock9parseLineEPc+0x370>
    1f1c:	63 c3       	rjmp	.+1734   	; 0x25e4 <_ZN8iotClock9parseLineEPc+0xa36>
				int8_t	n;
				s += 2; while(isspace(*s)) s++;
    1f1e:	22 96       	adiw	r28, 0x02	; 2
    1f20:	8e 01       	movw	r16, r28
    1f22:	d9 90       	ld	r13, Y+
    1f24:	ed 2c       	mov	r14, r13
    1f26:	f1 2c       	mov	r15, r1
    1f28:	c7 01       	movw	r24, r14
    1f2a:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <isspace>
    1f2e:	89 2b       	or	r24, r25
    1f30:	b9 f7       	brne	.-18     	; 0x1f20 <_ZN8iotClock9parseLineEPc+0x372>
    1f32:	e8 01       	movw	r28, r16
		toSeconds(char **ps) {
			long	secs;
			char	*s;

			s = *ps;
			if(isalpha(*s)) {
    1f34:	c7 01       	movw	r24, r14
    1f36:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <isalpha>
    1f3a:	89 2b       	or	r24, r25
    1f3c:	09 f4       	brne	.+2      	; 0x1f40 <_ZN8iotClock9parseLineEPc+0x392>
    1f3e:	5e c0       	rjmp	.+188    	; 0x1ffc <_ZN8iotClock9parseLineEPc+0x44e>
    1f40:	0f 2e       	mov	r0, r31
    1f42:	f3 e1       	ldi	r31, 0x13	; 19
    1f44:	cf 2e       	mov	r12, r31
    1f46:	f1 e0       	ldi	r31, 0x01	; 1
    1f48:	df 2e       	mov	r13, r31
    1f4a:	f0 2d       	mov	r31, r0
    1f4c:	0f 2e       	mov	r0, r31
    1f4e:	f7 e0       	ldi	r31, 0x07	; 7
    1f50:	af 2e       	mov	r10, r31
    1f52:	f1 e0       	ldi	r31, 0x01	; 1
    1f54:	bf 2e       	mov	r11, r31
    1f56:	f0 2d       	mov	r31, r0
    1f58:	e1 2c       	mov	r14, r1
    1f5a:	f1 2c       	mov	r15, r1
    1f5c:	00 e0       	ldi	r16, 0x00	; 0
    1f5e:	10 e0       	ldi	r17, 0x00	; 0
				int		m, days = 0;
				for(m = 0; m < 12; m++) {
					if(strncasecmp(s, iMonth[m], 3) == 0) break;
    1f60:	f6 01       	movw	r30, r12
    1f62:	61 91       	ld	r22, Z+
    1f64:	71 91       	ld	r23, Z+
    1f66:	6f 01       	movw	r12, r30
    1f68:	43 e0       	ldi	r20, 0x03	; 3
    1f6a:	50 e0       	ldi	r21, 0x00	; 0
    1f6c:	ce 01       	movw	r24, r28
    1f6e:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <strncasecmp>
    1f72:	89 2b       	or	r24, r25
    1f74:	59 f0       	breq	.+22     	; 0x1f8c <_ZN8iotClock9parseLineEPc+0x3de>
					days += iMonthDays[m];
    1f76:	d5 01       	movw	r26, r10
    1f78:	8d 91       	ld	r24, X+
    1f7a:	5d 01       	movw	r10, r26
    1f7c:	e8 0e       	add	r14, r24
    1f7e:	f1 1c       	adc	r15, r1
			char	*s;

			s = *ps;
			if(isalpha(*s)) {
				int		m, days = 0;
				for(m = 0; m < 12; m++) {
    1f80:	0f 5f       	subi	r16, 0xFF	; 255
    1f82:	1f 4f       	sbci	r17, 0xFF	; 255
    1f84:	0c 30       	cpi	r16, 0x0C	; 12
    1f86:	11 05       	cpc	r17, r1
    1f88:	59 f7       	brne	.-42     	; 0x1f60 <_ZN8iotClock9parseLineEPc+0x3b2>
    1f8a:	26 c3       	rjmp	.+1612   	; 0x25d8 <_ZN8iotClock9parseLineEPc+0xa2a>
					if(strncasecmp(s, iMonth[m], 3) == 0) break;
					days += iMonthDays[m];
				}
				if((m == 12) || s[3] != '-' || !isdigit(s[4]) || !isdigit(s[5]))
    1f8c:	0c 30       	cpi	r16, 0x0C	; 12
    1f8e:	11 05       	cpc	r17, r1
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <_ZN8iotClock9parseLineEPc+0x3e6>
    1f92:	22 c3       	rjmp	.+1604   	; 0x25d8 <_ZN8iotClock9parseLineEPc+0xa2a>
    1f94:	8b 81       	ldd	r24, Y+3	; 0x03
    1f96:	8d 32       	cpi	r24, 0x2D	; 45
    1f98:	09 f0       	breq	.+2      	; 0x1f9c <_ZN8iotClock9parseLineEPc+0x3ee>
    1f9a:	1e c3       	rjmp	.+1596   	; 0x25d8 <_ZN8iotClock9parseLineEPc+0xa2a>
    1f9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	20 53       	subi	r18, 0x30	; 48
    1fa4:	31 09       	sbc	r19, r1
    1fa6:	2a 30       	cpi	r18, 0x0A	; 10
    1fa8:	31 05       	cpc	r19, r1
    1faa:	08 f0       	brcs	.+2      	; 0x1fae <_ZN8iotClock9parseLineEPc+0x400>
    1fac:	15 c3       	rjmp	.+1578   	; 0x25d8 <_ZN8iotClock9parseLineEPc+0xa2a>
    1fae:	4d 81       	ldd	r20, Y+5	; 0x05
    1fb0:	24 2f       	mov	r18, r20
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	20 53       	subi	r18, 0x30	; 48
    1fb6:	31 09       	sbc	r19, r1
    1fb8:	2a 30       	cpi	r18, 0x0A	; 10
    1fba:	31 05       	cpc	r19, r1
    1fbc:	08 f0       	brcs	.+2      	; 0x1fc0 <_ZN8iotClock9parseLineEPc+0x412>
    1fbe:	0c c3       	rjmp	.+1560   	; 0x25d8 <_ZN8iotClock9parseLineEPc+0xa2a>
					return -1;
				secs = 86400L * (days + 10 * (s[4] - '0') + s[5] - '0' - 1);
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	c0 97       	sbiw	r24, 0x30	; 48
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	aa 0f       	add	r26, r26
    1fc8:	bb 1f       	adc	r27, r27
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	88 0f       	add	r24, r24
    1fd0:	99 1f       	adc	r25, r25
    1fd2:	88 0f       	add	r24, r24
    1fd4:	99 1f       	adc	r25, r25
    1fd6:	a8 0f       	add	r26, r24
    1fd8:	b9 1f       	adc	r27, r25
    1fda:	ae 0d       	add	r26, r14
    1fdc:	bf 1d       	adc	r27, r15
    1fde:	a4 0f       	add	r26, r20
    1fe0:	b1 1d       	adc	r27, r1
    1fe2:	d1 97       	sbiw	r26, 0x31	; 49
    1fe4:	20 e8       	ldi	r18, 0x80	; 128
    1fe6:	31 e5       	ldi	r19, 0x51	; 81
    1fe8:	41 e0       	ldi	r20, 0x01	; 1
    1fea:	50 e0       	ldi	r21, 0x00	; 0
    1fec:	0e 94 0b 2c 	call	0x5816	; 0x5816 <__mulshisi3>
    1ff0:	6b 01       	movw	r12, r22
    1ff2:	7c 01       	movw	r14, r24
				s += 7;
    1ff4:	8e 01       	movw	r16, r28
    1ff6:	09 5f       	subi	r16, 0xF9	; 249
    1ff8:	1f 4f       	sbci	r17, 0xFF	; 255
    1ffa:	2b c0       	rjmp	.+86     	; 0x2052 <_ZN8iotClock9parseLineEPc+0x4a4>
			} else if(*s == '+') {
    1ffc:	bb e2       	ldi	r27, 0x2B	; 43
    1ffe:	db 12       	cpse	r13, r27
    2000:	0b c0       	rjmp	.+22     	; 0x2018 <_ZN8iotClock9parseLineEPc+0x46a>
				secs = iSeconds; s++;
    2002:	c0 90 e2 04 	lds	r12, 0x04E2
    2006:	d0 90 e3 04 	lds	r13, 0x04E3
    200a:	e0 90 e4 04 	lds	r14, 0x04E4
    200e:	f0 90 e5 04 	lds	r15, 0x04E5
    2012:	0f 5f       	subi	r16, 0xFF	; 255
    2014:	1f 4f       	sbci	r17, 0xFF	; 255
    2016:	1d c0       	rjmp	.+58     	; 0x2052 <_ZN8iotClock9parseLineEPc+0x4a4>
			} else if(*s == '-') {
    2018:	ed e2       	ldi	r30, 0x2D	; 45
    201a:	de 12       	cpse	r13, r30
    201c:	17 c0       	rjmp	.+46     	; 0x204c <_ZN8iotClock9parseLineEPc+0x49e>
				secs = iSeconds - iSeconds % 86400L; s++;
    201e:	c0 90 e2 04 	lds	r12, 0x04E2
    2022:	d0 90 e3 04 	lds	r13, 0x04E3
    2026:	e0 90 e4 04 	lds	r14, 0x04E4
    202a:	f0 90 e5 04 	lds	r15, 0x04E5
    202e:	c7 01       	movw	r24, r14
    2030:	b6 01       	movw	r22, r12
    2032:	20 e8       	ldi	r18, 0x80	; 128
    2034:	31 e5       	ldi	r19, 0x51	; 81
    2036:	41 e0       	ldi	r20, 0x01	; 1
    2038:	50 e0       	ldi	r21, 0x00	; 0
    203a:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <__divmodsi4>
    203e:	c6 1a       	sub	r12, r22
    2040:	d7 0a       	sbc	r13, r23
    2042:	e8 0a       	sbc	r14, r24
    2044:	f9 0a       	sbc	r15, r25
    2046:	0f 5f       	subi	r16, 0xFF	; 255
    2048:	1f 4f       	sbci	r17, 0xFF	; 255
    204a:	03 c0       	rjmp	.+6      	; 0x2052 <_ZN8iotClock9parseLineEPc+0x4a4>
			} else secs = 0;
    204c:	c1 2c       	mov	r12, r1
    204e:	d1 2c       	mov	r13, r1
    2050:	76 01       	movw	r14, r12
			
			if(!isdigit(s[0])) return -1;
    2052:	d8 01       	movw	r26, r16
    2054:	dc 91       	ld	r29, X
    2056:	8d 2f       	mov	r24, r29
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	c0 97       	sbiw	r24, 0x30	; 48
    205c:	0a 97       	sbiw	r24, 0x0a	; 10
    205e:	08 f0       	brcs	.+2      	; 0x2062 <_ZN8iotClock9parseLineEPc+0x4b4>
    2060:	bb c2       	rjmp	.+1398   	; 0x25d8 <_ZN8iotClock9parseLineEPc+0xa2a>
			if(isdigit(s[1]) && s[2] == ':') {
    2062:	11 96       	adiw	r26, 0x01	; 1
    2064:	4c 91       	ld	r20, X
    2066:	11 97       	sbiw	r26, 0x01	; 1
    2068:	84 2f       	mov	r24, r20
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	c0 97       	sbiw	r24, 0x30	; 48
    206e:	0a 97       	sbiw	r24, 0x0a	; 10
    2070:	08 f0       	brcs	.+2      	; 0x2074 <_ZN8iotClock9parseLineEPc+0x4c6>
    2072:	9b c0       	rjmp	.+310    	; 0x21aa <_ZN8iotClock9parseLineEPc+0x5fc>
    2074:	12 96       	adiw	r26, 0x02	; 2
    2076:	8c 91       	ld	r24, X
    2078:	12 97       	sbiw	r26, 0x02	; 2
    207a:	8a 33       	cpi	r24, 0x3A	; 58
    207c:	09 f0       	breq	.+2      	; 0x2080 <_ZN8iotClock9parseLineEPc+0x4d2>
    207e:	95 c0       	rjmp	.+298    	; 0x21aa <_ZN8iotClock9parseLineEPc+0x5fc>
				if( !isdigit(s[3]) || !isdigit(s[4]) || (s[5] != ':') ||
    2080:	13 96       	adiw	r26, 0x03	; 3
    2082:	bc 90       	ld	r11, X
    2084:	13 97       	sbiw	r26, 0x03	; 3
    2086:	8b 2d       	mov	r24, r11
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	c0 97       	sbiw	r24, 0x30	; 48
    208c:	0a 97       	sbiw	r24, 0x0a	; 10
    208e:	08 f0       	brcs	.+2      	; 0x2092 <_ZN8iotClock9parseLineEPc+0x4e4>
    2090:	a3 c2       	rjmp	.+1350   	; 0x25d8 <_ZN8iotClock9parseLineEPc+0xa2a>
    2092:	14 96       	adiw	r26, 0x04	; 4
    2094:	cc 91       	ld	r28, X
    2096:	14 97       	sbiw	r26, 0x04	; 4
    2098:	8c 2f       	mov	r24, r28
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	c0 97       	sbiw	r24, 0x30	; 48
    209e:	0a 97       	sbiw	r24, 0x0a	; 10
    20a0:	08 f0       	brcs	.+2      	; 0x20a4 <_ZN8iotClock9parseLineEPc+0x4f6>
    20a2:	9a c2       	rjmp	.+1332   	; 0x25d8 <_ZN8iotClock9parseLineEPc+0xa2a>
    20a4:	15 96       	adiw	r26, 0x05	; 5
    20a6:	8c 91       	ld	r24, X
    20a8:	15 97       	sbiw	r26, 0x05	; 5
    20aa:	8a 33       	cpi	r24, 0x3A	; 58
    20ac:	09 f0       	breq	.+2      	; 0x20b0 <_ZN8iotClock9parseLineEPc+0x502>
    20ae:	94 c2       	rjmp	.+1320   	; 0x25d8 <_ZN8iotClock9parseLineEPc+0xa2a>
					!isdigit(s[6]) || !isdigit(s[7]) ) return -1;
    20b0:	16 96       	adiw	r26, 0x06	; 6
    20b2:	fc 91       	ld	r31, X
    20b4:	16 97       	sbiw	r26, 0x06	; 6
    20b6:	8f 2f       	mov	r24, r31
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	c0 97       	sbiw	r24, 0x30	; 48
				secs = iSeconds - iSeconds % 86400L; s++;
			} else secs = 0;
			
			if(!isdigit(s[0])) return -1;
			if(isdigit(s[1]) && s[2] == ':') {
				if( !isdigit(s[3]) || !isdigit(s[4]) || (s[5] != ':') ||
    20bc:	0a 97       	sbiw	r24, 0x0a	; 10
    20be:	08 f0       	brcs	.+2      	; 0x20c2 <_ZN8iotClock9parseLineEPc+0x514>
    20c0:	8b c2       	rjmp	.+1302   	; 0x25d8 <_ZN8iotClock9parseLineEPc+0xa2a>
					!isdigit(s[6]) || !isdigit(s[7]) ) return -1;
    20c2:	17 96       	adiw	r26, 0x07	; 7
    20c4:	ec 91       	ld	r30, X
    20c6:	8e 2f       	mov	r24, r30
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	c0 97       	sbiw	r24, 0x30	; 48
    20cc:	0a 97       	sbiw	r24, 0x0a	; 10
    20ce:	08 f0       	brcs	.+2      	; 0x20d2 <_ZN8iotClock9parseLineEPc+0x524>
    20d0:	83 c2       	rjmp	.+1286   	; 0x25d8 <_ZN8iotClock9parseLineEPc+0xa2a>
				secs += 36000L * (s[0] - '0');
    20d2:	ad 2f       	mov	r26, r29
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	d0 97       	sbiw	r26, 0x30	; 48
    20d8:	20 ea       	ldi	r18, 0xA0	; 160
    20da:	3c e8       	ldi	r19, 0x8C	; 140
    20dc:	0e 94 05 2c 	call	0x580a	; 0x580a <__usmulhisi3>
    20e0:	c6 0e       	add	r12, r22
    20e2:	d7 1e       	adc	r13, r23
    20e4:	e8 1e       	adc	r14, r24
    20e6:	f9 1e       	adc	r15, r25
				secs += 3600 * (s[1] - '0');
    20e8:	24 2f       	mov	r18, r20
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	20 53       	subi	r18, 0x30	; 48
    20ee:	31 09       	sbc	r19, r1
    20f0:	80 e1       	ldi	r24, 0x10	; 16
    20f2:	9e e0       	ldi	r25, 0x0E	; 14
    20f4:	28 9f       	mul	r18, r24
    20f6:	a0 01       	movw	r20, r0
    20f8:	29 9f       	mul	r18, r25
    20fa:	50 0d       	add	r21, r0
    20fc:	38 9f       	mul	r19, r24
    20fe:	50 0d       	add	r21, r0
    2100:	11 24       	eor	r1, r1
    2102:	66 27       	eor	r22, r22
    2104:	57 fd       	sbrc	r21, 7
    2106:	60 95       	com	r22
    2108:	76 2f       	mov	r23, r22
    210a:	c4 0e       	add	r12, r20
    210c:	d5 1e       	adc	r13, r21
    210e:	e6 1e       	adc	r14, r22
    2110:	f7 1e       	adc	r15, r23
				secs += 600 * (s[3] - '0');
    2112:	2b 2d       	mov	r18, r11
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	20 53       	subi	r18, 0x30	; 48
    2118:	31 09       	sbc	r19, r1
    211a:	88 e5       	ldi	r24, 0x58	; 88
    211c:	92 e0       	ldi	r25, 0x02	; 2
    211e:	28 9f       	mul	r18, r24
    2120:	a0 01       	movw	r20, r0
    2122:	29 9f       	mul	r18, r25
    2124:	50 0d       	add	r21, r0
    2126:	38 9f       	mul	r19, r24
    2128:	50 0d       	add	r21, r0
    212a:	11 24       	eor	r1, r1
    212c:	66 27       	eor	r22, r22
    212e:	57 fd       	sbrc	r21, 7
    2130:	60 95       	com	r22
    2132:	76 2f       	mov	r23, r22
    2134:	c4 0e       	add	r12, r20
    2136:	d5 1e       	adc	r13, r21
    2138:	e6 1e       	adc	r14, r22
    213a:	f7 1e       	adc	r15, r23
				secs += 60 * (s[4] - '0');
    213c:	d0 e0       	ldi	r29, 0x00	; 0
    213e:	e0 97       	sbiw	r28, 0x30	; 48
    2140:	8c e3       	ldi	r24, 0x3C	; 60
    2142:	8c 9f       	mul	r24, r28
    2144:	a0 01       	movw	r20, r0
    2146:	8d 9f       	mul	r24, r29
    2148:	50 0d       	add	r21, r0
    214a:	11 24       	eor	r1, r1
    214c:	66 27       	eor	r22, r22
    214e:	57 fd       	sbrc	r21, 7
    2150:	60 95       	com	r22
    2152:	76 2f       	mov	r23, r22
    2154:	c4 0e       	add	r12, r20
    2156:	d5 1e       	adc	r13, r21
    2158:	e6 1e       	adc	r14, r22
    215a:	f7 1e       	adc	r15, r23
				secs += 10 * (s[6] - '0');
    215c:	2f 2f       	mov	r18, r31
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	20 53       	subi	r18, 0x30	; 48
    2162:	31 09       	sbc	r19, r1
    2164:	a9 01       	movw	r20, r18
    2166:	44 0f       	add	r20, r20
    2168:	55 1f       	adc	r21, r21
    216a:	22 0f       	add	r18, r18
    216c:	33 1f       	adc	r19, r19
    216e:	22 0f       	add	r18, r18
    2170:	33 1f       	adc	r19, r19
    2172:	22 0f       	add	r18, r18
    2174:	33 1f       	adc	r19, r19
    2176:	42 0f       	add	r20, r18
    2178:	53 1f       	adc	r21, r19
    217a:	66 27       	eor	r22, r22
    217c:	57 fd       	sbrc	r21, 7
    217e:	60 95       	com	r22
    2180:	76 2f       	mov	r23, r22
    2182:	c4 0e       	add	r12, r20
    2184:	d5 1e       	adc	r13, r21
    2186:	e6 1e       	adc	r14, r22
    2188:	f7 1e       	adc	r15, r23
				secs += (s[7] - '0');
    218a:	4e 2f       	mov	r20, r30
    218c:	50 e0       	ldi	r21, 0x00	; 0
    218e:	40 53       	subi	r20, 0x30	; 48
    2190:	51 09       	sbc	r21, r1
    2192:	66 27       	eor	r22, r22
    2194:	57 fd       	sbrc	r21, 7
    2196:	60 95       	com	r22
    2198:	76 2f       	mov	r23, r22
				*ps = s + 8;
    219a:	98 01       	movw	r18, r16
    219c:	28 5f       	subi	r18, 0xF8	; 248
    219e:	3f 4f       	sbci	r19, 0xFF	; 255
				secs += 36000L * (s[0] - '0');
				secs += 3600 * (s[1] - '0');
				secs += 600 * (s[3] - '0');
				secs += 60 * (s[4] - '0');
				secs += 10 * (s[6] - '0');
				secs += (s[7] - '0');
    21a0:	c4 0e       	add	r12, r20
    21a2:	d5 1e       	adc	r13, r21
    21a4:	e6 1e       	adc	r14, r22
    21a6:	f7 1e       	adc	r15, r23
    21a8:	2b c0       	rjmp	.+86     	; 0x2200 <_ZN8iotClock9parseLineEPc+0x652>
    21aa:	f8 01       	movw	r30, r16
    21ac:	31 96       	adiw	r30, 0x01	; 1
				s += 7;
			} else if(*s == '+') {
				secs = iSeconds; s++;
			} else if(*s == '-') {
				secs = iSeconds - iSeconds % 86400L; s++;
			} else secs = 0;
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	dc 01       	movw	r26, r24
				secs += 10 * (s[6] - '0');
				secs += (s[7] - '0');
				*ps = s + 8;
			} else {
				long	n = 0;
				while(isdigit(*s)) n = 10 * n + *s++ - '0';
    21b4:	9f 01       	movw	r18, r30
    21b6:	88 0f       	add	r24, r24
    21b8:	99 1f       	adc	r25, r25
    21ba:	aa 1f       	adc	r26, r26
    21bc:	bb 1f       	adc	r27, r27
    21be:	ac 01       	movw	r20, r24
    21c0:	bd 01       	movw	r22, r26
    21c2:	44 0f       	add	r20, r20
    21c4:	55 1f       	adc	r21, r21
    21c6:	66 1f       	adc	r22, r22
    21c8:	77 1f       	adc	r23, r23
    21ca:	44 0f       	add	r20, r20
    21cc:	55 1f       	adc	r21, r21
    21ce:	66 1f       	adc	r22, r22
    21d0:	77 1f       	adc	r23, r23
    21d2:	84 0f       	add	r24, r20
    21d4:	95 1f       	adc	r25, r21
    21d6:	a6 1f       	adc	r26, r22
    21d8:	b7 1f       	adc	r27, r23
    21da:	8d 0f       	add	r24, r29
    21dc:	91 1d       	adc	r25, r1
    21de:	a1 1d       	adc	r26, r1
    21e0:	b1 1d       	adc	r27, r1
    21e2:	c0 97       	sbiw	r24, 0x30	; 48
    21e4:	a1 09       	sbc	r26, r1
    21e6:	b1 09       	sbc	r27, r1
    21e8:	d1 91       	ld	r29, Z+
    21ea:	4d 2f       	mov	r20, r29
    21ec:	50 e0       	ldi	r21, 0x00	; 0
    21ee:	40 53       	subi	r20, 0x30	; 48
    21f0:	51 09       	sbc	r21, r1
    21f2:	4a 30       	cpi	r20, 0x0A	; 10
    21f4:	51 05       	cpc	r21, r1
    21f6:	f0 f2       	brcs	.-68     	; 0x21b4 <_ZN8iotClock9parseLineEPc+0x606>
				secs += n;
    21f8:	c8 0e       	add	r12, r24
    21fa:	d9 1e       	adc	r13, r25
    21fc:	ea 1e       	adc	r14, r26
    21fe:	fb 1e       	adc	r15, r27
				printf("time %ld\n", iSeconds);
				return true;
			} else if(strncmp(s, "at", 2) == 0) {
				int8_t	n;
				s += 2; while(isspace(*s)) s++;
				if( ((secs = toSeconds(&s)) >= 0) &&
    2200:	ff 20       	and	r15, r15
    2202:	0c f4       	brge	.+2      	; 0x2206 <_ZN8iotClock9parseLineEPc+0x658>
    2204:	e9 c1       	rjmp	.+978    	; 0x25d8 <_ZN8iotClock9parseLineEPc+0xa2a>
		
		static int8_t
		allocSchedule() {
			int8_t	i;
			for(i = 0; i < iotcMaxSchedules; i++) {
				if(iSchedule[i].iTime == 0) return i;
    2206:	80 91 bc 03 	lds	r24, 0x03BC
    220a:	90 91 bd 03 	lds	r25, 0x03BD
    220e:	a0 91 be 03 	lds	r26, 0x03BE
    2212:	b0 91 bf 03 	lds	r27, 0x03BF
    2216:	89 2b       	or	r24, r25
    2218:	8a 2b       	or	r24, r26
    221a:	8b 2b       	or	r24, r27
    221c:	a9 f0       	breq	.+42     	; 0x2248 <_ZN8iotClock9parseLineEPc+0x69a>
    221e:	e6 ef       	ldi	r30, 0xF6	; 246
    2220:	f3 e0       	ldi	r31, 0x03	; 3
		static iotSchedule	iSchedule[iotcMaxSchedules];
		
		static int8_t
		allocSchedule() {
			int8_t	i;
			for(i = 0; i < iotcMaxSchedules; i++) {
    2222:	55 24       	eor	r5, r5
    2224:	53 94       	inc	r5
				if(iSchedule[i].iTime == 0) return i;
    2226:	80 81       	ld	r24, Z
    2228:	91 81       	ldd	r25, Z+1	; 0x01
    222a:	a2 81       	ldd	r26, Z+2	; 0x02
    222c:	b3 81       	ldd	r27, Z+3	; 0x03
    222e:	89 2b       	or	r24, r25
    2230:	8a 2b       	or	r24, r26
    2232:	8b 2b       	or	r24, r27
    2234:	31 f0       	breq	.+12     	; 0x2242 <_ZN8iotClock9parseLineEPc+0x694>
		static iotSchedule	iSchedule[iotcMaxSchedules];
		
		static int8_t
		allocSchedule() {
			int8_t	i;
			for(i = 0; i < iotcMaxSchedules; i++) {
    2236:	53 94       	inc	r5
    2238:	fa 96       	adiw	r30, 0x3a	; 58
    223a:	b5 e0       	ldi	r27, 0x05	; 5
    223c:	5b 12       	cpse	r5, r27
    223e:	f3 cf       	rjmp	.-26     	; 0x2226 <_ZN8iotClock9parseLineEPc+0x678>
    2240:	cb c1       	rjmp	.+918    	; 0x25d8 <_ZN8iotClock9parseLineEPc+0xa2a>
				printf("time %ld\n", iSeconds);
				return true;
			} else if(strncmp(s, "at", 2) == 0) {
				int8_t	n;
				s += 2; while(isspace(*s)) s++;
				if( ((secs = toSeconds(&s)) >= 0) &&
    2242:	55 20       	and	r5, r5
    2244:	14 f4       	brge	.+4      	; 0x224a <_ZN8iotClock9parseLineEPc+0x69c>
    2246:	c8 c1       	rjmp	.+912    	; 0x25d8 <_ZN8iotClock9parseLineEPc+0xa2a>
		
		static int8_t
		allocSchedule() {
			int8_t	i;
			for(i = 0; i < iotcMaxSchedules; i++) {
				if(iSchedule[i].iTime == 0) return i;
    2248:	51 2c       	mov	r5, r1
    224a:	89 01       	movw	r16, r18
    224c:	e8 01       	movw	r28, r16
    224e:	0f 5f       	subi	r16, 0xFF	; 255
    2250:	1f 4f       	sbci	r17, 0xFF	; 255
			} else if(strncmp(s, "at", 2) == 0) {
				int8_t	n;
				s += 2; while(isspace(*s)) s++;
				if( ((secs = toSeconds(&s)) >= 0) &&
					((n = allocSchedule()) >= 0) ) {
					while(isspace(*s)) s++;
    2252:	88 81       	ld	r24, Y
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <isspace>
    225a:	89 2b       	or	r24, r25
    225c:	b9 f7       	brne	.-18     	; 0x224c <_ZN8iotClock9parseLineEPc+0x69e>
    225e:	3e 01       	movw	r6, r28
					iotSchedule	*sch = iSchedule + n;
    2260:	e5 2d       	mov	r30, r5
    2262:	fa e3       	ldi	r31, 0x3A	; 58
    2264:	ef 02       	muls	r30, r31
    2266:	80 01       	movw	r16, r0
    2268:	11 24       	eor	r1, r1
    226a:	04 54       	subi	r16, 0x44	; 68
    226c:	1c 4f       	sbci	r17, 0xFC	; 252
					sch->iTime = secs;
    226e:	d8 01       	movw	r26, r16
    2270:	cd 92       	st	X+, r12
    2272:	dd 92       	st	X+, r13
    2274:	ed 92       	st	X+, r14
    2276:	fc 92       	st	X, r15
    2278:	13 97       	sbiw	r26, 0x03	; 3
		toSeconds(char **ps) {
			long	secs;
			char	*s;

			s = *ps;
			if(isalpha(*s)) {
    227a:	f8 80       	ld	r15, Y
    227c:	8f 2d       	mov	r24, r15
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <isalpha>
    2284:	89 2b       	or	r24, r25
    2286:	09 f4       	brne	.+2      	; 0x228a <_ZN8iotClock9parseLineEPc+0x6dc>
    2288:	63 c0       	rjmp	.+198    	; 0x2350 <_ZN8iotClock9parseLineEPc+0x7a2>
    228a:	0f 2e       	mov	r0, r31
    228c:	f3 e1       	ldi	r31, 0x13	; 19
    228e:	cf 2e       	mov	r12, r31
    2290:	f1 e0       	ldi	r31, 0x01	; 1
    2292:	df 2e       	mov	r13, r31
    2294:	f0 2d       	mov	r31, r0
    2296:	0f 2e       	mov	r0, r31
    2298:	f7 e0       	ldi	r31, 0x07	; 7
    229a:	af 2e       	mov	r10, r31
    229c:	f1 e0       	ldi	r31, 0x01	; 1
    229e:	bf 2e       	mov	r11, r31
    22a0:	f0 2d       	mov	r31, r0
    22a2:	e1 2c       	mov	r14, r1
    22a4:	f1 2c       	mov	r15, r1
    22a6:	81 2c       	mov	r8, r1
    22a8:	91 2c       	mov	r9, r1
				int		m, days = 0;
				for(m = 0; m < 12; m++) {
					if(strncasecmp(s, iMonth[m], 3) == 0) break;
    22aa:	f6 01       	movw	r30, r12
    22ac:	61 91       	ld	r22, Z+
    22ae:	71 91       	ld	r23, Z+
    22b0:	6f 01       	movw	r12, r30
    22b2:	43 e0       	ldi	r20, 0x03	; 3
    22b4:	50 e0       	ldi	r21, 0x00	; 0
    22b6:	c3 01       	movw	r24, r6
    22b8:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <strncasecmp>
    22bc:	89 2b       	or	r24, r25
    22be:	69 f0       	breq	.+26     	; 0x22da <_ZN8iotClock9parseLineEPc+0x72c>
					days += iMonthDays[m];
    22c0:	d5 01       	movw	r26, r10
    22c2:	8d 91       	ld	r24, X+
    22c4:	5d 01       	movw	r10, r26
    22c6:	e8 0e       	add	r14, r24
    22c8:	f1 1c       	adc	r15, r1
			char	*s;

			s = *ps;
			if(isalpha(*s)) {
				int		m, days = 0;
				for(m = 0; m < 12; m++) {
    22ca:	bf ef       	ldi	r27, 0xFF	; 255
    22cc:	8b 1a       	sub	r8, r27
    22ce:	9b 0a       	sbc	r9, r27
    22d0:	ec e0       	ldi	r30, 0x0C	; 12
    22d2:	8e 16       	cp	r8, r30
    22d4:	91 04       	cpc	r9, r1
    22d6:	49 f7       	brne	.-46     	; 0x22aa <_ZN8iotClock9parseLineEPc+0x6fc>
    22d8:	47 c1       	rjmp	.+654    	; 0x2568 <_ZN8iotClock9parseLineEPc+0x9ba>
					if(strncasecmp(s, iMonth[m], 3) == 0) break;
					days += iMonthDays[m];
				}
				if((m == 12) || s[3] != '-' || !isdigit(s[4]) || !isdigit(s[5]))
    22da:	fc e0       	ldi	r31, 0x0C	; 12
    22dc:	8f 16       	cp	r8, r31
    22de:	91 04       	cpc	r9, r1
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <_ZN8iotClock9parseLineEPc+0x736>
    22e2:	42 c1       	rjmp	.+644    	; 0x2568 <_ZN8iotClock9parseLineEPc+0x9ba>
    22e4:	d3 01       	movw	r26, r6
    22e6:	13 96       	adiw	r26, 0x03	; 3
    22e8:	8c 91       	ld	r24, X
    22ea:	13 97       	sbiw	r26, 0x03	; 3
    22ec:	8d 32       	cpi	r24, 0x2D	; 45
    22ee:	09 f0       	breq	.+2      	; 0x22f2 <_ZN8iotClock9parseLineEPc+0x744>
    22f0:	3b c1       	rjmp	.+630    	; 0x2568 <_ZN8iotClock9parseLineEPc+0x9ba>
    22f2:	14 96       	adiw	r26, 0x04	; 4
    22f4:	3c 91       	ld	r19, X
    22f6:	14 97       	sbiw	r26, 0x04	; 4
    22f8:	83 2f       	mov	r24, r19
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	c0 97       	sbiw	r24, 0x30	; 48
    22fe:	0a 97       	sbiw	r24, 0x0a	; 10
    2300:	08 f0       	brcs	.+2      	; 0x2304 <_ZN8iotClock9parseLineEPc+0x756>
    2302:	32 c1       	rjmp	.+612    	; 0x2568 <_ZN8iotClock9parseLineEPc+0x9ba>
    2304:	15 96       	adiw	r26, 0x05	; 5
    2306:	2c 91       	ld	r18, X
    2308:	82 2f       	mov	r24, r18
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	c0 97       	sbiw	r24, 0x30	; 48
    230e:	0a 97       	sbiw	r24, 0x0a	; 10
    2310:	08 f0       	brcs	.+2      	; 0x2314 <_ZN8iotClock9parseLineEPc+0x766>
    2312:	2a c1       	rjmp	.+596    	; 0x2568 <_ZN8iotClock9parseLineEPc+0x9ba>
					return -1;
				secs = 86400L * (days + 10 * (s[4] - '0') + s[5] - '0' - 1);
    2314:	83 2f       	mov	r24, r19
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	c0 97       	sbiw	r24, 0x30	; 48
    231a:	dc 01       	movw	r26, r24
    231c:	aa 0f       	add	r26, r26
    231e:	bb 1f       	adc	r27, r27
    2320:	88 0f       	add	r24, r24
    2322:	99 1f       	adc	r25, r25
    2324:	88 0f       	add	r24, r24
    2326:	99 1f       	adc	r25, r25
    2328:	88 0f       	add	r24, r24
    232a:	99 1f       	adc	r25, r25
    232c:	a8 0f       	add	r26, r24
    232e:	b9 1f       	adc	r27, r25
    2330:	ae 0d       	add	r26, r14
    2332:	bf 1d       	adc	r27, r15
    2334:	a2 0f       	add	r26, r18
    2336:	b1 1d       	adc	r27, r1
    2338:	d1 97       	sbiw	r26, 0x31	; 49
    233a:	20 e8       	ldi	r18, 0x80	; 128
    233c:	31 e5       	ldi	r19, 0x51	; 81
    233e:	41 e0       	ldi	r20, 0x01	; 1
    2340:	50 e0       	ldi	r21, 0x00	; 0
    2342:	0e 94 0b 2c 	call	0x5816	; 0x5816 <__mulshisi3>
    2346:	6b 01       	movw	r12, r22
    2348:	7c 01       	movw	r14, r24
				s += 7;
    234a:	f3 01       	movw	r30, r6
    234c:	37 96       	adiw	r30, 0x07	; 7
    234e:	2c c0       	rjmp	.+88     	; 0x23a8 <_ZN8iotClock9parseLineEPc+0x7fa>
			} else if(*s == '+') {
    2350:	bb e2       	ldi	r27, 0x2B	; 43
    2352:	fb 12       	cpse	r15, r27
    2354:	0b c0       	rjmp	.+22     	; 0x236c <_ZN8iotClock9parseLineEPc+0x7be>
				secs = iSeconds; s++;
    2356:	c0 90 e2 04 	lds	r12, 0x04E2
    235a:	d0 90 e3 04 	lds	r13, 0x04E3
    235e:	e0 90 e4 04 	lds	r14, 0x04E4
    2362:	f0 90 e5 04 	lds	r15, 0x04E5
    2366:	fe 01       	movw	r30, r28
    2368:	31 96       	adiw	r30, 0x01	; 1
    236a:	1e c0       	rjmp	.+60     	; 0x23a8 <_ZN8iotClock9parseLineEPc+0x7fa>
			} else if(*s == '-') {
    236c:	ed e2       	ldi	r30, 0x2D	; 45
    236e:	fe 12       	cpse	r15, r30
    2370:	17 c0       	rjmp	.+46     	; 0x23a0 <_ZN8iotClock9parseLineEPc+0x7f2>
				secs = iSeconds - iSeconds % 86400L; s++;
    2372:	c0 90 e2 04 	lds	r12, 0x04E2
    2376:	d0 90 e3 04 	lds	r13, 0x04E3
    237a:	e0 90 e4 04 	lds	r14, 0x04E4
    237e:	f0 90 e5 04 	lds	r15, 0x04E5
    2382:	c7 01       	movw	r24, r14
    2384:	b6 01       	movw	r22, r12
    2386:	20 e8       	ldi	r18, 0x80	; 128
    2388:	31 e5       	ldi	r19, 0x51	; 81
    238a:	41 e0       	ldi	r20, 0x01	; 1
    238c:	50 e0       	ldi	r21, 0x00	; 0
    238e:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <__divmodsi4>
    2392:	c6 1a       	sub	r12, r22
    2394:	d7 0a       	sbc	r13, r23
    2396:	e8 0a       	sbc	r14, r24
    2398:	f9 0a       	sbc	r15, r25
    239a:	fe 01       	movw	r30, r28
    239c:	31 96       	adiw	r30, 0x01	; 1
    239e:	04 c0       	rjmp	.+8      	; 0x23a8 <_ZN8iotClock9parseLineEPc+0x7fa>
					return -1;
				secs = 86400L * (days + 10 * (s[4] - '0') + s[5] - '0' - 1);
				s += 7;
			} else if(*s == '+') {
				secs = iSeconds; s++;
			} else if(*s == '-') {
    23a0:	fe 01       	movw	r30, r28
				secs = iSeconds - iSeconds % 86400L; s++;
			} else secs = 0;
    23a2:	c1 2c       	mov	r12, r1
    23a4:	d1 2c       	mov	r13, r1
    23a6:	76 01       	movw	r14, r12
			
			if(!isdigit(s[0])) return -1;
    23a8:	60 81       	ld	r22, Z
    23aa:	86 2f       	mov	r24, r22
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	c0 97       	sbiw	r24, 0x30	; 48
    23b0:	0a 97       	sbiw	r24, 0x0a	; 10
    23b2:	08 f0       	brcs	.+2      	; 0x23b6 <_ZN8iotClock9parseLineEPc+0x808>
    23b4:	d9 c0       	rjmp	.+434    	; 0x2568 <_ZN8iotClock9parseLineEPc+0x9ba>
			if(isdigit(s[1]) && s[2] == ':') {
    23b6:	41 81       	ldd	r20, Z+1	; 0x01
    23b8:	84 2f       	mov	r24, r20
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	c0 97       	sbiw	r24, 0x30	; 48
    23be:	0a 97       	sbiw	r24, 0x0a	; 10
    23c0:	08 f0       	brcs	.+2      	; 0x23c4 <_ZN8iotClock9parseLineEPc+0x816>
    23c2:	95 c0       	rjmp	.+298    	; 0x24ee <_ZN8iotClock9parseLineEPc+0x940>
    23c4:	82 81       	ldd	r24, Z+2	; 0x02
    23c6:	8a 33       	cpi	r24, 0x3A	; 58
    23c8:	09 f0       	breq	.+2      	; 0x23cc <_ZN8iotClock9parseLineEPc+0x81e>
    23ca:	91 c0       	rjmp	.+290    	; 0x24ee <_ZN8iotClock9parseLineEPc+0x940>
				if( !isdigit(s[3]) || !isdigit(s[4]) || (s[5] != ':') ||
    23cc:	b3 80       	ldd	r11, Z+3	; 0x03
    23ce:	8b 2d       	mov	r24, r11
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	c0 97       	sbiw	r24, 0x30	; 48
    23d4:	0a 97       	sbiw	r24, 0x0a	; 10
    23d6:	08 f0       	brcs	.+2      	; 0x23da <_ZN8iotClock9parseLineEPc+0x82c>
    23d8:	c7 c0       	rjmp	.+398    	; 0x2568 <_ZN8iotClock9parseLineEPc+0x9ba>
    23da:	54 81       	ldd	r21, Z+4	; 0x04
    23dc:	85 2f       	mov	r24, r21
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	c0 97       	sbiw	r24, 0x30	; 48
    23e2:	0a 97       	sbiw	r24, 0x0a	; 10
    23e4:	08 f0       	brcs	.+2      	; 0x23e8 <_ZN8iotClock9parseLineEPc+0x83a>
    23e6:	c0 c0       	rjmp	.+384    	; 0x2568 <_ZN8iotClock9parseLineEPc+0x9ba>
    23e8:	85 81       	ldd	r24, Z+5	; 0x05
    23ea:	8a 33       	cpi	r24, 0x3A	; 58
    23ec:	09 f0       	breq	.+2      	; 0x23f0 <_ZN8iotClock9parseLineEPc+0x842>
    23ee:	bc c0       	rjmp	.+376    	; 0x2568 <_ZN8iotClock9parseLineEPc+0x9ba>
					!isdigit(s[6]) || !isdigit(s[7]) ) return -1;
    23f0:	a6 80       	ldd	r10, Z+6	; 0x06
    23f2:	2a 2d       	mov	r18, r10
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	20 53       	subi	r18, 0x30	; 48
    23f8:	31 09       	sbc	r19, r1
				secs = iSeconds - iSeconds % 86400L; s++;
			} else secs = 0;
			
			if(!isdigit(s[0])) return -1;
			if(isdigit(s[1]) && s[2] == ':') {
				if( !isdigit(s[3]) || !isdigit(s[4]) || (s[5] != ':') ||
    23fa:	2a 30       	cpi	r18, 0x0A	; 10
    23fc:	31 05       	cpc	r19, r1
    23fe:	08 f0       	brcs	.+2      	; 0x2402 <_ZN8iotClock9parseLineEPc+0x854>
    2400:	b3 c0       	rjmp	.+358    	; 0x2568 <_ZN8iotClock9parseLineEPc+0x9ba>
					!isdigit(s[6]) || !isdigit(s[7]) ) return -1;
    2402:	97 80       	ldd	r9, Z+7	; 0x07
    2404:	29 2d       	mov	r18, r9
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	20 53       	subi	r18, 0x30	; 48
    240a:	31 09       	sbc	r19, r1
    240c:	2a 30       	cpi	r18, 0x0A	; 10
    240e:	31 05       	cpc	r19, r1
    2410:	08 f0       	brcs	.+2      	; 0x2414 <_ZN8iotClock9parseLineEPc+0x866>
    2412:	aa c0       	rjmp	.+340    	; 0x2568 <_ZN8iotClock9parseLineEPc+0x9ba>
				secs += 36000L * (s[0] - '0');
    2414:	a6 2f       	mov	r26, r22
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	d0 97       	sbiw	r26, 0x30	; 48
    241a:	20 ea       	ldi	r18, 0xA0	; 160
    241c:	3c e8       	ldi	r19, 0x8C	; 140
    241e:	0e 94 05 2c 	call	0x580a	; 0x580a <__usmulhisi3>
    2422:	c6 0e       	add	r12, r22
    2424:	d7 1e       	adc	r13, r23
    2426:	e8 1e       	adc	r14, r24
    2428:	f9 1e       	adc	r15, r25
				secs += 3600 * (s[1] - '0');
    242a:	c4 2f       	mov	r28, r20
    242c:	d0 e0       	ldi	r29, 0x00	; 0
    242e:	e0 97       	sbiw	r28, 0x30	; 48
    2430:	a0 e1       	ldi	r26, 0x10	; 16
    2432:	be e0       	ldi	r27, 0x0E	; 14
    2434:	ca 9f       	mul	r28, r26
    2436:	90 01       	movw	r18, r0
    2438:	cb 9f       	mul	r28, r27
    243a:	30 0d       	add	r19, r0
    243c:	da 9f       	mul	r29, r26
    243e:	30 0d       	add	r19, r0
    2440:	11 24       	eor	r1, r1
    2442:	c9 01       	movw	r24, r18
    2444:	aa 27       	eor	r26, r26
    2446:	97 fd       	sbrc	r25, 7
    2448:	a0 95       	com	r26
    244a:	ba 2f       	mov	r27, r26
    244c:	8c 0d       	add	r24, r12
    244e:	9d 1d       	adc	r25, r13
    2450:	ae 1d       	adc	r26, r14
    2452:	bf 1d       	adc	r27, r15
				secs += 600 * (s[3] - '0');
    2454:	6b 2d       	mov	r22, r11
    2456:	70 e0       	ldi	r23, 0x00	; 0
    2458:	60 53       	subi	r22, 0x30	; 48
    245a:	71 09       	sbc	r23, r1
    245c:	28 e5       	ldi	r18, 0x58	; 88
    245e:	32 e0       	ldi	r19, 0x02	; 2
    2460:	62 9f       	mul	r22, r18
    2462:	60 01       	movw	r12, r0
    2464:	63 9f       	mul	r22, r19
    2466:	d0 0c       	add	r13, r0
    2468:	72 9f       	mul	r23, r18
    246a:	d0 0c       	add	r13, r0
    246c:	11 24       	eor	r1, r1
    246e:	ee 24       	eor	r14, r14
    2470:	d7 fc       	sbrc	r13, 7
    2472:	e0 94       	com	r14
    2474:	fe 2c       	mov	r15, r14
    2476:	8c 0d       	add	r24, r12
    2478:	9d 1d       	adc	r25, r13
    247a:	ae 1d       	adc	r26, r14
    247c:	bf 1d       	adc	r27, r15
				secs += 60 * (s[4] - '0');
    247e:	25 2f       	mov	r18, r21
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	20 53       	subi	r18, 0x30	; 48
    2484:	31 09       	sbc	r19, r1
    2486:	6c e3       	ldi	r22, 0x3C	; 60
    2488:	62 9f       	mul	r22, r18
    248a:	a0 01       	movw	r20, r0
    248c:	63 9f       	mul	r22, r19
    248e:	50 0d       	add	r21, r0
    2490:	11 24       	eor	r1, r1
    2492:	66 27       	eor	r22, r22
    2494:	57 fd       	sbrc	r21, 7
    2496:	60 95       	com	r22
    2498:	76 2f       	mov	r23, r22
    249a:	84 0f       	add	r24, r20
    249c:	95 1f       	adc	r25, r21
    249e:	a6 1f       	adc	r26, r22
    24a0:	b7 1f       	adc	r27, r23
				secs += 10 * (s[6] - '0');
    24a2:	b1 2c       	mov	r11, r1
    24a4:	20 e3       	ldi	r18, 0x30	; 48
    24a6:	a2 1a       	sub	r10, r18
    24a8:	b1 08       	sbc	r11, r1
    24aa:	a5 01       	movw	r20, r10
    24ac:	44 0f       	add	r20, r20
    24ae:	55 1f       	adc	r21, r21
    24b0:	aa 0c       	add	r10, r10
    24b2:	bb 1c       	adc	r11, r11
    24b4:	aa 0c       	add	r10, r10
    24b6:	bb 1c       	adc	r11, r11
    24b8:	aa 0c       	add	r10, r10
    24ba:	bb 1c       	adc	r11, r11
    24bc:	4a 0d       	add	r20, r10
    24be:	5b 1d       	adc	r21, r11
    24c0:	66 27       	eor	r22, r22
    24c2:	57 fd       	sbrc	r21, 7
    24c4:	60 95       	com	r22
    24c6:	76 2f       	mov	r23, r22
    24c8:	84 0f       	add	r24, r20
    24ca:	95 1f       	adc	r25, r21
    24cc:	a6 1f       	adc	r26, r22
    24ce:	b7 1f       	adc	r27, r23
				secs += (s[7] - '0');
    24d0:	49 2d       	mov	r20, r9
    24d2:	50 e0       	ldi	r21, 0x00	; 0
    24d4:	40 53       	subi	r20, 0x30	; 48
    24d6:	51 09       	sbc	r21, r1
    24d8:	66 27       	eor	r22, r22
    24da:	57 fd       	sbrc	r21, 7
    24dc:	60 95       	com	r22
    24de:	76 2f       	mov	r23, r22
				*ps = s + 8;
    24e0:	ef 01       	movw	r28, r30
    24e2:	28 96       	adiw	r28, 0x08	; 8
				secs += 36000L * (s[0] - '0');
				secs += 3600 * (s[1] - '0');
				secs += 600 * (s[3] - '0');
				secs += 60 * (s[4] - '0');
				secs += 10 * (s[6] - '0');
				secs += (s[7] - '0');
    24e4:	84 0f       	add	r24, r20
    24e6:	95 1f       	adc	r25, r21
    24e8:	a6 1f       	adc	r26, r22
    24ea:	b7 1f       	adc	r27, r23
    24ec:	2a c0       	rjmp	.+84     	; 0x2542 <_ZN8iotClock9parseLineEPc+0x994>
    24ee:	31 96       	adiw	r30, 0x01	; 1
				s += 7;
			} else if(*s == '+') {
				secs = iSeconds; s++;
			} else if(*s == '-') {
				secs = iSeconds - iSeconds % 86400L; s++;
			} else secs = 0;
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	dc 01       	movw	r26, r24
				secs += 10 * (s[6] - '0');
				secs += (s[7] - '0');
				*ps = s + 8;
			} else {
				long	n = 0;
				while(isdigit(*s)) n = 10 * n + *s++ - '0';
    24f6:	ef 01       	movw	r28, r30
    24f8:	88 0f       	add	r24, r24
    24fa:	99 1f       	adc	r25, r25
    24fc:	aa 1f       	adc	r26, r26
    24fe:	bb 1f       	adc	r27, r27
    2500:	4c 01       	movw	r8, r24
    2502:	5d 01       	movw	r10, r26
    2504:	88 0c       	add	r8, r8
    2506:	99 1c       	adc	r9, r9
    2508:	aa 1c       	adc	r10, r10
    250a:	bb 1c       	adc	r11, r11
    250c:	88 0c       	add	r8, r8
    250e:	99 1c       	adc	r9, r9
    2510:	aa 1c       	adc	r10, r10
    2512:	bb 1c       	adc	r11, r11
    2514:	88 0d       	add	r24, r8
    2516:	99 1d       	adc	r25, r9
    2518:	aa 1d       	adc	r26, r10
    251a:	bb 1d       	adc	r27, r11
    251c:	86 0f       	add	r24, r22
    251e:	91 1d       	adc	r25, r1
    2520:	a1 1d       	adc	r26, r1
    2522:	b1 1d       	adc	r27, r1
    2524:	c0 97       	sbiw	r24, 0x30	; 48
    2526:	a1 09       	sbc	r26, r1
    2528:	b1 09       	sbc	r27, r1
    252a:	61 91       	ld	r22, Z+
    252c:	26 2f       	mov	r18, r22
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	20 53       	subi	r18, 0x30	; 48
    2532:	31 09       	sbc	r19, r1
    2534:	2a 30       	cpi	r18, 0x0A	; 10
    2536:	31 05       	cpc	r19, r1
    2538:	f0 f2       	brcs	.-68     	; 0x24f6 <_ZN8iotClock9parseLineEPc+0x948>
				secs += n;
    253a:	8c 0d       	add	r24, r12
    253c:	9d 1d       	adc	r25, r13
    253e:	ae 1d       	adc	r26, r14
    2540:	bf 1d       	adc	r27, r15
				if( ((secs = toSeconds(&s)) >= 0) &&
					((n = allocSchedule()) >= 0) ) {
					while(isspace(*s)) s++;
					iotSchedule	*sch = iSchedule + n;
					sch->iTime = secs;
					if((secs = toSeconds(&s)) >= 0) {
    2542:	bb 23       	and	r27, r27
    2544:	8c f0       	brlt	.+34     	; 0x2568 <_ZN8iotClock9parseLineEPc+0x9ba>
						sch->iPeriod = secs;
    2546:	f8 01       	movw	r30, r16
    2548:	84 83       	std	Z+4, r24	; 0x04
    254a:	95 83       	std	Z+5, r25	; 0x05
    254c:	a6 83       	std	Z+6, r26	; 0x06
    254e:	b7 83       	std	Z+7, r27	; 0x07
    2550:	7e 01       	movw	r14, r28
    2552:	e7 01       	movw	r28, r14
    2554:	ff ef       	ldi	r31, 0xFF	; 255
    2556:	ef 1a       	sub	r14, r31
    2558:	ff 0a       	sbc	r15, r31
						while(isspace(*s)) s++;
    255a:	88 81       	ld	r24, Y
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <isspace>
    2562:	89 2b       	or	r24, r25
    2564:	b1 f7       	brne	.-20     	; 0x2552 <_ZN8iotClock9parseLineEPc+0x9a4>
    2566:	07 c0       	rjmp	.+14     	; 0x2576 <_ZN8iotClock9parseLineEPc+0x9c8>
					} else sch->iPeriod = 0;
    2568:	d8 01       	movw	r26, r16
    256a:	14 96       	adiw	r26, 0x04	; 4
    256c:	1d 92       	st	X+, r1
    256e:	1d 92       	st	X+, r1
    2570:	1d 92       	st	X+, r1
    2572:	1c 92       	st	X, r1
    2574:	17 97       	sbiw	r26, 0x07	; 7
					strcpy(sch->iLine, s);
    2576:	78 01       	movw	r14, r16
    2578:	b8 e0       	ldi	r27, 0x08	; 8
    257a:	eb 0e       	add	r14, r27
    257c:	f1 1c       	adc	r15, r1
    257e:	be 01       	movw	r22, r28
    2580:	c7 01       	movw	r24, r14
    2582:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <strcpy>
					printf("schedule %d: %ld %ld %s\n",
						n, sch->iTime, sch->iPeriod, sch->iLine);
    2586:	ff 92       	push	r15
    2588:	ef 92       	push	r14
    258a:	f8 01       	movw	r30, r16
    258c:	87 81       	ldd	r24, Z+7	; 0x07
    258e:	8f 93       	push	r24
    2590:	86 81       	ldd	r24, Z+6	; 0x06
    2592:	8f 93       	push	r24
    2594:	85 81       	ldd	r24, Z+5	; 0x05
    2596:	8f 93       	push	r24
    2598:	84 81       	ldd	r24, Z+4	; 0x04
    259a:	8f 93       	push	r24
    259c:	83 81       	ldd	r24, Z+3	; 0x03
    259e:	8f 93       	push	r24
    25a0:	82 81       	ldd	r24, Z+2	; 0x02
    25a2:	8f 93       	push	r24
    25a4:	81 81       	ldd	r24, Z+1	; 0x01
    25a6:	8f 93       	push	r24
    25a8:	80 81       	ld	r24, Z
    25aa:	8f 93       	push	r24
    25ac:	85 2d       	mov	r24, r5
    25ae:	99 27       	eor	r25, r25
    25b0:	87 fd       	sbrc	r24, 7
    25b2:	90 95       	com	r25
    25b4:	9f 93       	push	r25
    25b6:	5f 92       	push	r5
    25b8:	8e e9       	ldi	r24, 0x9E	; 158
    25ba:	91 e0       	ldi	r25, 0x01	; 1
    25bc:	9f 93       	push	r25
    25be:	8f 93       	push	r24
    25c0:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <printf>
    25c4:	8d b7       	in	r24, 0x3d	; 61
    25c6:	9e b7       	in	r25, 0x3e	; 62
    25c8:	0e 96       	adiw	r24, 0x0e	; 14
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	9e bf       	out	0x3e, r25	; 62
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	8d bf       	out	0x3d, r24	; 61
				} else printf("at: error\n");
				return true;
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	43 c0       	rjmp	.+134    	; 0x265e <_ZN8iotClock9parseLineEPc+0xab0>
						while(isspace(*s)) s++;
					} else sch->iPeriod = 0;
					strcpy(sch->iLine, s);
					printf("schedule %d: %ld %ld %s\n",
						n, sch->iTime, sch->iPeriod, sch->iLine);
				} else printf("at: error\n");
    25d8:	87 eb       	ldi	r24, 0xB7	; 183
    25da:	91 e0       	ldi	r25, 0x01	; 1
    25dc:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <puts>
				return true;
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	3d c0       	rjmp	.+122    	; 0x265e <_ZN8iotClock9parseLineEPc+0xab0>
			} else if(strncmp(s, "cancel", 6) == 0) {
    25e4:	46 e0       	ldi	r20, 0x06	; 6
    25e6:	50 e0       	ldi	r21, 0x00	; 0
    25e8:	61 ec       	ldi	r22, 0xC1	; 193
    25ea:	71 e0       	ldi	r23, 0x01	; 1
    25ec:	ce 01       	movw	r24, r28
    25ee:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <strncmp>
    25f2:	89 2b       	or	r24, r25
    25f4:	99 f5       	brne	.+102    	; 0x265c <_ZN8iotClock9parseLineEPc+0xaae>
				int8_t	n;
				s += 6; while(isspace(*s)) s++;
    25f6:	26 96       	adiw	r28, 0x06	; 6
    25f8:	8e 01       	movw	r16, r28
    25fa:	21 96       	adiw	r28, 0x01	; 1
    25fc:	d8 01       	movw	r26, r16
    25fe:	8c 91       	ld	r24, X
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <isspace>
    2606:	89 2b       	or	r24, r25
    2608:	b9 f7       	brne	.-18     	; 0x25f8 <_ZN8iotClock9parseLineEPc+0xa4a>
				n = atoi(s);
    260a:	c8 01       	movw	r24, r16
    260c:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <atoi>
				else s->iTime = 0;
			}
		}
		static int
		cancelSchedule(int8_t n) {
			if((n < 0) || (n >= iotcMaxSchedules)) return -1;
    2610:	85 30       	cpi	r24, 0x05	; 5
    2612:	f0 f4       	brcc	.+60     	; 0x2650 <_ZN8iotClock9parseLineEPc+0xaa2>
			iSchedule[n].iTime = 0;
    2614:	28 2f       	mov	r18, r24
    2616:	33 27       	eor	r19, r19
    2618:	27 fd       	sbrc	r18, 7
    261a:	30 95       	com	r19
    261c:	ba e3       	ldi	r27, 0x3A	; 58
    261e:	8b 02       	muls	r24, r27
    2620:	f0 01       	movw	r30, r0
    2622:	11 24       	eor	r1, r1
    2624:	e4 54       	subi	r30, 0x44	; 68
    2626:	fc 4f       	sbci	r31, 0xFC	; 252
    2628:	10 82       	st	Z, r1
    262a:	11 82       	std	Z+1, r1	; 0x01
    262c:	12 82       	std	Z+2, r1	; 0x02
    262e:	13 82       	std	Z+3, r1	; 0x03
				return true;
			} else if(strncmp(s, "cancel", 6) == 0) {
				int8_t	n;
				s += 6; while(isspace(*s)) s++;
				n = atoi(s);
				if((n = cancelSchedule(n)) >= 0) printf("cancel %d\n", n);
    2630:	88 23       	and	r24, r24
    2632:	74 f0       	brlt	.+28     	; 0x2650 <_ZN8iotClock9parseLineEPc+0xaa2>
    2634:	3f 93       	push	r19
    2636:	8f 93       	push	r24
    2638:	88 ec       	ldi	r24, 0xC8	; 200
    263a:	91 e0       	ldi	r25, 0x01	; 1
    263c:	9f 93       	push	r25
    263e:	8f 93       	push	r24
    2640:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <printf>
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	0f 90       	pop	r0
    264a:	0f 90       	pop	r0
				else printf("cancel: error\n");
				return true;
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	07 c0       	rjmp	.+14     	; 0x265e <_ZN8iotClock9parseLineEPc+0xab0>
			} else if(strncmp(s, "cancel", 6) == 0) {
				int8_t	n;
				s += 6; while(isspace(*s)) s++;
				n = atoi(s);
				if((n = cancelSchedule(n)) >= 0) printf("cancel %d\n", n);
				else printf("cancel: error\n");
    2650:	83 ed       	ldi	r24, 0xD3	; 211
    2652:	91 e0       	ldi	r25, 0x01	; 1
    2654:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <puts>
				return true;
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	01 c0       	rjmp	.+2      	; 0x265e <_ZN8iotClock9parseLineEPc+0xab0>
			}
			return false;
    265c:	80 e0       	ldi	r24, 0x00	; 0
		}
    265e:	df 91       	pop	r29
    2660:	cf 91       	pop	r28
    2662:	1f 91       	pop	r17
    2664:	0f 91       	pop	r16
    2666:	ff 90       	pop	r15
    2668:	ef 90       	pop	r14
    266a:	df 90       	pop	r13
    266c:	cf 90       	pop	r12
    266e:	bf 90       	pop	r11
    2670:	af 90       	pop	r10
    2672:	9f 90       	pop	r9
    2674:	8f 90       	pop	r8
    2676:	7f 90       	pop	r7
    2678:	6f 90       	pop	r6
    267a:	5f 90       	pop	r5
    267c:	08 95       	ret

0000267e <_ZN13iotIrReceiver6enableEv>:
			}
		}
		void
		configure(iotTimerPsd aPsd, unsigned int aCount) {
			unsigned char	psd = 0;
			if(iId == iotcTimer0) {
    267e:	e0 91 e9 06 	lds	r30, 0x06E9
    2682:	f0 91 ea 06 	lds	r31, 0x06EA
					case iotcPsd256: psd = 4; break;
					case iotcPsd1024: psd = 5; break;
					default: return;
				}
			}
			switch(iId) {
    2686:	80 81       	ld	r24, Z
    2688:	82 30       	cpi	r24, 0x02	; 2
    268a:	79 f0       	breq	.+30     	; 0x26aa <_ZN13iotIrReceiver6enableEv+0x2c>
    268c:	18 f4       	brcc	.+6      	; 0x2694 <_ZN13iotIrReceiver6enableEv+0x16>
    268e:	81 30       	cpi	r24, 0x01	; 1
    2690:	31 f0       	breq	.+12     	; 0x269e <_ZN13iotIrReceiver6enableEv+0x20>
    2692:	2d c0       	rjmp	.+90     	; 0x26ee <_ZN13iotIrReceiver6enableEv+0x70>
    2694:	83 30       	cpi	r24, 0x03	; 3
    2696:	a1 f0       	breq	.+40     	; 0x26c0 <_ZN13iotIrReceiver6enableEv+0x42>
    2698:	84 30       	cpi	r24, 0x04	; 4
    269a:	c1 f0       	breq	.+48     	; 0x26cc <_ZN13iotIrReceiver6enableEv+0x4e>
    269c:	28 c0       	rjmp	.+80     	; 0x26ee <_ZN13iotIrReceiver6enableEv+0x70>
				case iotcTimer0:
					TCNT0 = 0; OCR0 = aCount & 0xff;
    269e:	12 be       	out	0x32, r1	; 50
    26a0:	80 e2       	ldi	r24, 0x20	; 32
    26a2:	81 bf       	out	0x31, r24	; 49
					TCCR0 = (1 << WGM01) | psd;
    26a4:	89 e0       	ldi	r24, 0x09	; 9
    26a6:	83 bf       	out	0x33, r24	; 51
    26a8:	22 c0       	rjmp	.+68     	; 0x26ee <_ZN13iotIrReceiver6enableEv+0x70>
					break;
				case iotcTimer1:
					TCCR1A = 0; TCCR1B = 0; TCNT1 = 0; OCR1A = aCount;
    26aa:	1f bc       	out	0x2f, r1	; 47
    26ac:	1e bc       	out	0x2e, r1	; 46
    26ae:	1d bc       	out	0x2d, r1	; 45
    26b0:	1c bc       	out	0x2c, r1	; 44
    26b2:	80 e2       	ldi	r24, 0x20	; 32
    26b4:	93 e0       	ldi	r25, 0x03	; 3
    26b6:	9b bd       	out	0x2b, r25	; 43
    26b8:	8a bd       	out	0x2a, r24	; 42
					TCCR1B = (1 << WGM12) | psd;
    26ba:	89 e0       	ldi	r24, 0x09	; 9
    26bc:	8e bd       	out	0x2e, r24	; 46
    26be:	17 c0       	rjmp	.+46     	; 0x26ee <_ZN13iotIrReceiver6enableEv+0x70>
					break;
				case iotcTimer2:
					TCNT2 = 0; OCR2 = aCount & 0xff;
    26c0:	14 bc       	out	0x24, r1	; 36
    26c2:	80 e2       	ldi	r24, 0x20	; 32
    26c4:	83 bd       	out	0x23, r24	; 35
					TCCR2 = (1 << WGM21) | psd;
    26c6:	89 e0       	ldi	r24, 0x09	; 9
    26c8:	85 bd       	out	0x25, r24	; 37
    26ca:	11 c0       	rjmp	.+34     	; 0x26ee <_ZN13iotIrReceiver6enableEv+0x70>
					break;
				case iotcTimer3:
					TCCR3A = 0; TCCR3B = 0; TCNT3 = 0; OCR3A = aCount;
    26cc:	10 92 8b 00 	sts	0x008B, r1
    26d0:	ea e8       	ldi	r30, 0x8A	; 138
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	10 82       	st	Z, r1
    26d6:	10 92 89 00 	sts	0x0089, r1
    26da:	10 92 88 00 	sts	0x0088, r1
    26de:	80 e2       	ldi	r24, 0x20	; 32
    26e0:	93 e0       	ldi	r25, 0x03	; 3
    26e2:	90 93 87 00 	sts	0x0087, r25
    26e6:	80 93 86 00 	sts	0x0086, r24
					TCCR3B = (1 << WGM32) | psd;
    26ea:	89 e0       	ldi	r24, 0x09	; 9
    26ec:	80 83       	st	Z, r24
		void
		enable() {
			iTimer->configure(iotTimer::iotcPsd1,
				F_CPU * iotcIrUSecPerTick / 1000000);

			iDecoder->iVendor = iotcUnknown;
    26ee:	e0 91 eb 06 	lds	r30, 0x06EB
    26f2:	f0 91 ec 06 	lds	r31, 0x06EC
    26f6:	10 82       	st	Z, r1
			iDecoder->iState = iotcIrStateIdle;
    26f8:	e0 91 eb 06 	lds	r30, 0x06EB
    26fc:	f0 91 ec 06 	lds	r31, 0x06EC
    2700:	11 82       	std	Z+1, r1	; 0x01
			iDecoder->inIntervals = 0;
    2702:	e0 91 eb 06 	lds	r30, 0x06EB
    2706:	f0 91 ec 06 	lds	r31, 0x06EC
    270a:	12 82       	std	Z+2, r1	; 0x02
			iDecoder->iTimer = 0;
    270c:	e5 53       	subi	r30, 0x35	; 53
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	11 82       	std	Z+1, r1	; 0x01
    2712:	10 82       	st	Z, r1
					iCallback3 = (void (*)(void)) NULL; break;
				default: break;
			}
			iId = iotcTimerNone;
		}
		iotTimerId getId()		{ return(iId); }
    2714:	e0 91 e9 06 	lds	r30, 0x06E9
    2718:	f0 91 ea 06 	lds	r31, 0x06EA

			// set pin direction to input.
			if(iTimer->getId() == iotTimer::iotcTimer1) DDRB &= ~(1 << PB4);
    271c:	80 81       	ld	r24, Z
    271e:	82 30       	cpi	r24, 0x02	; 2
    2720:	11 f4       	brne	.+4      	; 0x2726 <_ZN13iotIrReceiver6enableEv+0xa8>
    2722:	bc 98       	cbi	0x17, 4	; 23
    2724:	01 c0       	rjmp	.+2      	; 0x2728 <_ZN13iotIrReceiver6enableEv+0xaa>
			else DDRE &= ~(1 << PE2);	// iotTimer::iotcTimer3
    2726:	12 98       	cbi	0x02, 2	; 2
				default: return;
			}
		}
		void
		enableInterrupt(void (* aCallback) (void)) {
			switch(iId) {
    2728:	e0 91 e9 06 	lds	r30, 0x06E9
    272c:	f0 91 ea 06 	lds	r31, 0x06EA
    2730:	80 81       	ld	r24, Z
    2732:	82 30       	cpi	r24, 0x02	; 2
    2734:	99 f0       	breq	.+38     	; 0x275c <_ZN13iotIrReceiver6enableEv+0xde>
    2736:	18 f4       	brcc	.+6      	; 0x273e <_ZN13iotIrReceiver6enableEv+0xc0>
    2738:	81 30       	cpi	r24, 0x01	; 1
    273a:	31 f0       	breq	.+12     	; 0x2748 <_ZN13iotIrReceiver6enableEv+0xca>
    273c:	08 95       	ret
    273e:	83 30       	cpi	r24, 0x03	; 3
    2740:	b9 f0       	breq	.+46     	; 0x2770 <_ZN13iotIrReceiver6enableEv+0xf2>
    2742:	84 30       	cpi	r24, 0x04	; 4
    2744:	f9 f0       	breq	.+62     	; 0x2784 <_ZN13iotIrReceiver6enableEv+0x106>
    2746:	08 95       	ret
				case iotcTimer0:
					iCallback0 = aCallback; TIMSK |= (1 << OCIE0); break;
    2748:	85 eb       	ldi	r24, 0xB5	; 181
    274a:	94 e0       	ldi	r25, 0x04	; 4
    274c:	90 93 e6 06 	sts	0x06E6, r25
    2750:	80 93 e5 06 	sts	0x06E5, r24
    2754:	87 b7       	in	r24, 0x37	; 55
    2756:	82 60       	ori	r24, 0x02	; 2
    2758:	87 bf       	out	0x37, r24	; 55
    275a:	08 95       	ret
				case iotcTimer1:
					iCallback1 = aCallback; TIMSK |= (1 << OCIE1A); break;
    275c:	85 eb       	ldi	r24, 0xB5	; 181
    275e:	94 e0       	ldi	r25, 0x04	; 4
    2760:	90 93 e4 06 	sts	0x06E4, r25
    2764:	80 93 e3 06 	sts	0x06E3, r24
    2768:	87 b7       	in	r24, 0x37	; 55
    276a:	80 61       	ori	r24, 0x10	; 16
    276c:	87 bf       	out	0x37, r24	; 55
    276e:	08 95       	ret
				case iotcTimer2:
					iCallback2 = aCallback; TIMSK |= (1 << OCIE2); break;
    2770:	85 eb       	ldi	r24, 0xB5	; 181
    2772:	94 e0       	ldi	r25, 0x04	; 4
    2774:	90 93 e2 06 	sts	0x06E2, r25
    2778:	80 93 e1 06 	sts	0x06E1, r24
    277c:	87 b7       	in	r24, 0x37	; 55
    277e:	80 68       	ori	r24, 0x80	; 128
    2780:	87 bf       	out	0x37, r24	; 55
    2782:	08 95       	ret
				case iotcTimer3:
					iCallback3 = aCallback; ETIMSK |= (1 << OCIE3A); break;
    2784:	85 eb       	ldi	r24, 0xB5	; 181
    2786:	94 e0       	ldi	r25, 0x04	; 4
    2788:	90 93 e0 06 	sts	0x06E0, r25
    278c:	80 93 df 06 	sts	0x06DF, r24
    2790:	ed e7       	ldi	r30, 0x7D	; 125
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	80 61       	ori	r24, 0x10	; 16
    2798:	80 83       	st	Z, r24
    279a:	08 95       	ret

0000279c <_ZN16iotIrTransmitter11sendSamsungEmi>:
			mark(iotcNecBitMark);
			space(0);
		}

		void
		sendSamsung(unsigned long aData, int anBits) {
    279c:	0f 93       	push	r16
    279e:	1f 93       	push	r17
    27a0:	cf 93       	push	r28
    27a2:	df 93       	push	r29
				default: break;
			}
		}
		void
		disableInterrupt() {
			switch(iId) {
    27a4:	e0 91 e7 06 	lds	r30, 0x06E7
    27a8:	f0 91 e8 06 	lds	r31, 0x06E8
    27ac:	80 81       	ld	r24, Z
    27ae:	82 30       	cpi	r24, 0x02	; 2
    27b0:	69 f0       	breq	.+26     	; 0x27cc <_ZN16iotIrTransmitter11sendSamsungEmi+0x30>
    27b2:	18 f4       	brcc	.+6      	; 0x27ba <_ZN16iotIrTransmitter11sendSamsungEmi+0x1e>
    27b4:	81 30       	cpi	r24, 0x01	; 1
    27b6:	31 f0       	breq	.+12     	; 0x27c4 <_ZN16iotIrTransmitter11sendSamsungEmi+0x28>
    27b8:	16 c0       	rjmp	.+44     	; 0x27e6 <_ZN16iotIrTransmitter11sendSamsungEmi+0x4a>
    27ba:	83 30       	cpi	r24, 0x03	; 3
    27bc:	59 f0       	breq	.+22     	; 0x27d4 <_ZN16iotIrTransmitter11sendSamsungEmi+0x38>
    27be:	84 30       	cpi	r24, 0x04	; 4
    27c0:	69 f0       	breq	.+26     	; 0x27dc <_ZN16iotIrTransmitter11sendSamsungEmi+0x40>
    27c2:	11 c0       	rjmp	.+34     	; 0x27e6 <_ZN16iotIrTransmitter11sendSamsungEmi+0x4a>
				case iotcTimer0: TIMSK &= ~(1 << OCIE0); break;
    27c4:	87 b7       	in	r24, 0x37	; 55
    27c6:	8d 7f       	andi	r24, 0xFD	; 253
    27c8:	87 bf       	out	0x37, r24	; 55
    27ca:	0d c0       	rjmp	.+26     	; 0x27e6 <_ZN16iotIrTransmitter11sendSamsungEmi+0x4a>
				case iotcTimer1: TIMSK &= ~(1 << OCIE1A); break;
    27cc:	87 b7       	in	r24, 0x37	; 55
    27ce:	8f 7e       	andi	r24, 0xEF	; 239
    27d0:	87 bf       	out	0x37, r24	; 55
    27d2:	09 c0       	rjmp	.+18     	; 0x27e6 <_ZN16iotIrTransmitter11sendSamsungEmi+0x4a>
				case iotcTimer2: TIMSK &= ~(1 << OCIE2); break;
    27d4:	87 b7       	in	r24, 0x37	; 55
    27d6:	8f 77       	andi	r24, 0x7F	; 127
    27d8:	87 bf       	out	0x37, r24	; 55
    27da:	05 c0       	rjmp	.+10     	; 0x27e6 <_ZN16iotIrTransmitter11sendSamsungEmi+0x4a>
				case iotcTimer3: ETIMSK &= ~(1 << OCIE3A); break;
    27dc:	ed e7       	ldi	r30, 0x7D	; 125
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	80 81       	ld	r24, Z
    27e2:	8f 7e       	andi	r24, 0xEF	; 239
    27e4:	80 83       	st	Z, r24
					iCallback3 = (void (*)(void)) NULL; break;
				default: break;
			}
			iId = iotcTimerNone;
		}
		iotTimerId getId()		{ return(iId); }
    27e6:	e0 91 e7 06 	lds	r30, 0x06E7
    27ea:	f0 91 e8 06 	lds	r31, 0x06E8
    27ee:	80 81       	ld	r24, Z
		}

		void
		enable(int aKHz) {
			iTimer->disableInterrupt();
			if(iTimer->getId() == iotTimer::iotcTimer1) {
    27f0:	82 30       	cpi	r24, 0x02	; 2
    27f2:	19 f4       	brne	.+6      	; 0x27fa <_ZN16iotIrTransmitter11sendSamsungEmi+0x5e>
				DDRB |= (1 << PB5);		// output
    27f4:	bd 9a       	sbi	0x17, 5	; 23
				// when not sending PWM, we want it low
				PORTB &= ~(1 << PB5);
    27f6:	c5 98       	cbi	0x18, 5	; 24
    27f8:	04 c0       	rjmp	.+8      	; 0x2802 <_ZN16iotIrTransmitter11sendSamsungEmi+0x66>
			} else if(iTimer->getId() == iotTimer::iotcTimer3) {
    27fa:	84 30       	cpi	r24, 0x04	; 4
    27fc:	11 f4       	brne	.+4      	; 0x2802 <_ZN16iotIrTransmitter11sendSamsungEmi+0x66>
				DDRE |= (1 << PE3);		// output
    27fe:	13 9a       	sbi	0x02, 3	; 2
				// when not sending PWM, we want it low
				PORTE &= ~(1 << PE3);
    2800:	1b 98       	cbi	0x03, 3	; 3
			// the counter repeatedly counts from bottom to top, 
			// and then from top to bottom.
			// OCnA is cleared on the compare match while up counting,
			// and set on the compare match while down counting.
			// TOP = ICRn, Update OCRnA at TOP.
			switch(iId) {
    2802:	e0 91 e7 06 	lds	r30, 0x06E7
    2806:	f0 91 e8 06 	lds	r31, 0x06E8
    280a:	80 81       	ld	r24, Z
    280c:	82 30       	cpi	r24, 0x02	; 2
    280e:	19 f0       	breq	.+6      	; 0x2816 <_ZN16iotIrTransmitter11sendSamsungEmi+0x7a>
    2810:	84 30       	cpi	r24, 0x04	; 4
    2812:	71 f0       	breq	.+28     	; 0x2830 <_ZN16iotIrTransmitter11sendSamsungEmi+0x94>
    2814:	1f c0       	rjmp	.+62     	; 0x2854 <_ZN16iotIrTransmitter11sendSamsungEmi+0xb8>
				case iotcTimer1: {
					const uint16_t	pwmVal = F_CPU / 2000 / aKHz;
					ICR1 = pwmVal; OCR1A = pwmVal / 3;
    2816:	82 ed       	ldi	r24, 0xD2	; 210
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	97 bd       	out	0x27, r25	; 39
    281c:	86 bd       	out	0x26, r24	; 38
    281e:	86 e4       	ldi	r24, 0x46	; 70
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	9b bd       	out	0x2b, r25	; 43
    2824:	8a bd       	out	0x2a, r24	; 42
					TCCR1A = (1 << WGM11); TCCR1B = (1 << WGM13) | (1 << CS10);
    2826:	82 e0       	ldi	r24, 0x02	; 2
    2828:	8f bd       	out	0x2f, r24	; 47
    282a:	81 e1       	ldi	r24, 0x11	; 17
    282c:	8e bd       	out	0x2e, r24	; 46
    282e:	12 c0       	rjmp	.+36     	; 0x2854 <_ZN16iotIrTransmitter11sendSamsungEmi+0xb8>
					break;
				}
				case iotcTimer3: {
					const uint16_t	pwmVal = F_CPU / 2000 / aKHz;
					ICR3 = pwmVal; OCR3A = pwmVal / 3;
    2830:	82 ed       	ldi	r24, 0xD2	; 210
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	90 93 81 00 	sts	0x0081, r25
    2838:	80 93 80 00 	sts	0x0080, r24
    283c:	86 e4       	ldi	r24, 0x46	; 70
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	90 93 87 00 	sts	0x0087, r25
    2844:	80 93 86 00 	sts	0x0086, r24
					TCCR3A = (1 << WGM31); TCCR3B = (1 << WGM33) | (1 << CS30);
    2848:	82 e0       	ldi	r24, 0x02	; 2
    284a:	80 93 8b 00 	sts	0x008B, r24
    284e:	81 e1       	ldi	r24, 0x11	; 17
    2850:	80 93 8a 00 	sts	0x008A, r24
		void
		enablePWMOut() {
			// COMnA1:0 = 2 with WGMn3:0 = 10.
			// clear OCnA on compare match when up-counting.
			// set OCnA on compare match when down-counting.
			switch(iId) {
    2854:	e0 91 e7 06 	lds	r30, 0x06E7
    2858:	f0 91 e8 06 	lds	r31, 0x06E8
    285c:	80 81       	ld	r24, Z
    285e:	82 30       	cpi	r24, 0x02	; 2
    2860:	69 f0       	breq	.+26     	; 0x287c <_ZN16iotIrTransmitter11sendSamsungEmi+0xe0>
    2862:	18 f4       	brcc	.+6      	; 0x286a <_ZN16iotIrTransmitter11sendSamsungEmi+0xce>
    2864:	81 30       	cpi	r24, 0x01	; 1
    2866:	31 f0       	breq	.+12     	; 0x2874 <_ZN16iotIrTransmitter11sendSamsungEmi+0xd8>
    2868:	16 c0       	rjmp	.+44     	; 0x2896 <_ZN16iotIrTransmitter11sendSamsungEmi+0xfa>
    286a:	83 30       	cpi	r24, 0x03	; 3
    286c:	59 f0       	breq	.+22     	; 0x2884 <_ZN16iotIrTransmitter11sendSamsungEmi+0xe8>
    286e:	84 30       	cpi	r24, 0x04	; 4
    2870:	69 f0       	breq	.+26     	; 0x288c <_ZN16iotIrTransmitter11sendSamsungEmi+0xf0>
    2872:	11 c0       	rjmp	.+34     	; 0x2896 <_ZN16iotIrTransmitter11sendSamsungEmi+0xfa>
				case iotcTimer0: TCCR0 |= (1 << COM01); break;
    2874:	83 b7       	in	r24, 0x33	; 51
    2876:	80 62       	ori	r24, 0x20	; 32
    2878:	83 bf       	out	0x33, r24	; 51
    287a:	0d c0       	rjmp	.+26     	; 0x2896 <_ZN16iotIrTransmitter11sendSamsungEmi+0xfa>
				case iotcTimer1: TCCR1A |= (1 << COM1A1); break;
    287c:	8f b5       	in	r24, 0x2f	; 47
    287e:	80 68       	ori	r24, 0x80	; 128
    2880:	8f bd       	out	0x2f, r24	; 47
    2882:	09 c0       	rjmp	.+18     	; 0x2896 <_ZN16iotIrTransmitter11sendSamsungEmi+0xfa>
				case iotcTimer2: TCCR2 |= (1 << COM21); break;
    2884:	85 b5       	in	r24, 0x25	; 37
    2886:	80 62       	ori	r24, 0x20	; 32
    2888:	85 bd       	out	0x25, r24	; 37
    288a:	05 c0       	rjmp	.+10     	; 0x2896 <_ZN16iotIrTransmitter11sendSamsungEmi+0xfa>
				case iotcTimer3: TCCR3A |= (1 << COM3A1); break;
    288c:	eb e8       	ldi	r30, 0x8B	; 139
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	80 81       	ld	r24, Z
    2892:	80 68       	ori	r24, 0x80	; 128
    2894:	80 83       	st	Z, r24

			// busy wait
			__asm__ __volatile__ (
				"1: sbiw %0,1" "\n\t"					// 2 cycles
				"brne 1b" : "=w" (auSec) : "0" (auSec)	// 2 cycles
			);
    2896:	8a e1       	ldi	r24, 0x1A	; 26
    2898:	9e e4       	ldi	r25, 0x4E	; 78
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	f1 f7       	brne	.-4      	; 0x289a <_ZN16iotIrTransmitter11sendSamsungEmi+0xfe>
		}
		void
		disablePWMOut() {
			// COMnA1:0 = 0 with WGM3:0 = 10.
			// OCnA disconnected.
			switch(iId) {
    289e:	e0 91 e7 06 	lds	r30, 0x06E7
    28a2:	f0 91 e8 06 	lds	r31, 0x06E8
    28a6:	80 81       	ld	r24, Z
    28a8:	82 30       	cpi	r24, 0x02	; 2
    28aa:	69 f0       	breq	.+26     	; 0x28c6 <_ZN16iotIrTransmitter11sendSamsungEmi+0x12a>
    28ac:	18 f4       	brcc	.+6      	; 0x28b4 <_ZN16iotIrTransmitter11sendSamsungEmi+0x118>
    28ae:	81 30       	cpi	r24, 0x01	; 1
    28b0:	31 f0       	breq	.+12     	; 0x28be <_ZN16iotIrTransmitter11sendSamsungEmi+0x122>
    28b2:	16 c0       	rjmp	.+44     	; 0x28e0 <_ZN16iotIrTransmitter11sendSamsungEmi+0x144>
    28b4:	83 30       	cpi	r24, 0x03	; 3
    28b6:	59 f0       	breq	.+22     	; 0x28ce <_ZN16iotIrTransmitter11sendSamsungEmi+0x132>
    28b8:	84 30       	cpi	r24, 0x04	; 4
    28ba:	69 f0       	breq	.+26     	; 0x28d6 <_ZN16iotIrTransmitter11sendSamsungEmi+0x13a>
    28bc:	11 c0       	rjmp	.+34     	; 0x28e0 <_ZN16iotIrTransmitter11sendSamsungEmi+0x144>
				case iotcTimer0: TCCR0 &= ~(1 << COM01); break;
    28be:	83 b7       	in	r24, 0x33	; 51
    28c0:	8f 7d       	andi	r24, 0xDF	; 223
    28c2:	83 bf       	out	0x33, r24	; 51
    28c4:	0d c0       	rjmp	.+26     	; 0x28e0 <_ZN16iotIrTransmitter11sendSamsungEmi+0x144>
				case iotcTimer1: TCCR1A &= ~(1 << COM1A1); break;
    28c6:	8f b5       	in	r24, 0x2f	; 47
    28c8:	8f 77       	andi	r24, 0x7F	; 127
    28ca:	8f bd       	out	0x2f, r24	; 47
    28cc:	09 c0       	rjmp	.+18     	; 0x28e0 <_ZN16iotIrTransmitter11sendSamsungEmi+0x144>
				case iotcTimer2: TCCR2 &= ~(1 << COM21); break;
    28ce:	85 b5       	in	r24, 0x25	; 37
    28d0:	8f 7d       	andi	r24, 0xDF	; 223
    28d2:	85 bd       	out	0x25, r24	; 37
    28d4:	05 c0       	rjmp	.+10     	; 0x28e0 <_ZN16iotIrTransmitter11sendSamsungEmi+0x144>
				case iotcTimer3: TCCR3A &= ~(1 << COM3A1); break;
    28d6:	eb e8       	ldi	r30, 0x8B	; 139
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	80 81       	ld	r24, Z
    28dc:	8f 77       	andi	r24, 0x7F	; 127
    28de:	80 83       	st	Z, r24
    28e0:	8a e1       	ldi	r24, 0x1A	; 26
    28e2:	9e e4       	ldi	r25, 0x4E	; 78
    28e4:	01 97       	sbiw	r24, 0x01	; 1
    28e6:	f1 f7       	brne	.-4      	; 0x28e4 <_ZN16iotIrTransmitter11sendSamsungEmi+0x148>
		void
		sendSamsung(unsigned long aData, int anBits) {
			enable(38);
			mark(iotcSamsungHdrMark);
			space(iotcSamsungHdrSpace);
			for(int i = 0; i < anBits; i++) {
    28e8:	12 16       	cp	r1, r18
    28ea:	13 06       	cpc	r1, r19
    28ec:	0c f0       	brlt	.+2      	; 0x28f0 <_ZN16iotIrTransmitter11sendSamsungEmi+0x154>
    28ee:	9d c0       	rjmp	.+314    	; 0x2a2a <_ZN16iotIrTransmitter11sendSamsungEmi+0x28e>
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	90 e0       	ldi	r25, 0x00	; 0

			// busy wait
			__asm__ __volatile__ (
				"1: sbiw %0,1" "\n\t"					// 2 cycles
				"brne 1b" : "=w" (auSec) : "0" (auSec)	// 2 cycles
			);
    28f4:	aa eb       	ldi	r26, 0xBA	; 186
    28f6:	b8 e0       	ldi	r27, 0x08	; 8
    28f8:	cb e8       	ldi	r28, 0x8B	; 139
    28fa:	d0 e0       	ldi	r29, 0x00	; 0
    28fc:	0a ef       	ldi	r16, 0xFA	; 250
    28fe:	18 e1       	ldi	r17, 0x18	; 24
		sendSamsung(unsigned long aData, int anBits) {
			enable(38);
			mark(iotcSamsungHdrMark);
			space(iotcSamsungHdrSpace);
			for(int i = 0; i < anBits; i++) {
				if(aData & iotcTopBit) {
    2900:	77 23       	and	r23, r23
    2902:	0c f0       	brlt	.+2      	; 0x2906 <_ZN16iotIrTransmitter11sendSamsungEmi+0x16a>
    2904:	45 c0       	rjmp	.+138    	; 0x2990 <_ZN16iotIrTransmitter11sendSamsungEmi+0x1f4>
		void
		enablePWMOut() {
			// COMnA1:0 = 2 with WGMn3:0 = 10.
			// clear OCnA on compare match when up-counting.
			// set OCnA on compare match when down-counting.
			switch(iId) {
    2906:	e0 91 e7 06 	lds	r30, 0x06E7
    290a:	f0 91 e8 06 	lds	r31, 0x06E8
    290e:	e0 81       	ld	r30, Z
    2910:	e2 30       	cpi	r30, 0x02	; 2
    2912:	69 f0       	breq	.+26     	; 0x292e <_ZN16iotIrTransmitter11sendSamsungEmi+0x192>
    2914:	18 f4       	brcc	.+6      	; 0x291c <_ZN16iotIrTransmitter11sendSamsungEmi+0x180>
    2916:	e1 30       	cpi	r30, 0x01	; 1
    2918:	31 f0       	breq	.+12     	; 0x2926 <_ZN16iotIrTransmitter11sendSamsungEmi+0x18a>
    291a:	14 c0       	rjmp	.+40     	; 0x2944 <_ZN16iotIrTransmitter11sendSamsungEmi+0x1a8>
    291c:	e3 30       	cpi	r30, 0x03	; 3
    291e:	59 f0       	breq	.+22     	; 0x2936 <_ZN16iotIrTransmitter11sendSamsungEmi+0x19a>
    2920:	e4 30       	cpi	r30, 0x04	; 4
    2922:	69 f0       	breq	.+26     	; 0x293e <_ZN16iotIrTransmitter11sendSamsungEmi+0x1a2>
    2924:	0f c0       	rjmp	.+30     	; 0x2944 <_ZN16iotIrTransmitter11sendSamsungEmi+0x1a8>
				case iotcTimer0: TCCR0 |= (1 << COM01); break;
    2926:	e3 b7       	in	r30, 0x33	; 51
    2928:	e0 62       	ori	r30, 0x20	; 32
    292a:	e3 bf       	out	0x33, r30	; 51
    292c:	0b c0       	rjmp	.+22     	; 0x2944 <_ZN16iotIrTransmitter11sendSamsungEmi+0x1a8>
				case iotcTimer1: TCCR1A |= (1 << COM1A1); break;
    292e:	ef b5       	in	r30, 0x2f	; 47
    2930:	e0 68       	ori	r30, 0x80	; 128
    2932:	ef bd       	out	0x2f, r30	; 47
    2934:	07 c0       	rjmp	.+14     	; 0x2944 <_ZN16iotIrTransmitter11sendSamsungEmi+0x1a8>
				case iotcTimer2: TCCR2 |= (1 << COM21); break;
    2936:	e5 b5       	in	r30, 0x25	; 37
    2938:	e0 62       	ori	r30, 0x20	; 32
    293a:	e5 bd       	out	0x25, r30	; 37
    293c:	03 c0       	rjmp	.+6      	; 0x2944 <_ZN16iotIrTransmitter11sendSamsungEmi+0x1a8>
				case iotcTimer3: TCCR3A |= (1 << COM3A1); break;
    293e:	e8 81       	ld	r30, Y
    2940:	e0 68       	ori	r30, 0x80	; 128
    2942:	e8 83       	st	Y, r30

			// busy wait
			__asm__ __volatile__ (
				"1: sbiw %0,1" "\n\t"					// 2 cycles
				"brne 1b" : "=w" (auSec) : "0" (auSec)	// 2 cycles
			);
    2944:	fd 01       	movw	r30, r26
    2946:	31 97       	sbiw	r30, 0x01	; 1
    2948:	f1 f7       	brne	.-4      	; 0x2946 <_ZN16iotIrTransmitter11sendSamsungEmi+0x1aa>
		}
		void
		disablePWMOut() {
			// COMnA1:0 = 0 with WGM3:0 = 10.
			// OCnA disconnected.
			switch(iId) {
    294a:	e0 91 e7 06 	lds	r30, 0x06E7
    294e:	f0 91 e8 06 	lds	r31, 0x06E8
    2952:	e0 81       	ld	r30, Z
    2954:	e2 30       	cpi	r30, 0x02	; 2
    2956:	69 f0       	breq	.+26     	; 0x2972 <_ZN16iotIrTransmitter11sendSamsungEmi+0x1d6>
    2958:	18 f4       	brcc	.+6      	; 0x2960 <_ZN16iotIrTransmitter11sendSamsungEmi+0x1c4>
    295a:	e1 30       	cpi	r30, 0x01	; 1
    295c:	31 f0       	breq	.+12     	; 0x296a <_ZN16iotIrTransmitter11sendSamsungEmi+0x1ce>
    295e:	14 c0       	rjmp	.+40     	; 0x2988 <_ZN16iotIrTransmitter11sendSamsungEmi+0x1ec>
    2960:	e3 30       	cpi	r30, 0x03	; 3
    2962:	59 f0       	breq	.+22     	; 0x297a <_ZN16iotIrTransmitter11sendSamsungEmi+0x1de>
    2964:	e4 30       	cpi	r30, 0x04	; 4
    2966:	69 f0       	breq	.+26     	; 0x2982 <_ZN16iotIrTransmitter11sendSamsungEmi+0x1e6>
    2968:	0f c0       	rjmp	.+30     	; 0x2988 <_ZN16iotIrTransmitter11sendSamsungEmi+0x1ec>
				case iotcTimer0: TCCR0 &= ~(1 << COM01); break;
    296a:	e3 b7       	in	r30, 0x33	; 51
    296c:	ef 7d       	andi	r30, 0xDF	; 223
    296e:	e3 bf       	out	0x33, r30	; 51
    2970:	0b c0       	rjmp	.+22     	; 0x2988 <_ZN16iotIrTransmitter11sendSamsungEmi+0x1ec>
				case iotcTimer1: TCCR1A &= ~(1 << COM1A1); break;
    2972:	ef b5       	in	r30, 0x2f	; 47
    2974:	ef 77       	andi	r30, 0x7F	; 127
    2976:	ef bd       	out	0x2f, r30	; 47
    2978:	07 c0       	rjmp	.+14     	; 0x2988 <_ZN16iotIrTransmitter11sendSamsungEmi+0x1ec>
				case iotcTimer2: TCCR2 &= ~(1 << COM21); break;
    297a:	e5 b5       	in	r30, 0x25	; 37
    297c:	ef 7d       	andi	r30, 0xDF	; 223
    297e:	e5 bd       	out	0x25, r30	; 37
    2980:	03 c0       	rjmp	.+6      	; 0x2988 <_ZN16iotIrTransmitter11sendSamsungEmi+0x1ec>
				case iotcTimer3: TCCR3A &= ~(1 << COM3A1); break;
    2982:	e8 81       	ld	r30, Y
    2984:	ef 77       	andi	r30, 0x7F	; 127
    2986:	e8 83       	st	Y, r30
    2988:	f8 01       	movw	r30, r16
    298a:	31 97       	sbiw	r30, 0x01	; 1
    298c:	f1 f7       	brne	.-4      	; 0x298a <_ZN16iotIrTransmitter11sendSamsungEmi+0x1ee>
    298e:	44 c0       	rjmp	.+136    	; 0x2a18 <_ZN16iotIrTransmitter11sendSamsungEmi+0x27c>
		void
		enablePWMOut() {
			// COMnA1:0 = 2 with WGMn3:0 = 10.
			// clear OCnA on compare match when up-counting.
			// set OCnA on compare match when down-counting.
			switch(iId) {
    2990:	e0 91 e7 06 	lds	r30, 0x06E7
    2994:	f0 91 e8 06 	lds	r31, 0x06E8
    2998:	e0 81       	ld	r30, Z
    299a:	e2 30       	cpi	r30, 0x02	; 2
    299c:	69 f0       	breq	.+26     	; 0x29b8 <_ZN16iotIrTransmitter11sendSamsungEmi+0x21c>
    299e:	18 f4       	brcc	.+6      	; 0x29a6 <_ZN16iotIrTransmitter11sendSamsungEmi+0x20a>
    29a0:	e1 30       	cpi	r30, 0x01	; 1
    29a2:	31 f0       	breq	.+12     	; 0x29b0 <_ZN16iotIrTransmitter11sendSamsungEmi+0x214>
    29a4:	14 c0       	rjmp	.+40     	; 0x29ce <_ZN16iotIrTransmitter11sendSamsungEmi+0x232>
    29a6:	e3 30       	cpi	r30, 0x03	; 3
    29a8:	59 f0       	breq	.+22     	; 0x29c0 <_ZN16iotIrTransmitter11sendSamsungEmi+0x224>
    29aa:	e4 30       	cpi	r30, 0x04	; 4
    29ac:	69 f0       	breq	.+26     	; 0x29c8 <_ZN16iotIrTransmitter11sendSamsungEmi+0x22c>
    29ae:	0f c0       	rjmp	.+30     	; 0x29ce <_ZN16iotIrTransmitter11sendSamsungEmi+0x232>
				case iotcTimer0: TCCR0 |= (1 << COM01); break;
    29b0:	e3 b7       	in	r30, 0x33	; 51
    29b2:	e0 62       	ori	r30, 0x20	; 32
    29b4:	e3 bf       	out	0x33, r30	; 51
    29b6:	0b c0       	rjmp	.+22     	; 0x29ce <_ZN16iotIrTransmitter11sendSamsungEmi+0x232>
				case iotcTimer1: TCCR1A |= (1 << COM1A1); break;
    29b8:	ef b5       	in	r30, 0x2f	; 47
    29ba:	e0 68       	ori	r30, 0x80	; 128
    29bc:	ef bd       	out	0x2f, r30	; 47
    29be:	07 c0       	rjmp	.+14     	; 0x29ce <_ZN16iotIrTransmitter11sendSamsungEmi+0x232>
				case iotcTimer2: TCCR2 |= (1 << COM21); break;
    29c0:	e5 b5       	in	r30, 0x25	; 37
    29c2:	e0 62       	ori	r30, 0x20	; 32
    29c4:	e5 bd       	out	0x25, r30	; 37
    29c6:	03 c0       	rjmp	.+6      	; 0x29ce <_ZN16iotIrTransmitter11sendSamsungEmi+0x232>
				case iotcTimer3: TCCR3A |= (1 << COM3A1); break;
    29c8:	e8 81       	ld	r30, Y
    29ca:	e0 68       	ori	r30, 0x80	; 128
    29cc:	e8 83       	st	Y, r30
    29ce:	fd 01       	movw	r30, r26
    29d0:	31 97       	sbiw	r30, 0x01	; 1
    29d2:	f1 f7       	brne	.-4      	; 0x29d0 <_ZN16iotIrTransmitter11sendSamsungEmi+0x234>
		}
		void
		disablePWMOut() {
			// COMnA1:0 = 0 with WGM3:0 = 10.
			// OCnA disconnected.
			switch(iId) {
    29d4:	e0 91 e7 06 	lds	r30, 0x06E7
    29d8:	f0 91 e8 06 	lds	r31, 0x06E8
    29dc:	e0 81       	ld	r30, Z
    29de:	e2 30       	cpi	r30, 0x02	; 2
    29e0:	69 f0       	breq	.+26     	; 0x29fc <_ZN16iotIrTransmitter11sendSamsungEmi+0x260>
    29e2:	18 f4       	brcc	.+6      	; 0x29ea <_ZN16iotIrTransmitter11sendSamsungEmi+0x24e>
    29e4:	e1 30       	cpi	r30, 0x01	; 1
    29e6:	31 f0       	breq	.+12     	; 0x29f4 <_ZN16iotIrTransmitter11sendSamsungEmi+0x258>
    29e8:	14 c0       	rjmp	.+40     	; 0x2a12 <_ZN16iotIrTransmitter11sendSamsungEmi+0x276>
    29ea:	e3 30       	cpi	r30, 0x03	; 3
    29ec:	59 f0       	breq	.+22     	; 0x2a04 <_ZN16iotIrTransmitter11sendSamsungEmi+0x268>
    29ee:	e4 30       	cpi	r30, 0x04	; 4
    29f0:	69 f0       	breq	.+26     	; 0x2a0c <_ZN16iotIrTransmitter11sendSamsungEmi+0x270>
    29f2:	0f c0       	rjmp	.+30     	; 0x2a12 <_ZN16iotIrTransmitter11sendSamsungEmi+0x276>
				case iotcTimer0: TCCR0 &= ~(1 << COM01); break;
    29f4:	e3 b7       	in	r30, 0x33	; 51
    29f6:	ef 7d       	andi	r30, 0xDF	; 223
    29f8:	e3 bf       	out	0x33, r30	; 51
    29fa:	0b c0       	rjmp	.+22     	; 0x2a12 <_ZN16iotIrTransmitter11sendSamsungEmi+0x276>
				case iotcTimer1: TCCR1A &= ~(1 << COM1A1); break;
    29fc:	ef b5       	in	r30, 0x2f	; 47
    29fe:	ef 77       	andi	r30, 0x7F	; 127
    2a00:	ef bd       	out	0x2f, r30	; 47
    2a02:	07 c0       	rjmp	.+14     	; 0x2a12 <_ZN16iotIrTransmitter11sendSamsungEmi+0x276>
				case iotcTimer2: TCCR2 &= ~(1 << COM21); break;
    2a04:	e5 b5       	in	r30, 0x25	; 37
    2a06:	ef 7d       	andi	r30, 0xDF	; 223
    2a08:	e5 bd       	out	0x25, r30	; 37
    2a0a:	03 c0       	rjmp	.+6      	; 0x2a12 <_ZN16iotIrTransmitter11sendSamsungEmi+0x276>
				case iotcTimer3: TCCR3A &= ~(1 << COM3A1); break;
    2a0c:	e8 81       	ld	r30, Y
    2a0e:	ef 77       	andi	r30, 0x7F	; 127
    2a10:	e8 83       	st	Y, r30
    2a12:	fd 01       	movw	r30, r26
    2a14:	31 97       	sbiw	r30, 0x01	; 1
    2a16:	f1 f7       	brne	.-4      	; 0x2a14 <_ZN16iotIrTransmitter11sendSamsungEmi+0x278>
				if(aData & iotcTopBit) {
					mark(iotcSamsungBitMark); space(iotcSamsungOneSpace);
				} else {
					mark(iotcSamsungBitMark); space(iotcSamsungZeroSpace);
				}
				aData <<= 1;
    2a18:	44 0f       	add	r20, r20
    2a1a:	55 1f       	adc	r21, r21
    2a1c:	66 1f       	adc	r22, r22
    2a1e:	77 1f       	adc	r23, r23
		void
		sendSamsung(unsigned long aData, int anBits) {
			enable(38);
			mark(iotcSamsungHdrMark);
			space(iotcSamsungHdrSpace);
			for(int i = 0; i < anBits; i++) {
    2a20:	01 96       	adiw	r24, 0x01	; 1
    2a22:	82 17       	cp	r24, r18
    2a24:	93 07       	cpc	r25, r19
    2a26:	09 f0       	breq	.+2      	; 0x2a2a <_ZN16iotIrTransmitter11sendSamsungEmi+0x28e>
    2a28:	6b cf       	rjmp	.-298    	; 0x2900 <_ZN16iotIrTransmitter11sendSamsungEmi+0x164>
		void
		enablePWMOut() {
			// COMnA1:0 = 2 with WGMn3:0 = 10.
			// clear OCnA on compare match when up-counting.
			// set OCnA on compare match when down-counting.
			switch(iId) {
    2a2a:	e0 91 e7 06 	lds	r30, 0x06E7
    2a2e:	f0 91 e8 06 	lds	r31, 0x06E8
    2a32:	80 81       	ld	r24, Z
    2a34:	82 30       	cpi	r24, 0x02	; 2
    2a36:	69 f0       	breq	.+26     	; 0x2a52 <_ZN16iotIrTransmitter11sendSamsungEmi+0x2b6>
    2a38:	18 f4       	brcc	.+6      	; 0x2a40 <_ZN16iotIrTransmitter11sendSamsungEmi+0x2a4>
    2a3a:	81 30       	cpi	r24, 0x01	; 1
    2a3c:	31 f0       	breq	.+12     	; 0x2a4a <_ZN16iotIrTransmitter11sendSamsungEmi+0x2ae>
    2a3e:	16 c0       	rjmp	.+44     	; 0x2a6c <_ZN16iotIrTransmitter11sendSamsungEmi+0x2d0>
    2a40:	83 30       	cpi	r24, 0x03	; 3
    2a42:	59 f0       	breq	.+22     	; 0x2a5a <_ZN16iotIrTransmitter11sendSamsungEmi+0x2be>
    2a44:	84 30       	cpi	r24, 0x04	; 4
    2a46:	69 f0       	breq	.+26     	; 0x2a62 <_ZN16iotIrTransmitter11sendSamsungEmi+0x2c6>
    2a48:	11 c0       	rjmp	.+34     	; 0x2a6c <_ZN16iotIrTransmitter11sendSamsungEmi+0x2d0>
				case iotcTimer0: TCCR0 |= (1 << COM01); break;
    2a4a:	83 b7       	in	r24, 0x33	; 51
    2a4c:	80 62       	ori	r24, 0x20	; 32
    2a4e:	83 bf       	out	0x33, r24	; 51
    2a50:	0d c0       	rjmp	.+26     	; 0x2a6c <_ZN16iotIrTransmitter11sendSamsungEmi+0x2d0>
				case iotcTimer1: TCCR1A |= (1 << COM1A1); break;
    2a52:	8f b5       	in	r24, 0x2f	; 47
    2a54:	80 68       	ori	r24, 0x80	; 128
    2a56:	8f bd       	out	0x2f, r24	; 47
    2a58:	09 c0       	rjmp	.+18     	; 0x2a6c <_ZN16iotIrTransmitter11sendSamsungEmi+0x2d0>
				case iotcTimer2: TCCR2 |= (1 << COM21); break;
    2a5a:	85 b5       	in	r24, 0x25	; 37
    2a5c:	80 62       	ori	r24, 0x20	; 32
    2a5e:	85 bd       	out	0x25, r24	; 37
    2a60:	05 c0       	rjmp	.+10     	; 0x2a6c <_ZN16iotIrTransmitter11sendSamsungEmi+0x2d0>
				case iotcTimer3: TCCR3A |= (1 << COM3A1); break;
    2a62:	eb e8       	ldi	r30, 0x8B	; 139
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	80 81       	ld	r24, Z
    2a68:	80 68       	ori	r24, 0x80	; 128
    2a6a:	80 83       	st	Z, r24

			// busy wait
			__asm__ __volatile__ (
				"1: sbiw %0,1" "\n\t"					// 2 cycles
				"brne 1b" : "=w" (auSec) : "0" (auSec)	// 2 cycles
			);
    2a6c:	8a eb       	ldi	r24, 0xBA	; 186
    2a6e:	98 e0       	ldi	r25, 0x08	; 8
    2a70:	01 97       	sbiw	r24, 0x01	; 1
    2a72:	f1 f7       	brne	.-4      	; 0x2a70 <_ZN16iotIrTransmitter11sendSamsungEmi+0x2d4>
		}
		void
		disablePWMOut() {
			// COMnA1:0 = 0 with WGM3:0 = 10.
			// OCnA disconnected.
			switch(iId) {
    2a74:	e0 91 e7 06 	lds	r30, 0x06E7
    2a78:	f0 91 e8 06 	lds	r31, 0x06E8
    2a7c:	80 81       	ld	r24, Z
    2a7e:	82 30       	cpi	r24, 0x02	; 2
    2a80:	69 f0       	breq	.+26     	; 0x2a9c <_ZN16iotIrTransmitter11sendSamsungEmi+0x300>
    2a82:	18 f4       	brcc	.+6      	; 0x2a8a <_ZN16iotIrTransmitter11sendSamsungEmi+0x2ee>
    2a84:	81 30       	cpi	r24, 0x01	; 1
    2a86:	31 f0       	breq	.+12     	; 0x2a94 <_ZN16iotIrTransmitter11sendSamsungEmi+0x2f8>
    2a88:	16 c0       	rjmp	.+44     	; 0x2ab6 <_ZN16iotIrTransmitter11sendSamsungEmi+0x31a>
    2a8a:	83 30       	cpi	r24, 0x03	; 3
    2a8c:	59 f0       	breq	.+22     	; 0x2aa4 <_ZN16iotIrTransmitter11sendSamsungEmi+0x308>
    2a8e:	84 30       	cpi	r24, 0x04	; 4
    2a90:	69 f0       	breq	.+26     	; 0x2aac <_ZN16iotIrTransmitter11sendSamsungEmi+0x310>
    2a92:	11 c0       	rjmp	.+34     	; 0x2ab6 <_ZN16iotIrTransmitter11sendSamsungEmi+0x31a>
				case iotcTimer0: TCCR0 &= ~(1 << COM01); break;
    2a94:	83 b7       	in	r24, 0x33	; 51
    2a96:	8f 7d       	andi	r24, 0xDF	; 223
    2a98:	83 bf       	out	0x33, r24	; 51
    2a9a:	0d c0       	rjmp	.+26     	; 0x2ab6 <_ZN16iotIrTransmitter11sendSamsungEmi+0x31a>
				case iotcTimer1: TCCR1A &= ~(1 << COM1A1); break;
    2a9c:	8f b5       	in	r24, 0x2f	; 47
    2a9e:	8f 77       	andi	r24, 0x7F	; 127
    2aa0:	8f bd       	out	0x2f, r24	; 47
    2aa2:	09 c0       	rjmp	.+18     	; 0x2ab6 <_ZN16iotIrTransmitter11sendSamsungEmi+0x31a>
				case iotcTimer2: TCCR2 &= ~(1 << COM21); break;
    2aa4:	85 b5       	in	r24, 0x25	; 37
    2aa6:	8f 7d       	andi	r24, 0xDF	; 223
    2aa8:	85 bd       	out	0x25, r24	; 37
    2aaa:	05 c0       	rjmp	.+10     	; 0x2ab6 <_ZN16iotIrTransmitter11sendSamsungEmi+0x31a>
				case iotcTimer3: TCCR3A &= ~(1 << COM3A1); break;
    2aac:	eb e8       	ldi	r30, 0x8B	; 139
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	80 81       	ld	r24, Z
    2ab2:	8f 77       	andi	r24, 0x7F	; 127
    2ab4:	80 83       	st	Z, r24
				}
				aData <<= 1;
			}
			mark(iotcSamsungBitMark);
			space(0);
		}
    2ab6:	df 91       	pop	r29
    2ab8:	cf 91       	pop	r28
    2aba:	1f 91       	pop	r17
    2abc:	0f 91       	pop	r16
    2abe:	08 95       	ret

00002ac0 <main>:
//-----------------------------------------------------------------------------
//	main -
//-----------------------------------------------------------------------------
int
main(void)
{
    2ac0:	cf 93       	push	r28
    2ac2:	df 93       	push	r29
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
    2ac8:	c1 56       	subi	r28, 0x61	; 97
    2aca:	d1 09       	sbc	r29, r1
    2acc:	0f b6       	in	r0, 0x3f	; 63
    2ace:	f8 94       	cli
    2ad0:	de bf       	out	0x3e, r29	; 62
    2ad2:	0f be       	out	0x3f, r0	; 63
    2ad4:	cd bf       	out	0x3d, r28	; 61
	cli();
    2ad6:	f8 94       	cli
class iotClock {
	public:
		static void
		init(iotTimer::iotTimerId tid, long sec, iotCharLcd *clcd, uint8_t row)
		{
			iSeconds = sec; iRow = row;
    2ad8:	80 e4       	ldi	r24, 0x40	; 64
    2ada:	93 ed       	ldi	r25, 0xD3	; 211
    2adc:	ac ed       	ldi	r26, 0xDC	; 220
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	80 93 e2 04 	sts	0x04E2, r24
    2ae4:	90 93 e3 04 	sts	0x04E3, r25
    2ae8:	a0 93 e4 04 	sts	0x04E4, r26
    2aec:	b0 93 e5 04 	sts	0x04E5, r27
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	80 93 2b 01 	sts	0x012B, r24
			iTimer = new iotTimer(tid, iotTimer::iotcPsd1024, 15625);
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Znwj>
    2afe:	fc 01       	movw	r30, r24
		typedef enum {		// 32 & 128 only for 8-bit counters 0 & 2.
			iotcPsdNo, iotcPsd1, iotcPsd8, iotcPsd32, iotcPsd64, iotcPsd128,
			iotcPsd256, iotcPsd1024
		} iotTimerPsd;
		iotTimer(iotTimerId aId, iotTimerPsd aPsd, unsigned int aCount) {
			iId = iotcTimerNone;
    2b00:	10 82       	st	Z, r1
					if((TCCR2 & 0x07) != 0) return;
					TCNT2 = 0; OCR2 = aCount & 0xff;
					TCCR2 = (TCCR2 & ~(0x07)) | (1 << WGM21) | psd;
					break;
				case iotcTimer3:
					if((TCCR3B & 0x07) != 0) return;
    2b02:	80 91 8a 00 	lds	r24, 0x008A
    2b06:	87 70       	andi	r24, 0x07	; 7
    2b08:	a1 f4       	brne	.+40     	; 0x2b32 <main+0x72>
					TCNT3 = 0; OCR3A = aCount; TCCR3A = 0;
    2b0a:	10 92 89 00 	sts	0x0089, r1
    2b0e:	10 92 88 00 	sts	0x0088, r1
    2b12:	89 e0       	ldi	r24, 0x09	; 9
    2b14:	9d e3       	ldi	r25, 0x3D	; 61
    2b16:	90 93 87 00 	sts	0x0087, r25
    2b1a:	80 93 86 00 	sts	0x0086, r24
    2b1e:	10 92 8b 00 	sts	0x008B, r1
					TCCR3B = (TCCR3B & ~(0x07)) | (1 << WGM32) | psd;
    2b22:	aa e8       	ldi	r26, 0x8A	; 138
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	8c 91       	ld	r24, X
    2b28:	80 7f       	andi	r24, 0xF0	; 240
    2b2a:	8d 60       	ori	r24, 0x0D	; 13
    2b2c:	8c 93       	st	X, r24
					break;
				default: return;
			}
			iId = aId;
    2b2e:	84 e0       	ldi	r24, 0x04	; 4
    2b30:	80 83       	st	Z, r24
	public:
		static void
		init(iotTimer::iotTimerId tid, long sec, iotCharLcd *clcd, uint8_t row)
		{
			iSeconds = sec; iRow = row;
			iTimer = new iotTimer(tid, iotTimer::iotcPsd1024, 15625);
    2b32:	f0 93 e7 04 	sts	0x04E7, r31
    2b36:	e0 93 e6 04 	sts	0x04E6, r30
				default: return;
			}
		}
		void
		enableInterrupt(void (* aCallback) (void)) {
			switch(iId) {
    2b3a:	80 81       	ld	r24, Z
    2b3c:	82 30       	cpi	r24, 0x02	; 2
    2b3e:	99 f0       	breq	.+38     	; 0x2b66 <main+0xa6>
    2b40:	18 f4       	brcc	.+6      	; 0x2b48 <main+0x88>
    2b42:	81 30       	cpi	r24, 0x01	; 1
    2b44:	31 f0       	breq	.+12     	; 0x2b52 <main+0x92>
    2b46:	2e c0       	rjmp	.+92     	; 0x2ba4 <main+0xe4>
    2b48:	83 30       	cpi	r24, 0x03	; 3
    2b4a:	b9 f0       	breq	.+46     	; 0x2b7a <main+0xba>
    2b4c:	84 30       	cpi	r24, 0x04	; 4
    2b4e:	f9 f0       	breq	.+62     	; 0x2b8e <main+0xce>
    2b50:	29 c0       	rjmp	.+82     	; 0x2ba4 <main+0xe4>
				case iotcTimer0:
					iCallback0 = aCallback; TIMSK |= (1 << OCIE0); break;
    2b52:	8d e8       	ldi	r24, 0x8D	; 141
    2b54:	94 e0       	ldi	r25, 0x04	; 4
    2b56:	90 93 e6 06 	sts	0x06E6, r25
    2b5a:	80 93 e5 06 	sts	0x06E5, r24
    2b5e:	87 b7       	in	r24, 0x37	; 55
    2b60:	82 60       	ori	r24, 0x02	; 2
    2b62:	87 bf       	out	0x37, r24	; 55
    2b64:	1f c0       	rjmp	.+62     	; 0x2ba4 <main+0xe4>
				case iotcTimer1:
					iCallback1 = aCallback; TIMSK |= (1 << OCIE1A); break;
    2b66:	8d e8       	ldi	r24, 0x8D	; 141
    2b68:	94 e0       	ldi	r25, 0x04	; 4
    2b6a:	90 93 e4 06 	sts	0x06E4, r25
    2b6e:	80 93 e3 06 	sts	0x06E3, r24
    2b72:	87 b7       	in	r24, 0x37	; 55
    2b74:	80 61       	ori	r24, 0x10	; 16
    2b76:	87 bf       	out	0x37, r24	; 55
    2b78:	15 c0       	rjmp	.+42     	; 0x2ba4 <main+0xe4>
				case iotcTimer2:
					iCallback2 = aCallback; TIMSK |= (1 << OCIE2); break;
    2b7a:	8d e8       	ldi	r24, 0x8D	; 141
    2b7c:	94 e0       	ldi	r25, 0x04	; 4
    2b7e:	90 93 e2 06 	sts	0x06E2, r25
    2b82:	80 93 e1 06 	sts	0x06E1, r24
    2b86:	87 b7       	in	r24, 0x37	; 55
    2b88:	80 68       	ori	r24, 0x80	; 128
    2b8a:	87 bf       	out	0x37, r24	; 55
    2b8c:	0b c0       	rjmp	.+22     	; 0x2ba4 <main+0xe4>
				case iotcTimer3:
					iCallback3 = aCallback; ETIMSK |= (1 << OCIE3A); break;
    2b8e:	8d e8       	ldi	r24, 0x8D	; 141
    2b90:	94 e0       	ldi	r25, 0x04	; 4
    2b92:	90 93 e0 06 	sts	0x06E0, r25
    2b96:	80 93 df 06 	sts	0x06DF, r24
    2b9a:	ed e7       	ldi	r30, 0x7D	; 125
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
    2ba0:	80 61       	ori	r24, 0x10	; 16
    2ba2:	80 83       	st	Z, r24
		init(iotTimer::iotTimerId tid, long sec, iotCharLcd *clcd, uint8_t row)
		{
			iSeconds = sec; iRow = row;
			iTimer = new iotTimer(tid, iotTimer::iotcPsd1024, 15625);
			iTimer->enableInterrupt(update);
			if(!iCharLcd) {
    2ba4:	80 91 e0 04 	lds	r24, 0x04E0
    2ba8:	90 91 e1 04 	lds	r25, 0x04E1
    2bac:	89 2b       	or	r24, r25
    2bae:	71 f4       	brne	.+28     	; 0x2bcc <main+0x10c>
				if(clcd) iCharLcd = clcd;
				else { iCharLcd = new iotCharLcd; iCharLcdCreated = true; }
    2bb0:	81 e3       	ldi	r24, 0x31	; 49
    2bb2:	91 e0       	ldi	r25, 0x01	; 1
    2bb4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Znwj>
    2bb8:	8c 01       	movw	r16, r24
    2bba:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <_ZN10iotCharLcdC1Ev>
    2bbe:	10 93 e1 04 	sts	0x04E1, r17
    2bc2:	00 93 e0 04 	sts	0x04E0, r16
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	80 93 de 04 	sts	0x04DE, r24
			}
			iCharLcd->print(iRow, 1, iMonDyHrMnSc);
    2bcc:	40 91 2b 01 	lds	r20, 0x012B
    2bd0:	20 91 e0 04 	lds	r18, 0x04E0
    2bd4:	30 91 e1 04 	lds	r19, 0x04E1
    2bd8:	0f 2e       	mov	r0, r31
    2bda:	fc e2       	ldi	r31, 0x2C	; 44
    2bdc:	ef 2e       	mov	r14, r31
    2bde:	f1 e0       	ldi	r31, 0x01	; 1
    2be0:	ff 2e       	mov	r15, r31
    2be2:	f0 2d       	mov	r31, r0
    2be4:	aa 24       	eor	r10, r10
    2be6:	a3 94       	inc	r10
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    2be8:	f9 01       	movw	r30, r18
    2bea:	e4 5d       	subi	r30, 0xD4	; 212
    2bec:	fe 4f       	sbci	r31, 0xFE	; 254
    2bee:	69 01       	movw	r12, r18
    2bf0:	53 ed       	ldi	r21, 0xD3	; 211
    2bf2:	c5 1a       	sub	r12, r21
    2bf4:	5e ef       	ldi	r21, 0xFE	; 254
    2bf6:	d5 0a       	sbc	r13, r21
    2bf8:	04 e6       	ldi	r16, 0x64	; 100
    2bfa:	10 e0       	ldi	r17, 0x00	; 0
    2bfc:	2b c0       	rjmp	.+86     	; 0x2c54 <main+0x194>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    2bfe:	bb 24       	eor	r11, r11
    2c00:	b3 94       	inc	r11
    2c02:	ba 0c       	add	r11, r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    2c04:	80 81       	ld	r24, Z
    2c06:	d6 01       	movw	r26, r12
    2c08:	8c 90       	ld	r8, X
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	01 96       	adiw	r24, 0x01	; 1
    2c0e:	b8 01       	movw	r22, r16
    2c10:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <__divmodhi4>
    2c14:	68 2d       	mov	r22, r8
    2c16:	70 e0       	ldi	r23, 0x00	; 0
    2c18:	86 17       	cp	r24, r22
    2c1a:	97 07       	cpc	r25, r23
    2c1c:	d1 f0       	breq	.+52     	; 0x2c52 <main+0x192>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    2c1e:	80 81       	ld	r24, Z
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	bc 01       	movw	r22, r24
    2c24:	66 0f       	add	r22, r22
    2c26:	77 1f       	adc	r23, r23
    2c28:	86 0f       	add	r24, r22
    2c2a:	97 1f       	adc	r25, r23
    2c2c:	d9 01       	movw	r26, r18
    2c2e:	a8 0f       	add	r26, r24
    2c30:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    2c32:	ac 92       	st	X, r10
    2c34:	11 96       	adiw	r26, 0x01	; 1
    2c36:	4c 93       	st	X, r20
    2c38:	11 97       	sbiw	r26, 0x01	; 1
    2c3a:	12 96       	adiw	r26, 0x02	; 2
    2c3c:	9c 92       	st	X, r9

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    2c3e:	af b6       	in	r10, 0x3f	; 63
    2c40:	f8 94       	cli
    2c42:	80 81       	ld	r24, Z
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	01 96       	adiw	r24, 0x01	; 1
    2c48:	b8 01       	movw	r22, r16
    2c4a:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <__divmodhi4>
    2c4e:	80 83       	st	Z, r24
    2c50:	af be       	out	0x3f, r10	; 63
//-----------------------------------------------------------------------------
//	main -
//-----------------------------------------------------------------------------
int
main(void)
{
    2c52:	ab 2c       	mov	r10, r11
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    2c54:	d7 01       	movw	r26, r14
    2c56:	9d 90       	ld	r9, X+
    2c58:	7d 01       	movw	r14, r26
    2c5a:	91 10       	cpse	r9, r1
    2c5c:	d0 cf       	rjmp	.-96     	; 0x2bfe <main+0x13e>
    2c5e:	ec eb       	ldi	r30, 0xBC	; 188
    2c60:	f3 e0       	ldi	r31, 0x03	; 3
				if(clcd) iCharLcd = clcd;
				else { iCharLcd = new iotCharLcd; iCharLcdCreated = true; }
			}
			iCharLcd->print(iRow, 1, iMonDyHrMnSc);
			for(iotSchedule *s = iSchedule;
				s < iSchedule + iotcMaxSchedules; s++) s->iTime = 0;
    2c62:	10 82       	st	Z, r1
    2c64:	11 82       	std	Z+1, r1	; 0x01
    2c66:	12 82       	std	Z+2, r1	; 0x02
    2c68:	13 82       	std	Z+3, r1	; 0x03
			if(!iCharLcd) {
				if(clcd) iCharLcd = clcd;
				else { iCharLcd = new iotCharLcd; iCharLcdCreated = true; }
			}
			iCharLcd->print(iRow, 1, iMonDyHrMnSc);
			for(iotSchedule *s = iSchedule;
    2c6a:	fa 96       	adiw	r30, 0x3a	; 58
    2c6c:	b4 e0       	ldi	r27, 0x04	; 4
    2c6e:	ee 3d       	cpi	r30, 0xDE	; 222
    2c70:	fb 07       	cpc	r31, r27
    2c72:	b8 f3       	brcs	.-18     	; 0x2c62 <main+0x1a2>
	cli();

	// initialize the clock: Jun-17 10:00:00 at row 1 of char LCD.
	iotClock::init(CLOCK_TIMER, 14472000L, (iotCharLcd *) NULL, 1);
	CharLcd = iotClock::getCharLcd();
    2c74:	80 91 e0 04 	lds	r24, 0x04E0
    2c78:	90 91 e1 04 	lds	r25, 0x04E1
    2c7c:	90 93 fd 06 	sts	0x06FD, r25
    2c80:	80 93 fc 06 	sts	0x06FC, r24
	iotClock::destroy();
    2c84:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <_ZN8iotClock7destroyEv>
	CharLcd->print(1, 1, "                ");
    2c88:	25 e2       	ldi	r18, 0x25	; 37
    2c8a:	32 e0       	ldi	r19, 0x02	; 2
    2c8c:	41 e0       	ldi	r20, 0x01	; 1
    2c8e:	61 e0       	ldi	r22, 0x01	; 1
    2c90:	80 91 fc 06 	lds	r24, 0x06FC
    2c94:	90 91 fd 06 	lds	r25, 0x06FD
    2c98:	0e 94 b0 0c 	call	0x1960	; 0x1960 <_ZN10iotCharLcd5printEhhPKc>

class iotTerminal {
	public:
		static void
		init(iotUart::iotUartId id, long baud = 115200) {
			iUart = new iotUart(id, baud, receiveLine);
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Znwj>
    2ca4:	8c 01       	movw	r16, r24
		// iotUartId: Uart0 & Uart1
		typedef enum {
			iotcUartNone, iotcUart0, iotcUart1
		} iotUartId;
		iotUart(iotUartId aId, long aBaudRate, void (* arxCallback) (void)) {
			iId = iotcUartNone;
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	10 82       	st	Z, r1
				UBRR0H = iotmBaudRateHigh(aBaudRate);

				irx0Callback = arxCallback;
				UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
			} else if(aId == iotcUart1) {
				if(itx1Buff) return;
    2caa:	80 91 d1 06 	lds	r24, 0x06D1
    2cae:	90 91 d2 06 	lds	r25, 0x06D2
    2cb2:	89 2b       	or	r24, r25
    2cb4:	81 f5       	brne	.+96     	; 0x2d16 <main+0x256>
				itx1Head = itx1Tail = irx1Head = irx1Tail = 0;
    2cb6:	10 92 d3 06 	sts	0x06D3, r1
    2cba:	10 92 d4 06 	sts	0x06D4, r1
    2cbe:	10 92 d5 06 	sts	0x06D5, r1
    2cc2:	10 92 d6 06 	sts	0x06D6, r1
				itx1Buff = (char *) malloc(iotcUartBuffSize);
    2cc6:	80 e8       	ldi	r24, 0x80	; 128
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	0e 94 80 2c 	call	0x5900	; 0x5900 <malloc>
    2cce:	90 93 d2 06 	sts	0x06D2, r25
    2cd2:	80 93 d1 06 	sts	0x06D1, r24
				irx1Buff = (char *) malloc(iotcUartBuffSize);
    2cd6:	80 e8       	ldi	r24, 0x80	; 128
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	0e 94 80 2c 	call	0x5900	; 0x5900 <malloc>
    2cde:	90 93 d0 06 	sts	0x06D0, r25
    2ce2:	80 93 cf 06 	sts	0x06CF, r24
				
				UCSR1B = 0x00; UCSR1A = 0x02; UCSR1C = 0x06;
    2ce6:	ea e9       	ldi	r30, 0x9A	; 154
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	10 82       	st	Z, r1
    2cec:	22 e0       	ldi	r18, 0x02	; 2
    2cee:	20 93 9b 00 	sts	0x009B, r18
    2cf2:	86 e0       	ldi	r24, 0x06	; 6
    2cf4:	80 93 9d 00 	sts	0x009D, r24
				
				UBRR1L = iotmBaudRateLow(aBaudRate);
    2cf8:	80 e1       	ldi	r24, 0x10	; 16
    2cfa:	80 93 99 00 	sts	0x0099, r24
				UBRR1H = iotmBaudRateHigh(aBaudRate);
    2cfe:	10 92 98 00 	sts	0x0098, r1
				
				irx1Callback = arxCallback;
    2d02:	88 ea       	ldi	r24, 0xA8	; 168
    2d04:	93 e0       	ldi	r25, 0x03	; 3
    2d06:	90 93 cc 06 	sts	0x06CC, r25
    2d0a:	80 93 cb 06 	sts	0x06CB, r24
				UCSR1B = (1 << RXCIE1) | (1 << RXEN1) | (1 << TXEN1);
    2d0e:	88 e9       	ldi	r24, 0x98	; 152
    2d10:	80 83       	st	Z, r24
			} else return;
			iId = aId;
    2d12:	d8 01       	movw	r26, r16
    2d14:	2c 93       	st	X, r18

class iotTerminal {
	public:
		static void
		init(iotUart::iotUartId id, long baud = 115200) {
			iUart = new iotUart(id, baud, receiveLine);
    2d16:	10 93 ca 06 	sts	0x06CA, r17
    2d1a:	00 93 c9 06 	sts	0x06C9, r16
			fdevopen(putChar, getChar);
    2d1e:	67 e9       	ldi	r22, 0x97	; 151
    2d20:	75 e0       	ldi	r23, 0x05	; 5
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	93 e0       	ldi	r25, 0x03	; 3
    2d26:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <fdevopen>

	// initialize Finger Print Sensor
	//iotFpSensor::init(UART_SENSOR, TIMEOUT_TIMER);	// PORTE

	// initialize Servo Motor
	iotServo::init(iotPin::iotcPE0);			// PORTE: VCC=R, GND=B, PWM=O //송시부에는 서보 모터 x 수신부만..
    2d2a:	80 e2       	ldi	r24, 0x20	; 32
    2d2c:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <_ZN8iotServo4initEN6iotPin8iotPinIdE>
//-----------------------------------------------------------------------------
class iotLed {
	public:
	static void
	init(iotPin::iotPinId pin) {
		ipPort = iotPin::getpPort(pin);
    2d30:	88 e1       	ldi	r24, 0x18	; 24
    2d32:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_ZN6iotPin8getpPortENS_8iotPinIdE>
    2d36:	90 93 bb 03 	sts	0x03BB, r25
    2d3a:	80 93 ba 03 	sts	0x03BA, r24
		iPinMask = iotPin::getPinMask(pin);
    2d3e:	21 e0       	ldi	r18, 0x01	; 1
    2d40:	20 93 b9 03 	sts	0x03B9, r18
		*ipPort |= ~iPinMask;
    2d44:	fc 01       	movw	r30, r24
    2d46:	20 81       	ld	r18, Z
    2d48:	2e 6f       	ori	r18, 0xFE	; 254
    2d4a:	20 83       	st	Z, r18
};
class iotSubLed {
public:
static void
init(iotPin::iotPinId pin) {
	ipPort = iotPin::getpPort(pin);
    2d4c:	89 e1       	ldi	r24, 0x19	; 25
    2d4e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_ZN6iotPin8getpPortENS_8iotPinIdE>
    2d52:	90 93 b8 03 	sts	0x03B8, r25
    2d56:	80 93 b7 03 	sts	0x03B7, r24
	iPinMask = iotPin::getPinMask(pin);
    2d5a:	22 e0       	ldi	r18, 0x02	; 2
    2d5c:	20 93 b6 03 	sts	0x03B6, r18
	*ipPort |= ~iPinMask;
    2d60:	dc 01       	movw	r26, r24
    2d62:	2c 91       	ld	r18, X
    2d64:	2d 6f       	ori	r18, 0xFD	; 253
    2d66:	2c 93       	st	X, r18
	iotSubLed::init(iotPin::iotcPD1);			// PORTD:  GND=B 1번 핀
	
	
	// initialize DC Fan Motor - iotTimer::iotcTimer2
	// PORTF pin0 to OUTPUT
	FanTimer = new iotTimer(iotTimer::iotcTimer2, iotTimer::iotcPsdNo, 250);
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Znwj>
		typedef enum {		// 32 & 128 only for 8-bit counters 0 & 2.
			iotcPsdNo, iotcPsd1, iotcPsd8, iotcPsd32, iotcPsd64, iotcPsd128,
			iotcPsd256, iotcPsd1024
		} iotTimerPsd;
		iotTimer(iotTimerId aId, iotTimerPsd aPsd, unsigned int aCount) {
			iId = iotcTimerNone;
    2d70:	fc 01       	movw	r30, r24
    2d72:	10 82       	st	Z, r1
					if((TCCR1B & 0x07) != 0) return;
					TCNT1 = 0; OCR1A = aCount; TCCR1A = 0;
					TCCR1B = (TCCR1B & ~(0x07)) | (1 << WGM12) | psd;
					break;
				case iotcTimer2:
					if((TCCR2 & 0x07) != 0) return;
    2d74:	25 b5       	in	r18, 0x25	; 37
    2d76:	27 70       	andi	r18, 0x07	; 7
    2d78:	49 f4       	brne	.+18     	; 0x2d8c <main+0x2cc>
					TCNT2 = 0; OCR2 = aCount & 0xff;
    2d7a:	14 bc       	out	0x24, r1	; 36
    2d7c:	2a ef       	ldi	r18, 0xFA	; 250
    2d7e:	23 bd       	out	0x23, r18	; 35
					TCCR2 = (TCCR2 & ~(0x07)) | (1 << WGM21) | psd;
    2d80:	25 b5       	in	r18, 0x25	; 37
    2d82:	20 7f       	andi	r18, 0xF0	; 240
    2d84:	28 60       	ori	r18, 0x08	; 8
    2d86:	25 bd       	out	0x25, r18	; 37
					TCNT3 = 0; OCR3A = aCount; TCCR3A = 0;
					TCCR3B = (TCCR3B & ~(0x07)) | (1 << WGM32) | psd;
					break;
				default: return;
			}
			iId = aId;
    2d88:	23 e0       	ldi	r18, 0x03	; 3
    2d8a:	20 83       	st	Z, r18
    2d8c:	90 93 f5 06 	sts	0x06F5, r25
    2d90:	80 93 f4 06 	sts	0x06F4, r24
	DDRF |= 0x01;
    2d94:	e1 e6       	ldi	r30, 0x61	; 97
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	80 81       	ld	r24, Z
    2d9a:	81 60       	ori	r24, 0x01	; 1
    2d9c:	80 83       	st	Z, r24
	PORTF |= 0x01;
    2d9e:	e2 e6       	ldi	r30, 0x62	; 98
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	80 81       	ld	r24, Z
    2da4:	81 60       	ori	r24, 0x01	; 1
    2da6:	80 83       	st	Z, r24
	
	
	//iotTimer	timer0(iotTimer::iotcTimer0, iotTimer::iotcPsd64, 250);
	//timer0.enableInterrupt(updateLed);
	
	DDRB = 0x0f;
    2da8:	8f e0       	ldi	r24, 0x0F	; 15
    2daa:	87 bb       	out	0x17, r24	; 23
	
	DDRD = 0x0f; // portD 
    2dac:	81 bb       	out	0x11, r24	; 17
	
	/*something more??*/
	
	// initialize infra-red receiver
	IrRecv = new iotIrReceiver(IR_TIMER);
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Znwj>
    2db6:	8c 01       	movw	r16, r24
    2db8:	62 e0       	ldi	r22, 0x02	; 2
    2dba:	0e 94 32 02 	call	0x464	; 0x464 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE>
    2dbe:	10 93 fb 06 	sts	0x06FB, r17
    2dc2:	00 93 fa 06 	sts	0x06FA, r16
	IrRecv->enable();
    2dc6:	c8 01       	movw	r24, r16
    2dc8:	5a dc       	rcall	.-1868   	; 0x267e <_ZN13iotIrReceiver6enableEv>
	// initialize infra-red transmitter
	IrTrans = new iotIrTransmitter(IR_TIMER);
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Znwj>
    2dd2:	8c 01       	movw	r16, r24
    2dd4:	62 e0       	ldi	r22, 0x02	; 2
    2dd6:	0e 94 a0 02 	call	0x540	; 0x540 <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE>
    2dda:	10 93 f9 06 	sts	0x06F9, r17
    2dde:	00 93 f8 06 	sts	0x06F8, r16
	
	
	
	sei();
    2de2:	78 94       	sei
		/*
		if(iotClock::lcdmode) {
			
		} else {
		}*/
		CharLcd->processOne();
    2de4:	20 91 fc 06 	lds	r18, 0x06FC
    2de8:	30 91 fd 06 	lds	r19, 0x06FD

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
		}
		void
		processOne() {
			if(iTail == iHead) return;		// buffer empty.
    2dec:	f9 01       	movw	r30, r18
    2dee:	e3 5d       	subi	r30, 0xD3	; 211
    2df0:	fe 4f       	sbci	r31, 0xFE	; 254
    2df2:	90 81       	ld	r25, Z
    2df4:	31 97       	sbiw	r30, 0x01	; 1
    2df6:	80 81       	ld	r24, Z
    2df8:	98 17       	cp	r25, r24
    2dfa:	09 f4       	brne	.+2      	; 0x2dfe <main+0x33e>
    2dfc:	d9 c3       	rjmp	.+1970   	; 0x35b0 <main+0xaf0>

			volatile iotCharLcdOut	*out = iQueue + iTail;
    2dfe:	31 96       	adiw	r30, 0x01	; 1
    2e00:	80 81       	ld	r24, Z
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	fc 01       	movw	r30, r24
    2e06:	ee 0f       	add	r30, r30
    2e08:	ff 1f       	adc	r31, r31
    2e0a:	e8 0f       	add	r30, r24
    2e0c:	f9 1f       	adc	r31, r25
    2e0e:	e2 0f       	add	r30, r18
    2e10:	f3 1f       	adc	r31, r19
			if((out->x != iX) || (out->y != iY))
    2e12:	90 81       	ld	r25, Z
    2e14:	d9 01       	movw	r26, r18
    2e16:	a2 5d       	subi	r26, 0xD2	; 210
    2e18:	be 4f       	sbci	r27, 0xFE	; 254
    2e1a:	8c 91       	ld	r24, X
    2e1c:	98 13       	cpse	r25, r24
    2e1e:	06 c0       	rjmp	.+12     	; 0x2e2c <main+0x36c>
    2e20:	91 81       	ldd	r25, Z+1	; 0x01
    2e22:	11 96       	adiw	r26, 0x01	; 1
    2e24:	8c 91       	ld	r24, X
    2e26:	98 17       	cp	r25, r24
    2e28:	09 f4       	brne	.+2      	; 0x2e2c <main+0x36c>
    2e2a:	be c2       	rjmp	.+1404   	; 0x33a8 <main+0x8e8>
				goTo(out->x, out->y);
    2e2c:	81 81       	ldd	r24, Z+1	; 0x01
    2e2e:	40 81       	ld	r20, Z
		volatile unsigned char	iX, iY;
		char			iControl;

		void
		goTo(unsigned char aX, unsigned char aY) {
			if(aY == 1) {
    2e30:	81 30       	cpi	r24, 0x01	; 1
    2e32:	09 f0       	breq	.+2      	; 0x2e36 <main+0x376>
    2e34:	98 c1       	rjmp	.+816    	; 0x3166 <main+0x6a6>
				writeControl(0x80 + aX - 1); iotTimer::delay(1);	
    2e36:	41 58       	subi	r20, 0x81	; 129
				writeControl(0xc0 + aX - 1); iotTimer::delay(1);
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
    2e38:	d9 01       	movw	r26, r18
    2e3a:	a0 5d       	subi	r26, 0xD0	; 208
    2e3c:	be 4f       	sbci	r27, 0xFE	; 254
    2e3e:	8c 91       	ld	r24, X
    2e40:	8f 70       	andi	r24, 0x0F	; 15
    2e42:	8c 93       	st	X, r24
    2e44:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    2e48:	6f 96       	adiw	r28, 0x1f	; 31
    2e4a:	1f ae       	std	Y+63, r1	; 0x3f
    2e4c:	1e ae       	std	Y+62, r1	; 0x3e
    2e4e:	6f 97       	sbiw	r28, 0x1f	; 31
    2e50:	6f 96       	adiw	r28, 0x1f	; 31
    2e52:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e54:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e56:	6f 97       	sbiw	r28, 0x1f	; 31
    2e58:	18 16       	cp	r1, r24
    2e5a:	19 06       	cpc	r1, r25
    2e5c:	4c f1       	brlt	.+82     	; 0x2eb0 <main+0x3f0>
				for(volatile int j = 0; j < 6; j++) ;
    2e5e:	6d 96       	adiw	r28, 0x1d	; 29
    2e60:	1f ae       	std	Y+63, r1	; 0x3f
    2e62:	1e ae       	std	Y+62, r1	; 0x3e
    2e64:	6d 97       	sbiw	r28, 0x1d	; 29
    2e66:	6d 96       	adiw	r28, 0x1d	; 29
    2e68:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e6a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e6c:	6d 97       	sbiw	r28, 0x1d	; 29
    2e6e:	06 97       	sbiw	r24, 0x06	; 6
    2e70:	7c f4       	brge	.+30     	; 0x2e90 <main+0x3d0>
    2e72:	6d 96       	adiw	r28, 0x1d	; 29
    2e74:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e76:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e78:	6d 97       	sbiw	r28, 0x1d	; 29
    2e7a:	01 96       	adiw	r24, 0x01	; 1
    2e7c:	6d 96       	adiw	r28, 0x1d	; 29
    2e7e:	9f af       	std	Y+63, r25	; 0x3f
    2e80:	8e af       	std	Y+62, r24	; 0x3e
    2e82:	6d 97       	sbiw	r28, 0x1d	; 29
    2e84:	6d 96       	adiw	r28, 0x1d	; 29
    2e86:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e88:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e8a:	6d 97       	sbiw	r28, 0x1d	; 29
    2e8c:	06 97       	sbiw	r24, 0x06	; 6
    2e8e:	8c f3       	brlt	.-30     	; 0x2e72 <main+0x3b2>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    2e90:	6f 96       	adiw	r28, 0x1f	; 31
    2e92:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e94:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e96:	6f 97       	sbiw	r28, 0x1f	; 31
    2e98:	01 96       	adiw	r24, 0x01	; 1
    2e9a:	6f 96       	adiw	r28, 0x1f	; 31
    2e9c:	9f af       	std	Y+63, r25	; 0x3f
    2e9e:	8e af       	std	Y+62, r24	; 0x3e
    2ea0:	6f 97       	sbiw	r28, 0x1f	; 31
    2ea2:	6f 96       	adiw	r28, 0x1f	; 31
    2ea4:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ea6:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ea8:	6f 97       	sbiw	r28, 0x1f	; 31
    2eaa:	18 16       	cp	r1, r24
    2eac:	19 06       	cpc	r1, r25
    2eae:	bc f6       	brge	.-82     	; 0x2e5e <main+0x39e>
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
    2eb0:	d9 01       	movw	r26, r18
    2eb2:	a0 5d       	subi	r26, 0xD0	; 208
    2eb4:	be 4f       	sbci	r27, 0xFE	; 254
    2eb6:	8c 91       	ld	r24, X
    2eb8:	8b 71       	andi	r24, 0x1B	; 27
    2eba:	8c 93       	st	X, r24
    2ebc:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    2ec0:	6b 96       	adiw	r28, 0x1b	; 27
    2ec2:	1f ae       	std	Y+63, r1	; 0x3f
    2ec4:	1e ae       	std	Y+62, r1	; 0x3e
    2ec6:	6b 97       	sbiw	r28, 0x1b	; 27
    2ec8:	6b 96       	adiw	r28, 0x1b	; 27
    2eca:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ecc:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ece:	6b 97       	sbiw	r28, 0x1b	; 27
    2ed0:	18 16       	cp	r1, r24
    2ed2:	19 06       	cpc	r1, r25
    2ed4:	4c f1       	brlt	.+82     	; 0x2f28 <main+0x468>
				for(volatile int j = 0; j < 6; j++) ;
    2ed6:	69 96       	adiw	r28, 0x19	; 25
    2ed8:	1f ae       	std	Y+63, r1	; 0x3f
    2eda:	1e ae       	std	Y+62, r1	; 0x3e
    2edc:	69 97       	sbiw	r28, 0x19	; 25
    2ede:	69 96       	adiw	r28, 0x19	; 25
    2ee0:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ee2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ee4:	69 97       	sbiw	r28, 0x19	; 25
    2ee6:	06 97       	sbiw	r24, 0x06	; 6
    2ee8:	7c f4       	brge	.+30     	; 0x2f08 <main+0x448>
    2eea:	69 96       	adiw	r28, 0x19	; 25
    2eec:	8e ad       	ldd	r24, Y+62	; 0x3e
    2eee:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ef0:	69 97       	sbiw	r28, 0x19	; 25
    2ef2:	01 96       	adiw	r24, 0x01	; 1
    2ef4:	69 96       	adiw	r28, 0x19	; 25
    2ef6:	9f af       	std	Y+63, r25	; 0x3f
    2ef8:	8e af       	std	Y+62, r24	; 0x3e
    2efa:	69 97       	sbiw	r28, 0x19	; 25
    2efc:	69 96       	adiw	r28, 0x19	; 25
    2efe:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f00:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f02:	69 97       	sbiw	r28, 0x19	; 25
    2f04:	06 97       	sbiw	r24, 0x06	; 6
    2f06:	8c f3       	brlt	.-30     	; 0x2eea <main+0x42a>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    2f08:	6b 96       	adiw	r28, 0x1b	; 27
    2f0a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f0c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f0e:	6b 97       	sbiw	r28, 0x1b	; 27
    2f10:	01 96       	adiw	r24, 0x01	; 1
    2f12:	6b 96       	adiw	r28, 0x1b	; 27
    2f14:	9f af       	std	Y+63, r25	; 0x3f
    2f16:	8e af       	std	Y+62, r24	; 0x3e
    2f18:	6b 97       	sbiw	r28, 0x1b	; 27
    2f1a:	6b 96       	adiw	r28, 0x1b	; 27
    2f1c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f1e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f20:	6b 97       	sbiw	r28, 0x1b	; 27
    2f22:	18 16       	cp	r1, r24
    2f24:	19 06       	cpc	r1, r25
    2f26:	bc f6       	brge	.-82     	; 0x2ed6 <main+0x416>
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
    2f28:	d9 01       	movw	r26, r18
    2f2a:	a0 5d       	subi	r26, 0xD0	; 208
    2f2c:	be 4f       	sbci	r27, 0xFE	; 254
    2f2e:	8c 91       	ld	r24, X
    2f30:	87 71       	andi	r24, 0x17	; 23
    2f32:	8c 93       	st	X, r24
    2f34:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    2f38:	67 96       	adiw	r28, 0x17	; 23
    2f3a:	1f ae       	std	Y+63, r1	; 0x3f
    2f3c:	1e ae       	std	Y+62, r1	; 0x3e
    2f3e:	67 97       	sbiw	r28, 0x17	; 23
    2f40:	67 96       	adiw	r28, 0x17	; 23
    2f42:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f44:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f46:	67 97       	sbiw	r28, 0x17	; 23
    2f48:	18 16       	cp	r1, r24
    2f4a:	19 06       	cpc	r1, r25
    2f4c:	4c f1       	brlt	.+82     	; 0x2fa0 <main+0x4e0>
				for(volatile int j = 0; j < 6; j++) ;
    2f4e:	65 96       	adiw	r28, 0x15	; 21
    2f50:	1f ae       	std	Y+63, r1	; 0x3f
    2f52:	1e ae       	std	Y+62, r1	; 0x3e
    2f54:	65 97       	sbiw	r28, 0x15	; 21
    2f56:	65 96       	adiw	r28, 0x15	; 21
    2f58:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f5a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f5c:	65 97       	sbiw	r28, 0x15	; 21
    2f5e:	06 97       	sbiw	r24, 0x06	; 6
    2f60:	7c f4       	brge	.+30     	; 0x2f80 <main+0x4c0>
    2f62:	65 96       	adiw	r28, 0x15	; 21
    2f64:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f66:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f68:	65 97       	sbiw	r28, 0x15	; 21
    2f6a:	01 96       	adiw	r24, 0x01	; 1
    2f6c:	65 96       	adiw	r28, 0x15	; 21
    2f6e:	9f af       	std	Y+63, r25	; 0x3f
    2f70:	8e af       	std	Y+62, r24	; 0x3e
    2f72:	65 97       	sbiw	r28, 0x15	; 21
    2f74:	65 96       	adiw	r28, 0x15	; 21
    2f76:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f78:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f7a:	65 97       	sbiw	r28, 0x15	; 21
    2f7c:	06 97       	sbiw	r24, 0x06	; 6
    2f7e:	8c f3       	brlt	.-30     	; 0x2f62 <main+0x4a2>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    2f80:	67 96       	adiw	r28, 0x17	; 23
    2f82:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f84:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f86:	67 97       	sbiw	r28, 0x17	; 23
    2f88:	01 96       	adiw	r24, 0x01	; 1
    2f8a:	67 96       	adiw	r28, 0x17	; 23
    2f8c:	9f af       	std	Y+63, r25	; 0x3f
    2f8e:	8e af       	std	Y+62, r24	; 0x3e
    2f90:	67 97       	sbiw	r28, 0x17	; 23
    2f92:	67 96       	adiw	r28, 0x17	; 23
    2f94:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f96:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f98:	67 97       	sbiw	r28, 0x17	; 23
    2f9a:	18 16       	cp	r1, r24
    2f9c:	19 06       	cpc	r1, r25
    2f9e:	bc f6       	brge	.-82     	; 0x2f4e <main+0x48e>
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
    2fa0:	d9 01       	movw	r26, r18
    2fa2:	a0 5d       	subi	r26, 0xD0	; 208
    2fa4:	be 4f       	sbci	r27, 0xFE	; 254
    2fa6:	8c 91       	ld	r24, X
    2fa8:	80 61       	ori	r24, 0x10	; 16
    2faa:	8c 93       	st	X, r24
    2fac:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    2fb0:	63 96       	adiw	r28, 0x13	; 19
    2fb2:	1f ae       	std	Y+63, r1	; 0x3f
    2fb4:	1e ae       	std	Y+62, r1	; 0x3e
    2fb6:	63 97       	sbiw	r28, 0x13	; 19
    2fb8:	63 96       	adiw	r28, 0x13	; 19
    2fba:	8e ad       	ldd	r24, Y+62	; 0x3e
    2fbc:	9f ad       	ldd	r25, Y+63	; 0x3f
    2fbe:	63 97       	sbiw	r28, 0x13	; 19
    2fc0:	18 16       	cp	r1, r24
    2fc2:	19 06       	cpc	r1, r25
    2fc4:	4c f1       	brlt	.+82     	; 0x3018 <main+0x558>
				for(volatile int j = 0; j < 6; j++) ;
    2fc6:	61 96       	adiw	r28, 0x11	; 17
    2fc8:	1f ae       	std	Y+63, r1	; 0x3f
    2fca:	1e ae       	std	Y+62, r1	; 0x3e
    2fcc:	61 97       	sbiw	r28, 0x11	; 17
    2fce:	61 96       	adiw	r28, 0x11	; 17
    2fd0:	8e ad       	ldd	r24, Y+62	; 0x3e
    2fd2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2fd4:	61 97       	sbiw	r28, 0x11	; 17
    2fd6:	06 97       	sbiw	r24, 0x06	; 6
    2fd8:	7c f4       	brge	.+30     	; 0x2ff8 <main+0x538>
    2fda:	61 96       	adiw	r28, 0x11	; 17
    2fdc:	8e ad       	ldd	r24, Y+62	; 0x3e
    2fde:	9f ad       	ldd	r25, Y+63	; 0x3f
    2fe0:	61 97       	sbiw	r28, 0x11	; 17
    2fe2:	01 96       	adiw	r24, 0x01	; 1
    2fe4:	61 96       	adiw	r28, 0x11	; 17
    2fe6:	9f af       	std	Y+63, r25	; 0x3f
    2fe8:	8e af       	std	Y+62, r24	; 0x3e
    2fea:	61 97       	sbiw	r28, 0x11	; 17
    2fec:	61 96       	adiw	r28, 0x11	; 17
    2fee:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ff0:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ff2:	61 97       	sbiw	r28, 0x11	; 17
    2ff4:	06 97       	sbiw	r24, 0x06	; 6
    2ff6:	8c f3       	brlt	.-30     	; 0x2fda <main+0x51a>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    2ff8:	63 96       	adiw	r28, 0x13	; 19
    2ffa:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ffc:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ffe:	63 97       	sbiw	r28, 0x13	; 19
    3000:	01 96       	adiw	r24, 0x01	; 1
    3002:	63 96       	adiw	r28, 0x13	; 19
    3004:	9f af       	std	Y+63, r25	; 0x3f
    3006:	8e af       	std	Y+62, r24	; 0x3e
    3008:	63 97       	sbiw	r28, 0x13	; 19
    300a:	63 96       	adiw	r28, 0x13	; 19
    300c:	8e ad       	ldd	r24, Y+62	; 0x3e
    300e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3010:	63 97       	sbiw	r28, 0x13	; 19
    3012:	18 16       	cp	r1, r24
    3014:	19 06       	cpc	r1, r25
    3016:	bc f6       	brge	.-82     	; 0x2fc6 <main+0x506>
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
    3018:	4b bb       	out	0x1b, r20	; 27
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    301a:	2f 96       	adiw	r28, 0x0f	; 15
    301c:	1f ae       	std	Y+63, r1	; 0x3f
    301e:	1e ae       	std	Y+62, r1	; 0x3e
    3020:	2f 97       	sbiw	r28, 0x0f	; 15
    3022:	2f 96       	adiw	r28, 0x0f	; 15
    3024:	8e ad       	ldd	r24, Y+62	; 0x3e
    3026:	9f ad       	ldd	r25, Y+63	; 0x3f
    3028:	2f 97       	sbiw	r28, 0x0f	; 15
    302a:	18 16       	cp	r1, r24
    302c:	19 06       	cpc	r1, r25
    302e:	4c f1       	brlt	.+82     	; 0x3082 <main+0x5c2>
				for(volatile int j = 0; j < 6; j++) ;
    3030:	2d 96       	adiw	r28, 0x0d	; 13
    3032:	1f ae       	std	Y+63, r1	; 0x3f
    3034:	1e ae       	std	Y+62, r1	; 0x3e
    3036:	2d 97       	sbiw	r28, 0x0d	; 13
    3038:	2d 96       	adiw	r28, 0x0d	; 13
    303a:	8e ad       	ldd	r24, Y+62	; 0x3e
    303c:	9f ad       	ldd	r25, Y+63	; 0x3f
    303e:	2d 97       	sbiw	r28, 0x0d	; 13
    3040:	06 97       	sbiw	r24, 0x06	; 6
    3042:	7c f4       	brge	.+30     	; 0x3062 <main+0x5a2>
    3044:	2d 96       	adiw	r28, 0x0d	; 13
    3046:	8e ad       	ldd	r24, Y+62	; 0x3e
    3048:	9f ad       	ldd	r25, Y+63	; 0x3f
    304a:	2d 97       	sbiw	r28, 0x0d	; 13
    304c:	01 96       	adiw	r24, 0x01	; 1
    304e:	2d 96       	adiw	r28, 0x0d	; 13
    3050:	9f af       	std	Y+63, r25	; 0x3f
    3052:	8e af       	std	Y+62, r24	; 0x3e
    3054:	2d 97       	sbiw	r28, 0x0d	; 13
    3056:	2d 96       	adiw	r28, 0x0d	; 13
    3058:	8e ad       	ldd	r24, Y+62	; 0x3e
    305a:	9f ad       	ldd	r25, Y+63	; 0x3f
    305c:	2d 97       	sbiw	r28, 0x0d	; 13
    305e:	06 97       	sbiw	r24, 0x06	; 6
    3060:	8c f3       	brlt	.-30     	; 0x3044 <main+0x584>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    3062:	2f 96       	adiw	r28, 0x0f	; 15
    3064:	8e ad       	ldd	r24, Y+62	; 0x3e
    3066:	9f ad       	ldd	r25, Y+63	; 0x3f
    3068:	2f 97       	sbiw	r28, 0x0f	; 15
    306a:	01 96       	adiw	r24, 0x01	; 1
    306c:	2f 96       	adiw	r28, 0x0f	; 15
    306e:	9f af       	std	Y+63, r25	; 0x3f
    3070:	8e af       	std	Y+62, r24	; 0x3e
    3072:	2f 97       	sbiw	r28, 0x0f	; 15
    3074:	2f 96       	adiw	r28, 0x0f	; 15
    3076:	8e ad       	ldd	r24, Y+62	; 0x3e
    3078:	9f ad       	ldd	r25, Y+63	; 0x3f
    307a:	2f 97       	sbiw	r28, 0x0f	; 15
    307c:	18 16       	cp	r1, r24
    307e:	19 06       	cpc	r1, r25
    3080:	bc f6       	brge	.-82     	; 0x3030 <main+0x570>
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
			iotmCharLcdEnOff; iotTimer::delay(1);
    3082:	d9 01       	movw	r26, r18
    3084:	a0 5d       	subi	r26, 0xD0	; 208
    3086:	be 4f       	sbci	r27, 0xFE	; 254
    3088:	8c 91       	ld	r24, X
    308a:	8f 70       	andi	r24, 0x0F	; 15
    308c:	8c 93       	st	X, r24
    308e:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    3092:	2b 96       	adiw	r28, 0x0b	; 11
    3094:	1f ae       	std	Y+63, r1	; 0x3f
    3096:	1e ae       	std	Y+62, r1	; 0x3e
    3098:	2b 97       	sbiw	r28, 0x0b	; 11
    309a:	2b 96       	adiw	r28, 0x0b	; 11
    309c:	8e ad       	ldd	r24, Y+62	; 0x3e
    309e:	9f ad       	ldd	r25, Y+63	; 0x3f
    30a0:	2b 97       	sbiw	r28, 0x0b	; 11
    30a2:	18 16       	cp	r1, r24
    30a4:	19 06       	cpc	r1, r25
    30a6:	4c f1       	brlt	.+82     	; 0x30fa <main+0x63a>
				for(volatile int j = 0; j < 6; j++) ;
    30a8:	29 96       	adiw	r28, 0x09	; 9
    30aa:	1f ae       	std	Y+63, r1	; 0x3f
    30ac:	1e ae       	std	Y+62, r1	; 0x3e
    30ae:	29 97       	sbiw	r28, 0x09	; 9
    30b0:	29 96       	adiw	r28, 0x09	; 9
    30b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    30b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    30b6:	29 97       	sbiw	r28, 0x09	; 9
    30b8:	06 97       	sbiw	r24, 0x06	; 6
    30ba:	7c f4       	brge	.+30     	; 0x30da <main+0x61a>
    30bc:	29 96       	adiw	r28, 0x09	; 9
    30be:	8e ad       	ldd	r24, Y+62	; 0x3e
    30c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    30c2:	29 97       	sbiw	r28, 0x09	; 9
    30c4:	01 96       	adiw	r24, 0x01	; 1
    30c6:	29 96       	adiw	r28, 0x09	; 9
    30c8:	9f af       	std	Y+63, r25	; 0x3f
    30ca:	8e af       	std	Y+62, r24	; 0x3e
    30cc:	29 97       	sbiw	r28, 0x09	; 9
    30ce:	29 96       	adiw	r28, 0x09	; 9
    30d0:	8e ad       	ldd	r24, Y+62	; 0x3e
    30d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    30d4:	29 97       	sbiw	r28, 0x09	; 9
    30d6:	06 97       	sbiw	r24, 0x06	; 6
    30d8:	8c f3       	brlt	.-30     	; 0x30bc <main+0x5fc>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    30da:	2b 96       	adiw	r28, 0x0b	; 11
    30dc:	8e ad       	ldd	r24, Y+62	; 0x3e
    30de:	9f ad       	ldd	r25, Y+63	; 0x3f
    30e0:	2b 97       	sbiw	r28, 0x0b	; 11
    30e2:	01 96       	adiw	r24, 0x01	; 1
    30e4:	2b 96       	adiw	r28, 0x0b	; 11
    30e6:	9f af       	std	Y+63, r25	; 0x3f
    30e8:	8e af       	std	Y+62, r24	; 0x3e
    30ea:	2b 97       	sbiw	r28, 0x0b	; 11
    30ec:	2b 96       	adiw	r28, 0x0b	; 11
    30ee:	8e ad       	ldd	r24, Y+62	; 0x3e
    30f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    30f2:	2b 97       	sbiw	r28, 0x0b	; 11
    30f4:	18 16       	cp	r1, r24
    30f6:	19 06       	cpc	r1, r25
    30f8:	bc f6       	brge	.-82     	; 0x30a8 <main+0x5e8>
    30fa:	27 96       	adiw	r28, 0x07	; 7
    30fc:	1f ae       	std	Y+63, r1	; 0x3f
    30fe:	1e ae       	std	Y+62, r1	; 0x3e
    3100:	27 97       	sbiw	r28, 0x07	; 7
    3102:	27 96       	adiw	r28, 0x07	; 7
    3104:	8e ad       	ldd	r24, Y+62	; 0x3e
    3106:	9f ad       	ldd	r25, Y+63	; 0x3f
    3108:	27 97       	sbiw	r28, 0x07	; 7
    310a:	18 16       	cp	r1, r24
    310c:	19 06       	cpc	r1, r25
    310e:	0c f4       	brge	.+2      	; 0x3112 <main+0x652>
    3110:	4b c1       	rjmp	.+662    	; 0x33a8 <main+0x8e8>
				for(volatile int j = 0; j < 6; j++) ;
    3112:	25 96       	adiw	r28, 0x05	; 5
    3114:	1f ae       	std	Y+63, r1	; 0x3f
    3116:	1e ae       	std	Y+62, r1	; 0x3e
    3118:	25 97       	sbiw	r28, 0x05	; 5
    311a:	25 96       	adiw	r28, 0x05	; 5
    311c:	8e ad       	ldd	r24, Y+62	; 0x3e
    311e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3120:	25 97       	sbiw	r28, 0x05	; 5
    3122:	06 97       	sbiw	r24, 0x06	; 6
    3124:	7c f4       	brge	.+30     	; 0x3144 <main+0x684>
    3126:	25 96       	adiw	r28, 0x05	; 5
    3128:	8e ad       	ldd	r24, Y+62	; 0x3e
    312a:	9f ad       	ldd	r25, Y+63	; 0x3f
    312c:	25 97       	sbiw	r28, 0x05	; 5
    312e:	01 96       	adiw	r24, 0x01	; 1
    3130:	25 96       	adiw	r28, 0x05	; 5
    3132:	9f af       	std	Y+63, r25	; 0x3f
    3134:	8e af       	std	Y+62, r24	; 0x3e
    3136:	25 97       	sbiw	r28, 0x05	; 5
    3138:	25 96       	adiw	r28, 0x05	; 5
    313a:	8e ad       	ldd	r24, Y+62	; 0x3e
    313c:	9f ad       	ldd	r25, Y+63	; 0x3f
    313e:	25 97       	sbiw	r28, 0x05	; 5
    3140:	06 97       	sbiw	r24, 0x06	; 6
    3142:	8c f3       	brlt	.-30     	; 0x3126 <main+0x666>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    3144:	27 96       	adiw	r28, 0x07	; 7
    3146:	8e ad       	ldd	r24, Y+62	; 0x3e
    3148:	9f ad       	ldd	r25, Y+63	; 0x3f
    314a:	27 97       	sbiw	r28, 0x07	; 7
    314c:	01 96       	adiw	r24, 0x01	; 1
    314e:	27 96       	adiw	r28, 0x07	; 7
    3150:	9f af       	std	Y+63, r25	; 0x3f
    3152:	8e af       	std	Y+62, r24	; 0x3e
    3154:	27 97       	sbiw	r28, 0x07	; 7
    3156:	27 96       	adiw	r28, 0x07	; 7
    3158:	8e ad       	ldd	r24, Y+62	; 0x3e
    315a:	9f ad       	ldd	r25, Y+63	; 0x3f
    315c:	27 97       	sbiw	r28, 0x07	; 7
    315e:	18 16       	cp	r1, r24
    3160:	19 06       	cpc	r1, r25
    3162:	bc f6       	brge	.-82     	; 0x3112 <main+0x652>
    3164:	21 c1       	rjmp	.+578    	; 0x33a8 <main+0x8e8>

		void
		goTo(unsigned char aX, unsigned char aY) {
			if(aY == 1) {
				writeControl(0x80 + aX - 1); iotTimer::delay(1);	
			} else if (aY == 2) {
    3166:	82 30       	cpi	r24, 0x02	; 2
    3168:	09 f0       	breq	.+2      	; 0x316c <main+0x6ac>
    316a:	1e c1       	rjmp	.+572    	; 0x33a8 <main+0x8e8>
				writeControl(0xc0 + aX - 1); iotTimer::delay(1);
    316c:	41 54       	subi	r20, 0x41	; 65
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
    316e:	d9 01       	movw	r26, r18
    3170:	a0 5d       	subi	r26, 0xD0	; 208
    3172:	be 4f       	sbci	r27, 0xFE	; 254
    3174:	8c 91       	ld	r24, X
    3176:	8f 70       	andi	r24, 0x0F	; 15
    3178:	8c 93       	st	X, r24
    317a:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    317e:	23 96       	adiw	r28, 0x03	; 3
    3180:	1f ae       	std	Y+63, r1	; 0x3f
    3182:	1e ae       	std	Y+62, r1	; 0x3e
    3184:	23 97       	sbiw	r28, 0x03	; 3
    3186:	23 96       	adiw	r28, 0x03	; 3
    3188:	8e ad       	ldd	r24, Y+62	; 0x3e
    318a:	9f ad       	ldd	r25, Y+63	; 0x3f
    318c:	23 97       	sbiw	r28, 0x03	; 3
    318e:	18 16       	cp	r1, r24
    3190:	19 06       	cpc	r1, r25
    3192:	4c f1       	brlt	.+82     	; 0x31e6 <main+0x726>
				for(volatile int j = 0; j < 6; j++) ;
    3194:	21 96       	adiw	r28, 0x01	; 1
    3196:	1f ae       	std	Y+63, r1	; 0x3f
    3198:	1e ae       	std	Y+62, r1	; 0x3e
    319a:	21 97       	sbiw	r28, 0x01	; 1
    319c:	21 96       	adiw	r28, 0x01	; 1
    319e:	8e ad       	ldd	r24, Y+62	; 0x3e
    31a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    31a2:	21 97       	sbiw	r28, 0x01	; 1
    31a4:	06 97       	sbiw	r24, 0x06	; 6
    31a6:	7c f4       	brge	.+30     	; 0x31c6 <main+0x706>
    31a8:	21 96       	adiw	r28, 0x01	; 1
    31aa:	8e ad       	ldd	r24, Y+62	; 0x3e
    31ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    31ae:	21 97       	sbiw	r28, 0x01	; 1
    31b0:	01 96       	adiw	r24, 0x01	; 1
    31b2:	21 96       	adiw	r28, 0x01	; 1
    31b4:	9f af       	std	Y+63, r25	; 0x3f
    31b6:	8e af       	std	Y+62, r24	; 0x3e
    31b8:	21 97       	sbiw	r28, 0x01	; 1
    31ba:	21 96       	adiw	r28, 0x01	; 1
    31bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    31be:	9f ad       	ldd	r25, Y+63	; 0x3f
    31c0:	21 97       	sbiw	r28, 0x01	; 1
    31c2:	06 97       	sbiw	r24, 0x06	; 6
    31c4:	8c f3       	brlt	.-30     	; 0x31a8 <main+0x6e8>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    31c6:	23 96       	adiw	r28, 0x03	; 3
    31c8:	8e ad       	ldd	r24, Y+62	; 0x3e
    31ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    31cc:	23 97       	sbiw	r28, 0x03	; 3
    31ce:	01 96       	adiw	r24, 0x01	; 1
    31d0:	23 96       	adiw	r28, 0x03	; 3
    31d2:	9f af       	std	Y+63, r25	; 0x3f
    31d4:	8e af       	std	Y+62, r24	; 0x3e
    31d6:	23 97       	sbiw	r28, 0x03	; 3
    31d8:	23 96       	adiw	r28, 0x03	; 3
    31da:	8e ad       	ldd	r24, Y+62	; 0x3e
    31dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    31de:	23 97       	sbiw	r28, 0x03	; 3
    31e0:	18 16       	cp	r1, r24
    31e2:	19 06       	cpc	r1, r25
    31e4:	bc f6       	brge	.-82     	; 0x3194 <main+0x6d4>
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
    31e6:	d9 01       	movw	r26, r18
    31e8:	a0 5d       	subi	r26, 0xD0	; 208
    31ea:	be 4f       	sbci	r27, 0xFE	; 254
    31ec:	8c 91       	ld	r24, X
    31ee:	8b 71       	andi	r24, 0x1B	; 27
    31f0:	8c 93       	st	X, r24
    31f2:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    31f6:	1e ae       	std	Y+62, r1	; 0x3e
    31f8:	1d ae       	std	Y+61, r1	; 0x3d
    31fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    31fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    31fe:	18 16       	cp	r1, r24
    3200:	19 06       	cpc	r1, r25
    3202:	cc f0       	brlt	.+50     	; 0x3236 <main+0x776>
				for(volatile int j = 0; j < 6; j++) ;
    3204:	1c ae       	std	Y+60, r1	; 0x3c
    3206:	1b ae       	std	Y+59, r1	; 0x3b
    3208:	8b ad       	ldd	r24, Y+59	; 0x3b
    320a:	9c ad       	ldd	r25, Y+60	; 0x3c
    320c:	06 97       	sbiw	r24, 0x06	; 6
    320e:	4c f4       	brge	.+18     	; 0x3222 <main+0x762>
    3210:	8b ad       	ldd	r24, Y+59	; 0x3b
    3212:	9c ad       	ldd	r25, Y+60	; 0x3c
    3214:	01 96       	adiw	r24, 0x01	; 1
    3216:	9c af       	std	Y+60, r25	; 0x3c
    3218:	8b af       	std	Y+59, r24	; 0x3b
    321a:	8b ad       	ldd	r24, Y+59	; 0x3b
    321c:	9c ad       	ldd	r25, Y+60	; 0x3c
    321e:	06 97       	sbiw	r24, 0x06	; 6
    3220:	bc f3       	brlt	.-18     	; 0x3210 <main+0x750>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    3222:	8d ad       	ldd	r24, Y+61	; 0x3d
    3224:	9e ad       	ldd	r25, Y+62	; 0x3e
    3226:	01 96       	adiw	r24, 0x01	; 1
    3228:	9e af       	std	Y+62, r25	; 0x3e
    322a:	8d af       	std	Y+61, r24	; 0x3d
    322c:	8d ad       	ldd	r24, Y+61	; 0x3d
    322e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3230:	18 16       	cp	r1, r24
    3232:	19 06       	cpc	r1, r25
    3234:	3c f7       	brge	.-50     	; 0x3204 <main+0x744>
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
    3236:	d9 01       	movw	r26, r18
    3238:	a0 5d       	subi	r26, 0xD0	; 208
    323a:	be 4f       	sbci	r27, 0xFE	; 254
    323c:	8c 91       	ld	r24, X
    323e:	87 71       	andi	r24, 0x17	; 23
    3240:	8c 93       	st	X, r24
    3242:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    3246:	1a ae       	std	Y+58, r1	; 0x3a
    3248:	19 ae       	std	Y+57, r1	; 0x39
    324a:	89 ad       	ldd	r24, Y+57	; 0x39
    324c:	9a ad       	ldd	r25, Y+58	; 0x3a
    324e:	18 16       	cp	r1, r24
    3250:	19 06       	cpc	r1, r25
    3252:	cc f0       	brlt	.+50     	; 0x3286 <main+0x7c6>
				for(volatile int j = 0; j < 6; j++) ;
    3254:	18 ae       	std	Y+56, r1	; 0x38
    3256:	1f aa       	std	Y+55, r1	; 0x37
    3258:	8f a9       	ldd	r24, Y+55	; 0x37
    325a:	98 ad       	ldd	r25, Y+56	; 0x38
    325c:	06 97       	sbiw	r24, 0x06	; 6
    325e:	4c f4       	brge	.+18     	; 0x3272 <main+0x7b2>
    3260:	8f a9       	ldd	r24, Y+55	; 0x37
    3262:	98 ad       	ldd	r25, Y+56	; 0x38
    3264:	01 96       	adiw	r24, 0x01	; 1
    3266:	98 af       	std	Y+56, r25	; 0x38
    3268:	8f ab       	std	Y+55, r24	; 0x37
    326a:	8f a9       	ldd	r24, Y+55	; 0x37
    326c:	98 ad       	ldd	r25, Y+56	; 0x38
    326e:	06 97       	sbiw	r24, 0x06	; 6
    3270:	bc f3       	brlt	.-18     	; 0x3260 <main+0x7a0>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    3272:	89 ad       	ldd	r24, Y+57	; 0x39
    3274:	9a ad       	ldd	r25, Y+58	; 0x3a
    3276:	01 96       	adiw	r24, 0x01	; 1
    3278:	9a af       	std	Y+58, r25	; 0x3a
    327a:	89 af       	std	Y+57, r24	; 0x39
    327c:	89 ad       	ldd	r24, Y+57	; 0x39
    327e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3280:	18 16       	cp	r1, r24
    3282:	19 06       	cpc	r1, r25
    3284:	3c f7       	brge	.-50     	; 0x3254 <main+0x794>
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
    3286:	d9 01       	movw	r26, r18
    3288:	a0 5d       	subi	r26, 0xD0	; 208
    328a:	be 4f       	sbci	r27, 0xFE	; 254
    328c:	8c 91       	ld	r24, X
    328e:	80 61       	ori	r24, 0x10	; 16
    3290:	8c 93       	st	X, r24
    3292:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    3296:	1e aa       	std	Y+54, r1	; 0x36
    3298:	1d aa       	std	Y+53, r1	; 0x35
    329a:	8d a9       	ldd	r24, Y+53	; 0x35
    329c:	9e a9       	ldd	r25, Y+54	; 0x36
    329e:	18 16       	cp	r1, r24
    32a0:	19 06       	cpc	r1, r25
    32a2:	cc f0       	brlt	.+50     	; 0x32d6 <main+0x816>
				for(volatile int j = 0; j < 6; j++) ;
    32a4:	1c aa       	std	Y+52, r1	; 0x34
    32a6:	1b aa       	std	Y+51, r1	; 0x33
    32a8:	8b a9       	ldd	r24, Y+51	; 0x33
    32aa:	9c a9       	ldd	r25, Y+52	; 0x34
    32ac:	06 97       	sbiw	r24, 0x06	; 6
    32ae:	4c f4       	brge	.+18     	; 0x32c2 <main+0x802>
    32b0:	8b a9       	ldd	r24, Y+51	; 0x33
    32b2:	9c a9       	ldd	r25, Y+52	; 0x34
    32b4:	01 96       	adiw	r24, 0x01	; 1
    32b6:	9c ab       	std	Y+52, r25	; 0x34
    32b8:	8b ab       	std	Y+51, r24	; 0x33
    32ba:	8b a9       	ldd	r24, Y+51	; 0x33
    32bc:	9c a9       	ldd	r25, Y+52	; 0x34
    32be:	06 97       	sbiw	r24, 0x06	; 6
    32c0:	bc f3       	brlt	.-18     	; 0x32b0 <main+0x7f0>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    32c2:	8d a9       	ldd	r24, Y+53	; 0x35
    32c4:	9e a9       	ldd	r25, Y+54	; 0x36
    32c6:	01 96       	adiw	r24, 0x01	; 1
    32c8:	9e ab       	std	Y+54, r25	; 0x36
    32ca:	8d ab       	std	Y+53, r24	; 0x35
    32cc:	8d a9       	ldd	r24, Y+53	; 0x35
    32ce:	9e a9       	ldd	r25, Y+54	; 0x36
    32d0:	18 16       	cp	r1, r24
    32d2:	19 06       	cpc	r1, r25
    32d4:	3c f7       	brge	.-50     	; 0x32a4 <main+0x7e4>
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
    32d6:	4b bb       	out	0x1b, r20	; 27
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    32d8:	1a aa       	std	Y+50, r1	; 0x32
    32da:	19 aa       	std	Y+49, r1	; 0x31
    32dc:	89 a9       	ldd	r24, Y+49	; 0x31
    32de:	9a a9       	ldd	r25, Y+50	; 0x32
    32e0:	18 16       	cp	r1, r24
    32e2:	19 06       	cpc	r1, r25
    32e4:	cc f0       	brlt	.+50     	; 0x3318 <main+0x858>
				for(volatile int j = 0; j < 6; j++) ;
    32e6:	18 aa       	std	Y+48, r1	; 0x30
    32e8:	1f a6       	std	Y+47, r1	; 0x2f
    32ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    32ec:	98 a9       	ldd	r25, Y+48	; 0x30
    32ee:	06 97       	sbiw	r24, 0x06	; 6
    32f0:	4c f4       	brge	.+18     	; 0x3304 <main+0x844>
    32f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    32f4:	98 a9       	ldd	r25, Y+48	; 0x30
    32f6:	01 96       	adiw	r24, 0x01	; 1
    32f8:	98 ab       	std	Y+48, r25	; 0x30
    32fa:	8f a7       	std	Y+47, r24	; 0x2f
    32fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    32fe:	98 a9       	ldd	r25, Y+48	; 0x30
    3300:	06 97       	sbiw	r24, 0x06	; 6
    3302:	bc f3       	brlt	.-18     	; 0x32f2 <main+0x832>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    3304:	89 a9       	ldd	r24, Y+49	; 0x31
    3306:	9a a9       	ldd	r25, Y+50	; 0x32
    3308:	01 96       	adiw	r24, 0x01	; 1
    330a:	9a ab       	std	Y+50, r25	; 0x32
    330c:	89 ab       	std	Y+49, r24	; 0x31
    330e:	89 a9       	ldd	r24, Y+49	; 0x31
    3310:	9a a9       	ldd	r25, Y+50	; 0x32
    3312:	18 16       	cp	r1, r24
    3314:	19 06       	cpc	r1, r25
    3316:	3c f7       	brge	.-50     	; 0x32e6 <main+0x826>
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
			iotmCharLcdEnOff; iotTimer::delay(1);
    3318:	d9 01       	movw	r26, r18
    331a:	a0 5d       	subi	r26, 0xD0	; 208
    331c:	be 4f       	sbci	r27, 0xFE	; 254
    331e:	8c 91       	ld	r24, X
    3320:	8f 70       	andi	r24, 0x0F	; 15
    3322:	8c 93       	st	X, r24
    3324:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    3328:	1e a6       	std	Y+46, r1	; 0x2e
    332a:	1d a6       	std	Y+45, r1	; 0x2d
    332c:	8d a5       	ldd	r24, Y+45	; 0x2d
    332e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3330:	18 16       	cp	r1, r24
    3332:	19 06       	cpc	r1, r25
    3334:	cc f0       	brlt	.+50     	; 0x3368 <main+0x8a8>
				for(volatile int j = 0; j < 6; j++) ;
    3336:	1c a6       	std	Y+44, r1	; 0x2c
    3338:	1b a6       	std	Y+43, r1	; 0x2b
    333a:	8b a5       	ldd	r24, Y+43	; 0x2b
    333c:	9c a5       	ldd	r25, Y+44	; 0x2c
    333e:	06 97       	sbiw	r24, 0x06	; 6
    3340:	4c f4       	brge	.+18     	; 0x3354 <main+0x894>
    3342:	8b a5       	ldd	r24, Y+43	; 0x2b
    3344:	9c a5       	ldd	r25, Y+44	; 0x2c
    3346:	01 96       	adiw	r24, 0x01	; 1
    3348:	9c a7       	std	Y+44, r25	; 0x2c
    334a:	8b a7       	std	Y+43, r24	; 0x2b
    334c:	8b a5       	ldd	r24, Y+43	; 0x2b
    334e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3350:	06 97       	sbiw	r24, 0x06	; 6
    3352:	bc f3       	brlt	.-18     	; 0x3342 <main+0x882>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    3354:	8d a5       	ldd	r24, Y+45	; 0x2d
    3356:	9e a5       	ldd	r25, Y+46	; 0x2e
    3358:	01 96       	adiw	r24, 0x01	; 1
    335a:	9e a7       	std	Y+46, r25	; 0x2e
    335c:	8d a7       	std	Y+45, r24	; 0x2d
    335e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3360:	9e a5       	ldd	r25, Y+46	; 0x2e
    3362:	18 16       	cp	r1, r24
    3364:	19 06       	cpc	r1, r25
    3366:	3c f7       	brge	.-50     	; 0x3336 <main+0x876>
    3368:	1a a6       	std	Y+42, r1	; 0x2a
    336a:	19 a6       	std	Y+41, r1	; 0x29
    336c:	89 a5       	ldd	r24, Y+41	; 0x29
    336e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3370:	18 16       	cp	r1, r24
    3372:	19 06       	cpc	r1, r25
    3374:	cc f0       	brlt	.+50     	; 0x33a8 <main+0x8e8>
				for(volatile int j = 0; j < 6; j++) ;
    3376:	18 a6       	std	Y+40, r1	; 0x28
    3378:	1f a2       	std	Y+39, r1	; 0x27
    337a:	8f a1       	ldd	r24, Y+39	; 0x27
    337c:	98 a5       	ldd	r25, Y+40	; 0x28
    337e:	06 97       	sbiw	r24, 0x06	; 6
    3380:	4c f4       	brge	.+18     	; 0x3394 <main+0x8d4>
    3382:	8f a1       	ldd	r24, Y+39	; 0x27
    3384:	98 a5       	ldd	r25, Y+40	; 0x28
    3386:	01 96       	adiw	r24, 0x01	; 1
    3388:	98 a7       	std	Y+40, r25	; 0x28
    338a:	8f a3       	std	Y+39, r24	; 0x27
    338c:	8f a1       	ldd	r24, Y+39	; 0x27
    338e:	98 a5       	ldd	r25, Y+40	; 0x28
    3390:	06 97       	sbiw	r24, 0x06	; 6
    3392:	bc f3       	brlt	.-18     	; 0x3382 <main+0x8c2>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    3394:	89 a5       	ldd	r24, Y+41	; 0x29
    3396:	9a a5       	ldd	r25, Y+42	; 0x2a
    3398:	01 96       	adiw	r24, 0x01	; 1
    339a:	9a a7       	std	Y+42, r25	; 0x2a
    339c:	89 a7       	std	Y+41, r24	; 0x29
    339e:	89 a5       	ldd	r24, Y+41	; 0x29
    33a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    33a2:	18 16       	cp	r1, r24
    33a4:	19 06       	cpc	r1, r25
    33a6:	3c f7       	brge	.-50     	; 0x3376 <main+0x8b6>
			if(iTail == iHead) return;		// buffer empty.

			volatile iotCharLcdOut	*out = iQueue + iTail;
			if((out->x != iX) || (out->y != iY))
				goTo(out->x, out->y);
			iX = (out->x + 1) % iotcCharLcdColumns;
    33a8:	80 81       	ld	r24, Z
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	01 96       	adiw	r24, 0x01	; 1
    33ae:	8f 70       	andi	r24, 0x0F	; 15
    33b0:	90 78       	andi	r25, 0x80	; 128
    33b2:	d9 01       	movw	r26, r18
    33b4:	a2 5d       	subi	r26, 0xD2	; 210
    33b6:	be 4f       	sbci	r27, 0xFE	; 254
    33b8:	8c 93       	st	X, r24
			iY = out->y;
    33ba:	81 81       	ldd	r24, Z+1	; 0x01
    33bc:	11 96       	adiw	r26, 0x01	; 1
    33be:	8c 93       	st	X, r24
			writeData(out->c);
    33c0:	42 81       	ldd	r20, Z+2	; 0x02
			iotcCharLcdData = value; iotTimer::delay(1);
			iotmCharLcdEnOff; iotTimer::delay(1);
		}
		void
		writeData(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
    33c2:	f9 01       	movw	r30, r18
    33c4:	e0 5d       	subi	r30, 0xD0	; 208
    33c6:	fe 4f       	sbci	r31, 0xFE	; 254
    33c8:	80 81       	ld	r24, Z
    33ca:	8f 70       	andi	r24, 0x0F	; 15
    33cc:	80 83       	st	Z, r24
    33ce:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    33d2:	1e a2       	std	Y+38, r1	; 0x26
    33d4:	1d a2       	std	Y+37, r1	; 0x25
    33d6:	8d a1       	ldd	r24, Y+37	; 0x25
    33d8:	9e a1       	ldd	r25, Y+38	; 0x26
    33da:	18 16       	cp	r1, r24
    33dc:	19 06       	cpc	r1, r25
    33de:	cc f0       	brlt	.+50     	; 0x3412 <main+0x952>
				for(volatile int j = 0; j < 6; j++) ;
    33e0:	1c a2       	std	Y+36, r1	; 0x24
    33e2:	1b a2       	std	Y+35, r1	; 0x23
    33e4:	8b a1       	ldd	r24, Y+35	; 0x23
    33e6:	9c a1       	ldd	r25, Y+36	; 0x24
    33e8:	06 97       	sbiw	r24, 0x06	; 6
    33ea:	4c f4       	brge	.+18     	; 0x33fe <main+0x93e>
    33ec:	8b a1       	ldd	r24, Y+35	; 0x23
    33ee:	9c a1       	ldd	r25, Y+36	; 0x24
    33f0:	01 96       	adiw	r24, 0x01	; 1
    33f2:	9c a3       	std	Y+36, r25	; 0x24
    33f4:	8b a3       	std	Y+35, r24	; 0x23
    33f6:	8b a1       	ldd	r24, Y+35	; 0x23
    33f8:	9c a1       	ldd	r25, Y+36	; 0x24
    33fa:	06 97       	sbiw	r24, 0x06	; 6
    33fc:	bc f3       	brlt	.-18     	; 0x33ec <main+0x92c>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    33fe:	8d a1       	ldd	r24, Y+37	; 0x25
    3400:	9e a1       	ldd	r25, Y+38	; 0x26
    3402:	01 96       	adiw	r24, 0x01	; 1
    3404:	9e a3       	std	Y+38, r25	; 0x26
    3406:	8d a3       	std	Y+37, r24	; 0x25
    3408:	8d a1       	ldd	r24, Y+37	; 0x25
    340a:	9e a1       	ldd	r25, Y+38	; 0x26
    340c:	18 16       	cp	r1, r24
    340e:	19 06       	cpc	r1, r25
    3410:	3c f7       	brge	.-50     	; 0x33e0 <main+0x920>
			iotmCharLcdEnOff; iotTimer::delay(1);
		}
		void
		writeData(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOn;  iotTimer::delay(1);
    3412:	f9 01       	movw	r30, r18
    3414:	e0 5d       	subi	r30, 0xD0	; 208
    3416:	fe 4f       	sbci	r31, 0xFE	; 254
    3418:	80 81       	ld	r24, Z
    341a:	84 60       	ori	r24, 0x04	; 4
    341c:	80 83       	st	Z, r24
    341e:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    3422:	1a a2       	std	Y+34, r1	; 0x22
    3424:	19 a2       	std	Y+33, r1	; 0x21
    3426:	89 a1       	ldd	r24, Y+33	; 0x21
    3428:	9a a1       	ldd	r25, Y+34	; 0x22
    342a:	18 16       	cp	r1, r24
    342c:	19 06       	cpc	r1, r25
    342e:	cc f0       	brlt	.+50     	; 0x3462 <main+0x9a2>
				for(volatile int j = 0; j < 6; j++) ;
    3430:	18 a2       	std	Y+32, r1	; 0x20
    3432:	1f 8e       	std	Y+31, r1	; 0x1f
    3434:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3436:	98 a1       	ldd	r25, Y+32	; 0x20
    3438:	06 97       	sbiw	r24, 0x06	; 6
    343a:	4c f4       	brge	.+18     	; 0x344e <main+0x98e>
    343c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    343e:	98 a1       	ldd	r25, Y+32	; 0x20
    3440:	01 96       	adiw	r24, 0x01	; 1
    3442:	98 a3       	std	Y+32, r25	; 0x20
    3444:	8f 8f       	std	Y+31, r24	; 0x1f
    3446:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3448:	98 a1       	ldd	r25, Y+32	; 0x20
    344a:	06 97       	sbiw	r24, 0x06	; 6
    344c:	bc f3       	brlt	.-18     	; 0x343c <main+0x97c>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    344e:	89 a1       	ldd	r24, Y+33	; 0x21
    3450:	9a a1       	ldd	r25, Y+34	; 0x22
    3452:	01 96       	adiw	r24, 0x01	; 1
    3454:	9a a3       	std	Y+34, r25	; 0x22
    3456:	89 a3       	std	Y+33, r24	; 0x21
    3458:	89 a1       	ldd	r24, Y+33	; 0x21
    345a:	9a a1       	ldd	r25, Y+34	; 0x22
    345c:	18 16       	cp	r1, r24
    345e:	19 06       	cpc	r1, r25
    3460:	3c f7       	brge	.-50     	; 0x3430 <main+0x970>
		}
		void
		writeData(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOn;  iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
    3462:	f9 01       	movw	r30, r18
    3464:	e0 5d       	subi	r30, 0xD0	; 208
    3466:	fe 4f       	sbci	r31, 0xFE	; 254
    3468:	80 81       	ld	r24, Z
    346a:	87 71       	andi	r24, 0x17	; 23
    346c:	80 83       	st	Z, r24
    346e:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    3472:	1e 8e       	std	Y+30, r1	; 0x1e
    3474:	1d 8e       	std	Y+29, r1	; 0x1d
    3476:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3478:	9e 8d       	ldd	r25, Y+30	; 0x1e
    347a:	18 16       	cp	r1, r24
    347c:	19 06       	cpc	r1, r25
    347e:	cc f0       	brlt	.+50     	; 0x34b2 <main+0x9f2>
				for(volatile int j = 0; j < 6; j++) ;
    3480:	1c 8e       	std	Y+28, r1	; 0x1c
    3482:	1b 8e       	std	Y+27, r1	; 0x1b
    3484:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3486:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3488:	06 97       	sbiw	r24, 0x06	; 6
    348a:	4c f4       	brge	.+18     	; 0x349e <main+0x9de>
    348c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    348e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3490:	01 96       	adiw	r24, 0x01	; 1
    3492:	9c 8f       	std	Y+28, r25	; 0x1c
    3494:	8b 8f       	std	Y+27, r24	; 0x1b
    3496:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3498:	9c 8d       	ldd	r25, Y+28	; 0x1c
    349a:	06 97       	sbiw	r24, 0x06	; 6
    349c:	bc f3       	brlt	.-18     	; 0x348c <main+0x9cc>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    349e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34a2:	01 96       	adiw	r24, 0x01	; 1
    34a4:	9e 8f       	std	Y+30, r25	; 0x1e
    34a6:	8d 8f       	std	Y+29, r24	; 0x1d
    34a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34ac:	18 16       	cp	r1, r24
    34ae:	19 06       	cpc	r1, r25
    34b0:	3c f7       	brge	.-50     	; 0x3480 <main+0x9c0>
		void
		writeData(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOn;  iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
    34b2:	f9 01       	movw	r30, r18
    34b4:	e0 5d       	subi	r30, 0xD0	; 208
    34b6:	fe 4f       	sbci	r31, 0xFE	; 254
    34b8:	80 81       	ld	r24, Z
    34ba:	80 61       	ori	r24, 0x10	; 16
    34bc:	80 83       	st	Z, r24
    34be:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    34c2:	1a 8e       	std	Y+26, r1	; 0x1a
    34c4:	19 8e       	std	Y+25, r1	; 0x19
    34c6:	89 8d       	ldd	r24, Y+25	; 0x19
    34c8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    34ca:	18 16       	cp	r1, r24
    34cc:	19 06       	cpc	r1, r25
    34ce:	cc f0       	brlt	.+50     	; 0x3502 <main+0xa42>
				for(volatile int j = 0; j < 6; j++) ;
    34d0:	18 8e       	std	Y+24, r1	; 0x18
    34d2:	1f 8a       	std	Y+23, r1	; 0x17
    34d4:	8f 89       	ldd	r24, Y+23	; 0x17
    34d6:	98 8d       	ldd	r25, Y+24	; 0x18
    34d8:	06 97       	sbiw	r24, 0x06	; 6
    34da:	4c f4       	brge	.+18     	; 0x34ee <main+0xa2e>
    34dc:	8f 89       	ldd	r24, Y+23	; 0x17
    34de:	98 8d       	ldd	r25, Y+24	; 0x18
    34e0:	01 96       	adiw	r24, 0x01	; 1
    34e2:	98 8f       	std	Y+24, r25	; 0x18
    34e4:	8f 8b       	std	Y+23, r24	; 0x17
    34e6:	8f 89       	ldd	r24, Y+23	; 0x17
    34e8:	98 8d       	ldd	r25, Y+24	; 0x18
    34ea:	06 97       	sbiw	r24, 0x06	; 6
    34ec:	bc f3       	brlt	.-18     	; 0x34dc <main+0xa1c>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    34ee:	89 8d       	ldd	r24, Y+25	; 0x19
    34f0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    34f2:	01 96       	adiw	r24, 0x01	; 1
    34f4:	9a 8f       	std	Y+26, r25	; 0x1a
    34f6:	89 8f       	std	Y+25, r24	; 0x19
    34f8:	89 8d       	ldd	r24, Y+25	; 0x19
    34fa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    34fc:	18 16       	cp	r1, r24
    34fe:	19 06       	cpc	r1, r25
    3500:	3c f7       	brge	.-50     	; 0x34d0 <main+0xa10>
		writeData(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOn;  iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
    3502:	4b bb       	out	0x1b, r20	; 27
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    3504:	1e 8a       	std	Y+22, r1	; 0x16
    3506:	1d 8a       	std	Y+21, r1	; 0x15
    3508:	8d 89       	ldd	r24, Y+21	; 0x15
    350a:	9e 89       	ldd	r25, Y+22	; 0x16
    350c:	18 16       	cp	r1, r24
    350e:	19 06       	cpc	r1, r25
    3510:	cc f0       	brlt	.+50     	; 0x3544 <main+0xa84>
				for(volatile int j = 0; j < 6; j++) ;
    3512:	1c 8a       	std	Y+20, r1	; 0x14
    3514:	1b 8a       	std	Y+19, r1	; 0x13
    3516:	8b 89       	ldd	r24, Y+19	; 0x13
    3518:	9c 89       	ldd	r25, Y+20	; 0x14
    351a:	06 97       	sbiw	r24, 0x06	; 6
    351c:	4c f4       	brge	.+18     	; 0x3530 <main+0xa70>
    351e:	8b 89       	ldd	r24, Y+19	; 0x13
    3520:	9c 89       	ldd	r25, Y+20	; 0x14
    3522:	01 96       	adiw	r24, 0x01	; 1
    3524:	9c 8b       	std	Y+20, r25	; 0x14
    3526:	8b 8b       	std	Y+19, r24	; 0x13
    3528:	8b 89       	ldd	r24, Y+19	; 0x13
    352a:	9c 89       	ldd	r25, Y+20	; 0x14
    352c:	06 97       	sbiw	r24, 0x06	; 6
    352e:	bc f3       	brlt	.-18     	; 0x351e <main+0xa5e>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    3530:	8d 89       	ldd	r24, Y+21	; 0x15
    3532:	9e 89       	ldd	r25, Y+22	; 0x16
    3534:	01 96       	adiw	r24, 0x01	; 1
    3536:	9e 8b       	std	Y+22, r25	; 0x16
    3538:	8d 8b       	std	Y+21, r24	; 0x15
    353a:	8d 89       	ldd	r24, Y+21	; 0x15
    353c:	9e 89       	ldd	r25, Y+22	; 0x16
    353e:	18 16       	cp	r1, r24
    3540:	19 06       	cpc	r1, r25
    3542:	3c f7       	brge	.-50     	; 0x3512 <main+0xa52>
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOn;  iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
			iotmCharLcdEnOff; iotTimer::delay(1);
    3544:	f9 01       	movw	r30, r18
    3546:	e0 5d       	subi	r30, 0xD0	; 208
    3548:	fe 4f       	sbci	r31, 0xFE	; 254
    354a:	80 81       	ld	r24, Z
    354c:	8f 70       	andi	r24, 0x0F	; 15
    354e:	80 83       	st	Z, r24
    3550:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    3554:	1a 8a       	std	Y+18, r1	; 0x12
    3556:	19 8a       	std	Y+17, r1	; 0x11
    3558:	89 89       	ldd	r24, Y+17	; 0x11
    355a:	9a 89       	ldd	r25, Y+18	; 0x12
    355c:	18 16       	cp	r1, r24
    355e:	19 06       	cpc	r1, r25
    3560:	cc f0       	brlt	.+50     	; 0x3594 <main+0xad4>
				for(volatile int j = 0; j < 6; j++) ;
    3562:	18 8a       	std	Y+16, r1	; 0x10
    3564:	1f 86       	std	Y+15, r1	; 0x0f
    3566:	8f 85       	ldd	r24, Y+15	; 0x0f
    3568:	98 89       	ldd	r25, Y+16	; 0x10
    356a:	06 97       	sbiw	r24, 0x06	; 6
    356c:	4c f4       	brge	.+18     	; 0x3580 <main+0xac0>
    356e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3570:	98 89       	ldd	r25, Y+16	; 0x10
    3572:	01 96       	adiw	r24, 0x01	; 1
    3574:	98 8b       	std	Y+16, r25	; 0x10
    3576:	8f 87       	std	Y+15, r24	; 0x0f
    3578:	8f 85       	ldd	r24, Y+15	; 0x0f
    357a:	98 89       	ldd	r25, Y+16	; 0x10
    357c:	06 97       	sbiw	r24, 0x06	; 6
    357e:	bc f3       	brlt	.-18     	; 0x356e <main+0xaae>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    3580:	89 89       	ldd	r24, Y+17	; 0x11
    3582:	9a 89       	ldd	r25, Y+18	; 0x12
    3584:	01 96       	adiw	r24, 0x01	; 1
    3586:	9a 8b       	std	Y+18, r25	; 0x12
    3588:	89 8b       	std	Y+17, r24	; 0x11
    358a:	89 89       	ldd	r24, Y+17	; 0x11
    358c:	9a 89       	ldd	r25, Y+18	; 0x12
    358e:	18 16       	cp	r1, r24
    3590:	19 06       	cpc	r1, r25
    3592:	3c f7       	brge	.-50     	; 0x3562 <main+0xaa2>
				goTo(out->x, out->y);
			iX = (out->x + 1) % iotcCharLcdColumns;
			iY = out->y;
			writeData(out->c);

			iotmAtomic(iTail = (iTail + 1) % iotcCharLcdQueueSize);
    3594:	4f b7       	in	r20, 0x3f	; 63
    3596:	f8 94       	cli
    3598:	f9 01       	movw	r30, r18
    359a:	e3 5d       	subi	r30, 0xD3	; 211
    359c:	fe 4f       	sbci	r31, 0xFE	; 254
    359e:	80 81       	ld	r24, Z
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	01 96       	adiw	r24, 0x01	; 1
    35a4:	64 e6       	ldi	r22, 0x64	; 100
    35a6:	70 e0       	ldi	r23, 0x00	; 0
    35a8:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <__divmodhi4>
    35ac:	80 83       	st	Z, r24
    35ae:	4f bf       	out	0x3f, r20	; 63
			iHead = (iHead + 1) % iotcCmdQueueSize;
			return true;
		}
		static void
		processOne() {
			if(iUart) iUart->processOne();
    35b0:	80 91 c9 06 	lds	r24, 0x06C9
    35b4:	90 91 ca 06 	lds	r25, 0x06CA
    35b8:	89 2b       	or	r24, r25
    35ba:	81 f1       	breq	.+96     	; 0x361c <main+0xb5c>
		}
		bool isValid()	{ return(iId != iotcUartNone); }

		void
		processOne(void) {
			if(irx0Tail != irx0Head) {	// buffer not empty
    35bc:	90 91 db 06 	lds	r25, 0x06DB
    35c0:	80 91 dc 06 	lds	r24, 0x06DC
    35c4:	98 17       	cp	r25, r24
    35c6:	39 f0       	breq	.+14     	; 0x35d6 <main+0xb16>
				if(irx0Callback) (* irx0Callback)();
    35c8:	e0 91 cd 06 	lds	r30, 0x06CD
    35cc:	f0 91 ce 06 	lds	r31, 0x06CE
    35d0:	30 97       	sbiw	r30, 0x00	; 0
    35d2:	09 f0       	breq	.+2      	; 0x35d6 <main+0xb16>
    35d4:	09 95       	icall
			}
			if(irx1Tail != irx1Head) {	// buffer not empty
    35d6:	90 91 d3 06 	lds	r25, 0x06D3
    35da:	80 91 d4 06 	lds	r24, 0x06D4
    35de:	98 17       	cp	r25, r24
    35e0:	39 f0       	breq	.+14     	; 0x35f0 <main+0xb30>
				if(irx1Callback) (* irx1Callback)();
    35e2:	e0 91 cb 06 	lds	r30, 0x06CB
    35e6:	f0 91 cc 06 	lds	r31, 0x06CC
    35ea:	30 97       	sbiw	r30, 0x00	; 0
    35ec:	09 f0       	breq	.+2      	; 0x35f0 <main+0xb30>
    35ee:	09 95       	icall
			}
			if((itx0Tail != itx0Head) && (UCSR0A & (1 << UDRE0))) {
    35f0:	90 91 dd 06 	lds	r25, 0x06DD
    35f4:	80 91 de 06 	lds	r24, 0x06DE
    35f8:	98 17       	cp	r25, r24
    35fa:	21 f0       	breq	.+8      	; 0x3604 <main+0xb44>
    35fc:	5d 9b       	sbis	0x0b, 5	; 11
    35fe:	02 c0       	rjmp	.+4      	; 0x3604 <main+0xb44>
    3600:	0c 94 74 28 	jmp	0x50e8	; 0x50e8 <main+0x2628>
				// buffer is not empty but data register is empty.
				UDR0 = itx0Buff[itx0Tail];
				iotmAtomic(itx0Tail = (itx0Tail + 1) % iotcUartBuffSize);
			}
			if((itx1Tail != itx1Head) && (UCSR1A & (1 << UDRE1))) {
    3604:	90 91 d5 06 	lds	r25, 0x06D5
    3608:	80 91 d6 06 	lds	r24, 0x06D6
    360c:	98 17       	cp	r25, r24
    360e:	31 f0       	breq	.+12     	; 0x361c <main+0xb5c>
    3610:	80 91 9b 00 	lds	r24, 0x009B
    3614:	85 ff       	sbrs	r24, 5
    3616:	02 c0       	rjmp	.+4      	; 0x361c <main+0xb5c>
    3618:	0c 94 8b 28 	jmp	0x5116	; 0x5116 <main+0x2656>
			iUart = (iotUart *) NULL;
		}
		static char	*
		getLine() {
			char	*s;
			if(iTail != iHead) {	// queue not empty.
    361c:	20 91 5f 06 	lds	r18, 0x065F
    3620:	80 91 60 06 	lds	r24, 0x0660
    3624:	28 17       	cp	r18, r24
    3626:	99 f0       	breq	.+38     	; 0x364e <main+0xb8e>
				s = iQueue[iTail];
    3628:	82 2f       	mov	r24, r18
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	f2 e3       	ldi	r31, 0x32	; 50
    362e:	2f 9f       	mul	r18, r31
    3630:	90 01       	movw	r18, r0
    3632:	11 24       	eor	r1, r1
    3634:	a9 01       	movw	r20, r18
    3636:	49 56       	subi	r20, 0x69	; 105
    3638:	5a 4f       	sbci	r21, 0xFA	; 250
    363a:	3a 01       	movw	r6, r20
				iTail = (iTail + 1) % iotcCmdQueueSize;
    363c:	01 96       	adiw	r24, 0x01	; 1
    363e:	83 70       	andi	r24, 0x03	; 3
    3640:	90 78       	andi	r25, 0x80	; 128
    3642:	80 93 5f 06 	sts	0x065F, r24
		iotTerminal::processOne();
		//iotFpSensor::processOne();
		if((s = iotTerminal::getLine())) parseLine(s);
    3646:	41 15       	cp	r20, r1
    3648:	51 05       	cpc	r21, r1
    364a:	69 f4       	brne	.+26     	; 0x3666 <main+0xba6>
    364c:	05 c6       	rjmp	.+3082   	; 0x4258 <main+0x1798>
			} else if((s = iLineToParse)) iLineToParse = (char *) NULL;
    364e:	60 90 63 06 	lds	r6, 0x0663
    3652:	70 90 64 06 	lds	r7, 0x0664
    3656:	61 14       	cp	r6, r1
    3658:	71 04       	cpc	r7, r1
    365a:	09 f4       	brne	.+2      	; 0x365e <main+0xb9e>
    365c:	fd c5       	rjmp	.+3066   	; 0x4258 <main+0x1798>
    365e:	10 92 64 06 	sts	0x0664, r1
    3662:	10 92 63 06 	sts	0x0663, r1
//-----------------------------------------------------------------------------
//	parser
//-----------------------------------------------------------------------------
static void
parseLine(char *s) {
	CharLcd->print(2, 1, s);
    3666:	c0 90 fc 06 	lds	r12, 0x06FC
    366a:	d0 90 fd 06 	lds	r13, 0x06FD
    366e:	93 01       	movw	r18, r6
    3670:	aa 24       	eor	r10, r10
    3672:	a3 94       	inc	r10
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    3674:	f6 01       	movw	r30, r12
    3676:	e4 5d       	subi	r30, 0xD4	; 212
    3678:	fe 4f       	sbci	r31, 0xFE	; 254
    367a:	76 01       	movw	r14, r12
    367c:	53 ed       	ldi	r21, 0xD3	; 211
    367e:	e5 1a       	sub	r14, r21
    3680:	5e ef       	ldi	r21, 0xFE	; 254
    3682:	f5 0a       	sbc	r15, r21
    3684:	04 e6       	ldi	r16, 0x64	; 100
    3686:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    3688:	68 94       	set
    368a:	88 24       	eor	r8, r8
    368c:	81 f8       	bld	r8, 1
    368e:	2a c0       	rjmp	.+84     	; 0x36e4 <main+0xc24>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    3690:	99 24       	eor	r9, r9
    3692:	93 94       	inc	r9
    3694:	9a 0c       	add	r9, r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    3696:	80 81       	ld	r24, Z
    3698:	d7 01       	movw	r26, r14
    369a:	4c 91       	ld	r20, X
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	01 96       	adiw	r24, 0x01	; 1
    36a0:	b8 01       	movw	r22, r16
    36a2:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <__divmodhi4>
    36a6:	50 e0       	ldi	r21, 0x00	; 0
    36a8:	84 17       	cp	r24, r20
    36aa:	95 07       	cpc	r25, r21
    36ac:	d1 f0       	breq	.+52     	; 0x36e2 <main+0xc22>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    36ae:	80 81       	ld	r24, Z
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	ac 01       	movw	r20, r24
    36b4:	44 0f       	add	r20, r20
    36b6:	55 1f       	adc	r21, r21
    36b8:	84 0f       	add	r24, r20
    36ba:	95 1f       	adc	r25, r21
    36bc:	d6 01       	movw	r26, r12
    36be:	a8 0f       	add	r26, r24
    36c0:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    36c2:	ac 92       	st	X, r10
    36c4:	11 96       	adiw	r26, 0x01	; 1
    36c6:	8c 92       	st	X, r8
    36c8:	11 97       	sbiw	r26, 0x01	; 1
    36ca:	12 96       	adiw	r26, 0x02	; 2
    36cc:	bc 92       	st	X, r11

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    36ce:	4f b7       	in	r20, 0x3f	; 63
    36d0:	f8 94       	cli
    36d2:	80 81       	ld	r24, Z
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	01 96       	adiw	r24, 0x01	; 1
    36d8:	b8 01       	movw	r22, r16
    36da:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <__divmodhi4>
    36de:	80 83       	st	Z, r24
    36e0:	4f bf       	out	0x3f, r20	; 63
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    36e2:	a9 2c       	mov	r10, r9
    36e4:	d9 01       	movw	r26, r18
    36e6:	bd 90       	ld	r11, X+
    36e8:	9d 01       	movw	r18, r26
    36ea:	b1 10       	cpse	r11, r1
    36ec:	d1 cf       	rjmp	.-94     	; 0x3690 <main+0xbd0>
			iotcDhtLessThan, iotcDhtGreaterThan
		} iotDhtTriggerCondition;

		bool
		parseLine(char *s) {
			if(strncmp(s, "dht", 3) == 0) {
    36ee:	43 e0       	ldi	r20, 0x03	; 3
    36f0:	50 e0       	ldi	r21, 0x00	; 0
    36f2:	62 e0       	ldi	r22, 0x02	; 2
    36f4:	73 e0       	ldi	r23, 0x03	; 3
    36f6:	c3 01       	movw	r24, r6
    36f8:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <strncmp>
    36fc:	89 2b       	or	r24, r25
    36fe:	11 f0       	breq	.+4      	; 0x3704 <main+0xc44>
    3700:	0c 94 a3 28 	jmp	0x5146	; 0x5146 <main+0x2686>
				
				int		n;
				bool	err;
				double	val;
				
				s += 3; while(isspace(*s)) s++;
    3704:	b3 e0       	ldi	r27, 0x03	; 3
    3706:	6b 0e       	add	r6, r27
    3708:	71 1c       	adc	r7, r1
    370a:	83 01       	movw	r16, r6
    370c:	ef ef       	ldi	r30, 0xFF	; 255
    370e:	6e 1a       	sub	r6, r30
    3710:	7e 0a       	sbc	r7, r30
    3712:	d8 01       	movw	r26, r16
    3714:	ec 90       	ld	r14, X
    3716:	f1 2c       	mov	r15, r1
    3718:	c7 01       	movw	r24, r14
    371a:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <isspace>
    371e:	89 2b       	or	r24, r25
    3720:	a1 f7       	brne	.-24     	; 0x370a <main+0xc4a>
				if(strncmp(s, "get", 3) == 0) {
    3722:	43 e0       	ldi	r20, 0x03	; 3
    3724:	50 e0       	ldi	r21, 0x00	; 0
    3726:	66 e0       	ldi	r22, 0x06	; 6
    3728:	73 e0       	ldi	r23, 0x03	; 3
    372a:	c8 01       	movw	r24, r16
    372c:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <strncmp>
    3730:	89 2b       	or	r24, r25
    3732:	09 f0       	breq	.+2      	; 0x3736 <main+0xc76>
    3734:	d8 c1       	rjmp	.+944    	; 0x3ae6 <main+0x1026>
			uint16_t delta = 0;

			leadingZeroBits = 40 - leadingZeroBits; // reverse counting...

			// REQUEST SAMPLE
			*ipDDR |= iPinMask;		// OUTPUT
    3736:	e0 e0       	ldi	r30, 0x00	; 0
    3738:	f0 e0       	ldi	r31, 0x00	; 0
    373a:	a4 85       	ldd	r26, Z+12	; 0x0c
    373c:	b5 85       	ldd	r27, Z+13	; 0x0d
    373e:	9c 91       	ld	r25, X
    3740:	86 85       	ldd	r24, Z+14	; 0x0e
    3742:	89 2b       	or	r24, r25
    3744:	8c 93       	st	X, r24
			*ipPort &= ~iPinMask;	// T-be: LOW
    3746:	a2 85       	ldd	r26, Z+10	; 0x0a
    3748:	b3 85       	ldd	r27, Z+11	; 0x0b
    374a:	8c 91       	ld	r24, X
    374c:	96 85       	ldd	r25, Z+14	; 0x0e
    374e:	90 95       	com	r25
    3750:	89 23       	and	r24, r25
    3752:	8c 93       	st	X, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    3754:	1e 86       	std	Y+14, r1	; 0x0e
    3756:	1d 86       	std	Y+13, r1	; 0x0d
    3758:	8d 85       	ldd	r24, Y+13	; 0x0d
    375a:	9e 85       	ldd	r25, Y+14	; 0x0e
    375c:	83 34       	cpi	r24, 0x43	; 67
    375e:	91 05       	cpc	r25, r1
    3760:	cc f4       	brge	.+50     	; 0x3794 <main+0xcd4>
				for(volatile int j = 0; j < 6; j++) ;
    3762:	1c 86       	std	Y+12, r1	; 0x0c
    3764:	1b 86       	std	Y+11, r1	; 0x0b
    3766:	8b 85       	ldd	r24, Y+11	; 0x0b
    3768:	9c 85       	ldd	r25, Y+12	; 0x0c
    376a:	06 97       	sbiw	r24, 0x06	; 6
    376c:	4c f4       	brge	.+18     	; 0x3780 <main+0xcc0>
    376e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3770:	9c 85       	ldd	r25, Y+12	; 0x0c
    3772:	01 96       	adiw	r24, 0x01	; 1
    3774:	9c 87       	std	Y+12, r25	; 0x0c
    3776:	8b 87       	std	Y+11, r24	; 0x0b
    3778:	8b 85       	ldd	r24, Y+11	; 0x0b
    377a:	9c 85       	ldd	r25, Y+12	; 0x0c
    377c:	06 97       	sbiw	r24, 0x06	; 6
    377e:	bc f3       	brlt	.-18     	; 0x376e <main+0xcae>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    3780:	8d 85       	ldd	r24, Y+13	; 0x0d
    3782:	9e 85       	ldd	r25, Y+14	; 0x0e
    3784:	01 96       	adiw	r24, 0x01	; 1
    3786:	9e 87       	std	Y+14, r25	; 0x0e
    3788:	8d 87       	std	Y+13, r24	; 0x0d
    378a:	8d 85       	ldd	r24, Y+13	; 0x0d
    378c:	9e 85       	ldd	r25, Y+14	; 0x0e
    378e:	83 34       	cpi	r24, 0x43	; 67
    3790:	91 05       	cpc	r25, r1
    3792:	3c f3       	brlt	.-50     	; 0x3762 <main+0xca2>

			// REQUEST SAMPLE
			*ipDDR |= iPinMask;		// OUTPUT
			*ipPort &= ~iPinMask;	// T-be: LOW
			iotTimer::delay(wakeupDelay);
			*ipPort |= iPinMask;	// T-go: HIGH
    3794:	a0 e0       	ldi	r26, 0x00	; 0
    3796:	b0 e0       	ldi	r27, 0x00	; 0
    3798:	1a 96       	adiw	r26, 0x0a	; 10
    379a:	ed 91       	ld	r30, X+
    379c:	fc 91       	ld	r31, X
    379e:	1b 97       	sbiw	r26, 0x0b	; 11
    37a0:	90 81       	ld	r25, Z
    37a2:	1e 96       	adiw	r26, 0x0e	; 14
    37a4:	8c 91       	ld	r24, X
    37a6:	1e 97       	sbiw	r26, 0x0e	; 14
    37a8:	89 2b       	or	r24, r25
    37aa:	80 83       	st	Z, r24
			*ipDDR &= ~iPinMask;	// INPUT
    37ac:	1c 96       	adiw	r26, 0x0c	; 12
    37ae:	ed 91       	ld	r30, X+
    37b0:	fc 91       	ld	r31, X
    37b2:	1d 97       	sbiw	r26, 0x0d	; 13
    37b4:	80 81       	ld	r24, Z
    37b6:	1e 96       	adiw	r26, 0x0e	; 14
    37b8:	9c 91       	ld	r25, X
    37ba:	1e 97       	sbiw	r26, 0x0e	; 14
    37bc:	90 95       	com	r25
    37be:	89 23       	and	r24, r25
    37c0:	80 83       	st	Z, r24

			uint16_t loopCount = iotcDhtTimeOut * 2;  // 200uSec max
			while ((*ipPin & iPinMask) != 0 ) {
    37c2:	18 96       	adiw	r26, 0x08	; 8
    37c4:	ed 91       	ld	r30, X+
    37c6:	fc 91       	ld	r31, X
    37c8:	19 97       	sbiw	r26, 0x09	; 9
    37ca:	1e 96       	adiw	r26, 0x0e	; 14
    37cc:	1c 91       	ld	r17, X
    37ce:	80 e2       	ldi	r24, 0x20	; 32
    37d0:	93 e0       	ldi	r25, 0x03	; 3
    37d2:	04 c0       	rjmp	.+8      	; 0x37dc <main+0xd1c>
    37d4:	01 97       	sbiw	r24, 0x01	; 1
				if (--loopCount == 0) return iotcDhtErrorConnect;
    37d6:	00 97       	sbiw	r24, 0x00	; 0
    37d8:	09 f4       	brne	.+2      	; 0x37dc <main+0xd1c>
    37da:	71 c0       	rjmp	.+226    	; 0x38be <main+0xdfe>
			iotTimer::delay(wakeupDelay);
			*ipPort |= iPinMask;	// T-go: HIGH
			*ipDDR &= ~iPinMask;	// INPUT

			uint16_t loopCount = iotcDhtTimeOut * 2;  // 200uSec max
			while ((*ipPin & iPinMask) != 0 ) {
    37dc:	20 81       	ld	r18, Z
    37de:	21 23       	and	r18, r17
    37e0:	c9 f7       	brne	.-14     	; 0x37d4 <main+0xd14>
    37e2:	80 e9       	ldi	r24, 0x90	; 144
    37e4:	91 e0       	ldi	r25, 0x01	; 1
    37e6:	04 c0       	rjmp	.+8      	; 0x37f0 <main+0xd30>
    37e8:	01 97       	sbiw	r24, 0x01	; 1
				if (--loopCount == 0) return iotcDhtErrorConnect;
			}
			// GET ACKNOWLEDGE or TIMEOUT
			loopCount = iotcDhtTimeOut;
			while ((*ipPin & iPinMask) == 0 ) {	// T-rel
				if (--loopCount == 0) return iotcDhtErrorAckL;
    37ea:	00 97       	sbiw	r24, 0x00	; 0
    37ec:	09 f4       	brne	.+2      	; 0x37f0 <main+0xd30>
    37ee:	6c c0       	rjmp	.+216    	; 0x38c8 <main+0xe08>
			while ((*ipPin & iPinMask) != 0 ) {
				if (--loopCount == 0) return iotcDhtErrorConnect;
			}
			// GET ACKNOWLEDGE or TIMEOUT
			loopCount = iotcDhtTimeOut;
			while ((*ipPin & iPinMask) == 0 ) {	// T-rel
    37f0:	20 81       	ld	r18, Z
    37f2:	21 23       	and	r18, r17
    37f4:	c9 f3       	breq	.-14     	; 0x37e8 <main+0xd28>
    37f6:	80 e9       	ldi	r24, 0x90	; 144
    37f8:	91 e0       	ldi	r25, 0x01	; 1
    37fa:	04 c0       	rjmp	.+8      	; 0x3804 <main+0xd44>
    37fc:	01 97       	sbiw	r24, 0x01	; 1
				if (--loopCount == 0) return iotcDhtErrorAckL;
			}
			loopCount = iotcDhtTimeOut;
			while ((*ipPin & iPinMask) != 0 ) {	// T-reh
				if (--loopCount == 0) return iotcDhtErrorAckH;
    37fe:	00 97       	sbiw	r24, 0x00	; 0
    3800:	09 f4       	brne	.+2      	; 0x3804 <main+0xd44>
    3802:	67 c0       	rjmp	.+206    	; 0x38d2 <main+0xe12>
			loopCount = iotcDhtTimeOut;
			while ((*ipPin & iPinMask) == 0 ) {	// T-rel
				if (--loopCount == 0) return iotcDhtErrorAckL;
			}
			loopCount = iotcDhtTimeOut;
			while ((*ipPin & iPinMask) != 0 ) {	// T-reh
    3804:	20 81       	ld	r18, Z
    3806:	21 23       	and	r18, r17
    3808:	c9 f7       	brne	.-14     	; 0x37fc <main+0xd3c>
    380a:	c1 2c       	mov	r12, r1
    380c:	68 94       	set
    380e:	ee 24       	eor	r14, r14
    3810:	e7 f8       	bld	r14, 7
    3812:	d1 2c       	mov	r13, r1
    3814:	40 e0       	ldi	r20, 0x00	; 0
    3816:	50 e0       	ldi	r21, 0x00	; 0
    3818:	80 e9       	ldi	r24, 0x90	; 144
    381a:	91 e0       	ldi	r25, 0x01	; 1
    381c:	20 e9       	ldi	r18, 0x90	; 144
    381e:	31 e0       	ldi	r19, 0x01	; 1
    3820:	0f 2e       	mov	r0, r31
    3822:	f8 e2       	ldi	r31, 0x28	; 40
    3824:	ff 2e       	mov	r15, r31
    3826:	f0 2d       	mov	r31, r0
    3828:	a0 e0       	ldi	r26, 0x00	; 0
					// reset timeout flag
					loopCount = iotcDhtTimeOut;
				}
				pstate = state;
				// Check timeout
				if (--loopCount == 0) return iotcDhtErrorTimeOut;
    382a:	0f 2e       	mov	r0, r31
    382c:	ff e8       	ldi	r31, 0x8F	; 143
    382e:	af 2e       	mov	r10, r31
    3830:	f0 2d       	mov	r31, r0
    3832:	bb 24       	eor	r11, r11
    3834:	b3 94       	inc	r11
					} else if(loopCount <= (zeroLoop - delta)) // long -> one
						data |= mask;
					mask >>= 1;
					if (mask == 0) {	// next byte
						mask = 0x80;
						iBytes[idx] = data; idx++; data = 0;
    3836:	81 2c       	mov	r8, r1
						delta = (iotcDhtTimeOut - zeroLoop) / 4;
					} else if(loopCount <= (zeroLoop - delta)) // long -> one
						data |= mask;
					mask >>= 1;
					if (mask == 0) {	// next byte
						mask = 0x80;
    3838:	68 94       	set
    383a:	99 24       	eor	r9, r9
    383c:	97 f8       	bld	r9, 7
				state = (*ipPin & iPinMask);
				if (state == 0 && pstate != 0) {
					if (i > leadingZeroBits) {
						// DHT22 first 6 bits are all zero !! DHT11 only 1
						zeroLoop = min(zeroLoop, loopCount);
						delta = (iotcDhtTimeOut - zeroLoop) / 4;
    383e:	60 e9       	ldi	r22, 0x90	; 144
    3840:	71 e0       	ldi	r23, 0x01	; 1
			}
			loopCount = iotcDhtTimeOut;
			// READ THE OUTPUT - 40 BITS => 5 BYTES
			for (uint8_t i = 40; i != 0; ) {
				// WAIT FOR FALLING EDGE
				state = (*ipPin & iPinMask);
    3842:	00 81       	ld	r16, Z
    3844:	01 23       	and	r16, r17
				if (state == 0 && pstate != 0) {
    3846:	29 f5       	brne	.+74     	; 0x3892 <main+0xdd2>
    3848:	aa 23       	and	r26, r26
    384a:	19 f1       	breq	.+70     	; 0x3892 <main+0xdd2>
					if (i > leadingZeroBits) {
    384c:	b2 e2       	ldi	r27, 0x22	; 34
    384e:	bf 15       	cp	r27, r15
    3850:	60 f4       	brcc	.+24     	; 0x386a <main+0xdaa>
    3852:	82 17       	cp	r24, r18
    3854:	93 07       	cpc	r25, r19
    3856:	08 f4       	brcc	.+2      	; 0x385a <main+0xd9a>
    3858:	9c 01       	movw	r18, r24
						// DHT22 first 6 bits are all zero !! DHT11 only 1
						zeroLoop = min(zeroLoop, loopCount);
						delta = (iotcDhtTimeOut - zeroLoop) / 4;
    385a:	ab 01       	movw	r20, r22
    385c:	42 1b       	sub	r20, r18
    385e:	53 0b       	sbc	r21, r19
    3860:	56 95       	lsr	r21
    3862:	47 95       	ror	r20
    3864:	56 95       	lsr	r21
    3866:	47 95       	ror	r20
    3868:	07 c0       	rjmp	.+14     	; 0x3878 <main+0xdb8>
					} else if(loopCount <= (zeroLoop - delta)) // long -> one
    386a:	d9 01       	movw	r26, r18
    386c:	a4 1b       	sub	r26, r20
    386e:	b5 0b       	sbc	r27, r21
    3870:	a8 17       	cp	r26, r24
    3872:	b9 07       	cpc	r27, r25
    3874:	08 f0       	brcs	.+2      	; 0x3878 <main+0xdb8>
						data |= mask;
    3876:	de 28       	or	r13, r14
					mask >>= 1;
    3878:	e6 94       	lsr	r14
					if (mask == 0) {	// next byte
    387a:	39 f4       	brne	.+14     	; 0x388a <main+0xdca>
						mask = 0x80;
						iBytes[idx] = data; idx++; data = 0;
    387c:	ac 2d       	mov	r26, r12
    387e:	b0 e0       	ldi	r27, 0x00	; 0
    3880:	1f 96       	adiw	r26, 0x0f	; 15
    3882:	dc 92       	st	X, r13
    3884:	c3 94       	inc	r12
    3886:	d8 2c       	mov	r13, r8
						delta = (iotcDhtTimeOut - zeroLoop) / 4;
					} else if(loopCount <= (zeroLoop - delta)) // long -> one
						data |= mask;
					mask >>= 1;
					if (mask == 0) {	// next byte
						mask = 0x80;
    3888:	e9 2c       	mov	r14, r9
						iBytes[idx] = data; idx++; data = 0;
					}
					// next bit
					--i;
    388a:	fa 94       	dec	r15
					// reset timeout flag
					loopCount = iotcDhtTimeOut;
				}
				pstate = state;
				// Check timeout
				if (--loopCount == 0) return iotcDhtErrorTimeOut;
    388c:	8a 2d       	mov	r24, r10
    388e:	9b 2d       	mov	r25, r11
    3890:	03 c0       	rjmp	.+6      	; 0x3898 <main+0xdd8>
    3892:	01 97       	sbiw	r24, 0x01	; 1
    3894:	00 97       	sbiw	r24, 0x00	; 0
    3896:	11 f1       	breq	.+68     	; 0x38dc <main+0xe1c>
			while ((*ipPin & iPinMask) != 0 ) {	// T-reh
				if (--loopCount == 0) return iotcDhtErrorAckH;
			}
			loopCount = iotcDhtTimeOut;
			// READ THE OUTPUT - 40 BITS => 5 BYTES
			for (uint8_t i = 40; i != 0; ) {
    3898:	ff 20       	and	r15, r15
    389a:	11 f0       	breq	.+4      	; 0x38a0 <main+0xde0>
					--i;

					// reset timeout flag
					loopCount = iotcDhtTimeOut;
				}
				pstate = state;
    389c:	a0 2f       	mov	r26, r16
    389e:	d1 cf       	rjmp	.-94     	; 0x3842 <main+0xd82>
				// Check timeout
				if (--loopCount == 0) return iotcDhtErrorTimeOut;
			}
			*ipDDR |= iPinMask;		// OUTPUT
    38a0:	e0 e0       	ldi	r30, 0x00	; 0
    38a2:	f0 e0       	ldi	r31, 0x00	; 0
    38a4:	a4 85       	ldd	r26, Z+12	; 0x0c
    38a6:	b5 85       	ldd	r27, Z+13	; 0x0d
    38a8:	8c 91       	ld	r24, X
    38aa:	18 2b       	or	r17, r24
    38ac:	1c 93       	st	X, r17
			*ipPort |= iPinMask;	// HIGH
    38ae:	a2 85       	ldd	r26, Z+10	; 0x0a
    38b0:	b3 85       	ldd	r27, Z+11	; 0x0b
    38b2:	9c 91       	ld	r25, X
    38b4:	86 85       	ldd	r24, Z+14	; 0x0e
    38b6:	89 2b       	or	r24, r25
    38b8:	8c 93       	st	X, r24

			return iotcDhtOk;
    38ba:	f1 2c       	mov	r15, r1
    38bc:	13 c0       	rjmp	.+38     	; 0x38e4 <main+0xe24>
			*ipPort |= iPinMask;	// T-go: HIGH
			*ipDDR &= ~iPinMask;	// INPUT

			uint16_t loopCount = iotcDhtTimeOut * 2;  // 200uSec max
			while ((*ipPin & iPinMask) != 0 ) {
				if (--loopCount == 0) return iotcDhtErrorConnect;
    38be:	0f 2e       	mov	r0, r31
    38c0:	fd ef       	ldi	r31, 0xFD	; 253
    38c2:	ff 2e       	mov	r15, r31
    38c4:	f0 2d       	mov	r31, r0
    38c6:	0e c0       	rjmp	.+28     	; 0x38e4 <main+0xe24>
			}
			// GET ACKNOWLEDGE or TIMEOUT
			loopCount = iotcDhtTimeOut;
			while ((*ipPin & iPinMask) == 0 ) {	// T-rel
				if (--loopCount == 0) return iotcDhtErrorAckL;
    38c8:	0f 2e       	mov	r0, r31
    38ca:	fc ef       	ldi	r31, 0xFC	; 252
    38cc:	ff 2e       	mov	r15, r31
    38ce:	f0 2d       	mov	r31, r0
    38d0:	09 c0       	rjmp	.+18     	; 0x38e4 <main+0xe24>
			}
			loopCount = iotcDhtTimeOut;
			while ((*ipPin & iPinMask) != 0 ) {	// T-reh
				if (--loopCount == 0) return iotcDhtErrorAckH;
    38d2:	0f 2e       	mov	r0, r31
    38d4:	fb ef       	ldi	r31, 0xFB	; 251
    38d6:	ff 2e       	mov	r15, r31
    38d8:	f0 2d       	mov	r31, r0
    38da:	04 c0       	rjmp	.+8      	; 0x38e4 <main+0xe24>
					// reset timeout flag
					loopCount = iotcDhtTimeOut;
				}
				pstate = state;
				// Check timeout
				if (--loopCount == 0) return iotcDhtErrorTimeOut;
    38dc:	0f 2e       	mov	r0, r31
    38de:	fe ef       	ldi	r31, 0xFE	; 254
    38e0:	ff 2e       	mov	r15, r31
    38e2:	f0 2d       	mov	r31, r0
			// READ VALUES
			int8_t result = readSensor(
				iotcDhtDhtWakeUp, iotcDhtDhtLeadingZeros);

			// these bits are always zero, masking them reduces errors.
			iBytes[0] &= 0x03;
    38e4:	00 e0       	ldi	r16, 0x00	; 0
    38e6:	10 e0       	ldi	r17, 0x00	; 0
    38e8:	f8 01       	movw	r30, r16
    38ea:	87 85       	ldd	r24, Z+15	; 0x0f
    38ec:	83 70       	andi	r24, 0x03	; 3
    38ee:	d8 2e       	mov	r13, r24
    38f0:	87 87       	std	Z+15, r24	; 0x0f
			iBytes[2] &= 0x83;
    38f2:	b1 88       	ldd	r11, Z+17	; 0x11
    38f4:	fb 2d       	mov	r31, r11
    38f6:	f3 78       	andi	r31, 0x83	; 131
    38f8:	ef 2e       	mov	r14, r31
    38fa:	d8 01       	movw	r26, r16
    38fc:	51 96       	adiw	r26, 0x11	; 17
    38fe:	fc 93       	st	X, r31
    3900:	51 97       	sbiw	r26, 0x11	; 17

			// CONVERT AND STORE
			iHumidity = word(iBytes[0], iBytes[1]) * 0.1;
    3902:	50 96       	adiw	r26, 0x10	; 16
    3904:	cc 90       	ld	r12, X
		inline int8_t read22() { return read(); };
		inline int8_t read33() { return read(); };
		inline int8_t read44() { return read(); };

		static inline uint16_t	word(uint8_t h, uint8_t l) {
			return (h << 8) | l;
    3906:	6c 2d       	mov	r22, r12
    3908:	70 e0       	ldi	r23, 0x00	; 0
    390a:	78 2b       	or	r23, r24
			// these bits are always zero, masking them reduces errors.
			iBytes[0] &= 0x03;
			iBytes[2] &= 0x83;

			// CONVERT AND STORE
			iHumidity = word(iBytes[0], iBytes[1]) * 0.1;
    390c:	80 e0       	ldi	r24, 0x00	; 0
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	0e 94 bd 2a 	call	0x557a	; 0x557a <__floatunsisf>
    3914:	2d ec       	ldi	r18, 0xCD	; 205
    3916:	3c ec       	ldi	r19, 0xCC	; 204
    3918:	4c ec       	ldi	r20, 0xCC	; 204
    391a:	5d e3       	ldi	r21, 0x3D	; 61
    391c:	0e 94 4f 2b 	call	0x569e	; 0x569e <__mulsf3>
    3920:	f8 01       	movw	r30, r16
    3922:	60 83       	st	Z, r22
    3924:	71 83       	std	Z+1, r23	; 0x01
    3926:	82 83       	std	Z+2, r24	; 0x02
    3928:	93 83       	std	Z+3, r25	; 0x03
			iTemperature = word(iBytes[2] & 0x7F, iBytes[3]) * 0.1;
    392a:	12 89       	ldd	r17, Z+18	; 0x12
    392c:	8b 2d       	mov	r24, r11
    392e:	83 70       	andi	r24, 0x03	; 3
		inline int8_t read22() { return read(); };
		inline int8_t read33() { return read(); };
		inline int8_t read44() { return read(); };

		static inline uint16_t	word(uint8_t h, uint8_t l) {
			return (h << 8) | l;
    3930:	61 2f       	mov	r22, r17
    3932:	70 e0       	ldi	r23, 0x00	; 0
    3934:	78 2b       	or	r23, r24
			iBytes[0] &= 0x03;
			iBytes[2] &= 0x83;

			// CONVERT AND STORE
			iHumidity = word(iBytes[0], iBytes[1]) * 0.1;
			iTemperature = word(iBytes[2] & 0x7F, iBytes[3]) * 0.1;
    3936:	80 e0       	ldi	r24, 0x00	; 0
    3938:	90 e0       	ldi	r25, 0x00	; 0
    393a:	0e 94 bd 2a 	call	0x557a	; 0x557a <__floatunsisf>
    393e:	2d ec       	ldi	r18, 0xCD	; 205
    3940:	3c ec       	ldi	r19, 0xCC	; 204
    3942:	4c ec       	ldi	r20, 0xCC	; 204
    3944:	5d e3       	ldi	r21, 0x3D	; 61
    3946:	0e 94 4f 2b 	call	0x569e	; 0x569e <__mulsf3>
			if (iBytes[2] & 0x80)	// negative temperature
    394a:	ee 20       	and	r14, r14
    394c:	4c f0       	brlt	.+18     	; 0x3960 <main+0xea0>
			iBytes[0] &= 0x03;
			iBytes[2] &= 0x83;

			// CONVERT AND STORE
			iHumidity = word(iBytes[0], iBytes[1]) * 0.1;
			iTemperature = word(iBytes[2] & 0x7F, iBytes[3]) * 0.1;
    394e:	60 93 04 00 	sts	0x0004, r22
    3952:	70 93 05 00 	sts	0x0005, r23
    3956:	80 93 06 00 	sts	0x0006, r24
    395a:	90 93 07 00 	sts	0x0007, r25
    395e:	0b c0       	rjmp	.+22     	; 0x3976 <main+0xeb6>
			if (iBytes[2] & 0x80)	// negative temperature
				iTemperature = -iTemperature;
    3960:	dc 01       	movw	r26, r24
    3962:	cb 01       	movw	r24, r22
    3964:	b0 58       	subi	r27, 0x80	; 128
    3966:	80 93 04 00 	sts	0x0004, r24
    396a:	90 93 05 00 	sts	0x0005, r25
    396e:	a0 93 06 00 	sts	0x0006, r26
    3972:	b0 93 07 00 	sts	0x0007, r27
			// TEST CHECKSUM
			uint8_t sum = iBytes[0] + iBytes[1] + iBytes[2] + iBytes[3];
    3976:	1c 0d       	add	r17, r12
    3978:	d1 0e       	add	r13, r17
    397a:	ed 0c       	add	r14, r13
			if (iBytes[4] != sum) return iotcDhtErrorCheckSum;
    397c:	80 91 13 00 	lds	r24, 0x0013
    3980:	e8 12       	cpse	r14, r24
    3982:	a2 c0       	rjmp	.+324    	; 0x3ac8 <main+0x1008>
				bool	err;
				double	val;
				
				s += 3; while(isspace(*s)) s++;
				if(strncmp(s, "get", 3) == 0) {
					if((n = read()) == iotcDhtOk) {
    3984:	8f 2d       	mov	r24, r15
    3986:	99 27       	eor	r25, r25
    3988:	87 fd       	sbrc	r24, 7
    398a:	90 95       	com	r25
    398c:	00 97       	sbiw	r24, 0x00	; 0
    398e:	09 f0       	breq	.+2      	; 0x3992 <main+0xed2>
    3990:	9d c0       	rjmp	.+314    	; 0x3acc <main+0x100c>
    3992:	0f 2e       	mov	r0, r31
    3994:	f5 ef       	ldi	r31, 0xF5	; 245
    3996:	ef 2e       	mov	r14, r31
    3998:	f4 e0       	ldi	r31, 0x04	; 4
    399a:	ff 2e       	mov	r15, r31
    399c:	f0 2d       	mov	r31, r0
    399e:	0f ee       	ldi	r16, 0xEF	; 239
    39a0:	14 e0       	ldi	r17, 0x04	; 4
			return s;
		}
		static bool
		enqueueLine(char *s) {
			if((iHead + 1) % iotcCmdQueueSize == iTail) return false;	// full
			strcpy(iQueue[iHead], s);
    39a2:	0f 2e       	mov	r0, r31
    39a4:	f2 e3       	ldi	r31, 0x32	; 50
    39a6:	9f 2e       	mov	r9, r31
    39a8:	f0 2d       	mov	r31, r0
			iotDhtTrigger	*t;
			double			val;
			for(t = iTrigger; t < iTrigger + iotcDhtMaxTrigger; t++) {
				if(t->iType == iotcDhtNone) continue;
				if(t->iType == iotcDhtTemperature) val = iTemperature;
				else if(t->iType == iotcDhtHumidity) val = iHumidity;
    39aa:	c1 2c       	mov	r12, r1
    39ac:	d1 2c       	mov	r13, r1
		void
		pullTriggers() {
			iotDhtTrigger	*t;
			double			val;
			for(t = iTrigger; t < iTrigger + iotcDhtMaxTrigger; t++) {
				if(t->iType == iotcDhtNone) continue;
    39ae:	d8 01       	movw	r26, r16
    39b0:	8c 91       	ld	r24, X
    39b2:	88 23       	and	r24, r24
    39b4:	09 f4       	brne	.+2      	; 0x39b8 <main+0xef8>
    39b6:	4e c0       	rjmp	.+156    	; 0x3a54 <main+0xf94>
				if(t->iType == iotcDhtTemperature) val = iTemperature;
    39b8:	81 30       	cpi	r24, 0x01	; 1
    39ba:	31 f4       	brne	.+12     	; 0x39c8 <main+0xf08>
    39bc:	f6 01       	movw	r30, r12
    39be:	64 81       	ldd	r22, Z+4	; 0x04
    39c0:	75 81       	ldd	r23, Z+5	; 0x05
    39c2:	86 81       	ldd	r24, Z+6	; 0x06
    39c4:	97 81       	ldd	r25, Z+7	; 0x07
    39c6:	08 c0       	rjmp	.+16     	; 0x39d8 <main+0xf18>
				else if(t->iType == iotcDhtHumidity) val = iHumidity;
    39c8:	82 30       	cpi	r24, 0x02	; 2
    39ca:	09 f0       	breq	.+2      	; 0x39ce <main+0xf0e>
    39cc:	43 c0       	rjmp	.+134    	; 0x3a54 <main+0xf94>
    39ce:	d6 01       	movw	r26, r12
    39d0:	6d 91       	ld	r22, X+
    39d2:	7d 91       	ld	r23, X+
    39d4:	8d 91       	ld	r24, X+
    39d6:	9c 91       	ld	r25, X
    39d8:	7e 2c       	mov	r7, r14
    39da:	8f 2c       	mov	r8, r15
    39dc:	f7 01       	movw	r30, r14
    39de:	35 97       	sbiw	r30, 0x05	; 5
				else continue;
				if(((t->iCondition == iotcDhtLessThan) && (val < t->iValue)) ||
    39e0:	20 81       	ld	r18, Z
    39e2:	21 11       	cpse	r18, r1
    39e4:	0c c0       	rjmp	.+24     	; 0x39fe <main+0xf3e>
    39e6:	9b 01       	movw	r18, r22
    39e8:	ac 01       	movw	r20, r24
    39ea:	f8 01       	movw	r30, r16
    39ec:	62 81       	ldd	r22, Z+2	; 0x02
    39ee:	73 81       	ldd	r23, Z+3	; 0x03
    39f0:	84 81       	ldd	r24, Z+4	; 0x04
    39f2:	95 81       	ldd	r25, Z+5	; 0x05
    39f4:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__gesf2>
    39f8:	18 16       	cp	r1, r24
    39fa:	74 f0       	brlt	.+28     	; 0x3a18 <main+0xf58>
    39fc:	2b c0       	rjmp	.+86     	; 0x3a54 <main+0xf94>
    39fe:	21 30       	cpi	r18, 0x01	; 1
    3a00:	49 f5       	brne	.+82     	; 0x3a54 <main+0xf94>
				   ((t->iCondition == iotcDhtGreaterThan) && (val > t->iValue)))
    3a02:	d8 01       	movw	r26, r16
    3a04:	12 96       	adiw	r26, 0x02	; 2
    3a06:	2d 91       	ld	r18, X+
    3a08:	3d 91       	ld	r19, X+
    3a0a:	4d 91       	ld	r20, X+
    3a0c:	5c 91       	ld	r21, X
    3a0e:	15 97       	sbiw	r26, 0x05	; 5
    3a10:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__gesf2>
    3a14:	18 16       	cp	r1, r24
    3a16:	f4 f4       	brge	.+60     	; 0x3a54 <main+0xf94>
			} else if((s = iLineToParse)) iLineToParse = (char *) NULL;
			return s;
		}
		static bool
		enqueueLine(char *s) {
			if((iHead + 1) % iotcCmdQueueSize == iTail) return false;	// full
    3a18:	20 91 60 06 	lds	r18, 0x0660
    3a1c:	30 e0       	ldi	r19, 0x00	; 0
    3a1e:	59 01       	movw	r10, r18
    3a20:	bf ef       	ldi	r27, 0xFF	; 255
    3a22:	ab 1a       	sub	r10, r27
    3a24:	bb 0a       	sbc	r11, r27
    3a26:	e3 e0       	ldi	r30, 0x03	; 3
    3a28:	ae 22       	and	r10, r30
    3a2a:	e0 e8       	ldi	r30, 0x80	; 128
    3a2c:	be 22       	and	r11, r30
    3a2e:	80 91 5f 06 	lds	r24, 0x065F
    3a32:	90 e0       	ldi	r25, 0x00	; 0
    3a34:	a8 16       	cp	r10, r24
    3a36:	b9 06       	cpc	r11, r25
    3a38:	b9 f0       	breq	.+46     	; 0x3a68 <main+0xfa8>
			strcpy(iQueue[iHead], s);
    3a3a:	92 9e       	mul	r9, r18
    3a3c:	c0 01       	movw	r24, r0
    3a3e:	93 9e       	mul	r9, r19
    3a40:	90 0d       	add	r25, r0
    3a42:	11 24       	eor	r1, r1
    3a44:	67 2d       	mov	r22, r7
    3a46:	78 2d       	mov	r23, r8
    3a48:	89 56       	subi	r24, 0x69	; 105
    3a4a:	9a 4f       	sbci	r25, 0xFA	; 250
    3a4c:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <strcpy>
			iHead = (iHead + 1) % iotcCmdQueueSize;
    3a50:	a0 92 60 06 	sts	0x0660, r10
		}
		void
		pullTriggers() {
			iotDhtTrigger	*t;
			double			val;
			for(t = iTrigger; t < iTrigger + iotcDhtMaxTrigger; t++) {
    3a54:	08 5c       	subi	r16, 0xC8	; 200
    3a56:	1f 4f       	sbci	r17, 0xFF	; 255
    3a58:	f8 e3       	ldi	r31, 0x38	; 56
    3a5a:	ef 0e       	add	r14, r31
    3a5c:	f1 1c       	adc	r15, r1
    3a5e:	25 e0       	ldi	r18, 0x05	; 5
    3a60:	07 39       	cpi	r16, 0x97	; 151
    3a62:	12 07       	cpc	r17, r18
    3a64:	08 f4       	brcc	.+2      	; 0x3a68 <main+0xfa8>
    3a66:	a3 cf       	rjmp	.-186    	; 0x39ae <main+0xeee>
				s += 3; while(isspace(*s)) s++;
				if(strncmp(s, "get", 3) == 0) {
					if((n = read()) == iotcDhtOk) {
						pullTriggers();
						char	str[10];
						dtostrf(iTemperature, 5, 1, str);
    3a68:	c1 2c       	mov	r12, r1
    3a6a:	d1 2c       	mov	r13, r1
    3a6c:	d6 01       	movw	r26, r12
    3a6e:	14 96       	adiw	r26, 0x04	; 4
    3a70:	6d 91       	ld	r22, X+
    3a72:	7d 91       	ld	r23, X+
    3a74:	8d 91       	ld	r24, X+
    3a76:	9c 91       	ld	r25, X
    3a78:	17 97       	sbiw	r26, 0x07	; 7
    3a7a:	fe 01       	movw	r30, r28
    3a7c:	31 96       	adiw	r30, 0x01	; 1
    3a7e:	7f 01       	movw	r14, r30
    3a80:	8f 01       	movw	r16, r30
    3a82:	21 e0       	ldi	r18, 0x01	; 1
    3a84:	45 e0       	ldi	r20, 0x05	; 5
    3a86:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <dtostrf>
						printf("dht %s", str);
    3a8a:	ff 92       	push	r15
    3a8c:	ef 92       	push	r14
    3a8e:	8a e0       	ldi	r24, 0x0A	; 10
    3a90:	93 e0       	ldi	r25, 0x03	; 3
    3a92:	9f 93       	push	r25
    3a94:	8f 93       	push	r24
    3a96:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <printf>
						dtostrf(iHumidity, 5, 1, str);
    3a9a:	d6 01       	movw	r26, r12
    3a9c:	6d 91       	ld	r22, X+
    3a9e:	7d 91       	ld	r23, X+
    3aa0:	8d 91       	ld	r24, X+
    3aa2:	9c 91       	ld	r25, X
    3aa4:	21 e0       	ldi	r18, 0x01	; 1
    3aa6:	45 e0       	ldi	r20, 0x05	; 5
    3aa8:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <dtostrf>
						printf(" %s\n", str);
    3aac:	ff 92       	push	r15
    3aae:	ef 92       	push	r14
    3ab0:	82 eb       	ldi	r24, 0xB2	; 178
    3ab2:	91 e0       	ldi	r25, 0x01	; 1
    3ab4:	9f 93       	push	r25
    3ab6:	8f 93       	push	r24
    3ab8:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <printf>
    3abc:	0f b6       	in	r0, 0x3f	; 63
    3abe:	f8 94       	cli
    3ac0:	de bf       	out	0x3e, r29	; 62
    3ac2:	0f be       	out	0x3f, r0	; 63
    3ac4:	cd bf       	out	0x3d, r28	; 61
    3ac6:	c8 c3       	rjmp	.+1936   	; 0x4258 <main+0x1798>
				bool	err;
				double	val;
				
				s += 3; while(isspace(*s)) s++;
				if(strncmp(s, "get", 3) == 0) {
					if((n = read()) == iotcDhtOk) {
    3ac8:	8f ef       	ldi	r24, 0xFF	; 255
    3aca:	9f ef       	ldi	r25, 0xFF	; 255
						char	str[10];
						dtostrf(iTemperature, 5, 1, str);
						printf("dht %s", str);
						dtostrf(iHumidity, 5, 1, str);
						printf(" %s\n", str);
					} else printf("dht error %d\n", n);
    3acc:	9f 93       	push	r25
    3ace:	8f 93       	push	r24
    3ad0:	81 e1       	ldi	r24, 0x11	; 17
    3ad2:	93 e0       	ldi	r25, 0x03	; 3
    3ad4:	9f 93       	push	r25
    3ad6:	8f 93       	push	r24
    3ad8:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <printf>
    3adc:	0f 90       	pop	r0
    3ade:	0f 90       	pop	r0
    3ae0:	0f 90       	pop	r0
    3ae2:	0f 90       	pop	r0
    3ae4:	b9 c3       	rjmp	.+1906   	; 0x4258 <main+0x1798>
					return true;
				} else if(strncmp(s, "free", 4) == 0) {
    3ae6:	44 e0       	ldi	r20, 0x04	; 4
    3ae8:	50 e0       	ldi	r21, 0x00	; 0
    3aea:	6f e1       	ldi	r22, 0x1F	; 31
    3aec:	73 e0       	ldi	r23, 0x03	; 3
    3aee:	c8 01       	movw	r24, r16
    3af0:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <strncmp>
    3af4:	89 2b       	or	r24, r25
    3af6:	81 f5       	brne	.+96     	; 0x3b58 <main+0x1098>
					s += 4; while(isspace(*s)) s++;
    3af8:	0c 5f       	subi	r16, 0xFC	; 252
    3afa:	1f 4f       	sbci	r17, 0xFF	; 255
    3afc:	78 01       	movw	r14, r16
    3afe:	0f 5f       	subi	r16, 0xFF	; 255
    3b00:	1f 4f       	sbci	r17, 0xFF	; 255
    3b02:	d7 01       	movw	r26, r14
    3b04:	8c 91       	ld	r24, X
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <isspace>
    3b0c:	89 2b       	or	r24, r25
    3b0e:	b1 f7       	brne	.-20     	; 0x3afc <main+0x103c>
					n = atoi(s);
    3b10:	c7 01       	movw	r24, r14
    3b12:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <atoi>
					if(!iotTerminal::enqueueLine(t->iLine)) break;	// full
			}
		}
		static int
		freeTrigger(int8_t n) {
			if((n < 0) || (n >= iotcDhtMaxTrigger)) return -1;
    3b16:	83 30       	cpi	r24, 0x03	; 3
    3b18:	68 f4       	brcc	.+26     	; 0x3b34 <main+0x1074>
			iTrigger[n].iType = iotcDhtNone;
    3b1a:	28 2f       	mov	r18, r24
    3b1c:	33 27       	eor	r19, r19
    3b1e:	27 fd       	sbrc	r18, 7
    3b20:	30 95       	com	r19
    3b22:	b8 e3       	ldi	r27, 0x38	; 56
    3b24:	8b 02       	muls	r24, r27
    3b26:	f0 01       	movw	r30, r0
    3b28:	11 24       	eor	r1, r1
    3b2a:	e1 51       	subi	r30, 0x11	; 17
    3b2c:	fb 4f       	sbci	r31, 0xFB	; 251
    3b2e:	10 82       	st	Z, r1
					} else printf("dht error %d\n", n);
					return true;
				} else if(strncmp(s, "free", 4) == 0) {
					s += 4; while(isspace(*s)) s++;
					n = atoi(s);
					if((n = freeTrigger(n)) < 0) printf("dht free: error\n");
    3b30:	33 23       	and	r19, r19
    3b32:	2c f4       	brge	.+10     	; 0x3b3e <main+0x107e>
    3b34:	84 e2       	ldi	r24, 0x24	; 36
    3b36:	93 e0       	ldi	r25, 0x03	; 3
    3b38:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <puts>
    3b3c:	8d c3       	rjmp	.+1818   	; 0x4258 <main+0x1798>
					else printf("dht free %d\n", n);
    3b3e:	3f 93       	push	r19
    3b40:	8f 93       	push	r24
    3b42:	84 e3       	ldi	r24, 0x34	; 52
    3b44:	93 e0       	ldi	r25, 0x03	; 3
    3b46:	9f 93       	push	r25
    3b48:	8f 93       	push	r24
    3b4a:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <printf>
    3b4e:	0f 90       	pop	r0
    3b50:	0f 90       	pop	r0
    3b52:	0f 90       	pop	r0
    3b54:	0f 90       	pop	r0
    3b56:	80 c3       	rjmp	.+1792   	; 0x4258 <main+0x1798>
					return true;
				}
				if(tolower(*s) == 't') type = iotcDhtTemperature;
    3b58:	c7 01       	movw	r24, r14
    3b5a:	0e 94 e6 2e 	call	0x5dcc	; 0x5dcc <tolower>
    3b5e:	84 37       	cpi	r24, 0x74	; 116
    3b60:	91 05       	cpc	r25, r1
    3b62:	49 f0       	breq	.+18     	; 0x3b76 <main+0x10b6>
				else if(tolower(*s) == 'h') type = iotcDhtHumidity;
    3b64:	88 36       	cpi	r24, 0x68	; 104
    3b66:	91 05       	cpc	r25, r1
    3b68:	09 f0       	breq	.+2      	; 0x3b6c <main+0x10ac>
    3b6a:	76 c3       	rjmp	.+1772   	; 0x4258 <main+0x1798>
    3b6c:	e2 e0       	ldi	r30, 0x02	; 2
    3b6e:	a1 96       	adiw	r28, 0x21	; 33
    3b70:	ef af       	std	Y+63, r30	; 0x3f
    3b72:	a1 97       	sbiw	r28, 0x21	; 33
    3b74:	04 c0       	rjmp	.+8      	; 0x3b7e <main+0x10be>
					n = atoi(s);
					if((n = freeTrigger(n)) < 0) printf("dht free: error\n");
					else printf("dht free %d\n", n);
					return true;
				}
				if(tolower(*s) == 't') type = iotcDhtTemperature;
    3b76:	f1 e0       	ldi	r31, 0x01	; 1
    3b78:	a1 96       	adiw	r28, 0x21	; 33
    3b7a:	ff af       	std	Y+63, r31	; 0x3f
    3b7c:	a1 97       	sbiw	r28, 0x21	; 33
				else if(tolower(*s) == 'h') type = iotcDhtHumidity;
				else return true;							// error
				s++; while(isspace(*s)) s++;
    3b7e:	0f 5f       	subi	r16, 0xFF	; 255
    3b80:	1f 4f       	sbci	r17, 0xFF	; 255
    3b82:	d0 2e       	mov	r13, r16
    3b84:	e1 2e       	mov	r14, r17
    3b86:	d8 01       	movw	r26, r16
    3b88:	fd 90       	ld	r15, X+
    3b8a:	8d 01       	movw	r16, r26
    3b8c:	8f 2d       	mov	r24, r15
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <isspace>
    3b94:	89 2b       	or	r24, r25
    3b96:	a9 f7       	brne	.-22     	; 0x3b82 <main+0x10c2>
				if(*s == '<') rel = iotcDhtLessThan;
    3b98:	bc e3       	ldi	r27, 0x3C	; 60
    3b9a:	fb 16       	cp	r15, r27
    3b9c:	41 f0       	breq	.+16     	; 0x3bae <main+0x10ee>
				else if(*s == '>') rel = iotcDhtGreaterThan;
    3b9e:	ee e3       	ldi	r30, 0x3E	; 62
    3ba0:	fe 12       	cpse	r15, r30
    3ba2:	18 c1       	rjmp	.+560    	; 0x3dd4 <main+0x1314>
    3ba4:	f1 e0       	ldi	r31, 0x01	; 1
    3ba6:	a2 96       	adiw	r28, 0x22	; 34
    3ba8:	ff af       	std	Y+63, r31	; 0x3f
    3baa:	a2 97       	sbiw	r28, 0x22	; 34
    3bac:	03 c0       	rjmp	.+6      	; 0x3bb4 <main+0x10f4>
				}
				if(tolower(*s) == 't') type = iotcDhtTemperature;
				else if(tolower(*s) == 'h') type = iotcDhtHumidity;
				else return true;							// error
				s++; while(isspace(*s)) s++;
				if(*s == '<') rel = iotcDhtLessThan;
    3bae:	a2 96       	adiw	r28, 0x22	; 34
    3bb0:	1f ae       	std	Y+63, r1	; 0x3f
    3bb2:	a2 97       	sbiw	r28, 0x22	; 34
    3bb4:	0d 2d       	mov	r16, r13
    3bb6:	1e 2d       	mov	r17, r14
    3bb8:	78 01       	movw	r14, r16
		getFloat(char **pS, bool *err) {
			int8_t	sign = 1;
			double	val;
			char	*s = *pS;

			while(isspace(*s)) s++;
    3bba:	d8 01       	movw	r26, r16
    3bbc:	dd 90       	ld	r13, X+
    3bbe:	8d 01       	movw	r16, r26
    3bc0:	8d 2d       	mov	r24, r13
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <isspace>
    3bc8:	89 2b       	or	r24, r25
    3bca:	b1 f7       	brne	.-20     	; 0x3bb8 <main+0x10f8>
			if(*s == '-') { sign = -1; s++; }
    3bcc:	bd e2       	ldi	r27, 0x2D	; 45
    3bce:	db 12       	cpse	r13, r27
    3bd0:	06 c0       	rjmp	.+12     	; 0x3bde <main+0x111e>
    3bd2:	78 01       	movw	r14, r16
    3bd4:	ff ef       	ldi	r31, 0xFF	; 255
    3bd6:	a0 96       	adiw	r28, 0x20	; 32
    3bd8:	ff af       	std	Y+63, r31	; 0x3f
    3bda:	a0 97       	sbiw	r28, 0x20	; 32
    3bdc:	0f c0       	rjmp	.+30     	; 0x3bfc <main+0x113c>
			else if(*s == '+') s++;
    3bde:	2b e2       	ldi	r18, 0x2B	; 43
    3be0:	d2 12       	cpse	r13, r18
    3be2:	08 c0       	rjmp	.+16     	; 0x3bf4 <main+0x1134>
    3be4:	3f ef       	ldi	r19, 0xFF	; 255
    3be6:	e3 1a       	sub	r14, r19
    3be8:	f3 0a       	sbc	r15, r19

			return iotcDhtOk;
		}
		static double
		getFloat(char **pS, bool *err) {
			int8_t	sign = 1;
    3bea:	41 e0       	ldi	r20, 0x01	; 1
    3bec:	a0 96       	adiw	r28, 0x20	; 32
    3bee:	4f af       	std	Y+63, r20	; 0x3f
    3bf0:	a0 97       	sbiw	r28, 0x20	; 32
    3bf2:	04 c0       	rjmp	.+8      	; 0x3bfc <main+0x113c>
    3bf4:	51 e0       	ldi	r21, 0x01	; 1
    3bf6:	a0 96       	adiw	r28, 0x20	; 32
    3bf8:	5f af       	std	Y+63, r21	; 0x3f
    3bfa:	a0 97       	sbiw	r28, 0x20	; 32
    3bfc:	87 01       	movw	r16, r14
			char	*s = *pS;

			while(isspace(*s)) s++;
			if(*s == '-') { sign = -1; s++; }
			else if(*s == '+') s++;
			while(isspace(*s)) s++;
    3bfe:	d7 01       	movw	r26, r14
    3c00:	bd 90       	ld	r11, X+
    3c02:	7d 01       	movw	r14, r26
    3c04:	cb 2c       	mov	r12, r11
    3c06:	d1 2c       	mov	r13, r1
    3c08:	c6 01       	movw	r24, r12
    3c0a:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <isspace>
    3c0e:	89 2b       	or	r24, r25
    3c10:	a9 f7       	brne	.-22     	; 0x3bfc <main+0x113c>
			if(!isdigit(*s)) { *err = true; return 0.0; }
    3c12:	c6 01       	movw	r24, r12
    3c14:	c0 97       	sbiw	r24, 0x30	; 48
    3c16:	8a 30       	cpi	r24, 0x0A	; 10
    3c18:	91 05       	cpc	r25, r1
    3c1a:	08 f0       	brcs	.+2      	; 0x3c1e <main+0x115e>
    3c1c:	db c0       	rjmp	.+438    	; 0x3dd4 <main+0x1314>
			val = *s++ - '0';
    3c1e:	78 01       	movw	r14, r16
    3c20:	bf ef       	ldi	r27, 0xFF	; 255
    3c22:	eb 1a       	sub	r14, r27
    3c24:	fb 0a       	sbc	r15, r27
    3c26:	bc 01       	movw	r22, r24
    3c28:	88 27       	eor	r24, r24
    3c2a:	77 fd       	sbrc	r23, 7
    3c2c:	80 95       	com	r24
    3c2e:	98 2f       	mov	r25, r24
    3c30:	0e 94 bf 2a 	call	0x557e	; 0x557e <__floatsisf>
    3c34:	3b 01       	movw	r6, r22
    3c36:	4c 01       	movw	r8, r24
			while(isdigit(*s)) val = 10.0 * val + *s++ - '0';
    3c38:	f8 01       	movw	r30, r16
    3c3a:	d1 80       	ldd	r13, Z+1	; 0x01
    3c3c:	8d 2d       	mov	r24, r13
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	c0 97       	sbiw	r24, 0x30	; 48
    3c42:	0a 97       	sbiw	r24, 0x0a	; 10
    3c44:	48 f5       	brcc	.+82     	; 0x3c98 <main+0x11d8>
    3c46:	0e 5f       	subi	r16, 0xFE	; 254
    3c48:	1f 4f       	sbci	r17, 0xFF	; 255
    3c4a:	78 01       	movw	r14, r16
    3c4c:	20 e0       	ldi	r18, 0x00	; 0
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	40 e2       	ldi	r20, 0x20	; 32
    3c52:	51 e4       	ldi	r21, 0x41	; 65
    3c54:	c4 01       	movw	r24, r8
    3c56:	b3 01       	movw	r22, r6
    3c58:	0e 94 4f 2b 	call	0x569e	; 0x569e <__mulsf3>
    3c5c:	4b 01       	movw	r8, r22
    3c5e:	5c 01       	movw	r10, r24
    3c60:	6d 2d       	mov	r22, r13
    3c62:	70 e0       	ldi	r23, 0x00	; 0
    3c64:	80 e0       	ldi	r24, 0x00	; 0
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	0e 94 bf 2a 	call	0x557e	; 0x557e <__floatsisf>
    3c6c:	9b 01       	movw	r18, r22
    3c6e:	ac 01       	movw	r20, r24
    3c70:	c5 01       	movw	r24, r10
    3c72:	b4 01       	movw	r22, r8
    3c74:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <__addsf3>
    3c78:	20 e0       	ldi	r18, 0x00	; 0
    3c7a:	30 e0       	ldi	r19, 0x00	; 0
    3c7c:	40 e4       	ldi	r20, 0x40	; 64
    3c7e:	52 e4       	ldi	r21, 0x42	; 66
    3c80:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <__subsf3>
    3c84:	3b 01       	movw	r6, r22
    3c86:	4c 01       	movw	r8, r24
    3c88:	d8 01       	movw	r26, r16
    3c8a:	dd 90       	ld	r13, X+
    3c8c:	8d 01       	movw	r16, r26
    3c8e:	8d 2d       	mov	r24, r13
    3c90:	90 e0       	ldi	r25, 0x00	; 0
    3c92:	c0 97       	sbiw	r24, 0x30	; 48
    3c94:	0a 97       	sbiw	r24, 0x0a	; 10
    3c96:	c8 f2       	brcs	.-78     	; 0x3c4a <main+0x118a>
			if(*s == '.') {
    3c98:	be e2       	ldi	r27, 0x2E	; 46
    3c9a:	db 12       	cpse	r13, r27
    3c9c:	41 c0       	rjmp	.+130    	; 0x3d20 <main+0x1260>
				double scale = 1.0;
				s++;
    3c9e:	87 01       	movw	r16, r14
    3ca0:	0f 5f       	subi	r16, 0xFF	; 255
    3ca2:	1f 4f       	sbci	r17, 0xFF	; 255
				while(isdigit(*s)) {
    3ca4:	f7 01       	movw	r30, r14
    3ca6:	d1 80       	ldd	r13, Z+1	; 0x01
    3ca8:	8d 2d       	mov	r24, r13
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	c0 97       	sbiw	r24, 0x30	; 48
    3cae:	0a 97       	sbiw	r24, 0x0a	; 10
    3cb0:	c0 f5       	brcc	.+112    	; 0x3d22 <main+0x1262>
    3cb2:	f2 e0       	ldi	r31, 0x02	; 2
    3cb4:	ef 0e       	add	r14, r31
    3cb6:	f1 1c       	adc	r15, r1
			while(isspace(*s)) s++;
			if(!isdigit(*s)) { *err = true; return 0.0; }
			val = *s++ - '0';
			while(isdigit(*s)) val = 10.0 * val + *s++ - '0';
			if(*s == '.') {
				double scale = 1.0;
    3cb8:	0f 2e       	mov	r0, r31
    3cba:	21 2c       	mov	r2, r1
    3cbc:	31 2c       	mov	r3, r1
    3cbe:	f0 e8       	ldi	r31, 0x80	; 128
    3cc0:	4f 2e       	mov	r4, r31
    3cc2:	ff e3       	ldi	r31, 0x3F	; 63
    3cc4:	5f 2e       	mov	r5, r31
    3cc6:	f0 2d       	mov	r31, r0
				s++;
				while(isdigit(*s)) {
					scale /= 10.0;
    3cc8:	20 e0       	ldi	r18, 0x00	; 0
    3cca:	30 e0       	ldi	r19, 0x00	; 0
    3ccc:	40 e2       	ldi	r20, 0x20	; 32
    3cce:	51 e4       	ldi	r21, 0x41	; 65
    3cd0:	c2 01       	movw	r24, r4
    3cd2:	b1 01       	movw	r22, r2
    3cd4:	0e 94 55 2a 	call	0x54aa	; 0x54aa <__divsf3>
    3cd8:	1b 01       	movw	r2, r22
    3cda:	2c 01       	movw	r4, r24
					val += (*s++ - '0') * scale;
    3cdc:	87 01       	movw	r16, r14
    3cde:	6d 2d       	mov	r22, r13
    3ce0:	70 e0       	ldi	r23, 0x00	; 0
    3ce2:	60 53       	subi	r22, 0x30	; 48
    3ce4:	71 09       	sbc	r23, r1
    3ce6:	88 27       	eor	r24, r24
    3ce8:	77 fd       	sbrc	r23, 7
    3cea:	80 95       	com	r24
    3cec:	98 2f       	mov	r25, r24
    3cee:	0e 94 bf 2a 	call	0x557e	; 0x557e <__floatsisf>
    3cf2:	9b 01       	movw	r18, r22
    3cf4:	ac 01       	movw	r20, r24
    3cf6:	c2 01       	movw	r24, r4
    3cf8:	b1 01       	movw	r22, r2
    3cfa:	0e 94 4f 2b 	call	0x569e	; 0x569e <__mulsf3>
    3cfe:	9b 01       	movw	r18, r22
    3d00:	ac 01       	movw	r20, r24
    3d02:	c4 01       	movw	r24, r8
    3d04:	b3 01       	movw	r22, r6
    3d06:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <__addsf3>
    3d0a:	3b 01       	movw	r6, r22
    3d0c:	4c 01       	movw	r8, r24
			val = *s++ - '0';
			while(isdigit(*s)) val = 10.0 * val + *s++ - '0';
			if(*s == '.') {
				double scale = 1.0;
				s++;
				while(isdigit(*s)) {
    3d0e:	d7 01       	movw	r26, r14
    3d10:	dd 90       	ld	r13, X+
    3d12:	7d 01       	movw	r14, r26
    3d14:	8d 2d       	mov	r24, r13
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	c0 97       	sbiw	r24, 0x30	; 48
    3d1a:	0a 97       	sbiw	r24, 0x0a	; 10
    3d1c:	a8 f2       	brcs	.-86     	; 0x3cc8 <main+0x1208>
    3d1e:	01 c0       	rjmp	.+2      	; 0x3d22 <main+0x1262>
			else if(*s == '+') s++;
			while(isspace(*s)) s++;
			if(!isdigit(*s)) { *err = true; return 0.0; }
			val = *s++ - '0';
			while(isdigit(*s)) val = 10.0 * val + *s++ - '0';
			if(*s == '.') {
    3d20:	87 01       	movw	r16, r14
    3d22:	68 01       	movw	r12, r16
    3d24:	0f 5f       	subi	r16, 0xFF	; 255
    3d26:	1f 4f       	sbci	r17, 0xFF	; 255
				if(*s == '<') rel = iotcDhtLessThan;
				else if(*s == '>') rel = iotcDhtGreaterThan;
				else goto syntaxError;
				val = getFloat(&s, &err);
				if(err) goto syntaxError;
				while(isspace(*s)) s++;
    3d28:	f6 01       	movw	r30, r12
    3d2a:	80 81       	ld	r24, Z
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <isspace>
    3d32:	89 2b       	or	r24, r25
    3d34:	b1 f7       	brne	.-20     	; 0x3d22 <main+0x1262>
		
		static int8_t
		allocTrigger() {
			int8_t	i;
			for(i = 0; i < iotcDhtMaxTrigger; i++) {
				if(iTrigger[i].iType == iotcDhtNone) return i;
    3d36:	80 91 ef 04 	lds	r24, 0x04EF
    3d3a:	88 23       	and	r24, r24
    3d3c:	61 f0       	breq	.+24     	; 0x3d56 <main+0x1296>
    3d3e:	80 91 27 05 	lds	r24, 0x0527
    3d42:	88 23       	and	r24, r24
    3d44:	11 f4       	brne	.+4      	; 0x3d4a <main+0x128a>
    3d46:	0c 94 e8 29 	jmp	0x53d0	; 0x53d0 <main+0x2910>
    3d4a:	80 91 5f 05 	lds	r24, 0x055F
    3d4e:	81 11       	cpse	r24, r1
    3d50:	41 c0       	rjmp	.+130    	; 0x3dd4 <main+0x1314>
    3d52:	0c 94 ea 29 	jmp	0x53d4	; 0x53d4 <main+0x2914>
				else if(*s == '>') rel = iotcDhtGreaterThan;
				else goto syntaxError;
				val = getFloat(&s, &err);
				if(err) goto syntaxError;
				while(isspace(*s)) s++;
				if((n = allocTrigger()) < 0) goto syntaxError;
    3d56:	00 e0       	ldi	r16, 0x00	; 0
    3d58:	10 e0       	ldi	r17, 0x00	; 0
				iTrigger[n].iType = type;
    3d5a:	88 e3       	ldi	r24, 0x38	; 56
    3d5c:	80 9f       	mul	r24, r16
    3d5e:	50 01       	movw	r10, r0
    3d60:	81 9f       	mul	r24, r17
    3d62:	b0 0c       	add	r11, r0
    3d64:	11 24       	eor	r1, r1
    3d66:	95 01       	movw	r18, r10
    3d68:	21 51       	subi	r18, 0x11	; 17
    3d6a:	3b 4f       	sbci	r19, 0xFB	; 251
    3d6c:	79 01       	movw	r14, r18
    3d6e:	a1 96       	adiw	r28, 0x21	; 33
    3d70:	ef ad       	ldd	r30, Y+63	; 0x3f
    3d72:	a1 97       	sbiw	r28, 0x21	; 33
    3d74:	d9 01       	movw	r26, r18
    3d76:	ec 93       	st	X, r30
				iTrigger[n].iCondition = rel;
    3d78:	a2 96       	adiw	r28, 0x22	; 34
    3d7a:	ff ad       	ldd	r31, Y+63	; 0x3f
    3d7c:	a2 97       	sbiw	r28, 0x22	; 34
    3d7e:	11 96       	adiw	r26, 0x01	; 1
    3d80:	fc 93       	st	X, r31
					scale /= 10.0;
					val += (*s++ - '0') * scale;
				}
			}
			*pS = s; *err = false;
			return sign * val;
    3d82:	a0 96       	adiw	r28, 0x20	; 32
    3d84:	2f ad       	ldd	r18, Y+63	; 0x3f
    3d86:	a0 97       	sbiw	r28, 0x20	; 32
    3d88:	62 2f       	mov	r22, r18
    3d8a:	77 27       	eor	r23, r23
    3d8c:	67 fd       	sbrc	r22, 7
    3d8e:	70 95       	com	r23
    3d90:	87 2f       	mov	r24, r23
    3d92:	97 2f       	mov	r25, r23
    3d94:	0e 94 bf 2a 	call	0x557e	; 0x557e <__floatsisf>
    3d98:	a4 01       	movw	r20, r8
    3d9a:	93 01       	movw	r18, r6
    3d9c:	0e 94 4f 2b 	call	0x569e	; 0x569e <__mulsf3>
				if(err) goto syntaxError;
				while(isspace(*s)) s++;
				if((n = allocTrigger()) < 0) goto syntaxError;
				iTrigger[n].iType = type;
				iTrigger[n].iCondition = rel;
				iTrigger[n].iValue = val;
    3da0:	d7 01       	movw	r26, r14
    3da2:	12 96       	adiw	r26, 0x02	; 2
    3da4:	6d 93       	st	X+, r22
    3da6:	7d 93       	st	X+, r23
    3da8:	8d 93       	st	X+, r24
    3daa:	9c 93       	st	X, r25
    3dac:	15 97       	sbiw	r26, 0x05	; 5
				strcpy(iTrigger[n].iLine, s);
    3dae:	b6 01       	movw	r22, r12
    3db0:	c5 01       	movw	r24, r10
    3db2:	8b 50       	subi	r24, 0x0B	; 11
    3db4:	9b 4f       	sbci	r25, 0xFB	; 251
    3db6:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <strcpy>
				printf("dht trigger %d\n", n);
    3dba:	1f 93       	push	r17
    3dbc:	0f 93       	push	r16
    3dbe:	81 e4       	ldi	r24, 0x41	; 65
    3dc0:	93 e0       	ldi	r25, 0x03	; 3
    3dc2:	9f 93       	push	r25
    3dc4:	8f 93       	push	r24
    3dc6:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <printf>
    3dca:	0f 90       	pop	r0
    3dcc:	0f 90       	pop	r0
    3dce:	0f 90       	pop	r0
    3dd0:	0f 90       	pop	r0
    3dd2:	42 c2       	rjmp	.+1156   	; 0x4258 <main+0x1798>
				return true;
			syntaxError:
				printf("dht: syntax error\n");
    3dd4:	81 e5       	ldi	r24, 0x51	; 81
    3dd6:	93 e0       	ldi	r25, 0x03	; 3
    3dd8:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <puts>
    3ddc:	3d c2       	rjmp	.+1146   	; 0x4258 <main+0x1798>
			return (iAngle - iotcServoTicksAtZero) * iotcServoDeltaDegree;
		}
		static bool
		parseLine(char *s) {
			if(strncmp(s, "servo", 5) == 0) {
				s += 5; while(isspace(*s)) s++;
    3dde:	b5 e0       	ldi	r27, 0x05	; 5
    3de0:	6b 0e       	add	r6, r27
    3de2:	71 1c       	adc	r7, r1
    3de4:	83 01       	movw	r16, r6
    3de6:	ef ef       	ldi	r30, 0xFF	; 255
    3de8:	6e 1a       	sub	r6, r30
    3dea:	7e 0a       	sbc	r7, r30
    3dec:	d8 01       	movw	r26, r16
    3dee:	8c 91       	ld	r24, X
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <isspace>
    3df6:	89 2b       	or	r24, r25
    3df8:	a9 f7       	brne	.-22     	; 0x3de4 <main+0x1324>
				if(strncmp(s, "get", 3) != 0) {
    3dfa:	43 e0       	ldi	r20, 0x03	; 3
    3dfc:	50 e0       	ldi	r21, 0x00	; 0
    3dfe:	66 e0       	ldi	r22, 0x06	; 6
    3e00:	73 e0       	ldi	r23, 0x03	; 3
    3e02:	c8 01       	movw	r24, r16
    3e04:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <strncmp>
    3e08:	89 2b       	or	r24, r25
    3e0a:	69 f1       	breq	.+90     	; 0x3e66 <main+0x13a6>
					int		val = atoi(s);
    3e0c:	c8 01       	movw	r24, r16
    3e0e:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <atoi>
		static void
		setAngle(int angle) {	// in degree
			int		delta;
			int		sign;
		
			if(angle < 0) {
    3e12:	99 23       	and	r25, r25
    3e14:	6c f4       	brge	.+26     	; 0x3e30 <main+0x1370>
				delta = (-angle + iotcServoDeltaDegree / 2)
    3e16:	25 e0       	ldi	r18, 0x05	; 5
    3e18:	30 e0       	ldi	r19, 0x00	; 0
    3e1a:	f9 01       	movw	r30, r18
    3e1c:	e8 1b       	sub	r30, r24
    3e1e:	f9 0b       	sbc	r31, r25
    3e20:	cf 01       	movw	r24, r30
					/ iotcServoDeltaDegree;
    3e22:	6a e0       	ldi	r22, 0x0A	; 10
    3e24:	70 e0       	ldi	r23, 0x00	; 0
    3e26:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <__divmodhi4>
				sign = -1;
    3e2a:	2f ef       	ldi	r18, 0xFF	; 255
    3e2c:	3f ef       	ldi	r19, 0xFF	; 255
    3e2e:	07 c0       	rjmp	.+14     	; 0x3e3e <main+0x137e>
			} else {
				delta = (angle + iotcServoDeltaDegree / 2)
    3e30:	05 96       	adiw	r24, 0x05	; 5
					/ iotcServoDeltaDegree;
    3e32:	6a e0       	ldi	r22, 0x0A	; 10
    3e34:	70 e0       	ldi	r23, 0x00	; 0
    3e36:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <__divmodhi4>
				sign = 1;
    3e3a:	21 e0       	ldi	r18, 0x01	; 1
    3e3c:	30 e0       	ldi	r19, 0x00	; 0
    3e3e:	86 2f       	mov	r24, r22
    3e40:	97 2f       	mov	r25, r23
    3e42:	8a 30       	cpi	r24, 0x0A	; 10
    3e44:	91 05       	cpc	r25, r1
    3e46:	14 f0       	brlt	.+4      	; 0x3e4c <main+0x138c>
    3e48:	89 e0       	ldi	r24, 0x09	; 9
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
			}
			if(delta > 9) delta = 9;

			iAngle = iotcServoTicksAtZero + sign * delta;
    3e4c:	82 9f       	mul	r24, r18
    3e4e:	a0 01       	movw	r20, r0
    3e50:	83 9f       	mul	r24, r19
    3e52:	50 0d       	add	r21, r0
    3e54:	92 9f       	mul	r25, r18
    3e56:	50 0d       	add	r21, r0
    3e58:	11 24       	eor	r1, r1
    3e5a:	ca 01       	movw	r24, r20
    3e5c:	0e 96       	adiw	r24, 0x0e	; 14
    3e5e:	90 93 3d 01 	sts	0x013D, r25
    3e62:	80 93 3c 01 	sts	0x013C, r24
		}
		static int
		getAngle(void) {	// in degree
			return (iAngle - iotcServoTicksAtZero) * iotcServoDeltaDegree;
    3e66:	20 91 3c 01 	lds	r18, 0x013C
    3e6a:	30 91 3d 01 	lds	r19, 0x013D
    3e6e:	2e 50       	subi	r18, 0x0E	; 14
    3e70:	31 09       	sbc	r19, r1
    3e72:	c9 01       	movw	r24, r18
    3e74:	88 0f       	add	r24, r24
    3e76:	99 1f       	adc	r25, r25
    3e78:	22 0f       	add	r18, r18
    3e7a:	33 1f       	adc	r19, r19
    3e7c:	22 0f       	add	r18, r18
    3e7e:	33 1f       	adc	r19, r19
    3e80:	22 0f       	add	r18, r18
    3e82:	33 1f       	adc	r19, r19
    3e84:	82 0f       	add	r24, r18
    3e86:	93 1f       	adc	r25, r19
				s += 5; while(isspace(*s)) s++;
				if(strncmp(s, "get", 3) != 0) {
					int		val = atoi(s);
					setAngle(val);
				}
				printf("servo %d\n", getAngle());
    3e88:	9f 93       	push	r25
    3e8a:	8f 93       	push	r24
    3e8c:	83 e6       	ldi	r24, 0x63	; 99
    3e8e:	93 e0       	ldi	r25, 0x03	; 3
    3e90:	9f 93       	push	r25
    3e92:	8f 93       	push	r24
    3e94:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <printf>
    3e98:	0f 90       	pop	r0
    3e9a:	0f 90       	pop	r0
    3e9c:	0f 90       	pop	r0
    3e9e:	0f 90       	pop	r0
    3ea0:	db c1       	rjmp	.+950    	; 0x4258 <main+0x1798>
		*ipPort |= ~iPinMask;
	}
	static bool
	parseLine(char *s) {
		if(strncmp(s, "led", 3) == 0) {
			s += 3; while(isspace(*s)) s++;
    3ea2:	f3 e0       	ldi	r31, 0x03	; 3
    3ea4:	6f 0e       	add	r6, r31
    3ea6:	71 1c       	adc	r7, r1
    3ea8:	83 01       	movw	r16, r6
    3eaa:	2f ef       	ldi	r18, 0xFF	; 255
    3eac:	62 1a       	sub	r6, r18
    3eae:	72 0a       	sbc	r7, r18
    3eb0:	d8 01       	movw	r26, r16
    3eb2:	8c 91       	ld	r24, X
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <isspace>
    3eba:	89 2b       	or	r24, r25
    3ebc:	a9 f7       	brne	.-22     	; 0x3ea8 <main+0x13e8>
			if(strncmp(s, "on", 2) == 0) {
    3ebe:	42 e0       	ldi	r20, 0x02	; 2
    3ec0:	50 e0       	ldi	r21, 0x00	; 0
    3ec2:	62 e8       	ldi	r22, 0x82	; 130
    3ec4:	73 e0       	ldi	r23, 0x03	; 3
    3ec6:	c8 01       	movw	r24, r16
    3ec8:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <strncmp>
    3ecc:	89 2b       	or	r24, r25
    3ece:	51 f4       	brne	.+20     	; 0x3ee4 <main+0x1424>
				*ipPort |= iPinMask;
    3ed0:	e0 91 ba 03 	lds	r30, 0x03BA
    3ed4:	f0 91 bb 03 	lds	r31, 0x03BB
    3ed8:	90 81       	ld	r25, Z
    3eda:	80 91 b9 03 	lds	r24, 0x03B9
    3ede:	89 2b       	or	r24, r25
    3ee0:	80 83       	st	Z, r24
    3ee2:	ba c1       	rjmp	.+884    	; 0x4258 <main+0x1798>
				//printf("led on \n");
			}
			else if(strncmp(s, "off", 3) == 0) {
    3ee4:	43 e0       	ldi	r20, 0x03	; 3
    3ee6:	50 e0       	ldi	r21, 0x00	; 0
    3ee8:	6d e6       	ldi	r22, 0x6D	; 109
    3eea:	73 e0       	ldi	r23, 0x03	; 3
    3eec:	c8 01       	movw	r24, r16
    3eee:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <strncmp>
    3ef2:	89 2b       	or	r24, r25
    3ef4:	09 f0       	breq	.+2      	; 0x3ef8 <main+0x1438>
    3ef6:	b0 c1       	rjmp	.+864    	; 0x4258 <main+0x1798>
				*ipPort &= ~iPinMask; // off
    3ef8:	e0 91 ba 03 	lds	r30, 0x03BA
    3efc:	f0 91 bb 03 	lds	r31, 0x03BB
    3f00:	80 81       	ld	r24, Z
    3f02:	90 91 b9 03 	lds	r25, 0x03B9
    3f06:	90 95       	com	r25
    3f08:	89 23       	and	r24, r25
    3f0a:	80 83       	st	Z, r24
    3f0c:	a5 c1       	rjmp	.+842    	; 0x4258 <main+0x1798>
	*ipPort |= ~iPinMask;
}
static bool
parseLine(char *s) {
	if(strncmp(s, "subled", 6) == 0) {
		s += 6; while(isspace(*s)) s++;
    3f0e:	b6 e0       	ldi	r27, 0x06	; 6
    3f10:	6b 0e       	add	r6, r27
    3f12:	71 1c       	adc	r7, r1
    3f14:	83 01       	movw	r16, r6
    3f16:	ef ef       	ldi	r30, 0xFF	; 255
    3f18:	6e 1a       	sub	r6, r30
    3f1a:	7e 0a       	sbc	r7, r30
    3f1c:	d8 01       	movw	r26, r16
    3f1e:	8c 91       	ld	r24, X
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <isspace>
    3f26:	89 2b       	or	r24, r25
    3f28:	a9 f7       	brne	.-22     	; 0x3f14 <main+0x1454>
		if(strncmp(s, "on", 2) == 0) {
    3f2a:	42 e0       	ldi	r20, 0x02	; 2
    3f2c:	50 e0       	ldi	r21, 0x00	; 0
    3f2e:	62 e8       	ldi	r22, 0x82	; 130
    3f30:	73 e0       	ldi	r23, 0x03	; 3
    3f32:	c8 01       	movw	r24, r16
    3f34:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <strncmp>
    3f38:	89 2b       	or	r24, r25
    3f3a:	51 f4       	brne	.+20     	; 0x3f50 <main+0x1490>
			*ipPort |= iPinMask;
    3f3c:	e0 91 b7 03 	lds	r30, 0x03B7
    3f40:	f0 91 b8 03 	lds	r31, 0x03B8
    3f44:	90 81       	ld	r25, Z
    3f46:	80 91 b6 03 	lds	r24, 0x03B6
    3f4a:	89 2b       	or	r24, r25
    3f4c:	80 83       	st	Z, r24
    3f4e:	84 c1       	rjmp	.+776    	; 0x4258 <main+0x1798>
			//printf("subled on \n");
		}
		else if(strncmp(s, "off", 3) == 0) {
    3f50:	43 e0       	ldi	r20, 0x03	; 3
    3f52:	50 e0       	ldi	r21, 0x00	; 0
    3f54:	6d e6       	ldi	r22, 0x6D	; 109
    3f56:	73 e0       	ldi	r23, 0x03	; 3
    3f58:	c8 01       	movw	r24, r16
    3f5a:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <strncmp>
    3f5e:	89 2b       	or	r24, r25
    3f60:	09 f0       	breq	.+2      	; 0x3f64 <main+0x14a4>
    3f62:	7a c1       	rjmp	.+756    	; 0x4258 <main+0x1798>
			*ipPort &= ~iPinMask; // off
    3f64:	e0 91 b7 03 	lds	r30, 0x03B7
    3f68:	f0 91 b8 03 	lds	r31, 0x03B8
    3f6c:	80 81       	ld	r24, Z
    3f6e:	90 91 b6 03 	lds	r25, 0x03B6
    3f72:	90 95       	com	r25
    3f74:	89 23       	and	r24, r25
    3f76:	80 83       	st	Z, r24
    3f78:	6f c1       	rjmp	.+734    	; 0x4258 <main+0x1798>

// DC Fan Motor
static bool
parseFan(char *s)
{
	if(strncmp(s, "fan", 3) == 0) {
    3f7a:	43 e0       	ldi	r20, 0x03	; 3
    3f7c:	50 e0       	ldi	r21, 0x00	; 0
    3f7e:	61 e7       	ldi	r22, 0x71	; 113
    3f80:	73 e0       	ldi	r23, 0x03	; 3
    3f82:	c3 01       	movw	r24, r6
    3f84:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <strncmp>
    3f88:	89 2b       	or	r24, r25
    3f8a:	11 f0       	breq	.+4      	; 0x3f90 <main+0x14d0>
    3f8c:	0c 94 c8 28 	jmp	0x5190	; 0x5190 <main+0x26d0>
		int      n;
		s += 3; while(isspace(*s)) s++;
    3f90:	b3 e0       	ldi	r27, 0x03	; 3
    3f92:	6b 0e       	add	r6, r27
    3f94:	71 1c       	adc	r7, r1
    3f96:	83 01       	movw	r16, r6
    3f98:	ef ef       	ldi	r30, 0xFF	; 255
    3f9a:	6e 1a       	sub	r6, r30
    3f9c:	7e 0a       	sbc	r7, r30
    3f9e:	d8 01       	movw	r26, r16
    3fa0:	8c 91       	ld	r24, X
    3fa2:	90 e0       	ldi	r25, 0x00	; 0
    3fa4:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <isspace>
    3fa8:	89 2b       	or	r24, r25
    3faa:	a9 f7       	brne	.-22     	; 0x3f96 <main+0x14d6>
		n = atoi(s);
    3fac:	c8 01       	movw	r24, r16
    3fae:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <atoi>
    3fb2:	85 30       	cpi	r24, 0x05	; 5
    3fb4:	91 05       	cpc	r25, r1
    3fb6:	14 f0       	brlt	.+4      	; 0x3fbc <main+0x14fc>
    3fb8:	84 e0       	ldi	r24, 0x04	; 4
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	99 23       	and	r25, r25
    3fbe:	14 f4       	brge	.+4      	; 0x3fc4 <main+0x1504>
    3fc0:	80 e0       	ldi	r24, 0x00	; 0
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
		if (n < 0) n = 0;
		else if (n > cMaxFanSpeed) n = cMaxFanSpeed;
		if(FanSpeed == 0) {
    3fc4:	20 91 ef 06 	lds	r18, 0x06EF
    3fc8:	30 91 f0 06 	lds	r19, 0x06F0
    3fcc:	23 2b       	or	r18, r19
    3fce:	09 f0       	breq	.+2      	; 0x3fd2 <main+0x1512>
    3fd0:	7b c0       	rjmp	.+246    	; 0x40c8 <main+0x1608>
			if(n > 0) {
    3fd2:	18 16       	cp	r1, r24
    3fd4:	19 06       	cpc	r1, r25
    3fd6:	0c f0       	brlt	.+2      	; 0x3fda <main+0x151a>
    3fd8:	d3 c0       	rjmp	.+422    	; 0x4180 <main+0x16c0>
			}
		}
		void
		configure(iotTimerPsd aPsd, unsigned int aCount) {
			unsigned char	psd = 0;
			if(iId == iotcTimer0) {
    3fda:	e0 91 f4 06 	lds	r30, 0x06F4
    3fde:	f0 91 f5 06 	lds	r31, 0x06F5
    3fe2:	20 81       	ld	r18, Z
    3fe4:	21 30       	cpi	r18, 0x01	; 1
    3fe6:	59 f0       	breq	.+22     	; 0x3ffe <main+0x153e>
					case iotcPsd256: psd = 4; break;
					case iotcPsd1024: psd = 5; break;
					default: return;
				}
			}
			switch(iId) {
    3fe8:	22 30       	cpi	r18, 0x02	; 2
    3fea:	91 f0       	breq	.+36     	; 0x4010 <main+0x1550>
    3fec:	18 f4       	brcc	.+6      	; 0x3ff4 <main+0x1534>
    3fee:	21 30       	cpi	r18, 0x01	; 1
    3ff0:	41 f0       	breq	.+16     	; 0x4002 <main+0x1542>
    3ff2:	30 c0       	rjmp	.+96     	; 0x4054 <main+0x1594>
    3ff4:	23 30       	cpi	r18, 0x03	; 3
    3ff6:	b9 f0       	breq	.+46     	; 0x4026 <main+0x1566>
    3ff8:	24 30       	cpi	r18, 0x04	; 4
    3ffa:	d9 f0       	breq	.+54     	; 0x4032 <main+0x1572>
    3ffc:	2b c0       	rjmp	.+86     	; 0x4054 <main+0x1594>
				switch(aPsd) {
					case iotcPsdNo: psd = 0; break;
					case iotcPsd1: psd = 1; break;
					case iotcPsd8: psd = 2; break;
					case iotcPsd32: psd = 3; break;
					case iotcPsd64: psd = 4; break;
    3ffe:	24 e0       	ldi	r18, 0x04	; 4
    4000:	01 c0       	rjmp	.+2      	; 0x4004 <main+0x1544>
			} else { // iotcTimer1, 2, | 3
				switch(aPsd) {
					case iotcPsdNo: psd = 0; break;
					case iotcPsd1: psd = 1; break;
					case iotcPsd8: psd = 2; break;
					case iotcPsd64: psd = 3; break;
    4002:	23 e0       	ldi	r18, 0x03	; 3
					default: return;
				}
			}
			switch(iId) {
				case iotcTimer0:
					TCNT0 = 0; OCR0 = aCount & 0xff;
    4004:	12 be       	out	0x32, r1	; 50
    4006:	3a ef       	ldi	r19, 0xFA	; 250
    4008:	31 bf       	out	0x31, r19	; 49
					TCCR0 = (1 << WGM01) | psd;
    400a:	28 60       	ori	r18, 0x08	; 8
    400c:	23 bf       	out	0x33, r18	; 51
    400e:	22 c0       	rjmp	.+68     	; 0x4054 <main+0x1594>
					break;
				case iotcTimer1:
					TCCR1A = 0; TCCR1B = 0; TCNT1 = 0; OCR1A = aCount;
    4010:	1f bc       	out	0x2f, r1	; 47
    4012:	1e bc       	out	0x2e, r1	; 46
    4014:	1d bc       	out	0x2d, r1	; 45
    4016:	1c bc       	out	0x2c, r1	; 44
    4018:	2a ef       	ldi	r18, 0xFA	; 250
    401a:	30 e0       	ldi	r19, 0x00	; 0
    401c:	3b bd       	out	0x2b, r19	; 43
    401e:	2a bd       	out	0x2a, r18	; 42
					TCCR1B = (1 << WGM12) | psd;
    4020:	2b e0       	ldi	r18, 0x0B	; 11
    4022:	2e bd       	out	0x2e, r18	; 46
    4024:	17 c0       	rjmp	.+46     	; 0x4054 <main+0x1594>
					break;
				case iotcTimer2:
					TCNT2 = 0; OCR2 = aCount & 0xff;
    4026:	14 bc       	out	0x24, r1	; 36
    4028:	2a ef       	ldi	r18, 0xFA	; 250
    402a:	23 bd       	out	0x23, r18	; 35
					TCCR2 = (1 << WGM21) | psd;
    402c:	2b e0       	ldi	r18, 0x0B	; 11
    402e:	25 bd       	out	0x25, r18	; 37
    4030:	11 c0       	rjmp	.+34     	; 0x4054 <main+0x1594>
					break;
				case iotcTimer3:
					TCCR3A = 0; TCCR3B = 0; TCNT3 = 0; OCR3A = aCount;
    4032:	10 92 8b 00 	sts	0x008B, r1
    4036:	ea e8       	ldi	r30, 0x8A	; 138
    4038:	f0 e0       	ldi	r31, 0x00	; 0
    403a:	10 82       	st	Z, r1
    403c:	10 92 89 00 	sts	0x0089, r1
    4040:	10 92 88 00 	sts	0x0088, r1
    4044:	2a ef       	ldi	r18, 0xFA	; 250
    4046:	30 e0       	ldi	r19, 0x00	; 0
    4048:	30 93 87 00 	sts	0x0087, r19
    404c:	20 93 86 00 	sts	0x0086, r18
					TCCR3B = (1 << WGM32) | psd;
    4050:	2b e0       	ldi	r18, 0x0B	; 11
    4052:	20 83       	st	Z, r18
				default: return;
			}
		}
		void
		enableInterrupt(void (* aCallback) (void)) {
			switch(iId) {
    4054:	e0 91 f4 06 	lds	r30, 0x06F4
    4058:	f0 91 f5 06 	lds	r31, 0x06F5
    405c:	20 81       	ld	r18, Z
    405e:	22 30       	cpi	r18, 0x02	; 2
    4060:	99 f0       	breq	.+38     	; 0x4088 <main+0x15c8>
    4062:	18 f4       	brcc	.+6      	; 0x406a <main+0x15aa>
    4064:	21 30       	cpi	r18, 0x01	; 1
    4066:	31 f0       	breq	.+12     	; 0x4074 <main+0x15b4>
    4068:	8b c0       	rjmp	.+278    	; 0x4180 <main+0x16c0>
    406a:	23 30       	cpi	r18, 0x03	; 3
    406c:	b9 f0       	breq	.+46     	; 0x409c <main+0x15dc>
    406e:	24 30       	cpi	r18, 0x04	; 4
    4070:	f9 f0       	breq	.+62     	; 0x40b0 <main+0x15f0>
    4072:	86 c0       	rjmp	.+268    	; 0x4180 <main+0x16c0>
				case iotcTimer0:
					iCallback0 = aCallback; TIMSK |= (1 << OCIE0); break;
    4074:	21 e6       	ldi	r18, 0x61	; 97
    4076:	35 e0       	ldi	r19, 0x05	; 5
    4078:	30 93 e6 06 	sts	0x06E6, r19
    407c:	20 93 e5 06 	sts	0x06E5, r18
    4080:	27 b7       	in	r18, 0x37	; 55
    4082:	22 60       	ori	r18, 0x02	; 2
    4084:	27 bf       	out	0x37, r18	; 55
    4086:	7c c0       	rjmp	.+248    	; 0x4180 <main+0x16c0>
				case iotcTimer1:
					iCallback1 = aCallback; TIMSK |= (1 << OCIE1A); break;
    4088:	21 e6       	ldi	r18, 0x61	; 97
    408a:	35 e0       	ldi	r19, 0x05	; 5
    408c:	30 93 e4 06 	sts	0x06E4, r19
    4090:	20 93 e3 06 	sts	0x06E3, r18
    4094:	27 b7       	in	r18, 0x37	; 55
    4096:	20 61       	ori	r18, 0x10	; 16
    4098:	27 bf       	out	0x37, r18	; 55
    409a:	72 c0       	rjmp	.+228    	; 0x4180 <main+0x16c0>
				case iotcTimer2:
					iCallback2 = aCallback; TIMSK |= (1 << OCIE2); break;
    409c:	21 e6       	ldi	r18, 0x61	; 97
    409e:	35 e0       	ldi	r19, 0x05	; 5
    40a0:	30 93 e2 06 	sts	0x06E2, r19
    40a4:	20 93 e1 06 	sts	0x06E1, r18
    40a8:	27 b7       	in	r18, 0x37	; 55
    40aa:	20 68       	ori	r18, 0x80	; 128
    40ac:	27 bf       	out	0x37, r18	; 55
    40ae:	68 c0       	rjmp	.+208    	; 0x4180 <main+0x16c0>
				case iotcTimer3:
					iCallback3 = aCallback; ETIMSK |= (1 << OCIE3A); break;
    40b0:	21 e6       	ldi	r18, 0x61	; 97
    40b2:	35 e0       	ldi	r19, 0x05	; 5
    40b4:	30 93 e0 06 	sts	0x06E0, r19
    40b8:	20 93 df 06 	sts	0x06DF, r18
    40bc:	ed e7       	ldi	r30, 0x7D	; 125
    40be:	f0 e0       	ldi	r31, 0x00	; 0
    40c0:	20 81       	ld	r18, Z
    40c2:	20 61       	ori	r18, 0x10	; 16
    40c4:	20 83       	st	Z, r18
    40c6:	5c c0       	rjmp	.+184    	; 0x4180 <main+0x16c0>
				FanTimer->configure(iotTimer::iotcPsd64, 250);
				FanTimer->enableInterrupt(toggleFan);
			}
		} else {
			if(n == 0) {
    40c8:	00 97       	sbiw	r24, 0x00	; 0
    40ca:	09 f0       	breq	.+2      	; 0x40ce <main+0x160e>
    40cc:	59 c0       	rjmp	.+178    	; 0x4180 <main+0x16c0>
			}
		}
		void
		configure(iotTimerPsd aPsd, unsigned int aCount) {
			unsigned char	psd = 0;
			if(iId == iotcTimer0) {
    40ce:	e0 91 f4 06 	lds	r30, 0x06F4
    40d2:	f0 91 f5 06 	lds	r31, 0x06F5
					case iotcPsd256: psd = 4; break;
					case iotcPsd1024: psd = 5; break;
					default: return;
				}
			}
			switch(iId) {
    40d6:	20 81       	ld	r18, Z
    40d8:	22 30       	cpi	r18, 0x02	; 2
    40da:	79 f0       	breq	.+30     	; 0x40fa <main+0x163a>
    40dc:	18 f4       	brcc	.+6      	; 0x40e4 <main+0x1624>
    40de:	21 30       	cpi	r18, 0x01	; 1
    40e0:	31 f0       	breq	.+12     	; 0x40ee <main+0x162e>
    40e2:	2d c0       	rjmp	.+90     	; 0x413e <main+0x167e>
    40e4:	23 30       	cpi	r18, 0x03	; 3
    40e6:	a1 f0       	breq	.+40     	; 0x4110 <main+0x1650>
    40e8:	24 30       	cpi	r18, 0x04	; 4
    40ea:	c1 f0       	breq	.+48     	; 0x411c <main+0x165c>
    40ec:	28 c0       	rjmp	.+80     	; 0x413e <main+0x167e>
				case iotcTimer0:
					TCNT0 = 0; OCR0 = aCount & 0xff;
    40ee:	12 be       	out	0x32, r1	; 50
    40f0:	2a ef       	ldi	r18, 0xFA	; 250
    40f2:	21 bf       	out	0x31, r18	; 49
					TCCR0 = (1 << WGM01) | psd;
    40f4:	28 e0       	ldi	r18, 0x08	; 8
    40f6:	23 bf       	out	0x33, r18	; 51
    40f8:	22 c0       	rjmp	.+68     	; 0x413e <main+0x167e>
					break;
				case iotcTimer1:
					TCCR1A = 0; TCCR1B = 0; TCNT1 = 0; OCR1A = aCount;
    40fa:	1f bc       	out	0x2f, r1	; 47
    40fc:	1e bc       	out	0x2e, r1	; 46
    40fe:	1d bc       	out	0x2d, r1	; 45
    4100:	1c bc       	out	0x2c, r1	; 44
    4102:	2a ef       	ldi	r18, 0xFA	; 250
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	3b bd       	out	0x2b, r19	; 43
    4108:	2a bd       	out	0x2a, r18	; 42
					TCCR1B = (1 << WGM12) | psd;
    410a:	28 e0       	ldi	r18, 0x08	; 8
    410c:	2e bd       	out	0x2e, r18	; 46
    410e:	17 c0       	rjmp	.+46     	; 0x413e <main+0x167e>
					break;
				case iotcTimer2:
					TCNT2 = 0; OCR2 = aCount & 0xff;
    4110:	14 bc       	out	0x24, r1	; 36
    4112:	2a ef       	ldi	r18, 0xFA	; 250
    4114:	23 bd       	out	0x23, r18	; 35
					TCCR2 = (1 << WGM21) | psd;
    4116:	28 e0       	ldi	r18, 0x08	; 8
    4118:	25 bd       	out	0x25, r18	; 37
    411a:	11 c0       	rjmp	.+34     	; 0x413e <main+0x167e>
					break;
				case iotcTimer3:
					TCCR3A = 0; TCCR3B = 0; TCNT3 = 0; OCR3A = aCount;
    411c:	10 92 8b 00 	sts	0x008B, r1
    4120:	ea e8       	ldi	r30, 0x8A	; 138
    4122:	f0 e0       	ldi	r31, 0x00	; 0
    4124:	10 82       	st	Z, r1
    4126:	10 92 89 00 	sts	0x0089, r1
    412a:	10 92 88 00 	sts	0x0088, r1
    412e:	2a ef       	ldi	r18, 0xFA	; 250
    4130:	30 e0       	ldi	r19, 0x00	; 0
    4132:	30 93 87 00 	sts	0x0087, r19
    4136:	20 93 86 00 	sts	0x0086, r18
					TCCR3B = (1 << WGM32) | psd;
    413a:	28 e0       	ldi	r18, 0x08	; 8
    413c:	20 83       	st	Z, r18
				default: break;
			}
		}
		void
		disableInterrupt() {
			switch(iId) {
    413e:	e0 91 f4 06 	lds	r30, 0x06F4
    4142:	f0 91 f5 06 	lds	r31, 0x06F5
    4146:	20 81       	ld	r18, Z
    4148:	22 30       	cpi	r18, 0x02	; 2
    414a:	69 f0       	breq	.+26     	; 0x4166 <main+0x16a6>
    414c:	18 f4       	brcc	.+6      	; 0x4154 <main+0x1694>
    414e:	21 30       	cpi	r18, 0x01	; 1
    4150:	31 f0       	breq	.+12     	; 0x415e <main+0x169e>
    4152:	16 c0       	rjmp	.+44     	; 0x4180 <main+0x16c0>
    4154:	23 30       	cpi	r18, 0x03	; 3
    4156:	59 f0       	breq	.+22     	; 0x416e <main+0x16ae>
    4158:	24 30       	cpi	r18, 0x04	; 4
    415a:	69 f0       	breq	.+26     	; 0x4176 <main+0x16b6>
    415c:	11 c0       	rjmp	.+34     	; 0x4180 <main+0x16c0>
				case iotcTimer0: TIMSK &= ~(1 << OCIE0); break;
    415e:	27 b7       	in	r18, 0x37	; 55
    4160:	2d 7f       	andi	r18, 0xFD	; 253
    4162:	27 bf       	out	0x37, r18	; 55
    4164:	0d c0       	rjmp	.+26     	; 0x4180 <main+0x16c0>
				case iotcTimer1: TIMSK &= ~(1 << OCIE1A); break;
    4166:	27 b7       	in	r18, 0x37	; 55
    4168:	2f 7e       	andi	r18, 0xEF	; 239
    416a:	27 bf       	out	0x37, r18	; 55
    416c:	09 c0       	rjmp	.+18     	; 0x4180 <main+0x16c0>
				case iotcTimer2: TIMSK &= ~(1 << OCIE2); break;
    416e:	27 b7       	in	r18, 0x37	; 55
    4170:	2f 77       	andi	r18, 0x7F	; 127
    4172:	27 bf       	out	0x37, r18	; 55
    4174:	05 c0       	rjmp	.+10     	; 0x4180 <main+0x16c0>
				case iotcTimer3: ETIMSK &= ~(1 << OCIE3A); break;
    4176:	ed e7       	ldi	r30, 0x7D	; 125
    4178:	f0 e0       	ldi	r31, 0x00	; 0
    417a:	20 81       	ld	r18, Z
    417c:	2f 7e       	andi	r18, 0xEF	; 239
    417e:	20 83       	st	Z, r18
				FanTimer->configure(iotTimer::iotcPsdNo, 250);
				FanTimer->disableInterrupt();
			}
		}
		FanSpeed = n;
    4180:	90 93 f0 06 	sts	0x06F0, r25
    4184:	80 93 ef 06 	sts	0x06EF, r24
		FanCount = FanSpeed;
    4188:	90 93 f3 06 	sts	0x06F3, r25
    418c:	80 93 f2 06 	sts	0x06F2, r24
		FanState = false;
    4190:	10 92 f1 06 	sts	0x06F1, r1
    4194:	61 c0       	rjmp	.+194    	; 0x4258 <main+0x1798>
	//if(iotDustSensor::parseLine(s)) return;
	
	if(parseFan(s)) return;
	
	if(strncmp(s, "0x", 2) == 0) {
		cli();
    4196:	f8 94       	cli
		IrTrans->sendSamsung(strtoul(s,NULL,16), NumBits);
    4198:	40 e1       	ldi	r20, 0x10	; 16
    419a:	50 e0       	ldi	r21, 0x00	; 0
    419c:	60 e0       	ldi	r22, 0x00	; 0
    419e:	70 e0       	ldi	r23, 0x00	; 0
    41a0:	c3 01       	movw	r24, r6
    41a2:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <strtoul>
    41a6:	ab 01       	movw	r20, r22
    41a8:	bc 01       	movw	r22, r24
    41aa:	20 e2       	ldi	r18, 0x20	; 32
    41ac:	30 e0       	ldi	r19, 0x00	; 0
    41ae:	80 91 f8 06 	lds	r24, 0x06F8
    41b2:	90 91 f9 06 	lds	r25, 0x06F9
    41b6:	0e 94 ce 13 	call	0x279c	; 0x279c <_ZN16iotIrTransmitter11sendSamsungEmi>
		IrRecv->enable();
    41ba:	80 91 fa 06 	lds	r24, 0x06FA
    41be:	90 91 fb 06 	lds	r25, 0x06FB
    41c2:	0e 94 3f 13 	call	0x267e	; 0x267e <_ZN13iotIrReceiver6enableEv>
		sei();
    41c6:	78 94       	sei
		
		//printf("number1\n");
		//switch로 나누기
		CharLcd->print(2, 1, "tx: tv   ");	// 추후에 수정
    41c8:	25 e7       	ldi	r18, 0x75	; 117
    41ca:	33 e0       	ldi	r19, 0x03	; 3
    41cc:	41 e0       	ldi	r20, 0x01	; 1
    41ce:	62 e0       	ldi	r22, 0x02	; 2
    41d0:	80 91 fc 06 	lds	r24, 0x06FC
    41d4:	90 91 fd 06 	lds	r25, 0x06FD
    41d8:	0e 94 b0 0c 	call	0x1960	; 0x1960 <_ZN10iotCharLcd5printEhhPKc>
    41dc:	3d c0       	rjmp	.+122    	; 0x4258 <main+0x1798>
		return;
	}
	
	// 테스트 해보기 위해서
	
	if(strncmp(s, "lcdon", 7) == 0) {
    41de:	47 e0       	ldi	r20, 0x07	; 7
    41e0:	50 e0       	ldi	r21, 0x00	; 0
    41e2:	6f e7       	ldi	r22, 0x7F	; 127
    41e4:	73 e0       	ldi	r23, 0x03	; 3
    41e6:	c3 01       	movw	r24, r6
    41e8:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <strncmp>
    41ec:	89 2b       	or	r24, r25
    41ee:	81 f5       	brne	.+96     	; 0x4250 <main+0x1790>

		if(lcdon) {
    41f0:	80 91 ed 06 	lds	r24, 0x06ED
    41f4:	90 91 ee 06 	lds	r25, 0x06EE
    41f8:	89 2b       	or	r24, r25
    41fa:	a9 f0       	breq	.+42     	; 0x4226 <main+0x1766>
			//CharLcd->print(2, 1, "power off       ");
			iotClock::lcdmode = false;
    41fc:	10 92 06 01 	sts	0x0106, r1
			CharLcd->print(1, 1, "                ");
    4200:	00 91 fc 06 	lds	r16, 0x06FC
    4204:	10 91 fd 06 	lds	r17, 0x06FD
    4208:	25 e2       	ldi	r18, 0x25	; 37
    420a:	32 e0       	ldi	r19, 0x02	; 2
    420c:	41 e0       	ldi	r20, 0x01	; 1
    420e:	61 e0       	ldi	r22, 0x01	; 1
    4210:	c8 01       	movw	r24, r16
    4212:	0e 94 b0 0c 	call	0x1960	; 0x1960 <_ZN10iotCharLcd5printEhhPKc>
			CharLcd->print(2, 1, "                ");
    4216:	25 e2       	ldi	r18, 0x25	; 37
    4218:	32 e0       	ldi	r19, 0x02	; 2
    421a:	41 e0       	ldi	r20, 0x01	; 1
    421c:	62 e0       	ldi	r22, 0x02	; 2
    421e:	c8 01       	movw	r24, r16
    4220:	0e 94 b0 0c 	call	0x1960	; 0x1960 <_ZN10iotCharLcd5printEhhPKc>
    4224:	15 c0       	rjmp	.+42     	; 0x4250 <main+0x1790>
			//iotClock::destroy();
			} else {
			iotClock::lcdmode = true;
    4226:	81 e0       	ldi	r24, 0x01	; 1
    4228:	80 93 06 01 	sts	0x0106, r24
			CharLcd->print(1, 1, "Samsung,Samrt TV");
    422c:	00 91 fc 06 	lds	r16, 0x06FC
    4230:	10 91 fd 06 	lds	r17, 0x06FD
    4234:	27 e4       	ldi	r18, 0x47	; 71
    4236:	32 e0       	ldi	r19, 0x02	; 2
    4238:	41 e0       	ldi	r20, 0x01	; 1
    423a:	61 e0       	ldi	r22, 0x01	; 1
    423c:	c8 01       	movw	r24, r16
    423e:	0e 94 b0 0c 	call	0x1960	; 0x1960 <_ZN10iotCharLcd5printEhhPKc>
			CharLcd->print(2, 1, "power on        ");
    4242:	26 e3       	ldi	r18, 0x36	; 54
    4244:	32 e0       	ldi	r19, 0x02	; 2
    4246:	41 e0       	ldi	r20, 0x01	; 1
    4248:	62 e0       	ldi	r22, 0x02	; 2
    424a:	c8 01       	movw	r24, r16
    424c:	0e 94 b0 0c 	call	0x1960	; 0x1960 <_ZN10iotCharLcd5printEhhPKc>
		}
	}
	
	
	
	printf("unknown\n");
    4250:	85 e8       	ldi	r24, 0x85	; 133
    4252:	93 e0       	ldi	r25, 0x03	; 3
    4254:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <puts>
			iTimer->enableInterrupt(iotIrReceiver::stateMachine);
		}

		iotIrDecoder *
		getDecoder() {
			if(iDecoder->iState == iotcIrStateStop)
    4258:	e0 91 eb 06 	lds	r30, 0x06EB
    425c:	f0 91 ec 06 	lds	r31, 0x06EC
    4260:	81 81       	ldd	r24, Z+1	; 0x01
    4262:	83 30       	cpi	r24, 0x03	; 3
    4264:	09 f0       	breq	.+2      	; 0x4268 <main+0x17a8>
    4266:	9f c7       	rjmp	.+3902   	; 0x51a6 <main+0x26e6>
		// 추가한 부분
		
		
		
		
		if((dec = IrRecv->getDecoder())) {
    4268:	f0 93 f7 06 	sts	0x06F7, r31
    426c:	e0 93 f6 06 	sts	0x06F6, r30
    4270:	30 97       	sbiw	r30, 0x00	; 0
    4272:	11 f4       	brne	.+4      	; 0x4278 <main+0x17b8>
    4274:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <main+0x324>

class iotIrDecoder {
	public:
		iotIrVendor
		decode() {
			if((iState == iotcIrStateStop) &&
    4278:	81 81       	ldd	r24, Z+1	; 0x01
    427a:	83 30       	cpi	r24, 0x03	; 3
    427c:	09 f0       	breq	.+2      	; 0x4280 <main+0x17c0>
    427e:	62 c6       	rjmp	.+3268   	; 0x4f44 <main+0x2484>
		bool
		decodeNec() {
			long	data = 0;
			int		offset = 1;		// skip first space
			// initial mark
			if(!matchMark(iInterval[offset], iotcNecHdrMark))
    4280:	85 81       	ldd	r24, Z+5	; 0x05
    4282:	96 81       	ldd	r25, Z+6	; 0x06

		bool
		matchMark(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs + iotcIrMarkExcess) &&
    4284:	88 58       	subi	r24, 0x88	; 136
    4286:	91 09       	sbc	r25, r1
    4288:	8d 35       	cpi	r24, 0x5D	; 93
    428a:	91 05       	cpc	r25, r1
    428c:	08 f4       	brcc	.+2      	; 0x4290 <main+0x17d0>
    428e:	91 c7       	rjmp	.+3874   	; 0x51b2 <main+0x26f2>
    4290:	e2 c7       	rjmp	.+4036   	; 0x5256 <main+0x2796>
			if(!matchMark(iInterval[offset], iotcNecHdrMark))
				return(false);
			offset++;
			// check for repeat
			if(inIntervals == 4 &&
				matchSpace(iInterval[offset], iotcNecRptSpace) &&
    4292:	87 81       	ldd	r24, Z+7	; 0x07
    4294:	90 85       	ldd	r25, Z+8	; 0x08

		bool
		matchSpace(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs - iotcIrMarkExcess) &&
    4296:	80 97       	sbiw	r24, 0x20	; 32
    4298:	47 97       	sbiw	r24, 0x17	; 23
    429a:	08 f4       	brcc	.+2      	; 0x429e <main+0x17de>
    429c:	8e c7       	rjmp	.+3868   	; 0x51ba <main+0x26fa>
    429e:	a6 c7       	rjmp	.+3916   	; 0x51ec <main+0x272c>
				iVendor = iotcNec;
				return true;
			}
			if(inIntervals < 2 * iotcNecBits + 4) return false;
			// initial space
			if(!matchSpace(iInterval[offset], iotcNecHdrSpace))
    42a0:	87 81       	ldd	r24, Z+7	; 0x07
    42a2:	90 85       	ldd	r25, Z+8	; 0x08

		bool
		matchSpace(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs - iotcIrMarkExcess) &&
    42a4:	82 54       	subi	r24, 0x42	; 66
    42a6:	91 09       	sbc	r25, r1
    42a8:	8e 97       	sbiw	r24, 0x2e	; 46
    42aa:	08 f0       	brcs	.+2      	; 0x42ae <main+0x17ee>
    42ac:	d4 c7       	rjmp	.+4008   	; 0x5256 <main+0x2796>
    42ae:	c1 2c       	mov	r12, r1
    42b0:	d1 2c       	mov	r13, r1
    42b2:	76 01       	movw	r14, r12
    42b4:	23 e0       	ldi	r18, 0x03	; 3
    42b6:	30 e0       	ldi	r19, 0x00	; 0
			// initial space
			if(!matchSpace(iInterval[offset], iotcNecHdrSpace))
				return false;
			offset++;
			for(int i = 0; i < iotcNecBits; i++) {
				if(!matchMark(iInterval[offset], iotcNecBitMark))
    42b8:	a9 01       	movw	r20, r18
    42ba:	44 0f       	add	r20, r20
    42bc:	55 1f       	adc	r21, r21
    42be:	4e 0f       	add	r20, r30
    42c0:	5f 1f       	adc	r21, r31
    42c2:	da 01       	movw	r26, r20
    42c4:	13 96       	adiw	r26, 0x03	; 3
    42c6:	4d 91       	ld	r20, X+
    42c8:	5c 91       	ld	r21, X
    42ca:	14 97       	sbiw	r26, 0x04	; 4

		bool
		matchMark(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs + iotcIrMarkExcess) &&
    42cc:	49 50       	subi	r20, 0x09	; 9
    42ce:	51 09       	sbc	r21, r1
    42d0:	49 30       	cpi	r20, 0x09	; 9
    42d2:	51 05       	cpc	r21, r1
    42d4:	08 f4       	brcc	.+2      	; 0x42d8 <main+0x1818>
    42d6:	8f c7       	rjmp	.+3870   	; 0x51f6 <main+0x2736>
    42d8:	be c7       	rjmp	.+3964   	; 0x5256 <main+0x2796>
				if(matchSpace(iInterval[offset], iotcNecOneSpace))
					data = (data << 1) | 1;
				else if(matchSpace(
					iInterval[offset], iotcNecZeroSpace)) data <<= 1;
				else return false;
				offset++;
    42da:	2e 5f       	subi	r18, 0xFE	; 254
    42dc:	3f 4f       	sbci	r19, 0xFF	; 255
			if(inIntervals < 2 * iotcNecBits + 4) return false;
			// initial space
			if(!matchSpace(iInterval[offset], iotcNecHdrSpace))
				return false;
			offset++;
			for(int i = 0; i < iotcNecBits; i++) {
    42de:	23 34       	cpi	r18, 0x43	; 67
    42e0:	31 05       	cpc	r19, r1
    42e2:	51 f7       	brne	.-44     	; 0x42b8 <main+0x17f8>
					iInterval[offset], iotcNecZeroSpace)) data <<= 1;
				else return false;
				offset++;
			}
			// success
			inBits = iotcNecBits;
    42e4:	40 e2       	ldi	r20, 0x20	; 32
    42e6:	50 e0       	ldi	r21, 0x00	; 0
    42e8:	9f 01       	movw	r18, r30
    42ea:	2d 52       	subi	r18, 0x2D	; 45
    42ec:	3f 4f       	sbci	r19, 0xFF	; 255
    42ee:	d9 01       	movw	r26, r18
    42f0:	4d 93       	st	X+, r20
    42f2:	5c 93       	st	X, r21
			iValue = data;
    42f4:	24 50       	subi	r18, 0x04	; 4
    42f6:	31 09       	sbc	r19, r1
    42f8:	d9 01       	movw	r26, r18
    42fa:	cd 92       	st	X+, r12
    42fc:	dd 92       	st	X+, r13
    42fe:	ed 92       	st	X+, r14
    4300:	fc 92       	st	X, r15
    4302:	13 97       	sbiw	r26, 0x03	; 3
			iVendor = iotcNec;
    4304:	81 e0       	ldi	r24, 0x01	; 1
    4306:	80 83       	st	Z, r24
    4308:	6a c0       	rjmp	.+212    	; 0x43de <main+0x191e>
			// initial mark
				return false;
			offset++;
			if (inIntervals < 2 * iotcLgBits + 1) return false;
			// initial space
			if (!matchSpace(iInterval[offset], iotcLgHdrSpace))
    430a:	87 81       	ldd	r24, Z+7	; 0x07
    430c:	90 85       	ldd	r25, Z+8	; 0x08

		bool
		matchSpace(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs - iotcIrMarkExcess) &&
    430e:	ca 97       	sbiw	r24, 0x3a	; 58
    4310:	89 97       	sbiw	r24, 0x29	; 41
    4312:	08 f0       	brcs	.+2      	; 0x4316 <main+0x1856>
    4314:	f0 c7       	rjmp	.+4064   	; 0x52f6 <main+0x2836>
    4316:	c1 2c       	mov	r12, r1
    4318:	d1 2c       	mov	r13, r1
    431a:	76 01       	movw	r14, r12
    431c:	23 e0       	ldi	r18, 0x03	; 3
    431e:	30 e0       	ldi	r19, 0x00	; 0
			// initial space
			if (!matchSpace(iInterval[offset], iotcLgHdrSpace))
				return false;
			offset++;
			for (int i = 0; i < iotcLgBits; i++) {
				if (!matchMark(iInterval[offset], iotcLgBitMark))
    4320:	a9 01       	movw	r20, r18
    4322:	44 0f       	add	r20, r20
    4324:	55 1f       	adc	r21, r21
    4326:	4e 0f       	add	r20, r30
    4328:	5f 1f       	adc	r21, r31
    432a:	da 01       	movw	r26, r20
    432c:	13 96       	adiw	r26, 0x03	; 3
    432e:	4d 91       	ld	r20, X+
    4330:	5c 91       	ld	r21, X
    4332:	14 97       	sbiw	r26, 0x04	; 4

		bool
		matchMark(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs + iotcIrMarkExcess) &&
    4334:	4a 50       	subi	r20, 0x0A	; 10
    4336:	51 09       	sbc	r21, r1
    4338:	49 30       	cpi	r20, 0x09	; 9
    433a:	51 05       	cpc	r21, r1
    433c:	08 f4       	brcc	.+2      	; 0x4340 <main+0x1880>
    433e:	98 c7       	rjmp	.+3888   	; 0x5270 <main+0x27b0>
    4340:	da c7       	rjmp	.+4020   	; 0x52f6 <main+0x2836>
					data = (data << 1) | 1;
				else if (matchSpace(
					iInterval[offset], iotcLgZeroSpace))
					data <<= 1;
				else return false;
				offset++;
    4342:	2e 5f       	subi	r18, 0xFE	; 254
    4344:	3f 4f       	sbci	r19, 0xFF	; 255
			if (inIntervals < 2 * iotcLgBits + 1) return false;
			// initial space
			if (!matchSpace(iInterval[offset], iotcLgHdrSpace))
				return false;
			offset++;
			for (int i = 0; i < iotcLgBits; i++) {
    4346:	2b 33       	cpi	r18, 0x3B	; 59
    4348:	31 05       	cpc	r19, r1
    434a:	51 f7       	brne	.-44     	; 0x4320 <main+0x1860>
					data <<= 1;
				else return false;
				offset++;
			}
			// stop bit
			if (!matchMark(iInterval[offset], iotcLgBitMark))
    434c:	22 0f       	add	r18, r18
    434e:	33 1f       	adc	r19, r19
    4350:	2e 0f       	add	r18, r30
    4352:	3f 1f       	adc	r19, r31
    4354:	d9 01       	movw	r26, r18
    4356:	13 96       	adiw	r26, 0x03	; 3
    4358:	2d 91       	ld	r18, X+
    435a:	3c 91       	ld	r19, X
    435c:	14 97       	sbiw	r26, 0x04	; 4

		bool
		matchMark(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs + iotcIrMarkExcess) &&
    435e:	2a 50       	subi	r18, 0x0A	; 10
    4360:	31 09       	sbc	r19, r1
    4362:	29 30       	cpi	r18, 0x09	; 9
    4364:	31 05       	cpc	r19, r1
    4366:	08 f4       	brcc	.+2      	; 0x436a <main+0x18aa>
    4368:	b3 c7       	rjmp	.+3942   	; 0x52d0 <main+0x2810>
    436a:	c5 c7       	rjmp	.+3978   	; 0x52f6 <main+0x2836>
			if (!matchMark(iInterval[offset], iotcSamsungHdrMark))
				return false;
			offset++;
			// check for repeat
			if(inIntervals == 4 &&
				matchSpace(iInterval[offset], iotcSamsungRptSpace) &&
    436c:	87 81       	ldd	r24, Z+7	; 0x07
    436e:	90 85       	ldd	r25, Z+8	; 0x08

		bool
		matchSpace(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs - iotcIrMarkExcess) &&
    4370:	80 97       	sbiw	r24, 0x20	; 32
    4372:	47 97       	sbiw	r24, 0x17	; 23
    4374:	08 f4       	brcc	.+2      	; 0x4378 <main+0x18b8>
    4376:	ca c7       	rjmp	.+3988   	; 0x530c <main+0x284c>
    4378:	e2 c7       	rjmp	.+4036   	; 0x533e <main+0x287e>
				iVendor = iotcSamsung;
				return true;
			}
			if (inIntervals < 2 * iotcSamsungBits + 4) return false;
			// initial space
			if (!matchSpace(iInterval[offset], iotcSamsungHdrSpace))
    437a:	87 81       	ldd	r24, Z+7	; 0x07
    437c:	90 85       	ldd	r25, Z+8	; 0x08

		bool
		matchSpace(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs - iotcIrMarkExcess) &&
    437e:	89 54       	subi	r24, 0x49	; 73
    4380:	91 09       	sbc	r25, r1
    4382:	c3 97       	sbiw	r24, 0x33	; 51
    4384:	08 f0       	brcs	.+2      	; 0x4388 <main+0x18c8>
    4386:	de c5       	rjmp	.+3004   	; 0x4f44 <main+0x2484>
    4388:	c1 2c       	mov	r12, r1
    438a:	d1 2c       	mov	r13, r1
    438c:	76 01       	movw	r14, r12
    438e:	23 e0       	ldi	r18, 0x03	; 3
    4390:	30 e0       	ldi	r19, 0x00	; 0
			if (!matchSpace(iInterval[offset], iotcSamsungHdrSpace))
				return false;
			offset++;
			for (int i = 0; i < iotcSamsungBits; i++) {
				if (!matchMark(
					iInterval[offset], iotcSamsungBitMark))
    4392:	a9 01       	movw	r20, r18
    4394:	44 0f       	add	r20, r20
    4396:	55 1f       	adc	r21, r21
    4398:	4e 0f       	add	r20, r30
    439a:	5f 1f       	adc	r21, r31
    439c:	da 01       	movw	r26, r20
    439e:	13 96       	adiw	r26, 0x03	; 3
    43a0:	4d 91       	ld	r20, X+
    43a2:	5c 91       	ld	r21, X
    43a4:	14 97       	sbiw	r26, 0x04	; 4

		bool
		matchMark(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs + iotcIrMarkExcess) &&
    43a6:	49 50       	subi	r20, 0x09	; 9
    43a8:	51 09       	sbc	r21, r1
    43aa:	49 30       	cpi	r20, 0x09	; 9
    43ac:	51 05       	cpc	r21, r1
    43ae:	08 f4       	brcc	.+2      	; 0x43b2 <main+0x18f2>
    43b0:	cb c7       	rjmp	.+3990   	; 0x5348 <main+0x2888>
    43b2:	c8 c5       	rjmp	.+2960   	; 0x4f44 <main+0x2484>
					data = (data << 1) | 1;
				else if (matchSpace(
					iInterval[offset], iotcSamsungZeroSpace))
					data <<= 1;
				else return false;
				offset++;
    43b4:	2e 5f       	subi	r18, 0xFE	; 254
    43b6:	3f 4f       	sbci	r19, 0xFF	; 255
			if (inIntervals < 2 * iotcSamsungBits + 4) return false;
			// initial space
			if (!matchSpace(iInterval[offset], iotcSamsungHdrSpace))
				return false;
			offset++;
			for (int i = 0; i < iotcSamsungBits; i++) {
    43b8:	23 34       	cpi	r18, 0x43	; 67
    43ba:	31 05       	cpc	r19, r1
    43bc:	51 f7       	brne	.-44     	; 0x4392 <main+0x18d2>
					data <<= 1;
				else return false;
				offset++;
			}
			// stop bit
			if (!matchMark(iInterval[offset], iotcLgBitMark))
    43be:	22 0f       	add	r18, r18
    43c0:	33 1f       	adc	r19, r19
    43c2:	2e 0f       	add	r18, r30
    43c4:	3f 1f       	adc	r19, r31
    43c6:	d9 01       	movw	r26, r18
    43c8:	13 96       	adiw	r26, 0x03	; 3
    43ca:	2d 91       	ld	r18, X+
    43cc:	3c 91       	ld	r19, X
    43ce:	14 97       	sbiw	r26, 0x04	; 4

		bool
		matchMark(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs + iotcIrMarkExcess) &&
    43d0:	2a 50       	subi	r18, 0x0A	; 10
    43d2:	31 09       	sbc	r19, r1
    43d4:	29 30       	cpi	r18, 0x09	; 9
    43d6:	31 05       	cpc	r19, r1
    43d8:	08 f4       	brcc	.+2      	; 0x43dc <main+0x191c>
    43da:	e7 c7       	rjmp	.+4046   	; 0x53aa <main+0x28ea>
    43dc:	b3 c5       	rjmp	.+2918   	; 0x4f44 <main+0x2484>
			if(dec->decode() != iotcUnknown) {
    43de:	80 81       	ld	r24, Z
    43e0:	88 23       	and	r24, r24
    43e2:	09 f4       	brne	.+2      	; 0x43e6 <main+0x1926>
    43e4:	af c5       	rjmp	.+2910   	; 0x4f44 <main+0x2484>
				printf("%d: 0x%lx(%d)\n\r",
					dec->getVendor(), dec->getValue(), dec->getBits()); // 11: 0x001010(32)
    43e6:	a0 91 f6 06 	lds	r26, 0x06F6
    43ea:	b0 91 f7 06 	lds	r27, 0x06F7
				return(iVendor);
			return (iotcUnknown);
		}
		iotIrVendor		getVendor()	{ return(iVendor); }
		unsigned long	getValue()	{ return(iValue); }
		int				getBits()	{ return(inBits); }
    43ee:	fd 01       	movw	r30, r26
    43f0:	ed 52       	subi	r30, 0x2D	; 45
    43f2:	ff 4f       	sbci	r31, 0xFF	; 255
    43f4:	81 81       	ldd	r24, Z+1	; 0x01
    43f6:	8f 93       	push	r24
    43f8:	80 81       	ld	r24, Z
    43fa:	8f 93       	push	r24
				decodeLg() || decodeSamsung()))
				return(iVendor);
			return (iotcUnknown);
		}
		iotIrVendor		getVendor()	{ return(iVendor); }
		unsigned long	getValue()	{ return(iValue); }
    43fc:	34 97       	sbiw	r30, 0x04	; 4
    43fe:	83 81       	ldd	r24, Z+3	; 0x03
    4400:	8f 93       	push	r24
    4402:	82 81       	ldd	r24, Z+2	; 0x02
    4404:	8f 93       	push	r24
    4406:	81 81       	ldd	r24, Z+1	; 0x01
    4408:	8f 93       	push	r24
    440a:	80 81       	ld	r24, Z
    440c:	8f 93       	push	r24
    440e:	8c 91       	ld	r24, X
    4410:	1f 92       	push	r1
    4412:	8f 93       	push	r24
    4414:	8d e8       	ldi	r24, 0x8D	; 141
    4416:	93 e0       	ldi	r25, 0x03	; 3
    4418:	9f 93       	push	r25
    441a:	8f 93       	push	r24
    441c:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <printf>
				if(dec->getVendor() == iotcSamsung) { //&& (NumKeys < MaxKeys)
    4420:	e0 91 f6 06 	lds	r30, 0x06F6
    4424:	f0 91 f7 06 	lds	r31, 0x06F7
    4428:	0f b6       	in	r0, 0x3f	; 63
    442a:	f8 94       	cli
    442c:	de bf       	out	0x3e, r29	; 62
    442e:	0f be       	out	0x3f, r0	; 63
    4430:	cd bf       	out	0x3d, r28	; 61
    4432:	80 81       	ld	r24, Z
    4434:	8b 30       	cpi	r24, 0x0B	; 11
    4436:	09 f0       	breq	.+2      	; 0x443a <main+0x197a>
    4438:	c2 c5       	rjmp	.+2948   	; 0x4fbe <main+0x24fe>
    443a:	e1 53       	subi	r30, 0x31	; 49
    443c:	ff 4f       	sbci	r31, 0xFF	; 255
						
						printf("number1\n"); // 명령어 처주면 될듯
						CharLcd->print(2, 1, "rx : number1");
					}*/
					
					switch(dec->getValue()) {
    443e:	80 81       	ld	r24, Z
    4440:	91 81       	ldd	r25, Z+1	; 0x01
    4442:	a2 81       	ldd	r26, Z+2	; 0x02
    4444:	b3 81       	ldd	r27, Z+3	; 0x03
    4446:	8f 39       	cpi	r24, 0x9F	; 159
    4448:	30 e6       	ldi	r19, 0x60	; 96
    444a:	93 07       	cpc	r25, r19
    444c:	30 ee       	ldi	r19, 0xE0	; 224
    444e:	a3 07       	cpc	r26, r19
    4450:	b3 07       	cpc	r27, r19
    4452:	09 f4       	brne	.+2      	; 0x4456 <main+0x1996>
    4454:	00 c1       	rjmp	.+512    	; 0x4656 <main+0x1b96>
    4456:	b8 f5       	brcc	.+110    	; 0x44c6 <main+0x1a06>
    4458:	8f 3c       	cpi	r24, 0xCF	; 207
    445a:	50 e3       	ldi	r21, 0x30	; 48
    445c:	95 07       	cpc	r25, r21
    445e:	50 ee       	ldi	r21, 0xE0	; 224
    4460:	a5 07       	cpc	r26, r21
    4462:	b5 07       	cpc	r27, r21
    4464:	09 f4       	brne	.+2      	; 0x4468 <main+0x19a8>
    4466:	17 c2       	rjmp	.+1070   	; 0x4896 <main+0x1dd6>
    4468:	b8 f4       	brcc	.+46     	; 0x4498 <main+0x19d8>
    446a:	8f 3e       	cpi	r24, 0xEF	; 239
    446c:	f0 e1       	ldi	r31, 0x10	; 16
    446e:	9f 07       	cpc	r25, r31
    4470:	f0 ee       	ldi	r31, 0xE0	; 224
    4472:	af 07       	cpc	r26, r31
    4474:	bf 07       	cpc	r27, r31
    4476:	09 f4       	brne	.+2      	; 0x447a <main+0x19ba>
    4478:	37 c1       	rjmp	.+622    	; 0x46e8 <main+0x1c28>
    447a:	8f 3d       	cpi	r24, 0xDF	; 223
    447c:	20 e2       	ldi	r18, 0x20	; 32
    447e:	92 07       	cpc	r25, r18
    4480:	20 ee       	ldi	r18, 0xE0	; 224
    4482:	a2 07       	cpc	r26, r18
    4484:	b2 07       	cpc	r27, r18
    4486:	09 f4       	brne	.+2      	; 0x448a <main+0x19ca>
    4488:	54 c0       	rjmp	.+168    	; 0x4532 <main+0x1a72>
    448a:	87 3f       	cpi	r24, 0xF7	; 247
    448c:	98 40       	sbci	r25, 0x08	; 8
    448e:	a0 4e       	sbci	r26, 0xE0	; 224
    4490:	b0 4e       	sbci	r27, 0xE0	; 224
    4492:	09 f0       	breq	.+2      	; 0x4496 <main+0x19d6>
    4494:	94 c5       	rjmp	.+2856   	; 0x4fbe <main+0x24fe>
    4496:	f0 c3       	rjmp	.+2016   	; 0x4c78 <main+0x21b8>
    4498:	87 3b       	cpi	r24, 0xB7	; 183
    449a:	48 e4       	ldi	r20, 0x48	; 72
    449c:	94 07       	cpc	r25, r20
    449e:	40 ee       	ldi	r20, 0xE0	; 224
    44a0:	a4 07       	cpc	r26, r20
    44a2:	b4 07       	cpc	r27, r20
    44a4:	09 f4       	brne	.+2      	; 0x44a8 <main+0x19e8>
    44a6:	a1 c3       	rjmp	.+1858   	; 0x4bea <main+0x212a>
    44a8:	8f 3a       	cpi	r24, 0xAF	; 175
    44aa:	50 e5       	ldi	r21, 0x50	; 80
    44ac:	95 07       	cpc	r25, r21
    44ae:	50 ee       	ldi	r21, 0xE0	; 224
    44b0:	a5 07       	cpc	r26, r21
    44b2:	b5 07       	cpc	r27, r21
    44b4:	09 f4       	brne	.+2      	; 0x44b8 <main+0x19f8>
    44b6:	a8 c1       	rjmp	.+848    	; 0x4808 <main+0x1d48>
    44b8:	8c 3b       	cpi	r24, 0xBC	; 188
    44ba:	90 44       	sbci	r25, 0x40	; 64
    44bc:	a0 4e       	sbci	r26, 0xE0	; 224
    44be:	b0 4e       	sbci	r27, 0xE0	; 224
    44c0:	09 f0       	breq	.+2      	; 0x44c4 <main+0x1a04>
    44c2:	7d c5       	rjmp	.+2810   	; 0x4fbe <main+0x24fe>
    44c4:	20 c4       	rjmp	.+2112   	; 0x4d06 <main+0x2246>
    44c6:	8f 35       	cpi	r24, 0x5F	; 95
    44c8:	f0 ea       	ldi	r31, 0xA0	; 160
    44ca:	9f 07       	cpc	r25, r31
    44cc:	f0 ee       	ldi	r31, 0xE0	; 224
    44ce:	af 07       	cpc	r26, r31
    44d0:	bf 07       	cpc	r27, r31
    44d2:	09 f4       	brne	.+2      	; 0x44d6 <main+0x1a16>
    44d4:	77 c0       	rjmp	.+238    	; 0x45c4 <main+0x1b04>
    44d6:	b8 f4       	brcc	.+46     	; 0x4506 <main+0x1a46>
    44d8:	87 37       	cpi	r24, 0x77	; 119
    44da:	38 e8       	ldi	r19, 0x88	; 136
    44dc:	93 07       	cpc	r25, r19
    44de:	30 ee       	ldi	r19, 0xE0	; 224
    44e0:	a3 07       	cpc	r26, r19
    44e2:	b3 07       	cpc	r27, r19
    44e4:	09 f4       	brne	.+2      	; 0x44e8 <main+0x1a28>
    44e6:	ac c2       	rjmp	.+1368   	; 0x4a40 <main+0x1f80>
    44e8:	8f 36       	cpi	r24, 0x6F	; 111
    44ea:	40 e9       	ldi	r20, 0x90	; 144
    44ec:	94 07       	cpc	r25, r20
    44ee:	40 ee       	ldi	r20, 0xE0	; 224
    44f0:	a4 07       	cpc	r26, r20
    44f2:	b4 07       	cpc	r27, r20
    44f4:	09 f4       	brne	.+2      	; 0x44f8 <main+0x1a38>
    44f6:	41 c1       	rjmp	.+642    	; 0x477a <main+0x1cba>
    44f8:	8f 38       	cpi	r24, 0x8F	; 143
    44fa:	90 47       	sbci	r25, 0x70	; 112
    44fc:	a0 4e       	sbci	r26, 0xE0	; 224
    44fe:	b0 4e       	sbci	r27, 0xE0	; 224
    4500:	09 f0       	breq	.+2      	; 0x4504 <main+0x1a44>
    4502:	5d c5       	rjmp	.+2746   	; 0x4fbe <main+0x24fe>
    4504:	56 c2       	rjmp	.+1196   	; 0x49b2 <main+0x1ef2>
    4506:	8f 32       	cpi	r24, 0x2F	; 47
    4508:	e0 ed       	ldi	r30, 0xD0	; 208
    450a:	9e 07       	cpc	r25, r30
    450c:	e0 ee       	ldi	r30, 0xE0	; 224
    450e:	ae 07       	cpc	r26, r30
    4510:	be 07       	cpc	r27, r30
    4512:	09 f4       	brne	.+2      	; 0x4516 <main+0x1a56>
    4514:	23 c3       	rjmp	.+1606   	; 0x4b5c <main+0x209c>
    4516:	8f 31       	cpi	r24, 0x1F	; 31
    4518:	f0 ee       	ldi	r31, 0xE0	; 224
    451a:	9f 07       	cpc	r25, r31
    451c:	af 07       	cpc	r26, r31
    451e:	bf 07       	cpc	r27, r31
    4520:	09 f4       	brne	.+2      	; 0x4524 <main+0x1a64>
    4522:	d5 c2       	rjmp	.+1450   	; 0x4ace <main+0x200e>
    4524:	8f 34       	cpi	r24, 0x4F	; 79
    4526:	90 4b       	sbci	r25, 0xB0	; 176
    4528:	a0 4e       	sbci	r26, 0xE0	; 224
    452a:	b0 4e       	sbci	r27, 0xE0	; 224
    452c:	09 f0       	breq	.+2      	; 0x4530 <main+0x1a70>
    452e:	47 c5       	rjmp	.+2702   	; 0x4fbe <main+0x24fe>
    4530:	f9 c1       	rjmp	.+1010   	; 0x4924 <main+0x1e64>
						case 0xe0e020df:
							CharLcd->print(2, 1, "rx : number1    ");
    4532:	20 91 fc 06 	lds	r18, 0x06FC
    4536:	30 91 fd 06 	lds	r19, 0x06FD
    453a:	0f 2e       	mov	r0, r31
    453c:	f3 e0       	ldi	r31, 0x03	; 3
    453e:	ef 2e       	mov	r14, r31
    4540:	f2 e0       	ldi	r31, 0x02	; 2
    4542:	ff 2e       	mov	r15, r31
    4544:	f0 2d       	mov	r31, r0
    4546:	aa 24       	eor	r10, r10
    4548:	a3 94       	inc	r10
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    454a:	f9 01       	movw	r30, r18
    454c:	e4 5d       	subi	r30, 0xD4	; 212
    454e:	fe 4f       	sbci	r31, 0xFE	; 254
    4550:	69 01       	movw	r12, r18
    4552:	43 ed       	ldi	r20, 0xD3	; 211
    4554:	c4 1a       	sub	r12, r20
    4556:	4e ef       	ldi	r20, 0xFE	; 254
    4558:	d4 0a       	sbc	r13, r20
    455a:	04 e6       	ldi	r16, 0x64	; 100
    455c:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    455e:	42 e0       	ldi	r20, 0x02	; 2
    4560:	2b c0       	rjmp	.+86     	; 0x45b8 <main+0x1af8>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4562:	bb 24       	eor	r11, r11
    4564:	b3 94       	inc	r11
    4566:	ba 0c       	add	r11, r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4568:	80 81       	ld	r24, Z
    456a:	d6 01       	movw	r26, r12
    456c:	8c 90       	ld	r8, X
    456e:	90 e0       	ldi	r25, 0x00	; 0
    4570:	01 96       	adiw	r24, 0x01	; 1
    4572:	b8 01       	movw	r22, r16
    4574:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <__divmodhi4>
    4578:	68 2d       	mov	r22, r8
    457a:	70 e0       	ldi	r23, 0x00	; 0
    457c:	86 17       	cp	r24, r22
    457e:	97 07       	cpc	r25, r23
    4580:	d1 f0       	breq	.+52     	; 0x45b6 <main+0x1af6>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    4582:	80 81       	ld	r24, Z
    4584:	90 e0       	ldi	r25, 0x00	; 0
    4586:	bc 01       	movw	r22, r24
    4588:	66 0f       	add	r22, r22
    458a:	77 1f       	adc	r23, r23
    458c:	86 0f       	add	r24, r22
    458e:	97 1f       	adc	r25, r23
    4590:	d9 01       	movw	r26, r18
    4592:	a8 0f       	add	r26, r24
    4594:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    4596:	ac 92       	st	X, r10
    4598:	11 96       	adiw	r26, 0x01	; 1
    459a:	4c 93       	st	X, r20
    459c:	11 97       	sbiw	r26, 0x01	; 1
    459e:	12 96       	adiw	r26, 0x02	; 2
    45a0:	9c 92       	st	X, r9

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    45a2:	af b6       	in	r10, 0x3f	; 63
    45a4:	f8 94       	cli
    45a6:	80 81       	ld	r24, Z
    45a8:	90 e0       	ldi	r25, 0x00	; 0
    45aa:	01 96       	adiw	r24, 0x01	; 1
    45ac:	b8 01       	movw	r22, r16
    45ae:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <__divmodhi4>
    45b2:	80 83       	st	Z, r24
    45b4:	af be       	out	0x3f, r10	; 63

		bool
		matchSpace(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs - iotcIrMarkExcess) &&
    45b6:	ab 2c       	mov	r10, r11
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    45b8:	d7 01       	movw	r26, r14
    45ba:	9d 90       	ld	r9, X+
    45bc:	7d 01       	movw	r14, r26
    45be:	91 10       	cpse	r9, r1
    45c0:	d0 cf       	rjmp	.-96     	; 0x4562 <main+0x1aa2>
    45c2:	fd c4       	rjmp	.+2554   	; 0x4fbe <main+0x24fe>
							break;
						case 0xe0e0a05f:
							CharLcd->print(2, 1, "rx : number2    ");
    45c4:	20 91 fc 06 	lds	r18, 0x06FC
    45c8:	30 91 fd 06 	lds	r19, 0x06FD
    45cc:	0f 2e       	mov	r0, r31
    45ce:	fe eb       	ldi	r31, 0xBE	; 190
    45d0:	ef 2e       	mov	r14, r31
    45d2:	f2 e0       	ldi	r31, 0x02	; 2
    45d4:	ff 2e       	mov	r15, r31
    45d6:	f0 2d       	mov	r31, r0
    45d8:	aa 24       	eor	r10, r10
    45da:	a3 94       	inc	r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    45dc:	f9 01       	movw	r30, r18
    45de:	e4 5d       	subi	r30, 0xD4	; 212
    45e0:	fe 4f       	sbci	r31, 0xFE	; 254
    45e2:	69 01       	movw	r12, r18
    45e4:	b3 ed       	ldi	r27, 0xD3	; 211
    45e6:	cb 1a       	sub	r12, r27
    45e8:	be ef       	ldi	r27, 0xFE	; 254
    45ea:	db 0a       	sbc	r13, r27
    45ec:	04 e6       	ldi	r16, 0x64	; 100
    45ee:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    45f0:	42 e0       	ldi	r20, 0x02	; 2
    45f2:	2b c0       	rjmp	.+86     	; 0x464a <main+0x1b8a>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    45f4:	bb 24       	eor	r11, r11
    45f6:	b3 94       	inc	r11
    45f8:	ba 0c       	add	r11, r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    45fa:	80 81       	ld	r24, Z
    45fc:	d6 01       	movw	r26, r12
    45fe:	8c 90       	ld	r8, X
    4600:	90 e0       	ldi	r25, 0x00	; 0
    4602:	01 96       	adiw	r24, 0x01	; 1
    4604:	b8 01       	movw	r22, r16
    4606:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <__divmodhi4>
    460a:	68 2d       	mov	r22, r8
    460c:	70 e0       	ldi	r23, 0x00	; 0
    460e:	86 17       	cp	r24, r22
    4610:	97 07       	cpc	r25, r23
    4612:	d1 f0       	breq	.+52     	; 0x4648 <main+0x1b88>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    4614:	80 81       	ld	r24, Z
    4616:	90 e0       	ldi	r25, 0x00	; 0
    4618:	bc 01       	movw	r22, r24
    461a:	66 0f       	add	r22, r22
    461c:	77 1f       	adc	r23, r23
    461e:	86 0f       	add	r24, r22
    4620:	97 1f       	adc	r25, r23
    4622:	d9 01       	movw	r26, r18
    4624:	a8 0f       	add	r26, r24
    4626:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    4628:	ac 92       	st	X, r10
    462a:	11 96       	adiw	r26, 0x01	; 1
    462c:	4c 93       	st	X, r20
    462e:	11 97       	sbiw	r26, 0x01	; 1
    4630:	12 96       	adiw	r26, 0x02	; 2
    4632:	9c 92       	st	X, r9

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    4634:	af b6       	in	r10, 0x3f	; 63
    4636:	f8 94       	cli
    4638:	80 81       	ld	r24, Z
    463a:	90 e0       	ldi	r25, 0x00	; 0
    463c:	01 96       	adiw	r24, 0x01	; 1
    463e:	b8 01       	movw	r22, r16
    4640:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <__divmodhi4>
    4644:	80 83       	st	Z, r24
    4646:	af be       	out	0x3f, r10	; 63
						CharLcd->print(2, 1, "rx : number1");
					}*/
					
					switch(dec->getValue()) {
						case 0xe0e020df:
							CharLcd->print(2, 1, "rx : number1    ");
    4648:	ab 2c       	mov	r10, r11
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    464a:	d7 01       	movw	r26, r14
    464c:	9d 90       	ld	r9, X+
    464e:	7d 01       	movw	r14, r26
    4650:	91 10       	cpse	r9, r1
    4652:	d0 cf       	rjmp	.-96     	; 0x45f4 <main+0x1b34>
    4654:	b4 c4       	rjmp	.+2408   	; 0x4fbe <main+0x24fe>
							break;
						case 0xe0e0a05f:
							CharLcd->print(2, 1, "rx : number2    ");
							break;
						case 0xe0e0609f:
							CharLcd->print(2, 1, "rx : number3    ");
    4656:	20 91 fc 06 	lds	r18, 0x06FC
    465a:	30 91 fd 06 	lds	r19, 0x06FD
    465e:	0f 2e       	mov	r0, r31
    4660:	fa e7       	ldi	r31, 0x7A	; 122
    4662:	ef 2e       	mov	r14, r31
    4664:	f2 e0       	ldi	r31, 0x02	; 2
    4666:	ff 2e       	mov	r15, r31
    4668:	f0 2d       	mov	r31, r0
    466a:	aa 24       	eor	r10, r10
    466c:	a3 94       	inc	r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    466e:	f9 01       	movw	r30, r18
    4670:	e4 5d       	subi	r30, 0xD4	; 212
    4672:	fe 4f       	sbci	r31, 0xFE	; 254
    4674:	69 01       	movw	r12, r18
    4676:	b3 ed       	ldi	r27, 0xD3	; 211
    4678:	cb 1a       	sub	r12, r27
    467a:	be ef       	ldi	r27, 0xFE	; 254
    467c:	db 0a       	sbc	r13, r27
    467e:	04 e6       	ldi	r16, 0x64	; 100
    4680:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    4682:	42 e0       	ldi	r20, 0x02	; 2
    4684:	2b c0       	rjmp	.+86     	; 0x46dc <main+0x1c1c>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4686:	bb 24       	eor	r11, r11
    4688:	b3 94       	inc	r11
    468a:	ba 0c       	add	r11, r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    468c:	80 81       	ld	r24, Z
    468e:	d6 01       	movw	r26, r12
    4690:	8c 90       	ld	r8, X
    4692:	90 e0       	ldi	r25, 0x00	; 0
    4694:	01 96       	adiw	r24, 0x01	; 1
    4696:	b8 01       	movw	r22, r16
    4698:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <__divmodhi4>
    469c:	68 2d       	mov	r22, r8
    469e:	70 e0       	ldi	r23, 0x00	; 0
    46a0:	86 17       	cp	r24, r22
    46a2:	97 07       	cpc	r25, r23
    46a4:	d1 f0       	breq	.+52     	; 0x46da <main+0x1c1a>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    46a6:	80 81       	ld	r24, Z
    46a8:	90 e0       	ldi	r25, 0x00	; 0
    46aa:	bc 01       	movw	r22, r24
    46ac:	66 0f       	add	r22, r22
    46ae:	77 1f       	adc	r23, r23
    46b0:	86 0f       	add	r24, r22
    46b2:	97 1f       	adc	r25, r23
    46b4:	d9 01       	movw	r26, r18
    46b6:	a8 0f       	add	r26, r24
    46b8:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    46ba:	ac 92       	st	X, r10
    46bc:	11 96       	adiw	r26, 0x01	; 1
    46be:	4c 93       	st	X, r20
    46c0:	11 97       	sbiw	r26, 0x01	; 1
    46c2:	12 96       	adiw	r26, 0x02	; 2
    46c4:	9c 92       	st	X, r9

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    46c6:	af b6       	in	r10, 0x3f	; 63
    46c8:	f8 94       	cli
    46ca:	80 81       	ld	r24, Z
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	01 96       	adiw	r24, 0x01	; 1
    46d0:	b8 01       	movw	r22, r16
    46d2:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <__divmodhi4>
    46d6:	80 83       	st	Z, r24
    46d8:	af be       	out	0x3f, r10	; 63
					switch(dec->getValue()) {
						case 0xe0e020df:
							CharLcd->print(2, 1, "rx : number1    ");
							break;
						case 0xe0e0a05f:
							CharLcd->print(2, 1, "rx : number2    ");
    46da:	ab 2c       	mov	r10, r11
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    46dc:	d7 01       	movw	r26, r14
    46de:	9d 90       	ld	r9, X+
    46e0:	7d 01       	movw	r14, r26
    46e2:	91 10       	cpse	r9, r1
    46e4:	d0 cf       	rjmp	.-96     	; 0x4686 <main+0x1bc6>
    46e6:	6b c4       	rjmp	.+2262   	; 0x4fbe <main+0x24fe>
							break;
						case 0xe0e0609f:
							CharLcd->print(2, 1, "rx : number3    ");
							break;
						case 0xe0e010ef:
							CharLcd->print(2, 1, "rx : number4    ");
    46e8:	20 91 fc 06 	lds	r18, 0x06FC
    46ec:	30 91 fd 06 	lds	r19, 0x06FD
    46f0:	0f 2e       	mov	r0, r31
    46f2:	f2 ef       	ldi	r31, 0xF2	; 242
    46f4:	ef 2e       	mov	r14, r31
    46f6:	f1 e0       	ldi	r31, 0x01	; 1
    46f8:	ff 2e       	mov	r15, r31
    46fa:	f0 2d       	mov	r31, r0
    46fc:	aa 24       	eor	r10, r10
    46fe:	a3 94       	inc	r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4700:	f9 01       	movw	r30, r18
    4702:	e4 5d       	subi	r30, 0xD4	; 212
    4704:	fe 4f       	sbci	r31, 0xFE	; 254
    4706:	69 01       	movw	r12, r18
    4708:	b3 ed       	ldi	r27, 0xD3	; 211
    470a:	cb 1a       	sub	r12, r27
    470c:	be ef       	ldi	r27, 0xFE	; 254
    470e:	db 0a       	sbc	r13, r27
    4710:	04 e6       	ldi	r16, 0x64	; 100
    4712:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    4714:	42 e0       	ldi	r20, 0x02	; 2
    4716:	2b c0       	rjmp	.+86     	; 0x476e <main+0x1cae>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4718:	bb 24       	eor	r11, r11
    471a:	b3 94       	inc	r11
    471c:	ba 0c       	add	r11, r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    471e:	80 81       	ld	r24, Z
    4720:	d6 01       	movw	r26, r12
    4722:	8c 90       	ld	r8, X
    4724:	90 e0       	ldi	r25, 0x00	; 0
    4726:	01 96       	adiw	r24, 0x01	; 1
    4728:	b8 01       	movw	r22, r16
    472a:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <__divmodhi4>
    472e:	68 2d       	mov	r22, r8
    4730:	70 e0       	ldi	r23, 0x00	; 0
    4732:	86 17       	cp	r24, r22
    4734:	97 07       	cpc	r25, r23
    4736:	d1 f0       	breq	.+52     	; 0x476c <main+0x1cac>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    4738:	80 81       	ld	r24, Z
    473a:	90 e0       	ldi	r25, 0x00	; 0
    473c:	bc 01       	movw	r22, r24
    473e:	66 0f       	add	r22, r22
    4740:	77 1f       	adc	r23, r23
    4742:	86 0f       	add	r24, r22
    4744:	97 1f       	adc	r25, r23
    4746:	d9 01       	movw	r26, r18
    4748:	a8 0f       	add	r26, r24
    474a:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    474c:	ac 92       	st	X, r10
    474e:	11 96       	adiw	r26, 0x01	; 1
    4750:	4c 93       	st	X, r20
    4752:	11 97       	sbiw	r26, 0x01	; 1
    4754:	12 96       	adiw	r26, 0x02	; 2
    4756:	9c 92       	st	X, r9

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    4758:	af b6       	in	r10, 0x3f	; 63
    475a:	f8 94       	cli
    475c:	80 81       	ld	r24, Z
    475e:	90 e0       	ldi	r25, 0x00	; 0
    4760:	01 96       	adiw	r24, 0x01	; 1
    4762:	b8 01       	movw	r22, r16
    4764:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <__divmodhi4>
    4768:	80 83       	st	Z, r24
    476a:	af be       	out	0x3f, r10	; 63
							break;
						case 0xe0e0a05f:
							CharLcd->print(2, 1, "rx : number2    ");
							break;
						case 0xe0e0609f:
							CharLcd->print(2, 1, "rx : number3    ");
    476c:	ab 2c       	mov	r10, r11
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    476e:	d7 01       	movw	r26, r14
    4770:	9d 90       	ld	r9, X+
    4772:	7d 01       	movw	r14, r26
    4774:	91 10       	cpse	r9, r1
    4776:	d0 cf       	rjmp	.-96     	; 0x4718 <main+0x1c58>
    4778:	22 c4       	rjmp	.+2116   	; 0x4fbe <main+0x24fe>
							break;
						case 0xe0e010ef:
							CharLcd->print(2, 1, "rx : number4    ");
							break;
						case 0xe0e0906f:
							CharLcd->print(2, 1, "rx : number5    ");
    477a:	20 91 fc 06 	lds	r18, 0x06FC
    477e:	30 91 fd 06 	lds	r19, 0x06FD
    4782:	0f 2e       	mov	r0, r31
    4784:	fd ea       	ldi	r31, 0xAD	; 173
    4786:	ef 2e       	mov	r14, r31
    4788:	f2 e0       	ldi	r31, 0x02	; 2
    478a:	ff 2e       	mov	r15, r31
    478c:	f0 2d       	mov	r31, r0
    478e:	aa 24       	eor	r10, r10
    4790:	a3 94       	inc	r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4792:	f9 01       	movw	r30, r18
    4794:	e4 5d       	subi	r30, 0xD4	; 212
    4796:	fe 4f       	sbci	r31, 0xFE	; 254
    4798:	69 01       	movw	r12, r18
    479a:	b3 ed       	ldi	r27, 0xD3	; 211
    479c:	cb 1a       	sub	r12, r27
    479e:	be ef       	ldi	r27, 0xFE	; 254
    47a0:	db 0a       	sbc	r13, r27
    47a2:	04 e6       	ldi	r16, 0x64	; 100
    47a4:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    47a6:	42 e0       	ldi	r20, 0x02	; 2
    47a8:	29 c0       	rjmp	.+82     	; 0x47fc <main+0x1d3c>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    47aa:	bb 24       	eor	r11, r11
    47ac:	b3 94       	inc	r11
    47ae:	ba 0c       	add	r11, r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    47b0:	80 81       	ld	r24, Z
    47b2:	d6 01       	movw	r26, r12
    47b4:	8c 90       	ld	r8, X
    47b6:	90 e0       	ldi	r25, 0x00	; 0
    47b8:	01 96       	adiw	r24, 0x01	; 1
    47ba:	b8 01       	movw	r22, r16
    47bc:	f7 d7       	rcall	.+4078   	; 0x57ac <__divmodhi4>
    47be:	68 2d       	mov	r22, r8
    47c0:	70 e0       	ldi	r23, 0x00	; 0
    47c2:	86 17       	cp	r24, r22
    47c4:	97 07       	cpc	r25, r23
    47c6:	c9 f0       	breq	.+50     	; 0x47fa <main+0x1d3a>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    47c8:	80 81       	ld	r24, Z
    47ca:	90 e0       	ldi	r25, 0x00	; 0
    47cc:	bc 01       	movw	r22, r24
    47ce:	66 0f       	add	r22, r22
    47d0:	77 1f       	adc	r23, r23
    47d2:	86 0f       	add	r24, r22
    47d4:	97 1f       	adc	r25, r23
    47d6:	d9 01       	movw	r26, r18
    47d8:	a8 0f       	add	r26, r24
    47da:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    47dc:	ac 92       	st	X, r10
    47de:	11 96       	adiw	r26, 0x01	; 1
    47e0:	4c 93       	st	X, r20
    47e2:	11 97       	sbiw	r26, 0x01	; 1
    47e4:	12 96       	adiw	r26, 0x02	; 2
    47e6:	9c 92       	st	X, r9

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    47e8:	af b6       	in	r10, 0x3f	; 63
    47ea:	f8 94       	cli
    47ec:	80 81       	ld	r24, Z
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	01 96       	adiw	r24, 0x01	; 1
    47f2:	b8 01       	movw	r22, r16
    47f4:	db d7       	rcall	.+4022   	; 0x57ac <__divmodhi4>
    47f6:	80 83       	st	Z, r24
    47f8:	af be       	out	0x3f, r10	; 63
							break;
						case 0xe0e0609f:
							CharLcd->print(2, 1, "rx : number3    ");
							break;
						case 0xe0e010ef:
							CharLcd->print(2, 1, "rx : number4    ");
    47fa:	ab 2c       	mov	r10, r11
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    47fc:	d7 01       	movw	r26, r14
    47fe:	9d 90       	ld	r9, X+
    4800:	7d 01       	movw	r14, r26
    4802:	91 10       	cpse	r9, r1
    4804:	d2 cf       	rjmp	.-92     	; 0x47aa <main+0x1cea>
    4806:	db c3       	rjmp	.+1974   	; 0x4fbe <main+0x24fe>
							break;
						case 0xe0e0906f:
							CharLcd->print(2, 1, "rx : number5    ");
							break;
						case 0xe0e050af:
							CharLcd->print(2, 1, "rx : number6    ");
    4808:	20 91 fc 06 	lds	r18, 0x06FC
    480c:	30 91 fd 06 	lds	r19, 0x06FD
    4810:	0f 2e       	mov	r0, r31
    4812:	f9 e6       	ldi	r31, 0x69	; 105
    4814:	ef 2e       	mov	r14, r31
    4816:	f2 e0       	ldi	r31, 0x02	; 2
    4818:	ff 2e       	mov	r15, r31
    481a:	f0 2d       	mov	r31, r0
    481c:	aa 24       	eor	r10, r10
    481e:	a3 94       	inc	r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4820:	f9 01       	movw	r30, r18
    4822:	e4 5d       	subi	r30, 0xD4	; 212
    4824:	fe 4f       	sbci	r31, 0xFE	; 254
    4826:	69 01       	movw	r12, r18
    4828:	b3 ed       	ldi	r27, 0xD3	; 211
    482a:	cb 1a       	sub	r12, r27
    482c:	be ef       	ldi	r27, 0xFE	; 254
    482e:	db 0a       	sbc	r13, r27
    4830:	04 e6       	ldi	r16, 0x64	; 100
    4832:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    4834:	42 e0       	ldi	r20, 0x02	; 2
    4836:	29 c0       	rjmp	.+82     	; 0x488a <main+0x1dca>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4838:	bb 24       	eor	r11, r11
    483a:	b3 94       	inc	r11
    483c:	ba 0c       	add	r11, r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    483e:	80 81       	ld	r24, Z
    4840:	d6 01       	movw	r26, r12
    4842:	8c 90       	ld	r8, X
    4844:	90 e0       	ldi	r25, 0x00	; 0
    4846:	01 96       	adiw	r24, 0x01	; 1
    4848:	b8 01       	movw	r22, r16
    484a:	b0 d7       	rcall	.+3936   	; 0x57ac <__divmodhi4>
    484c:	68 2d       	mov	r22, r8
    484e:	70 e0       	ldi	r23, 0x00	; 0
    4850:	86 17       	cp	r24, r22
    4852:	97 07       	cpc	r25, r23
    4854:	c9 f0       	breq	.+50     	; 0x4888 <main+0x1dc8>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    4856:	80 81       	ld	r24, Z
    4858:	90 e0       	ldi	r25, 0x00	; 0
    485a:	bc 01       	movw	r22, r24
    485c:	66 0f       	add	r22, r22
    485e:	77 1f       	adc	r23, r23
    4860:	86 0f       	add	r24, r22
    4862:	97 1f       	adc	r25, r23
    4864:	d9 01       	movw	r26, r18
    4866:	a8 0f       	add	r26, r24
    4868:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    486a:	ac 92       	st	X, r10
    486c:	11 96       	adiw	r26, 0x01	; 1
    486e:	4c 93       	st	X, r20
    4870:	11 97       	sbiw	r26, 0x01	; 1
    4872:	12 96       	adiw	r26, 0x02	; 2
    4874:	9c 92       	st	X, r9

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    4876:	af b6       	in	r10, 0x3f	; 63
    4878:	f8 94       	cli
    487a:	80 81       	ld	r24, Z
    487c:	90 e0       	ldi	r25, 0x00	; 0
    487e:	01 96       	adiw	r24, 0x01	; 1
    4880:	b8 01       	movw	r22, r16
    4882:	94 d7       	rcall	.+3880   	; 0x57ac <__divmodhi4>
    4884:	80 83       	st	Z, r24
    4886:	af be       	out	0x3f, r10	; 63
							break;
						case 0xe0e010ef:
							CharLcd->print(2, 1, "rx : number4    ");
							break;
						case 0xe0e0906f:
							CharLcd->print(2, 1, "rx : number5    ");
    4888:	ab 2c       	mov	r10, r11
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    488a:	d7 01       	movw	r26, r14
    488c:	9d 90       	ld	r9, X+
    488e:	7d 01       	movw	r14, r26
    4890:	91 10       	cpse	r9, r1
    4892:	d2 cf       	rjmp	.-92     	; 0x4838 <main+0x1d78>
    4894:	94 c3       	rjmp	.+1832   	; 0x4fbe <main+0x24fe>
							break;
						case 0xe0e050af:
							CharLcd->print(2, 1, "rx : number6    ");
							break;
						case 0xe0e030cf:
							CharLcd->print(2, 1, "rx : number7    ");
    4896:	20 91 fc 06 	lds	r18, 0x06FC
    489a:	30 91 fd 06 	lds	r19, 0x06FD
    489e:	0f 2e       	mov	r0, r31
    48a0:	f4 e1       	ldi	r31, 0x14	; 20
    48a2:	ef 2e       	mov	r14, r31
    48a4:	f2 e0       	ldi	r31, 0x02	; 2
    48a6:	ff 2e       	mov	r15, r31
    48a8:	f0 2d       	mov	r31, r0
    48aa:	aa 24       	eor	r10, r10
    48ac:	a3 94       	inc	r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    48ae:	f9 01       	movw	r30, r18
    48b0:	e4 5d       	subi	r30, 0xD4	; 212
    48b2:	fe 4f       	sbci	r31, 0xFE	; 254
    48b4:	69 01       	movw	r12, r18
    48b6:	b3 ed       	ldi	r27, 0xD3	; 211
    48b8:	cb 1a       	sub	r12, r27
    48ba:	be ef       	ldi	r27, 0xFE	; 254
    48bc:	db 0a       	sbc	r13, r27
    48be:	04 e6       	ldi	r16, 0x64	; 100
    48c0:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    48c2:	42 e0       	ldi	r20, 0x02	; 2
    48c4:	29 c0       	rjmp	.+82     	; 0x4918 <main+0x1e58>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    48c6:	bb 24       	eor	r11, r11
    48c8:	b3 94       	inc	r11
    48ca:	ba 0c       	add	r11, r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    48cc:	80 81       	ld	r24, Z
    48ce:	d6 01       	movw	r26, r12
    48d0:	8c 90       	ld	r8, X
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	01 96       	adiw	r24, 0x01	; 1
    48d6:	b8 01       	movw	r22, r16
    48d8:	69 d7       	rcall	.+3794   	; 0x57ac <__divmodhi4>
    48da:	68 2d       	mov	r22, r8
    48dc:	70 e0       	ldi	r23, 0x00	; 0
    48de:	86 17       	cp	r24, r22
    48e0:	97 07       	cpc	r25, r23
    48e2:	c9 f0       	breq	.+50     	; 0x4916 <main+0x1e56>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    48e4:	80 81       	ld	r24, Z
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	bc 01       	movw	r22, r24
    48ea:	66 0f       	add	r22, r22
    48ec:	77 1f       	adc	r23, r23
    48ee:	86 0f       	add	r24, r22
    48f0:	97 1f       	adc	r25, r23
    48f2:	d9 01       	movw	r26, r18
    48f4:	a8 0f       	add	r26, r24
    48f6:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    48f8:	ac 92       	st	X, r10
    48fa:	11 96       	adiw	r26, 0x01	; 1
    48fc:	4c 93       	st	X, r20
    48fe:	11 97       	sbiw	r26, 0x01	; 1
    4900:	12 96       	adiw	r26, 0x02	; 2
    4902:	9c 92       	st	X, r9

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    4904:	af b6       	in	r10, 0x3f	; 63
    4906:	f8 94       	cli
    4908:	80 81       	ld	r24, Z
    490a:	90 e0       	ldi	r25, 0x00	; 0
    490c:	01 96       	adiw	r24, 0x01	; 1
    490e:	b8 01       	movw	r22, r16
    4910:	4d d7       	rcall	.+3738   	; 0x57ac <__divmodhi4>
    4912:	80 83       	st	Z, r24
    4914:	af be       	out	0x3f, r10	; 63
							break;
						case 0xe0e0906f:
							CharLcd->print(2, 1, "rx : number5    ");
							break;
						case 0xe0e050af:
							CharLcd->print(2, 1, "rx : number6    ");
    4916:	ab 2c       	mov	r10, r11
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4918:	d7 01       	movw	r26, r14
    491a:	9d 90       	ld	r9, X+
    491c:	7d 01       	movw	r14, r26
    491e:	91 10       	cpse	r9, r1
    4920:	d2 cf       	rjmp	.-92     	; 0x48c6 <main+0x1e06>
    4922:	4d c3       	rjmp	.+1690   	; 0x4fbe <main+0x24fe>
							break;
						case 0xe0e030cf:
							CharLcd->print(2, 1, "rx : number7    ");
							break;
						case 0xe0e0b04f:
							CharLcd->print(2, 1, "rx : number8    ");
    4924:	20 91 fc 06 	lds	r18, 0x06FC
    4928:	30 91 fd 06 	lds	r19, 0x06FD
    492c:	0f 2e       	mov	r0, r31
    492e:	ff ec       	ldi	r31, 0xCF	; 207
    4930:	ef 2e       	mov	r14, r31
    4932:	f2 e0       	ldi	r31, 0x02	; 2
    4934:	ff 2e       	mov	r15, r31
    4936:	f0 2d       	mov	r31, r0
    4938:	aa 24       	eor	r10, r10
    493a:	a3 94       	inc	r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    493c:	f9 01       	movw	r30, r18
    493e:	e4 5d       	subi	r30, 0xD4	; 212
    4940:	fe 4f       	sbci	r31, 0xFE	; 254
    4942:	69 01       	movw	r12, r18
    4944:	b3 ed       	ldi	r27, 0xD3	; 211
    4946:	cb 1a       	sub	r12, r27
    4948:	be ef       	ldi	r27, 0xFE	; 254
    494a:	db 0a       	sbc	r13, r27
    494c:	04 e6       	ldi	r16, 0x64	; 100
    494e:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    4950:	42 e0       	ldi	r20, 0x02	; 2
    4952:	29 c0       	rjmp	.+82     	; 0x49a6 <main+0x1ee6>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4954:	bb 24       	eor	r11, r11
    4956:	b3 94       	inc	r11
    4958:	ba 0c       	add	r11, r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    495a:	80 81       	ld	r24, Z
    495c:	d6 01       	movw	r26, r12
    495e:	8c 90       	ld	r8, X
    4960:	90 e0       	ldi	r25, 0x00	; 0
    4962:	01 96       	adiw	r24, 0x01	; 1
    4964:	b8 01       	movw	r22, r16
    4966:	22 d7       	rcall	.+3652   	; 0x57ac <__divmodhi4>
    4968:	68 2d       	mov	r22, r8
    496a:	70 e0       	ldi	r23, 0x00	; 0
    496c:	86 17       	cp	r24, r22
    496e:	97 07       	cpc	r25, r23
    4970:	c9 f0       	breq	.+50     	; 0x49a4 <main+0x1ee4>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    4972:	80 81       	ld	r24, Z
    4974:	90 e0       	ldi	r25, 0x00	; 0
    4976:	bc 01       	movw	r22, r24
    4978:	66 0f       	add	r22, r22
    497a:	77 1f       	adc	r23, r23
    497c:	86 0f       	add	r24, r22
    497e:	97 1f       	adc	r25, r23
    4980:	d9 01       	movw	r26, r18
    4982:	a8 0f       	add	r26, r24
    4984:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    4986:	ac 92       	st	X, r10
    4988:	11 96       	adiw	r26, 0x01	; 1
    498a:	4c 93       	st	X, r20
    498c:	11 97       	sbiw	r26, 0x01	; 1
    498e:	12 96       	adiw	r26, 0x02	; 2
    4990:	9c 92       	st	X, r9

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    4992:	af b6       	in	r10, 0x3f	; 63
    4994:	f8 94       	cli
    4996:	80 81       	ld	r24, Z
    4998:	90 e0       	ldi	r25, 0x00	; 0
    499a:	01 96       	adiw	r24, 0x01	; 1
    499c:	b8 01       	movw	r22, r16
    499e:	06 d7       	rcall	.+3596   	; 0x57ac <__divmodhi4>
    49a0:	80 83       	st	Z, r24
    49a2:	af be       	out	0x3f, r10	; 63
							break;
						case 0xe0e050af:
							CharLcd->print(2, 1, "rx : number6    ");
							break;
						case 0xe0e030cf:
							CharLcd->print(2, 1, "rx : number7    ");
    49a4:	ab 2c       	mov	r10, r11
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    49a6:	d7 01       	movw	r26, r14
    49a8:	9d 90       	ld	r9, X+
    49aa:	7d 01       	movw	r14, r26
    49ac:	91 10       	cpse	r9, r1
    49ae:	d2 cf       	rjmp	.-92     	; 0x4954 <main+0x1e94>
    49b0:	06 c3       	rjmp	.+1548   	; 0x4fbe <main+0x24fe>
							break;
						case 0xe0e0b04f:
							CharLcd->print(2, 1, "rx : number8    ");
							break;
						case 0xe0e0708f:
							CharLcd->print(2, 1, "rx : number9    ");
    49b2:	20 91 fc 06 	lds	r18, 0x06FC
    49b6:	30 91 fd 06 	lds	r19, 0x06FD
    49ba:	0f 2e       	mov	r0, r31
    49bc:	fb e8       	ldi	r31, 0x8B	; 139
    49be:	ef 2e       	mov	r14, r31
    49c0:	f2 e0       	ldi	r31, 0x02	; 2
    49c2:	ff 2e       	mov	r15, r31
    49c4:	f0 2d       	mov	r31, r0
    49c6:	aa 24       	eor	r10, r10
    49c8:	a3 94       	inc	r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    49ca:	f9 01       	movw	r30, r18
    49cc:	e4 5d       	subi	r30, 0xD4	; 212
    49ce:	fe 4f       	sbci	r31, 0xFE	; 254
    49d0:	69 01       	movw	r12, r18
    49d2:	b3 ed       	ldi	r27, 0xD3	; 211
    49d4:	cb 1a       	sub	r12, r27
    49d6:	be ef       	ldi	r27, 0xFE	; 254
    49d8:	db 0a       	sbc	r13, r27
    49da:	04 e6       	ldi	r16, 0x64	; 100
    49dc:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    49de:	42 e0       	ldi	r20, 0x02	; 2
    49e0:	29 c0       	rjmp	.+82     	; 0x4a34 <main+0x1f74>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    49e2:	bb 24       	eor	r11, r11
    49e4:	b3 94       	inc	r11
    49e6:	ba 0c       	add	r11, r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    49e8:	80 81       	ld	r24, Z
    49ea:	d6 01       	movw	r26, r12
    49ec:	8c 90       	ld	r8, X
    49ee:	90 e0       	ldi	r25, 0x00	; 0
    49f0:	01 96       	adiw	r24, 0x01	; 1
    49f2:	b8 01       	movw	r22, r16
    49f4:	db d6       	rcall	.+3510   	; 0x57ac <__divmodhi4>
    49f6:	68 2d       	mov	r22, r8
    49f8:	70 e0       	ldi	r23, 0x00	; 0
    49fa:	86 17       	cp	r24, r22
    49fc:	97 07       	cpc	r25, r23
    49fe:	c9 f0       	breq	.+50     	; 0x4a32 <main+0x1f72>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    4a00:	80 81       	ld	r24, Z
    4a02:	90 e0       	ldi	r25, 0x00	; 0
    4a04:	bc 01       	movw	r22, r24
    4a06:	66 0f       	add	r22, r22
    4a08:	77 1f       	adc	r23, r23
    4a0a:	86 0f       	add	r24, r22
    4a0c:	97 1f       	adc	r25, r23
    4a0e:	d9 01       	movw	r26, r18
    4a10:	a8 0f       	add	r26, r24
    4a12:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    4a14:	ac 92       	st	X, r10
    4a16:	11 96       	adiw	r26, 0x01	; 1
    4a18:	4c 93       	st	X, r20
    4a1a:	11 97       	sbiw	r26, 0x01	; 1
    4a1c:	12 96       	adiw	r26, 0x02	; 2
    4a1e:	9c 92       	st	X, r9

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    4a20:	af b6       	in	r10, 0x3f	; 63
    4a22:	f8 94       	cli
    4a24:	80 81       	ld	r24, Z
    4a26:	90 e0       	ldi	r25, 0x00	; 0
    4a28:	01 96       	adiw	r24, 0x01	; 1
    4a2a:	b8 01       	movw	r22, r16
    4a2c:	bf d6       	rcall	.+3454   	; 0x57ac <__divmodhi4>
    4a2e:	80 83       	st	Z, r24
    4a30:	af be       	out	0x3f, r10	; 63
							break;
						case 0xe0e030cf:
							CharLcd->print(2, 1, "rx : number7    ");
							break;
						case 0xe0e0b04f:
							CharLcd->print(2, 1, "rx : number8    ");
    4a32:	ab 2c       	mov	r10, r11
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4a34:	d7 01       	movw	r26, r14
    4a36:	9d 90       	ld	r9, X+
    4a38:	7d 01       	movw	r14, r26
    4a3a:	91 10       	cpse	r9, r1
    4a3c:	d2 cf       	rjmp	.-92     	; 0x49e2 <main+0x1f22>
    4a3e:	bf c2       	rjmp	.+1406   	; 0x4fbe <main+0x24fe>
							break;
						case 0xe0e0708f:
							CharLcd->print(2, 1, "rx : number9    ");
							break;
						case 0xe0e08877:
							CharLcd->print(2, 1, "rx : number0    ");
    4a40:	20 91 fc 06 	lds	r18, 0x06FC
    4a44:	30 91 fd 06 	lds	r19, 0x06FD
    4a48:	0f 2e       	mov	r0, r31
    4a4a:	fc e9       	ldi	r31, 0x9C	; 156
    4a4c:	ef 2e       	mov	r14, r31
    4a4e:	f2 e0       	ldi	r31, 0x02	; 2
    4a50:	ff 2e       	mov	r15, r31
    4a52:	f0 2d       	mov	r31, r0
    4a54:	aa 24       	eor	r10, r10
    4a56:	a3 94       	inc	r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4a58:	f9 01       	movw	r30, r18
    4a5a:	e4 5d       	subi	r30, 0xD4	; 212
    4a5c:	fe 4f       	sbci	r31, 0xFE	; 254
    4a5e:	69 01       	movw	r12, r18
    4a60:	b3 ed       	ldi	r27, 0xD3	; 211
    4a62:	cb 1a       	sub	r12, r27
    4a64:	be ef       	ldi	r27, 0xFE	; 254
    4a66:	db 0a       	sbc	r13, r27
    4a68:	04 e6       	ldi	r16, 0x64	; 100
    4a6a:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    4a6c:	42 e0       	ldi	r20, 0x02	; 2
    4a6e:	29 c0       	rjmp	.+82     	; 0x4ac2 <main+0x2002>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4a70:	bb 24       	eor	r11, r11
    4a72:	b3 94       	inc	r11
    4a74:	ba 0c       	add	r11, r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4a76:	80 81       	ld	r24, Z
    4a78:	d6 01       	movw	r26, r12
    4a7a:	8c 90       	ld	r8, X
    4a7c:	90 e0       	ldi	r25, 0x00	; 0
    4a7e:	01 96       	adiw	r24, 0x01	; 1
    4a80:	b8 01       	movw	r22, r16
    4a82:	94 d6       	rcall	.+3368   	; 0x57ac <__divmodhi4>
    4a84:	68 2d       	mov	r22, r8
    4a86:	70 e0       	ldi	r23, 0x00	; 0
    4a88:	86 17       	cp	r24, r22
    4a8a:	97 07       	cpc	r25, r23
    4a8c:	c9 f0       	breq	.+50     	; 0x4ac0 <main+0x2000>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    4a8e:	80 81       	ld	r24, Z
    4a90:	90 e0       	ldi	r25, 0x00	; 0
    4a92:	bc 01       	movw	r22, r24
    4a94:	66 0f       	add	r22, r22
    4a96:	77 1f       	adc	r23, r23
    4a98:	86 0f       	add	r24, r22
    4a9a:	97 1f       	adc	r25, r23
    4a9c:	d9 01       	movw	r26, r18
    4a9e:	a8 0f       	add	r26, r24
    4aa0:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    4aa2:	ac 92       	st	X, r10
    4aa4:	11 96       	adiw	r26, 0x01	; 1
    4aa6:	4c 93       	st	X, r20
    4aa8:	11 97       	sbiw	r26, 0x01	; 1
    4aaa:	12 96       	adiw	r26, 0x02	; 2
    4aac:	9c 92       	st	X, r9

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    4aae:	af b6       	in	r10, 0x3f	; 63
    4ab0:	f8 94       	cli
    4ab2:	80 81       	ld	r24, Z
    4ab4:	90 e0       	ldi	r25, 0x00	; 0
    4ab6:	01 96       	adiw	r24, 0x01	; 1
    4ab8:	b8 01       	movw	r22, r16
    4aba:	78 d6       	rcall	.+3312   	; 0x57ac <__divmodhi4>
    4abc:	80 83       	st	Z, r24
    4abe:	af be       	out	0x3f, r10	; 63
							break;
						case 0xe0e0b04f:
							CharLcd->print(2, 1, "rx : number8    ");
							break;
						case 0xe0e0708f:
							CharLcd->print(2, 1, "rx : number9    ");
    4ac0:	ab 2c       	mov	r10, r11
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4ac2:	d7 01       	movw	r26, r14
    4ac4:	9d 90       	ld	r9, X+
    4ac6:	7d 01       	movw	r14, r26
    4ac8:	91 10       	cpse	r9, r1
    4aca:	d2 cf       	rjmp	.-92     	; 0x4a70 <main+0x1fb0>
    4acc:	78 c2       	rjmp	.+1264   	; 0x4fbe <main+0x24fe>
							break;
						case 0xe0e08877:
							CharLcd->print(2, 1, "rx : number0    ");
							break;
						case 0xe0e0e01f:
							CharLcd->print(2, 1, "rx : vol up     ");
    4ace:	20 91 fc 06 	lds	r18, 0x06FC
    4ad2:	30 91 fd 06 	lds	r19, 0x06FD
    4ad6:	0f 2e       	mov	r0, r31
    4ad8:	f1 ef       	ldi	r31, 0xF1	; 241
    4ada:	ef 2e       	mov	r14, r31
    4adc:	f2 e0       	ldi	r31, 0x02	; 2
    4ade:	ff 2e       	mov	r15, r31
    4ae0:	f0 2d       	mov	r31, r0
    4ae2:	aa 24       	eor	r10, r10
    4ae4:	a3 94       	inc	r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4ae6:	f9 01       	movw	r30, r18
    4ae8:	e4 5d       	subi	r30, 0xD4	; 212
    4aea:	fe 4f       	sbci	r31, 0xFE	; 254
    4aec:	69 01       	movw	r12, r18
    4aee:	b3 ed       	ldi	r27, 0xD3	; 211
    4af0:	cb 1a       	sub	r12, r27
    4af2:	be ef       	ldi	r27, 0xFE	; 254
    4af4:	db 0a       	sbc	r13, r27
    4af6:	04 e6       	ldi	r16, 0x64	; 100
    4af8:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    4afa:	42 e0       	ldi	r20, 0x02	; 2
    4afc:	29 c0       	rjmp	.+82     	; 0x4b50 <main+0x2090>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4afe:	bb 24       	eor	r11, r11
    4b00:	b3 94       	inc	r11
    4b02:	ba 0c       	add	r11, r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4b04:	80 81       	ld	r24, Z
    4b06:	d6 01       	movw	r26, r12
    4b08:	8c 90       	ld	r8, X
    4b0a:	90 e0       	ldi	r25, 0x00	; 0
    4b0c:	01 96       	adiw	r24, 0x01	; 1
    4b0e:	b8 01       	movw	r22, r16
    4b10:	4d d6       	rcall	.+3226   	; 0x57ac <__divmodhi4>
    4b12:	68 2d       	mov	r22, r8
    4b14:	70 e0       	ldi	r23, 0x00	; 0
    4b16:	86 17       	cp	r24, r22
    4b18:	97 07       	cpc	r25, r23
    4b1a:	c9 f0       	breq	.+50     	; 0x4b4e <main+0x208e>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    4b1c:	80 81       	ld	r24, Z
    4b1e:	90 e0       	ldi	r25, 0x00	; 0
    4b20:	bc 01       	movw	r22, r24
    4b22:	66 0f       	add	r22, r22
    4b24:	77 1f       	adc	r23, r23
    4b26:	86 0f       	add	r24, r22
    4b28:	97 1f       	adc	r25, r23
    4b2a:	d9 01       	movw	r26, r18
    4b2c:	a8 0f       	add	r26, r24
    4b2e:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    4b30:	ac 92       	st	X, r10
    4b32:	11 96       	adiw	r26, 0x01	; 1
    4b34:	4c 93       	st	X, r20
    4b36:	11 97       	sbiw	r26, 0x01	; 1
    4b38:	12 96       	adiw	r26, 0x02	; 2
    4b3a:	9c 92       	st	X, r9

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    4b3c:	af b6       	in	r10, 0x3f	; 63
    4b3e:	f8 94       	cli
    4b40:	80 81       	ld	r24, Z
    4b42:	90 e0       	ldi	r25, 0x00	; 0
    4b44:	01 96       	adiw	r24, 0x01	; 1
    4b46:	b8 01       	movw	r22, r16
    4b48:	31 d6       	rcall	.+3170   	; 0x57ac <__divmodhi4>
    4b4a:	80 83       	st	Z, r24
    4b4c:	af be       	out	0x3f, r10	; 63
							break;
						case 0xe0e0708f:
							CharLcd->print(2, 1, "rx : number9    ");
							break;
						case 0xe0e08877:
							CharLcd->print(2, 1, "rx : number0    ");
    4b4e:	ab 2c       	mov	r10, r11
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4b50:	d7 01       	movw	r26, r14
    4b52:	9d 90       	ld	r9, X+
    4b54:	7d 01       	movw	r14, r26
    4b56:	91 10       	cpse	r9, r1
    4b58:	d2 cf       	rjmp	.-92     	; 0x4afe <main+0x203e>
    4b5a:	31 c2       	rjmp	.+1122   	; 0x4fbe <main+0x24fe>
							break;
						case 0xe0e0e01f:
							CharLcd->print(2, 1, "rx : vol up     ");
							break;
						case 0xe0e0d02f:
							CharLcd->print(2, 1, "rx : vol down   ");
    4b5c:	20 91 fc 06 	lds	r18, 0x06FC
    4b60:	30 91 fd 06 	lds	r19, 0x06FD
    4b64:	0f 2e       	mov	r0, r31
    4b66:	f0 ee       	ldi	r31, 0xE0	; 224
    4b68:	ef 2e       	mov	r14, r31
    4b6a:	f2 e0       	ldi	r31, 0x02	; 2
    4b6c:	ff 2e       	mov	r15, r31
    4b6e:	f0 2d       	mov	r31, r0
    4b70:	aa 24       	eor	r10, r10
    4b72:	a3 94       	inc	r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4b74:	f9 01       	movw	r30, r18
    4b76:	e4 5d       	subi	r30, 0xD4	; 212
    4b78:	fe 4f       	sbci	r31, 0xFE	; 254
    4b7a:	69 01       	movw	r12, r18
    4b7c:	b3 ed       	ldi	r27, 0xD3	; 211
    4b7e:	cb 1a       	sub	r12, r27
    4b80:	be ef       	ldi	r27, 0xFE	; 254
    4b82:	db 0a       	sbc	r13, r27
    4b84:	04 e6       	ldi	r16, 0x64	; 100
    4b86:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    4b88:	42 e0       	ldi	r20, 0x02	; 2
    4b8a:	29 c0       	rjmp	.+82     	; 0x4bde <main+0x211e>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4b8c:	bb 24       	eor	r11, r11
    4b8e:	b3 94       	inc	r11
    4b90:	ba 0c       	add	r11, r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4b92:	80 81       	ld	r24, Z
    4b94:	d6 01       	movw	r26, r12
    4b96:	8c 90       	ld	r8, X
    4b98:	90 e0       	ldi	r25, 0x00	; 0
    4b9a:	01 96       	adiw	r24, 0x01	; 1
    4b9c:	b8 01       	movw	r22, r16
    4b9e:	06 d6       	rcall	.+3084   	; 0x57ac <__divmodhi4>
    4ba0:	68 2d       	mov	r22, r8
    4ba2:	70 e0       	ldi	r23, 0x00	; 0
    4ba4:	86 17       	cp	r24, r22
    4ba6:	97 07       	cpc	r25, r23
    4ba8:	c9 f0       	breq	.+50     	; 0x4bdc <main+0x211c>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    4baa:	80 81       	ld	r24, Z
    4bac:	90 e0       	ldi	r25, 0x00	; 0
    4bae:	bc 01       	movw	r22, r24
    4bb0:	66 0f       	add	r22, r22
    4bb2:	77 1f       	adc	r23, r23
    4bb4:	86 0f       	add	r24, r22
    4bb6:	97 1f       	adc	r25, r23
    4bb8:	d9 01       	movw	r26, r18
    4bba:	a8 0f       	add	r26, r24
    4bbc:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    4bbe:	ac 92       	st	X, r10
    4bc0:	11 96       	adiw	r26, 0x01	; 1
    4bc2:	4c 93       	st	X, r20
    4bc4:	11 97       	sbiw	r26, 0x01	; 1
    4bc6:	12 96       	adiw	r26, 0x02	; 2
    4bc8:	9c 92       	st	X, r9

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    4bca:	af b6       	in	r10, 0x3f	; 63
    4bcc:	f8 94       	cli
    4bce:	80 81       	ld	r24, Z
    4bd0:	90 e0       	ldi	r25, 0x00	; 0
    4bd2:	01 96       	adiw	r24, 0x01	; 1
    4bd4:	b8 01       	movw	r22, r16
    4bd6:	ea d5       	rcall	.+3028   	; 0x57ac <__divmodhi4>
    4bd8:	80 83       	st	Z, r24
    4bda:	af be       	out	0x3f, r10	; 63
							break;
						case 0xe0e08877:
							CharLcd->print(2, 1, "rx : number0    ");
							break;
						case 0xe0e0e01f:
							CharLcd->print(2, 1, "rx : vol up     ");
    4bdc:	ab 2c       	mov	r10, r11
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4bde:	d7 01       	movw	r26, r14
    4be0:	9d 90       	ld	r9, X+
    4be2:	7d 01       	movw	r14, r26
    4be4:	91 10       	cpse	r9, r1
    4be6:	d2 cf       	rjmp	.-92     	; 0x4b8c <main+0x20cc>
    4be8:	ea c1       	rjmp	.+980    	; 0x4fbe <main+0x24fe>
							break;
						case 0xe0e0d02f:
							CharLcd->print(2, 1, "rx : vol down   ");
							break;
						case 0xe0e048b7:
							CharLcd->print(2, 1, "rx : ch up      ");
    4bea:	20 91 fc 06 	lds	r18, 0x06FC
    4bee:	30 91 fd 06 	lds	r19, 0x06FD
    4bf2:	0f 2e       	mov	r0, r31
    4bf4:	f8 e5       	ldi	r31, 0x58	; 88
    4bf6:	ef 2e       	mov	r14, r31
    4bf8:	f2 e0       	ldi	r31, 0x02	; 2
    4bfa:	ff 2e       	mov	r15, r31
    4bfc:	f0 2d       	mov	r31, r0
    4bfe:	aa 24       	eor	r10, r10
    4c00:	a3 94       	inc	r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4c02:	f9 01       	movw	r30, r18
    4c04:	e4 5d       	subi	r30, 0xD4	; 212
    4c06:	fe 4f       	sbci	r31, 0xFE	; 254
    4c08:	69 01       	movw	r12, r18
    4c0a:	b3 ed       	ldi	r27, 0xD3	; 211
    4c0c:	cb 1a       	sub	r12, r27
    4c0e:	be ef       	ldi	r27, 0xFE	; 254
    4c10:	db 0a       	sbc	r13, r27
    4c12:	04 e6       	ldi	r16, 0x64	; 100
    4c14:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    4c16:	42 e0       	ldi	r20, 0x02	; 2
    4c18:	29 c0       	rjmp	.+82     	; 0x4c6c <main+0x21ac>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4c1a:	bb 24       	eor	r11, r11
    4c1c:	b3 94       	inc	r11
    4c1e:	ba 0c       	add	r11, r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4c20:	80 81       	ld	r24, Z
    4c22:	d6 01       	movw	r26, r12
    4c24:	8c 90       	ld	r8, X
    4c26:	90 e0       	ldi	r25, 0x00	; 0
    4c28:	01 96       	adiw	r24, 0x01	; 1
    4c2a:	b8 01       	movw	r22, r16
    4c2c:	bf d5       	rcall	.+2942   	; 0x57ac <__divmodhi4>
    4c2e:	68 2d       	mov	r22, r8
    4c30:	70 e0       	ldi	r23, 0x00	; 0
    4c32:	86 17       	cp	r24, r22
    4c34:	97 07       	cpc	r25, r23
    4c36:	c9 f0       	breq	.+50     	; 0x4c6a <main+0x21aa>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    4c38:	80 81       	ld	r24, Z
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
    4c3c:	bc 01       	movw	r22, r24
    4c3e:	66 0f       	add	r22, r22
    4c40:	77 1f       	adc	r23, r23
    4c42:	86 0f       	add	r24, r22
    4c44:	97 1f       	adc	r25, r23
    4c46:	d9 01       	movw	r26, r18
    4c48:	a8 0f       	add	r26, r24
    4c4a:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    4c4c:	ac 92       	st	X, r10
    4c4e:	11 96       	adiw	r26, 0x01	; 1
    4c50:	4c 93       	st	X, r20
    4c52:	11 97       	sbiw	r26, 0x01	; 1
    4c54:	12 96       	adiw	r26, 0x02	; 2
    4c56:	9c 92       	st	X, r9

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    4c58:	af b6       	in	r10, 0x3f	; 63
    4c5a:	f8 94       	cli
    4c5c:	80 81       	ld	r24, Z
    4c5e:	90 e0       	ldi	r25, 0x00	; 0
    4c60:	01 96       	adiw	r24, 0x01	; 1
    4c62:	b8 01       	movw	r22, r16
    4c64:	a3 d5       	rcall	.+2886   	; 0x57ac <__divmodhi4>
    4c66:	80 83       	st	Z, r24
    4c68:	af be       	out	0x3f, r10	; 63
							break;
						case 0xe0e0e01f:
							CharLcd->print(2, 1, "rx : vol up     ");
							break;
						case 0xe0e0d02f:
							CharLcd->print(2, 1, "rx : vol down   ");
    4c6a:	ab 2c       	mov	r10, r11
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4c6c:	d7 01       	movw	r26, r14
    4c6e:	9d 90       	ld	r9, X+
    4c70:	7d 01       	movw	r14, r26
    4c72:	91 10       	cpse	r9, r1
    4c74:	d2 cf       	rjmp	.-92     	; 0x4c1a <main+0x215a>
    4c76:	a3 c1       	rjmp	.+838    	; 0x4fbe <main+0x24fe>
							break;
						case 0xe0e048b7:
							CharLcd->print(2, 1, "rx : ch up      ");
							break;
						case 0xe0e008f7:
							CharLcd->print(2, 1, "rx : ch down    ");
    4c78:	20 91 fc 06 	lds	r18, 0x06FC
    4c7c:	30 91 fd 06 	lds	r19, 0x06FD
    4c80:	0f 2e       	mov	r0, r31
    4c82:	f1 ee       	ldi	r31, 0xE1	; 225
    4c84:	ef 2e       	mov	r14, r31
    4c86:	f1 e0       	ldi	r31, 0x01	; 1
    4c88:	ff 2e       	mov	r15, r31
    4c8a:	f0 2d       	mov	r31, r0
    4c8c:	aa 24       	eor	r10, r10
    4c8e:	a3 94       	inc	r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4c90:	f9 01       	movw	r30, r18
    4c92:	e4 5d       	subi	r30, 0xD4	; 212
    4c94:	fe 4f       	sbci	r31, 0xFE	; 254
    4c96:	69 01       	movw	r12, r18
    4c98:	b3 ed       	ldi	r27, 0xD3	; 211
    4c9a:	cb 1a       	sub	r12, r27
    4c9c:	be ef       	ldi	r27, 0xFE	; 254
    4c9e:	db 0a       	sbc	r13, r27
    4ca0:	04 e6       	ldi	r16, 0x64	; 100
    4ca2:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    4ca4:	42 e0       	ldi	r20, 0x02	; 2
    4ca6:	29 c0       	rjmp	.+82     	; 0x4cfa <main+0x223a>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4ca8:	bb 24       	eor	r11, r11
    4caa:	b3 94       	inc	r11
    4cac:	ba 0c       	add	r11, r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4cae:	80 81       	ld	r24, Z
    4cb0:	d6 01       	movw	r26, r12
    4cb2:	8c 90       	ld	r8, X
    4cb4:	90 e0       	ldi	r25, 0x00	; 0
    4cb6:	01 96       	adiw	r24, 0x01	; 1
    4cb8:	b8 01       	movw	r22, r16
    4cba:	78 d5       	rcall	.+2800   	; 0x57ac <__divmodhi4>
    4cbc:	68 2d       	mov	r22, r8
    4cbe:	70 e0       	ldi	r23, 0x00	; 0
    4cc0:	86 17       	cp	r24, r22
    4cc2:	97 07       	cpc	r25, r23
    4cc4:	c9 f0       	breq	.+50     	; 0x4cf8 <main+0x2238>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    4cc6:	80 81       	ld	r24, Z
    4cc8:	90 e0       	ldi	r25, 0x00	; 0
    4cca:	bc 01       	movw	r22, r24
    4ccc:	66 0f       	add	r22, r22
    4cce:	77 1f       	adc	r23, r23
    4cd0:	86 0f       	add	r24, r22
    4cd2:	97 1f       	adc	r25, r23
    4cd4:	d9 01       	movw	r26, r18
    4cd6:	a8 0f       	add	r26, r24
    4cd8:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    4cda:	ac 92       	st	X, r10
    4cdc:	11 96       	adiw	r26, 0x01	; 1
    4cde:	4c 93       	st	X, r20
    4ce0:	11 97       	sbiw	r26, 0x01	; 1
    4ce2:	12 96       	adiw	r26, 0x02	; 2
    4ce4:	9c 92       	st	X, r9

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    4ce6:	af b6       	in	r10, 0x3f	; 63
    4ce8:	f8 94       	cli
    4cea:	80 81       	ld	r24, Z
    4cec:	90 e0       	ldi	r25, 0x00	; 0
    4cee:	01 96       	adiw	r24, 0x01	; 1
    4cf0:	b8 01       	movw	r22, r16
    4cf2:	5c d5       	rcall	.+2744   	; 0x57ac <__divmodhi4>
    4cf4:	80 83       	st	Z, r24
    4cf6:	af be       	out	0x3f, r10	; 63
							break;
						case 0xe0e0d02f:
							CharLcd->print(2, 1, "rx : vol down   ");
							break;
						case 0xe0e048b7:
							CharLcd->print(2, 1, "rx : ch up      ");
    4cf8:	ab 2c       	mov	r10, r11
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4cfa:	d7 01       	movw	r26, r14
    4cfc:	9d 90       	ld	r9, X+
    4cfe:	7d 01       	movw	r14, r26
    4d00:	91 10       	cpse	r9, r1
    4d02:	d2 cf       	rjmp	.-92     	; 0x4ca8 <main+0x21e8>
    4d04:	5c c1       	rjmp	.+696    	; 0x4fbe <main+0x24fe>
							break;
						case 0xe0e008f7:
							CharLcd->print(2, 1, "rx : ch down    ");
							break;
						case 0xe0e040bc:
							if(iotClock::lcdmode) {
    4d06:	80 91 06 01 	lds	r24, 0x0106
    4d0a:	88 23       	and	r24, r24
    4d0c:	09 f4       	brne	.+2      	; 0x4d10 <main+0x2250>
    4d0e:	8d c0       	rjmp	.+282    	; 0x4e2a <main+0x236a>
								//CharLcd->print(2, 1, "power off       ");
								//iotClock::lcdmode = f//se;
								CharLcd->print(1, 1, "                ");
    4d10:	20 91 fc 06 	lds	r18, 0x06FC
    4d14:	30 91 fd 06 	lds	r19, 0x06FD
    4d18:	0f 2e       	mov	r0, r31
    4d1a:	f5 e2       	ldi	r31, 0x25	; 37
    4d1c:	ef 2e       	mov	r14, r31
    4d1e:	f2 e0       	ldi	r31, 0x02	; 2
    4d20:	ff 2e       	mov	r15, r31
    4d22:	f0 2d       	mov	r31, r0
    4d24:	aa 24       	eor	r10, r10
    4d26:	a3 94       	inc	r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4d28:	f9 01       	movw	r30, r18
    4d2a:	e4 5d       	subi	r30, 0xD4	; 212
    4d2c:	fe 4f       	sbci	r31, 0xFE	; 254
    4d2e:	69 01       	movw	r12, r18
    4d30:	b3 ed       	ldi	r27, 0xD3	; 211
    4d32:	cb 1a       	sub	r12, r27
    4d34:	be ef       	ldi	r27, 0xFE	; 254
    4d36:	db 0a       	sbc	r13, r27
    4d38:	04 e6       	ldi	r16, 0x64	; 100
    4d3a:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    4d3c:	41 e0       	ldi	r20, 0x01	; 1
    4d3e:	29 c0       	rjmp	.+82     	; 0x4d92 <main+0x22d2>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4d40:	bb 24       	eor	r11, r11
    4d42:	b3 94       	inc	r11
    4d44:	ba 0c       	add	r11, r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4d46:	80 81       	ld	r24, Z
    4d48:	d6 01       	movw	r26, r12
    4d4a:	8c 90       	ld	r8, X
    4d4c:	90 e0       	ldi	r25, 0x00	; 0
    4d4e:	01 96       	adiw	r24, 0x01	; 1
    4d50:	b8 01       	movw	r22, r16
    4d52:	2c d5       	rcall	.+2648   	; 0x57ac <__divmodhi4>
    4d54:	68 2d       	mov	r22, r8
    4d56:	70 e0       	ldi	r23, 0x00	; 0
    4d58:	86 17       	cp	r24, r22
    4d5a:	97 07       	cpc	r25, r23
    4d5c:	c9 f0       	breq	.+50     	; 0x4d90 <main+0x22d0>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    4d5e:	80 81       	ld	r24, Z
    4d60:	90 e0       	ldi	r25, 0x00	; 0
    4d62:	bc 01       	movw	r22, r24
    4d64:	66 0f       	add	r22, r22
    4d66:	77 1f       	adc	r23, r23
    4d68:	86 0f       	add	r24, r22
    4d6a:	97 1f       	adc	r25, r23
    4d6c:	d9 01       	movw	r26, r18
    4d6e:	a8 0f       	add	r26, r24
    4d70:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    4d72:	ac 92       	st	X, r10
    4d74:	11 96       	adiw	r26, 0x01	; 1
    4d76:	4c 93       	st	X, r20
    4d78:	11 97       	sbiw	r26, 0x01	; 1
    4d7a:	12 96       	adiw	r26, 0x02	; 2
    4d7c:	9c 92       	st	X, r9

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    4d7e:	af b6       	in	r10, 0x3f	; 63
    4d80:	f8 94       	cli
    4d82:	80 81       	ld	r24, Z
    4d84:	90 e0       	ldi	r25, 0x00	; 0
    4d86:	01 96       	adiw	r24, 0x01	; 1
    4d88:	b8 01       	movw	r22, r16
    4d8a:	10 d5       	rcall	.+2592   	; 0x57ac <__divmodhi4>
    4d8c:	80 83       	st	Z, r24
    4d8e:	af be       	out	0x3f, r10	; 63
							break;
						case 0xe0e048b7:
							CharLcd->print(2, 1, "rx : ch up      ");
							break;
						case 0xe0e008f7:
							CharLcd->print(2, 1, "rx : ch down    ");
    4d90:	ab 2c       	mov	r10, r11
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4d92:	d7 01       	movw	r26, r14
    4d94:	9d 90       	ld	r9, X+
    4d96:	7d 01       	movw	r14, r26
    4d98:	91 10       	cpse	r9, r1
    4d9a:	d2 cf       	rjmp	.-92     	; 0x4d40 <main+0x2280>
						case 0xe0e040bc:
							if(iotClock::lcdmode) {
								//CharLcd->print(2, 1, "power off       ");
								//iotClock::lcdmode = f//se;
								CharLcd->print(1, 1, "                ");
								CharLcd->print(2, 1, "                ");
    4d9c:	20 91 fc 06 	lds	r18, 0x06FC
    4da0:	30 91 fd 06 	lds	r19, 0x06FD
    4da4:	0f 2e       	mov	r0, r31
    4da6:	f5 e2       	ldi	r31, 0x25	; 37
    4da8:	ef 2e       	mov	r14, r31
    4daa:	f2 e0       	ldi	r31, 0x02	; 2
    4dac:	ff 2e       	mov	r15, r31
    4dae:	f0 2d       	mov	r31, r0
    4db0:	aa 24       	eor	r10, r10
    4db2:	a3 94       	inc	r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4db4:	f9 01       	movw	r30, r18
    4db6:	e4 5d       	subi	r30, 0xD4	; 212
    4db8:	fe 4f       	sbci	r31, 0xFE	; 254
    4dba:	69 01       	movw	r12, r18
    4dbc:	b3 ed       	ldi	r27, 0xD3	; 211
    4dbe:	cb 1a       	sub	r12, r27
    4dc0:	be ef       	ldi	r27, 0xFE	; 254
    4dc2:	db 0a       	sbc	r13, r27
    4dc4:	04 e6       	ldi	r16, 0x64	; 100
    4dc6:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    4dc8:	42 e0       	ldi	r20, 0x02	; 2
    4dca:	29 c0       	rjmp	.+82     	; 0x4e1e <main+0x235e>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4dcc:	bb 24       	eor	r11, r11
    4dce:	b3 94       	inc	r11
    4dd0:	ba 0c       	add	r11, r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4dd2:	80 81       	ld	r24, Z
    4dd4:	d6 01       	movw	r26, r12
    4dd6:	8c 90       	ld	r8, X
    4dd8:	90 e0       	ldi	r25, 0x00	; 0
    4dda:	01 96       	adiw	r24, 0x01	; 1
    4ddc:	b8 01       	movw	r22, r16
    4dde:	e6 d4       	rcall	.+2508   	; 0x57ac <__divmodhi4>
    4de0:	68 2d       	mov	r22, r8
    4de2:	70 e0       	ldi	r23, 0x00	; 0
    4de4:	86 17       	cp	r24, r22
    4de6:	97 07       	cpc	r25, r23
    4de8:	c9 f0       	breq	.+50     	; 0x4e1c <main+0x235c>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    4dea:	80 81       	ld	r24, Z
    4dec:	90 e0       	ldi	r25, 0x00	; 0
    4dee:	bc 01       	movw	r22, r24
    4df0:	66 0f       	add	r22, r22
    4df2:	77 1f       	adc	r23, r23
    4df4:	86 0f       	add	r24, r22
    4df6:	97 1f       	adc	r25, r23
    4df8:	d9 01       	movw	r26, r18
    4dfa:	a8 0f       	add	r26, r24
    4dfc:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    4dfe:	ac 92       	st	X, r10
    4e00:	11 96       	adiw	r26, 0x01	; 1
    4e02:	4c 93       	st	X, r20
    4e04:	11 97       	sbiw	r26, 0x01	; 1
    4e06:	12 96       	adiw	r26, 0x02	; 2
    4e08:	9c 92       	st	X, r9

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    4e0a:	af b6       	in	r10, 0x3f	; 63
    4e0c:	f8 94       	cli
    4e0e:	80 81       	ld	r24, Z
    4e10:	90 e0       	ldi	r25, 0x00	; 0
    4e12:	01 96       	adiw	r24, 0x01	; 1
    4e14:	b8 01       	movw	r22, r16
    4e16:	ca d4       	rcall	.+2452   	; 0x57ac <__divmodhi4>
    4e18:	80 83       	st	Z, r24
    4e1a:	af be       	out	0x3f, r10	; 63
							break;
						case 0xe0e040bc:
							if(iotClock::lcdmode) {
								//CharLcd->print(2, 1, "power off       ");
								//iotClock::lcdmode = f//se;
								CharLcd->print(1, 1, "                ");
    4e1c:	ab 2c       	mov	r10, r11
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4e1e:	d7 01       	movw	r26, r14
    4e20:	9d 90       	ld	r9, X+
    4e22:	7d 01       	movw	r14, r26
    4e24:	91 10       	cpse	r9, r1
    4e26:	d2 cf       	rjmp	.-92     	; 0x4dcc <main+0x230c>
    4e28:	ca c0       	rjmp	.+404    	; 0x4fbe <main+0x24fe>
								CharLcd->print(2, 1, "                ");
								//iotClock::destroy();
							} else {
								//iotClock::lcdmode = t//e;
								CharLcd->print(1, 1, "Samsung,Samrt TV");
    4e2a:	20 91 fc 06 	lds	r18, 0x06FC
    4e2e:	30 91 fd 06 	lds	r19, 0x06FD
    4e32:	0f 2e       	mov	r0, r31
    4e34:	f7 e4       	ldi	r31, 0x47	; 71
    4e36:	ef 2e       	mov	r14, r31
    4e38:	f2 e0       	ldi	r31, 0x02	; 2
    4e3a:	ff 2e       	mov	r15, r31
    4e3c:	f0 2d       	mov	r31, r0
    4e3e:	aa 24       	eor	r10, r10
    4e40:	a3 94       	inc	r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4e42:	f9 01       	movw	r30, r18
    4e44:	e4 5d       	subi	r30, 0xD4	; 212
    4e46:	fe 4f       	sbci	r31, 0xFE	; 254
    4e48:	69 01       	movw	r12, r18
    4e4a:	b3 ed       	ldi	r27, 0xD3	; 211
    4e4c:	cb 1a       	sub	r12, r27
    4e4e:	be ef       	ldi	r27, 0xFE	; 254
    4e50:	db 0a       	sbc	r13, r27
    4e52:	04 e6       	ldi	r16, 0x64	; 100
    4e54:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    4e56:	41 e0       	ldi	r20, 0x01	; 1
    4e58:	29 c0       	rjmp	.+82     	; 0x4eac <main+0x23ec>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4e5a:	bb 24       	eor	r11, r11
    4e5c:	b3 94       	inc	r11
    4e5e:	ba 0c       	add	r11, r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4e60:	80 81       	ld	r24, Z
    4e62:	d6 01       	movw	r26, r12
    4e64:	8c 90       	ld	r8, X
    4e66:	90 e0       	ldi	r25, 0x00	; 0
    4e68:	01 96       	adiw	r24, 0x01	; 1
    4e6a:	b8 01       	movw	r22, r16
    4e6c:	9f d4       	rcall	.+2366   	; 0x57ac <__divmodhi4>
    4e6e:	68 2d       	mov	r22, r8
    4e70:	70 e0       	ldi	r23, 0x00	; 0
    4e72:	86 17       	cp	r24, r22
    4e74:	97 07       	cpc	r25, r23
    4e76:	c9 f0       	breq	.+50     	; 0x4eaa <main+0x23ea>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    4e78:	80 81       	ld	r24, Z
    4e7a:	90 e0       	ldi	r25, 0x00	; 0
    4e7c:	bc 01       	movw	r22, r24
    4e7e:	66 0f       	add	r22, r22
    4e80:	77 1f       	adc	r23, r23
    4e82:	86 0f       	add	r24, r22
    4e84:	97 1f       	adc	r25, r23
    4e86:	d9 01       	movw	r26, r18
    4e88:	a8 0f       	add	r26, r24
    4e8a:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    4e8c:	ac 92       	st	X, r10
    4e8e:	11 96       	adiw	r26, 0x01	; 1
    4e90:	4c 93       	st	X, r20
    4e92:	11 97       	sbiw	r26, 0x01	; 1
    4e94:	12 96       	adiw	r26, 0x02	; 2
    4e96:	9c 92       	st	X, r9

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    4e98:	af b6       	in	r10, 0x3f	; 63
    4e9a:	f8 94       	cli
    4e9c:	80 81       	ld	r24, Z
    4e9e:	90 e0       	ldi	r25, 0x00	; 0
    4ea0:	01 96       	adiw	r24, 0x01	; 1
    4ea2:	b8 01       	movw	r22, r16
    4ea4:	83 d4       	rcall	.+2310   	; 0x57ac <__divmodhi4>
    4ea6:	80 83       	st	Z, r24
    4ea8:	af be       	out	0x3f, r10	; 63
						case 0xe0e040bc:
							if(iotClock::lcdmode) {
								//CharLcd->print(2, 1, "power off       ");
								//iotClock::lcdmode = f//se;
								CharLcd->print(1, 1, "                ");
								CharLcd->print(2, 1, "                ");
    4eaa:	ab 2c       	mov	r10, r11
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4eac:	d7 01       	movw	r26, r14
    4eae:	9d 90       	ld	r9, X+
    4eb0:	7d 01       	movw	r14, r26
    4eb2:	91 10       	cpse	r9, r1
    4eb4:	d2 cf       	rjmp	.-92     	; 0x4e5a <main+0x239a>
								//iotClock::destroy();
							} else {
								//iotClock::lcdmode = t//e;
								CharLcd->print(1, 1, "Samsung,Samrt TV");
								CharLcd->print(2, 1, "power on        ");
    4eb6:	20 91 fc 06 	lds	r18, 0x06FC
    4eba:	30 91 fd 06 	lds	r19, 0x06FD
    4ebe:	0f 2e       	mov	r0, r31
    4ec0:	f6 e3       	ldi	r31, 0x36	; 54
    4ec2:	ef 2e       	mov	r14, r31
    4ec4:	f2 e0       	ldi	r31, 0x02	; 2
    4ec6:	ff 2e       	mov	r15, r31
    4ec8:	f0 2d       	mov	r31, r0
    4eca:	aa 24       	eor	r10, r10
    4ecc:	a3 94       	inc	r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4ece:	f9 01       	movw	r30, r18
    4ed0:	e4 5d       	subi	r30, 0xD4	; 212
    4ed2:	fe 4f       	sbci	r31, 0xFE	; 254
    4ed4:	69 01       	movw	r12, r18
    4ed6:	b3 ed       	ldi	r27, 0xD3	; 211
    4ed8:	cb 1a       	sub	r12, r27
    4eda:	be ef       	ldi	r27, 0xFE	; 254
    4edc:	db 0a       	sbc	r13, r27
    4ede:	04 e6       	ldi	r16, 0x64	; 100
    4ee0:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    4ee2:	42 e0       	ldi	r20, 0x02	; 2
    4ee4:	29 c0       	rjmp	.+82     	; 0x4f38 <main+0x2478>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4ee6:	bb 24       	eor	r11, r11
    4ee8:	b3 94       	inc	r11
    4eea:	ba 0c       	add	r11, r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4eec:	80 81       	ld	r24, Z
    4eee:	d6 01       	movw	r26, r12
    4ef0:	8c 90       	ld	r8, X
    4ef2:	90 e0       	ldi	r25, 0x00	; 0
    4ef4:	01 96       	adiw	r24, 0x01	; 1
    4ef6:	b8 01       	movw	r22, r16
    4ef8:	59 d4       	rcall	.+2226   	; 0x57ac <__divmodhi4>
    4efa:	68 2d       	mov	r22, r8
    4efc:	70 e0       	ldi	r23, 0x00	; 0
    4efe:	86 17       	cp	r24, r22
    4f00:	97 07       	cpc	r25, r23
    4f02:	c9 f0       	breq	.+50     	; 0x4f36 <main+0x2476>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    4f04:	80 81       	ld	r24, Z
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	bc 01       	movw	r22, r24
    4f0a:	66 0f       	add	r22, r22
    4f0c:	77 1f       	adc	r23, r23
    4f0e:	86 0f       	add	r24, r22
    4f10:	97 1f       	adc	r25, r23
    4f12:	d9 01       	movw	r26, r18
    4f14:	a8 0f       	add	r26, r24
    4f16:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    4f18:	ac 92       	st	X, r10
    4f1a:	11 96       	adiw	r26, 0x01	; 1
    4f1c:	4c 93       	st	X, r20
    4f1e:	11 97       	sbiw	r26, 0x01	; 1
    4f20:	12 96       	adiw	r26, 0x02	; 2
    4f22:	9c 92       	st	X, r9

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    4f24:	af b6       	in	r10, 0x3f	; 63
    4f26:	f8 94       	cli
    4f28:	80 81       	ld	r24, Z
    4f2a:	90 e0       	ldi	r25, 0x00	; 0
    4f2c:	01 96       	adiw	r24, 0x01	; 1
    4f2e:	b8 01       	movw	r22, r16
    4f30:	3d d4       	rcall	.+2170   	; 0x57ac <__divmodhi4>
    4f32:	80 83       	st	Z, r24
    4f34:	af be       	out	0x3f, r10	; 63
								CharLcd->print(1, 1, "                ");
								CharLcd->print(2, 1, "                ");
								//iotClock::destroy();
							} else {
								//iotClock::lcdmode = t//e;
								CharLcd->print(1, 1, "Samsung,Samrt TV");
    4f36:	ab 2c       	mov	r10, r11
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4f38:	d7 01       	movw	r26, r14
    4f3a:	9d 90       	ld	r9, X+
    4f3c:	7d 01       	movw	r14, r26
    4f3e:	91 10       	cpse	r9, r1
    4f40:	d2 cf       	rjmp	.-92     	; 0x4ee6 <main+0x2426>
    4f42:	3d c0       	rjmp	.+122    	; 0x4fbe <main+0x24fe>
					}
					if(i == NumKeys)
						Key[NumKeys++] = dec->getValue();
					*/
				}
			} else dec->dumpIntervals();
    4f44:	e0 90 f6 06 	lds	r14, 0x06F6
    4f48:	f0 90 f7 06 	lds	r15, 0x06F7
		unsigned long	getValue()	{ return(iValue); }
		int				getBits()	{ return(inBits); }

		void
		dumpIntervals() {
			printf("%d:", iVendor);
    4f4c:	f7 01       	movw	r30, r14
    4f4e:	80 81       	ld	r24, Z
    4f50:	1f 92       	push	r1
    4f52:	8f 93       	push	r24
    4f54:	8d e9       	ldi	r24, 0x9D	; 157
    4f56:	93 e0       	ldi	r25, 0x03	; 3
    4f58:	9f 93       	push	r25
    4f5a:	8f 93       	push	r24
    4f5c:	be d7       	rcall	.+3964   	; 0x5eda <printf>
			for(int i = 0; i < inIntervals; i++)
    4f5e:	d7 01       	movw	r26, r14
    4f60:	12 96       	adiw	r26, 0x02	; 2
    4f62:	8c 91       	ld	r24, X
    4f64:	0f 90       	pop	r0
    4f66:	0f 90       	pop	r0
    4f68:	0f 90       	pop	r0
    4f6a:	0f 90       	pop	r0
    4f6c:	88 23       	and	r24, r24
    4f6e:	01 f1       	breq	.+64     	; 0x4fb0 <main+0x24f0>
    4f70:	00 e0       	ldi	r16, 0x00	; 0
    4f72:	10 e0       	ldi	r17, 0x00	; 0
				printf(" %d", iInterval[i]);
    4f74:	0f 2e       	mov	r0, r31
    4f76:	f1 ea       	ldi	r31, 0xA1	; 161
    4f78:	cf 2e       	mov	r12, r31
    4f7a:	f3 e0       	ldi	r31, 0x03	; 3
    4f7c:	df 2e       	mov	r13, r31
    4f7e:	f0 2d       	mov	r31, r0
    4f80:	f8 01       	movw	r30, r16
    4f82:	ee 0f       	add	r30, r30
    4f84:	ff 1f       	adc	r31, r31
    4f86:	ee 0d       	add	r30, r14
    4f88:	ff 1d       	adc	r31, r15
    4f8a:	83 81       	ldd	r24, Z+3	; 0x03
    4f8c:	94 81       	ldd	r25, Z+4	; 0x04
    4f8e:	9f 93       	push	r25
    4f90:	8f 93       	push	r24
    4f92:	df 92       	push	r13
    4f94:	cf 92       	push	r12
    4f96:	a1 d7       	rcall	.+3906   	; 0x5eda <printf>
		int				getBits()	{ return(inBits); }

		void
		dumpIntervals() {
			printf("%d:", iVendor);
			for(int i = 0; i < inIntervals; i++)
    4f98:	0f 5f       	subi	r16, 0xFF	; 255
    4f9a:	1f 4f       	sbci	r17, 0xFF	; 255
    4f9c:	f7 01       	movw	r30, r14
    4f9e:	82 81       	ldd	r24, Z+2	; 0x02
    4fa0:	90 e0       	ldi	r25, 0x00	; 0
    4fa2:	0f 90       	pop	r0
    4fa4:	0f 90       	pop	r0
    4fa6:	0f 90       	pop	r0
    4fa8:	0f 90       	pop	r0
    4faa:	08 17       	cp	r16, r24
    4fac:	19 07       	cpc	r17, r25
    4fae:	44 f3       	brlt	.-48     	; 0x4f80 <main+0x24c0>
				printf(" %d", iInterval[i]);
			printf("\n\r");
    4fb0:	8a e9       	ldi	r24, 0x9A	; 154
    4fb2:	93 e0       	ldi	r25, 0x03	; 3
    4fb4:	9f 93       	push	r25
    4fb6:	8f 93       	push	r24
    4fb8:	90 d7       	rcall	.+3872   	; 0x5eda <printf>
    4fba:	0f 90       	pop	r0
    4fbc:	0f 90       	pop	r0
			}
		}
		void
		configure(iotTimerPsd aPsd, unsigned int aCount) {
			unsigned char	psd = 0;
			if(iId == iotcTimer0) {
    4fbe:	e0 91 e9 06 	lds	r30, 0x06E9
    4fc2:	f0 91 ea 06 	lds	r31, 0x06EA
					case iotcPsd256: psd = 4; break;
					case iotcPsd1024: psd = 5; break;
					default: return;
				}
			}
			switch(iId) {
    4fc6:	80 81       	ld	r24, Z
    4fc8:	82 30       	cpi	r24, 0x02	; 2
    4fca:	79 f0       	breq	.+30     	; 0x4fea <main+0x252a>
    4fcc:	18 f4       	brcc	.+6      	; 0x4fd4 <main+0x2514>
    4fce:	81 30       	cpi	r24, 0x01	; 1
    4fd0:	31 f0       	breq	.+12     	; 0x4fde <main+0x251e>
    4fd2:	2d c0       	rjmp	.+90     	; 0x502e <main+0x256e>
    4fd4:	83 30       	cpi	r24, 0x03	; 3
    4fd6:	a1 f0       	breq	.+40     	; 0x5000 <main+0x2540>
    4fd8:	84 30       	cpi	r24, 0x04	; 4
    4fda:	c1 f0       	breq	.+48     	; 0x500c <main+0x254c>
    4fdc:	28 c0       	rjmp	.+80     	; 0x502e <main+0x256e>
				case iotcTimer0:
					TCNT0 = 0; OCR0 = aCount & 0xff;
    4fde:	12 be       	out	0x32, r1	; 50
    4fe0:	80 e2       	ldi	r24, 0x20	; 32
    4fe2:	81 bf       	out	0x31, r24	; 49
					TCCR0 = (1 << WGM01) | psd;
    4fe4:	89 e0       	ldi	r24, 0x09	; 9
    4fe6:	83 bf       	out	0x33, r24	; 51
    4fe8:	22 c0       	rjmp	.+68     	; 0x502e <main+0x256e>
					break;
				case iotcTimer1:
					TCCR1A = 0; TCCR1B = 0; TCNT1 = 0; OCR1A = aCount;
    4fea:	1f bc       	out	0x2f, r1	; 47
    4fec:	1e bc       	out	0x2e, r1	; 46
    4fee:	1d bc       	out	0x2d, r1	; 45
    4ff0:	1c bc       	out	0x2c, r1	; 44
    4ff2:	80 e2       	ldi	r24, 0x20	; 32
    4ff4:	93 e0       	ldi	r25, 0x03	; 3
    4ff6:	9b bd       	out	0x2b, r25	; 43
    4ff8:	8a bd       	out	0x2a, r24	; 42
					TCCR1B = (1 << WGM12) | psd;
    4ffa:	89 e0       	ldi	r24, 0x09	; 9
    4ffc:	8e bd       	out	0x2e, r24	; 46
    4ffe:	17 c0       	rjmp	.+46     	; 0x502e <main+0x256e>
					break;
				case iotcTimer2:
					TCNT2 = 0; OCR2 = aCount & 0xff;
    5000:	14 bc       	out	0x24, r1	; 36
    5002:	80 e2       	ldi	r24, 0x20	; 32
    5004:	83 bd       	out	0x23, r24	; 35
					TCCR2 = (1 << WGM21) | psd;
    5006:	89 e0       	ldi	r24, 0x09	; 9
    5008:	85 bd       	out	0x25, r24	; 37
    500a:	11 c0       	rjmp	.+34     	; 0x502e <main+0x256e>
					break;
				case iotcTimer3:
					TCCR3A = 0; TCCR3B = 0; TCNT3 = 0; OCR3A = aCount;
    500c:	10 92 8b 00 	sts	0x008B, r1
    5010:	ea e8       	ldi	r30, 0x8A	; 138
    5012:	f0 e0       	ldi	r31, 0x00	; 0
    5014:	10 82       	st	Z, r1
    5016:	10 92 89 00 	sts	0x0089, r1
    501a:	10 92 88 00 	sts	0x0088, r1
    501e:	80 e2       	ldi	r24, 0x20	; 32
    5020:	93 e0       	ldi	r25, 0x03	; 3
    5022:	90 93 87 00 	sts	0x0087, r25
    5026:	80 93 86 00 	sts	0x0086, r24
					TCCR3B = (1 << WGM32) | psd;
    502a:	89 e0       	ldi	r24, 0x09	; 9
    502c:	80 83       	st	Z, r24
		void
		enable() {
			iTimer->configure(iotTimer::iotcPsd1,
				F_CPU * iotcIrUSecPerTick / 1000000);

			iDecoder->iVendor = iotcUnknown;
    502e:	e0 91 eb 06 	lds	r30, 0x06EB
    5032:	f0 91 ec 06 	lds	r31, 0x06EC
    5036:	10 82       	st	Z, r1
			iDecoder->iState = iotcIrStateIdle;
    5038:	e0 91 eb 06 	lds	r30, 0x06EB
    503c:	f0 91 ec 06 	lds	r31, 0x06EC
    5040:	11 82       	std	Z+1, r1	; 0x01
			iDecoder->inIntervals = 0;
    5042:	e0 91 eb 06 	lds	r30, 0x06EB
    5046:	f0 91 ec 06 	lds	r31, 0x06EC
    504a:	12 82       	std	Z+2, r1	; 0x02
			iDecoder->iTimer = 0;
    504c:	e5 53       	subi	r30, 0x35	; 53
    504e:	ff 4f       	sbci	r31, 0xFF	; 255
    5050:	11 82       	std	Z+1, r1	; 0x01
    5052:	10 82       	st	Z, r1
					iCallback3 = (void (*)(void)) NULL; break;
				default: break;
			}
			iId = iotcTimerNone;
		}
		iotTimerId getId()		{ return(iId); }
    5054:	e0 91 e9 06 	lds	r30, 0x06E9
    5058:	f0 91 ea 06 	lds	r31, 0x06EA

			// set pin direction to input.
			if(iTimer->getId() == iotTimer::iotcTimer1) DDRB &= ~(1 << PB4);
    505c:	80 81       	ld	r24, Z
    505e:	82 30       	cpi	r24, 0x02	; 2
    5060:	11 f4       	brne	.+4      	; 0x5066 <main+0x25a6>
    5062:	bc 98       	cbi	0x17, 4	; 23
    5064:	01 c0       	rjmp	.+2      	; 0x5068 <main+0x25a8>
			else DDRE &= ~(1 << PE2);	// iotTimer::iotcTimer3
    5066:	12 98       	cbi	0x02, 2	; 2
				default: return;
			}
		}
		void
		enableInterrupt(void (* aCallback) (void)) {
			switch(iId) {
    5068:	e0 91 e9 06 	lds	r30, 0x06E9
    506c:	f0 91 ea 06 	lds	r31, 0x06EA
    5070:	80 81       	ld	r24, Z
    5072:	82 30       	cpi	r24, 0x02	; 2
    5074:	b1 f0       	breq	.+44     	; 0x50a2 <main+0x25e2>
    5076:	20 f4       	brcc	.+8      	; 0x5080 <main+0x25c0>
    5078:	81 30       	cpi	r24, 0x01	; 1
    507a:	41 f0       	breq	.+16     	; 0x508c <main+0x25cc>
    507c:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <main+0x324>
    5080:	83 30       	cpi	r24, 0x03	; 3
    5082:	d1 f0       	breq	.+52     	; 0x50b8 <main+0x25f8>
    5084:	84 30       	cpi	r24, 0x04	; 4
    5086:	19 f1       	breq	.+70     	; 0x50ce <main+0x260e>
    5088:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <main+0x324>
				case iotcTimer0:
					iCallback0 = aCallback; TIMSK |= (1 << OCIE0); break;
    508c:	85 eb       	ldi	r24, 0xB5	; 181
    508e:	94 e0       	ldi	r25, 0x04	; 4
    5090:	90 93 e6 06 	sts	0x06E6, r25
    5094:	80 93 e5 06 	sts	0x06E5, r24
    5098:	87 b7       	in	r24, 0x37	; 55
    509a:	82 60       	ori	r24, 0x02	; 2
    509c:	87 bf       	out	0x37, r24	; 55
    509e:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <main+0x324>
				case iotcTimer1:
					iCallback1 = aCallback; TIMSK |= (1 << OCIE1A); break;
    50a2:	85 eb       	ldi	r24, 0xB5	; 181
    50a4:	94 e0       	ldi	r25, 0x04	; 4
    50a6:	90 93 e4 06 	sts	0x06E4, r25
    50aa:	80 93 e3 06 	sts	0x06E3, r24
    50ae:	87 b7       	in	r24, 0x37	; 55
    50b0:	80 61       	ori	r24, 0x10	; 16
    50b2:	87 bf       	out	0x37, r24	; 55
    50b4:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <main+0x324>
				case iotcTimer2:
					iCallback2 = aCallback; TIMSK |= (1 << OCIE2); break;
    50b8:	85 eb       	ldi	r24, 0xB5	; 181
    50ba:	94 e0       	ldi	r25, 0x04	; 4
    50bc:	90 93 e2 06 	sts	0x06E2, r25
    50c0:	80 93 e1 06 	sts	0x06E1, r24
    50c4:	87 b7       	in	r24, 0x37	; 55
    50c6:	80 68       	ori	r24, 0x80	; 128
    50c8:	87 bf       	out	0x37, r24	; 55
    50ca:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <main+0x324>
				case iotcTimer3:
					iCallback3 = aCallback; ETIMSK |= (1 << OCIE3A); break;
    50ce:	85 eb       	ldi	r24, 0xB5	; 181
    50d0:	94 e0       	ldi	r25, 0x04	; 4
    50d2:	90 93 e0 06 	sts	0x06E0, r25
    50d6:	80 93 df 06 	sts	0x06DF, r24
    50da:	ed e7       	ldi	r30, 0x7D	; 125
    50dc:	f0 e0       	ldi	r31, 0x00	; 0
    50de:	80 81       	ld	r24, Z
    50e0:	80 61       	ori	r24, 0x10	; 16
    50e2:	80 83       	st	Z, r24
    50e4:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <main+0x324>
			if(irx1Tail != irx1Head) {	// buffer not empty
				if(irx1Callback) (* irx1Callback)();
			}
			if((itx0Tail != itx0Head) && (UCSR0A & (1 << UDRE0))) {
				// buffer is not empty but data register is empty.
				UDR0 = itx0Buff[itx0Tail];
    50e8:	80 91 dd 06 	lds	r24, 0x06DD
    50ec:	e0 91 d9 06 	lds	r30, 0x06D9
    50f0:	f0 91 da 06 	lds	r31, 0x06DA
    50f4:	e8 0f       	add	r30, r24
    50f6:	f1 1d       	adc	r31, r1
    50f8:	80 81       	ld	r24, Z
    50fa:	8c b9       	out	0x0c, r24	; 12
				iotmAtomic(itx0Tail = (itx0Tail + 1) % iotcUartBuffSize);
    50fc:	2f b7       	in	r18, 0x3f	; 63
    50fe:	f8 94       	cli
    5100:	80 91 dd 06 	lds	r24, 0x06DD
    5104:	90 e0       	ldi	r25, 0x00	; 0
    5106:	01 96       	adiw	r24, 0x01	; 1
    5108:	8f 77       	andi	r24, 0x7F	; 127
    510a:	90 78       	andi	r25, 0x80	; 128
    510c:	80 93 dd 06 	sts	0x06DD, r24
    5110:	2f bf       	out	0x3f, r18	; 63
    5112:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <main+0xb44>
			}
			if((itx1Tail != itx1Head) && (UCSR1A & (1 << UDRE1))) {
				// buffer is not empty but data register is empty.
				UDR1 = itx1Buff[itx1Tail];
    5116:	80 91 d5 06 	lds	r24, 0x06D5
    511a:	e0 91 d1 06 	lds	r30, 0x06D1
    511e:	f0 91 d2 06 	lds	r31, 0x06D2
    5122:	e8 0f       	add	r30, r24
    5124:	f1 1d       	adc	r31, r1
    5126:	80 81       	ld	r24, Z
    5128:	80 93 9c 00 	sts	0x009C, r24
				iotmAtomic(itx1Tail = (itx1Tail + 1) % iotcUartBuffSize);
    512c:	2f b7       	in	r18, 0x3f	; 63
    512e:	f8 94       	cli
    5130:	80 91 d5 06 	lds	r24, 0x06D5
    5134:	90 e0       	ldi	r25, 0x00	; 0
    5136:	01 96       	adiw	r24, 0x01	; 1
    5138:	8f 77       	andi	r24, 0x7F	; 127
    513a:	90 78       	andi	r25, 0x80	; 128
    513c:	80 93 d5 06 	sts	0x06D5, r24
    5140:	2f bf       	out	0x3f, r18	; 63
    5142:	0c 94 0e 1b 	jmp	0x361c	; 0x361c <main+0xb5c>
		getAngle(void) {	// in degree
			return (iAngle - iotcServoTicksAtZero) * iotcServoDeltaDegree;
		}
		static bool
		parseLine(char *s) {
			if(strncmp(s, "servo", 5) == 0) {
    5146:	45 e0       	ldi	r20, 0x05	; 5
    5148:	50 e0       	ldi	r21, 0x00	; 0
    514a:	65 ea       	ldi	r22, 0xA5	; 165
    514c:	73 e0       	ldi	r23, 0x03	; 3
    514e:	c3 01       	movw	r24, r6
    5150:	64 d6       	rcall	.+3272   	; 0x5e1a <strncmp>
    5152:	89 2b       	or	r24, r25
    5154:	11 f4       	brne	.+4      	; 0x515a <main+0x269a>
    5156:	0c 94 ef 1e 	jmp	0x3dde	; 0x3dde <main+0x131e>
		iPinMask = iotPin::getPinMask(pin);
		*ipPort |= ~iPinMask;
	}
	static bool
	parseLine(char *s) {
		if(strncmp(s, "led", 3) == 0) {
    515a:	43 e0       	ldi	r20, 0x03	; 3
    515c:	50 e0       	ldi	r21, 0x00	; 0
    515e:	6e ea       	ldi	r22, 0xAE	; 174
    5160:	73 e0       	ldi	r23, 0x03	; 3
    5162:	c3 01       	movw	r24, r6
    5164:	5a d6       	rcall	.+3252   	; 0x5e1a <strncmp>
    5166:	89 2b       	or	r24, r25
    5168:	11 f4       	brne	.+4      	; 0x516e <main+0x26ae>
    516a:	0c 94 51 1f 	jmp	0x3ea2	; 0x3ea2 <main+0x13e2>
	iPinMask = iotPin::getPinMask(pin);
	*ipPort |= ~iPinMask;
}
static bool
parseLine(char *s) {
	if(strncmp(s, "subled", 6) == 0) {
    516e:	46 e0       	ldi	r20, 0x06	; 6
    5170:	50 e0       	ldi	r21, 0x00	; 0
    5172:	6b ea       	ldi	r22, 0xAB	; 171
    5174:	73 e0       	ldi	r23, 0x03	; 3
    5176:	c3 01       	movw	r24, r6
    5178:	50 d6       	rcall	.+3232   	; 0x5e1a <strncmp>
    517a:	89 2b       	or	r24, r25
    517c:	11 f4       	brne	.+4      	; 0x5182 <main+0x26c2>
    517e:	0c 94 87 1f 	jmp	0x3f0e	; 0x3f0e <main+0x144e>
	if(iotServo::parseLine(s)) return;
	if(iotLed::parseLine(s)) return;
	if(iotSubLed::parseLine(s)) return;
	
	
	if(iotClock::parseLine(s)) return;
    5182:	c3 01       	movw	r24, r6
    5184:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <_ZN8iotClock9parseLineEPc>
    5188:	81 11       	cpse	r24, r1
    518a:	66 c8       	rjmp	.-3892   	; 0x4258 <main+0x1798>
    518c:	0c 94 bd 1f 	jmp	0x3f7a	; 0x3f7a <main+0x14ba>
	//if(iotDustSensor::parseLine(s)) return;
	
	if(parseFan(s)) return;
	
	if(strncmp(s, "0x", 2) == 0) {
    5190:	42 e0       	ldi	r20, 0x02	; 2
    5192:	50 e0       	ldi	r21, 0x00	; 0
    5194:	62 eb       	ldi	r22, 0xB2	; 178
    5196:	73 e0       	ldi	r23, 0x03	; 3
    5198:	c3 01       	movw	r24, r6
    519a:	3f d6       	rcall	.+3198   	; 0x5e1a <strncmp>
    519c:	89 2b       	or	r24, r25
    519e:	09 f0       	breq	.+2      	; 0x51a2 <main+0x26e2>
    51a0:	1e c8       	rjmp	.-4036   	; 0x41de <main+0x171e>
    51a2:	0c 94 cb 20 	jmp	0x4196	; 0x4196 <main+0x16d6>
		// 추가한 부분
		
		
		
		
		if((dec = IrRecv->getDecoder())) {
    51a6:	10 92 f7 06 	sts	0x06F7, r1
    51aa:	10 92 f6 06 	sts	0x06F6, r1
    51ae:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <main+0x324>
			// initial mark
			if(!matchMark(iInterval[offset], iotcNecHdrMark))
				return(false);
			offset++;
			// check for repeat
			if(inIntervals == 4 &&
    51b2:	82 81       	ldd	r24, Z+2	; 0x02
				matchSpace(iInterval[offset], iotcNecRptSpace) &&
    51b4:	84 30       	cpi	r24, 0x04	; 4
    51b6:	d1 f4       	brne	.+52     	; 0x51ec <main+0x272c>
    51b8:	6c c8       	rjmp	.-3880   	; 0x4292 <main+0x17d2>
				matchMark(iInterval[offset + 1], iotcNecBitMark)) {
    51ba:	81 85       	ldd	r24, Z+9	; 0x09
    51bc:	92 85       	ldd	r25, Z+10	; 0x0a

		bool
		matchMark(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs + iotcIrMarkExcess) &&
    51be:	09 97       	sbiw	r24, 0x09	; 9
    51c0:	09 97       	sbiw	r24, 0x09	; 9
    51c2:	a0 f4       	brcc	.+40     	; 0x51ec <main+0x272c>
			offset++;
			// check for repeat
			if(inIntervals == 4 &&
				matchSpace(iInterval[offset], iotcNecRptSpace) &&
				matchMark(iInterval[offset + 1], iotcNecBitMark)) {
				inBits = 0;
    51c4:	df 01       	movw	r26, r30
    51c6:	ad 52       	subi	r26, 0x2D	; 45
    51c8:	bf 4f       	sbci	r27, 0xFF	; 255
    51ca:	1d 92       	st	X+, r1
    51cc:	1c 92       	st	X, r1
				iValue = iotcRepeat;
    51ce:	4f ef       	ldi	r20, 0xFF	; 255
    51d0:	5f ef       	ldi	r21, 0xFF	; 255
    51d2:	ba 01       	movw	r22, r20
    51d4:	9f 01       	movw	r18, r30
    51d6:	21 53       	subi	r18, 0x31	; 49
    51d8:	3f 4f       	sbci	r19, 0xFF	; 255
    51da:	d9 01       	movw	r26, r18
    51dc:	4d 93       	st	X+, r20
    51de:	5d 93       	st	X+, r21
    51e0:	6d 93       	st	X+, r22
    51e2:	7c 93       	st	X, r23
    51e4:	13 97       	sbiw	r26, 0x03	; 3
				iVendor = iotcNec;
    51e6:	81 e0       	ldi	r24, 0x01	; 1
    51e8:	80 83       	st	Z, r24
    51ea:	f9 c8       	rjmp	.-3598   	; 0x43de <main+0x191e>
				return true;
			}
			if(inIntervals < 2 * iotcNecBits + 4) return false;
    51ec:	82 81       	ldd	r24, Z+2	; 0x02
    51ee:	84 34       	cpi	r24, 0x44	; 68
    51f0:	08 f0       	brcs	.+2      	; 0x51f4 <main+0x2734>
    51f2:	56 c8       	rjmp	.-3924   	; 0x42a0 <main+0x17e0>
    51f4:	30 c0       	rjmp	.+96     	; 0x5256 <main+0x2796>
    51f6:	a9 01       	movw	r20, r18
    51f8:	4f 5f       	subi	r20, 0xFF	; 255
    51fa:	5f 4f       	sbci	r21, 0xFF	; 255
			offset++;
			for(int i = 0; i < iotcNecBits; i++) {
				if(!matchMark(iInterval[offset], iotcNecBitMark))
					return false;
				offset++;
				if(matchSpace(iInterval[offset], iotcNecOneSpace))
    51fc:	ba 01       	movw	r22, r20
    51fe:	66 0f       	add	r22, r22
    5200:	77 1f       	adc	r23, r23
    5202:	6e 0f       	add	r22, r30
    5204:	7f 1f       	adc	r23, r31
    5206:	db 01       	movw	r26, r22
    5208:	13 96       	adiw	r26, 0x03	; 3
    520a:	6d 91       	ld	r22, X+
    520c:	7c 91       	ld	r23, X
    520e:	14 97       	sbiw	r26, 0x04	; 4

		bool
		matchSpace(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs - iotcIrMarkExcess) &&
    5210:	66 51       	subi	r22, 0x16	; 22
    5212:	71 09       	sbc	r23, r1
    5214:	61 31       	cpi	r22, 0x11	; 17
    5216:	71 05       	cpc	r23, r1
    5218:	58 f4       	brcc	.+22     	; 0x5230 <main+0x2770>
			for(int i = 0; i < iotcNecBits; i++) {
				if(!matchMark(iInterval[offset], iotcNecBitMark))
					return false;
				offset++;
				if(matchSpace(iInterval[offset], iotcNecOneSpace))
					data = (data << 1) | 1;
    521a:	d7 01       	movw	r26, r14
    521c:	c6 01       	movw	r24, r12
    521e:	88 0f       	add	r24, r24
    5220:	99 1f       	adc	r25, r25
    5222:	aa 1f       	adc	r26, r26
    5224:	bb 1f       	adc	r27, r27
    5226:	6c 01       	movw	r12, r24
    5228:	7d 01       	movw	r14, r26
    522a:	68 94       	set
    522c:	c0 f8       	bld	r12, 0
    522e:	55 c8       	rjmp	.-3926   	; 0x42da <main+0x181a>
				else if(matchSpace(
					iInterval[offset], iotcNecZeroSpace)) data <<= 1;
    5230:	44 0f       	add	r20, r20
    5232:	55 1f       	adc	r21, r21
    5234:	4e 0f       	add	r20, r30
    5236:	5f 1f       	adc	r21, r31
    5238:	da 01       	movw	r26, r20
    523a:	13 96       	adiw	r26, 0x03	; 3
    523c:	4d 91       	ld	r20, X+
    523e:	5c 91       	ld	r21, X
    5240:	14 97       	sbiw	r26, 0x04	; 4

		bool
		matchSpace(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs - iotcIrMarkExcess) &&
    5242:	46 50       	subi	r20, 0x06	; 6
    5244:	51 09       	sbc	r21, r1
    5246:	47 30       	cpi	r20, 0x07	; 7
    5248:	51 05       	cpc	r21, r1
    524a:	28 f4       	brcc	.+10     	; 0x5256 <main+0x2796>
					return false;
				offset++;
				if(matchSpace(iInterval[offset], iotcNecOneSpace))
					data = (data << 1) | 1;
				else if(matchSpace(
					iInterval[offset], iotcNecZeroSpace)) data <<= 1;
    524c:	cc 0c       	add	r12, r12
    524e:	dd 1c       	adc	r13, r13
    5250:	ee 1c       	adc	r14, r14
    5252:	ff 1c       	adc	r15, r15
    5254:	42 c8       	rjmp	.-3964   	; 0x42da <main+0x181a>
		bool
		decodeLg() {
			long	data = 0;
			int		offset = 1;		// skip first space
			
			if (!matchMark(iInterval[offset], iotcLgHdrMark))
    5256:	85 81       	ldd	r24, Z+5	; 0x05
    5258:	96 81       	ldd	r25, Z+6	; 0x06

		bool
		matchMark(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs + iotcIrMarkExcess) &&
    525a:	89 57       	subi	r24, 0x79	; 121
    525c:	91 09       	sbc	r25, r1
    525e:	83 35       	cpi	r24, 0x53	; 83
    5260:	91 05       	cpc	r25, r1
    5262:	08 f0       	brcs	.+2      	; 0x5266 <main+0x27a6>
    5264:	48 c0       	rjmp	.+144    	; 0x52f6 <main+0x2836>
			
			if (!matchMark(iInterval[offset], iotcLgHdrMark))
			// initial mark
				return false;
			offset++;
			if (inIntervals < 2 * iotcLgBits + 1) return false;
    5266:	82 81       	ldd	r24, Z+2	; 0x02
    5268:	89 33       	cpi	r24, 0x39	; 57
    526a:	08 f0       	brcs	.+2      	; 0x526e <main+0x27ae>
    526c:	4e c8       	rjmp	.-3940   	; 0x430a <main+0x184a>
    526e:	43 c0       	rjmp	.+134    	; 0x52f6 <main+0x2836>
    5270:	a9 01       	movw	r20, r18
    5272:	4f 5f       	subi	r20, 0xFF	; 255
    5274:	5f 4f       	sbci	r21, 0xFF	; 255
			offset++;
			for (int i = 0; i < iotcLgBits; i++) {
				if (!matchMark(iInterval[offset], iotcLgBitMark))
					return false;
				offset++;
				if (matchSpace(iInterval[offset], iotcLgOneSpace))
    5276:	ba 01       	movw	r22, r20
    5278:	66 0f       	add	r22, r22
    527a:	77 1f       	adc	r23, r23
    527c:	6e 0f       	add	r22, r30
    527e:	7f 1f       	adc	r23, r31
    5280:	db 01       	movw	r26, r22
    5282:	13 96       	adiw	r26, 0x03	; 3
    5284:	6d 91       	ld	r22, X+
    5286:	7c 91       	ld	r23, X
    5288:	14 97       	sbiw	r26, 0x04	; 4

		bool
		matchSpace(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs - iotcIrMarkExcess) &&
    528a:	66 51       	subi	r22, 0x16	; 22
    528c:	71 09       	sbc	r23, r1
    528e:	61 31       	cpi	r22, 0x11	; 17
    5290:	71 05       	cpc	r23, r1
    5292:	58 f4       	brcc	.+22     	; 0x52aa <main+0x27ea>
			for (int i = 0; i < iotcLgBits; i++) {
				if (!matchMark(iInterval[offset], iotcLgBitMark))
					return false;
				offset++;
				if (matchSpace(iInterval[offset], iotcLgOneSpace))
					data = (data << 1) | 1;
    5294:	d7 01       	movw	r26, r14
    5296:	c6 01       	movw	r24, r12
    5298:	88 0f       	add	r24, r24
    529a:	99 1f       	adc	r25, r25
    529c:	aa 1f       	adc	r26, r26
    529e:	bb 1f       	adc	r27, r27
    52a0:	6c 01       	movw	r12, r24
    52a2:	7d 01       	movw	r14, r26
    52a4:	68 94       	set
    52a6:	c0 f8       	bld	r12, 0
    52a8:	4c c8       	rjmp	.-3944   	; 0x4342 <main+0x1882>
				else if (matchSpace(
					iInterval[offset], iotcLgZeroSpace))
    52aa:	44 0f       	add	r20, r20
    52ac:	55 1f       	adc	r21, r21
    52ae:	4e 0f       	add	r20, r30
    52b0:	5f 1f       	adc	r21, r31
    52b2:	da 01       	movw	r26, r20
    52b4:	13 96       	adiw	r26, 0x03	; 3
    52b6:	4d 91       	ld	r20, X+
    52b8:	5c 91       	ld	r21, X
    52ba:	14 97       	sbiw	r26, 0x04	; 4

		bool
		matchSpace(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs - iotcIrMarkExcess) &&
    52bc:	46 50       	subi	r20, 0x06	; 6
    52be:	51 09       	sbc	r21, r1
    52c0:	47 30       	cpi	r20, 0x07	; 7
    52c2:	51 05       	cpc	r21, r1
    52c4:	c0 f4       	brcc	.+48     	; 0x52f6 <main+0x2836>
				offset++;
				if (matchSpace(iInterval[offset], iotcLgOneSpace))
					data = (data << 1) | 1;
				else if (matchSpace(
					iInterval[offset], iotcLgZeroSpace))
					data <<= 1;
    52c6:	cc 0c       	add	r12, r12
    52c8:	dd 1c       	adc	r13, r13
    52ca:	ee 1c       	adc	r14, r14
    52cc:	ff 1c       	adc	r15, r15
    52ce:	39 c8       	rjmp	.-3982   	; 0x4342 <main+0x1882>
			}
			// stop bit
			if (!matchMark(iInterval[offset], iotcLgBitMark))
				return false;
			// success
			inBits = iotcLgBits;
    52d0:	4c e1       	ldi	r20, 0x1C	; 28
    52d2:	50 e0       	ldi	r21, 0x00	; 0
    52d4:	9f 01       	movw	r18, r30
    52d6:	2d 52       	subi	r18, 0x2D	; 45
    52d8:	3f 4f       	sbci	r19, 0xFF	; 255
    52da:	d9 01       	movw	r26, r18
    52dc:	4d 93       	st	X+, r20
    52de:	5c 93       	st	X, r21
			iValue = data;
    52e0:	24 50       	subi	r18, 0x04	; 4
    52e2:	31 09       	sbc	r19, r1
    52e4:	d9 01       	movw	r26, r18
    52e6:	cd 92       	st	X+, r12
    52e8:	dd 92       	st	X+, r13
    52ea:	ed 92       	st	X+, r14
    52ec:	fc 92       	st	X, r15
    52ee:	13 97       	sbiw	r26, 0x03	; 3
			iVendor = iotcLg;
    52f0:	8c e0       	ldi	r24, 0x0C	; 12
    52f2:	80 83       	st	Z, r24
    52f4:	74 c8       	rjmp	.-3864   	; 0x43de <main+0x191e>
		decodeSamsung() {
			long	data = 0;
			int		offset = 1;		// skip first space
			
			// initial mark
			if (!matchMark(iInterval[offset], iotcSamsungHdrMark))
    52f6:	85 81       	ldd	r24, Z+5	; 0x05
    52f8:	96 81       	ldd	r25, Z+6	; 0x06

		bool
		matchMark(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs + iotcIrMarkExcess) &&
    52fa:	8c 54       	subi	r24, 0x4C	; 76
    52fc:	91 09       	sbc	r25, r1
    52fe:	c5 97       	sbiw	r24, 0x35	; 53
    5300:	08 f0       	brcs	.+2      	; 0x5304 <main+0x2844>
    5302:	20 ce       	rjmp	.-960    	; 0x4f44 <main+0x2484>
			// initial mark
			if (!matchMark(iInterval[offset], iotcSamsungHdrMark))
				return false;
			offset++;
			// check for repeat
			if(inIntervals == 4 &&
    5304:	82 81       	ldd	r24, Z+2	; 0x02
				matchSpace(iInterval[offset], iotcSamsungRptSpace) &&
    5306:	84 30       	cpi	r24, 0x04	; 4
    5308:	d1 f4       	brne	.+52     	; 0x533e <main+0x287e>
    530a:	30 c8       	rjmp	.-4000   	; 0x436c <main+0x18ac>
				matchMark(
					iInterval[offset + 1], iotcSamsungBitMark)) {
    530c:	81 85       	ldd	r24, Z+9	; 0x09
    530e:	92 85       	ldd	r25, Z+10	; 0x0a

		bool
		matchMark(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs + iotcIrMarkExcess) &&
    5310:	09 97       	sbiw	r24, 0x09	; 9
    5312:	09 97       	sbiw	r24, 0x09	; 9
    5314:	a0 f4       	brcc	.+40     	; 0x533e <main+0x287e>
			// check for repeat
			if(inIntervals == 4 &&
				matchSpace(iInterval[offset], iotcSamsungRptSpace) &&
				matchMark(
					iInterval[offset + 1], iotcSamsungBitMark)) {
				inBits = 0;
    5316:	df 01       	movw	r26, r30
    5318:	ad 52       	subi	r26, 0x2D	; 45
    531a:	bf 4f       	sbci	r27, 0xFF	; 255
    531c:	1d 92       	st	X+, r1
    531e:	1c 92       	st	X, r1
				iValue = iotcRepeat;
    5320:	4f ef       	ldi	r20, 0xFF	; 255
    5322:	5f ef       	ldi	r21, 0xFF	; 255
    5324:	ba 01       	movw	r22, r20
    5326:	9f 01       	movw	r18, r30
    5328:	21 53       	subi	r18, 0x31	; 49
    532a:	3f 4f       	sbci	r19, 0xFF	; 255
    532c:	d9 01       	movw	r26, r18
    532e:	4d 93       	st	X+, r20
    5330:	5d 93       	st	X+, r21
    5332:	6d 93       	st	X+, r22
    5334:	7c 93       	st	X, r23
    5336:	13 97       	sbiw	r26, 0x03	; 3
				iVendor = iotcSamsung;
    5338:	8b e0       	ldi	r24, 0x0B	; 11
    533a:	80 83       	st	Z, r24
    533c:	50 c8       	rjmp	.-3936   	; 0x43de <main+0x191e>
				return true;
			}
			if (inIntervals < 2 * iotcSamsungBits + 4) return false;
    533e:	82 81       	ldd	r24, Z+2	; 0x02
    5340:	84 34       	cpi	r24, 0x44	; 68
    5342:	08 f0       	brcs	.+2      	; 0x5346 <main+0x2886>
    5344:	1a c8       	rjmp	.-4044   	; 0x437a <main+0x18ba>
    5346:	fe cd       	rjmp	.-1028   	; 0x4f44 <main+0x2484>
    5348:	a9 01       	movw	r20, r18
    534a:	4f 5f       	subi	r20, 0xFF	; 255
    534c:	5f 4f       	sbci	r21, 0xFF	; 255
				if (!matchMark(
					iInterval[offset], iotcSamsungBitMark))
					return false;
				offset++;
				if (matchSpace(
					iInterval[offset], iotcSamsungOneSpace))
    534e:	ba 01       	movw	r22, r20
    5350:	66 0f       	add	r22, r22
    5352:	77 1f       	adc	r23, r23
    5354:	6e 0f       	add	r22, r30
    5356:	7f 1f       	adc	r23, r31
    5358:	db 01       	movw	r26, r22
    535a:	13 96       	adiw	r26, 0x03	; 3
    535c:	6d 91       	ld	r22, X+
    535e:	7c 91       	ld	r23, X
    5360:	14 97       	sbiw	r26, 0x04	; 4

		bool
		matchSpace(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs - iotcIrMarkExcess) &&
    5362:	66 51       	subi	r22, 0x16	; 22
    5364:	71 09       	sbc	r23, r1
    5366:	61 31       	cpi	r22, 0x11	; 17
    5368:	71 05       	cpc	r23, r1
    536a:	58 f4       	brcc	.+22     	; 0x5382 <main+0x28c2>
					iInterval[offset], iotcSamsungBitMark))
					return false;
				offset++;
				if (matchSpace(
					iInterval[offset], iotcSamsungOneSpace))
					data = (data << 1) | 1;
    536c:	d7 01       	movw	r26, r14
    536e:	c6 01       	movw	r24, r12
    5370:	88 0f       	add	r24, r24
    5372:	99 1f       	adc	r25, r25
    5374:	aa 1f       	adc	r26, r26
    5376:	bb 1f       	adc	r27, r27
    5378:	6c 01       	movw	r12, r24
    537a:	7d 01       	movw	r14, r26
    537c:	68 94       	set
    537e:	c0 f8       	bld	r12, 0
    5380:	19 c8       	rjmp	.-4046   	; 0x43b4 <main+0x18f4>
				else if (matchSpace(
					iInterval[offset], iotcSamsungZeroSpace))
    5382:	44 0f       	add	r20, r20
    5384:	55 1f       	adc	r21, r21
    5386:	4e 0f       	add	r20, r30
    5388:	5f 1f       	adc	r21, r31
    538a:	da 01       	movw	r26, r20
    538c:	13 96       	adiw	r26, 0x03	; 3
    538e:	4d 91       	ld	r20, X+
    5390:	5c 91       	ld	r21, X
    5392:	14 97       	sbiw	r26, 0x04	; 4

		bool
		matchSpace(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs - iotcIrMarkExcess) &&
    5394:	46 50       	subi	r20, 0x06	; 6
    5396:	51 09       	sbc	r21, r1
    5398:	47 30       	cpi	r20, 0x07	; 7
    539a:	51 05       	cpc	r21, r1
    539c:	08 f0       	brcs	.+2      	; 0x53a0 <main+0x28e0>
    539e:	d2 cd       	rjmp	.-1116   	; 0x4f44 <main+0x2484>
				if (matchSpace(
					iInterval[offset], iotcSamsungOneSpace))
					data = (data << 1) | 1;
				else if (matchSpace(
					iInterval[offset], iotcSamsungZeroSpace))
					data <<= 1;
    53a0:	cc 0c       	add	r12, r12
    53a2:	dd 1c       	adc	r13, r13
    53a4:	ee 1c       	adc	r14, r14
    53a6:	ff 1c       	adc	r15, r15
    53a8:	05 c8       	rjmp	.-4086   	; 0x43b4 <main+0x18f4>
			}
			// stop bit
			if (!matchMark(iInterval[offset], iotcLgBitMark))
				return false;
			// success
			inBits = iotcSamsungBits;
    53aa:	40 e2       	ldi	r20, 0x20	; 32
    53ac:	50 e0       	ldi	r21, 0x00	; 0
    53ae:	9f 01       	movw	r18, r30
    53b0:	2d 52       	subi	r18, 0x2D	; 45
    53b2:	3f 4f       	sbci	r19, 0xFF	; 255
    53b4:	d9 01       	movw	r26, r18
    53b6:	4d 93       	st	X+, r20
    53b8:	5c 93       	st	X, r21
			iValue = data;
    53ba:	24 50       	subi	r18, 0x04	; 4
    53bc:	31 09       	sbc	r19, r1
    53be:	d9 01       	movw	r26, r18
    53c0:	cd 92       	st	X+, r12
    53c2:	dd 92       	st	X+, r13
    53c4:	ed 92       	st	X+, r14
    53c6:	fc 92       	st	X, r15
    53c8:	13 97       	sbiw	r26, 0x03	; 3
			iVendor = iotcSamsung;
    53ca:	8b e0       	ldi	r24, 0x0B	; 11
    53cc:	80 83       	st	Z, r24
    53ce:	07 c8       	rjmp	.-4082   	; 0x43de <main+0x191e>
		static iotDhtTrigger	iTrigger[iotcDhtMaxTrigger];
		
		static int8_t
		allocTrigger() {
			int8_t	i;
			for(i = 0; i < iotcDhtMaxTrigger; i++) {
    53d0:	01 e0       	ldi	r16, 0x01	; 1
    53d2:	01 c0       	rjmp	.+2      	; 0x53d6 <main+0x2916>
    53d4:	02 e0       	ldi	r16, 0x02	; 2
				else if(*s == '>') rel = iotcDhtGreaterThan;
				else goto syntaxError;
				val = getFloat(&s, &err);
				if(err) goto syntaxError;
				while(isspace(*s)) s++;
				if((n = allocTrigger()) < 0) goto syntaxError;
    53d6:	11 27       	eor	r17, r17
    53d8:	07 fd       	sbrc	r16, 7
    53da:	10 95       	com	r17
    53dc:	0c 94 ad 1e 	jmp	0x3d5a	; 0x3d5a <main+0x129a>

000053e0 <__subsf3>:
    53e0:	50 58       	subi	r21, 0x80	; 128

000053e2 <__addsf3>:
    53e2:	bb 27       	eor	r27, r27
    53e4:	aa 27       	eor	r26, r26
    53e6:	0e d0       	rcall	.+28     	; 0x5404 <__addsf3x>
    53e8:	1c c1       	rjmp	.+568    	; 0x5622 <__fp_round>
    53ea:	0d d1       	rcall	.+538    	; 0x5606 <__fp_pscA>
    53ec:	30 f0       	brcs	.+12     	; 0x53fa <__addsf3+0x18>
    53ee:	12 d1       	rcall	.+548    	; 0x5614 <__fp_pscB>
    53f0:	20 f0       	brcs	.+8      	; 0x53fa <__addsf3+0x18>
    53f2:	31 f4       	brne	.+12     	; 0x5400 <__addsf3+0x1e>
    53f4:	9f 3f       	cpi	r25, 0xFF	; 255
    53f6:	11 f4       	brne	.+4      	; 0x53fc <__addsf3+0x1a>
    53f8:	1e f4       	brtc	.+6      	; 0x5400 <__addsf3+0x1e>
    53fa:	02 c1       	rjmp	.+516    	; 0x5600 <__fp_nan>
    53fc:	0e f4       	brtc	.+2      	; 0x5400 <__addsf3+0x1e>
    53fe:	e0 95       	com	r30
    5400:	e7 fb       	bst	r30, 7
    5402:	f8 c0       	rjmp	.+496    	; 0x55f4 <__fp_inf>

00005404 <__addsf3x>:
    5404:	e9 2f       	mov	r30, r25
    5406:	1e d1       	rcall	.+572    	; 0x5644 <__fp_split3>
    5408:	80 f3       	brcs	.-32     	; 0x53ea <__addsf3+0x8>
    540a:	ba 17       	cp	r27, r26
    540c:	62 07       	cpc	r22, r18
    540e:	73 07       	cpc	r23, r19
    5410:	84 07       	cpc	r24, r20
    5412:	95 07       	cpc	r25, r21
    5414:	18 f0       	brcs	.+6      	; 0x541c <__addsf3x+0x18>
    5416:	71 f4       	brne	.+28     	; 0x5434 <__addsf3x+0x30>
    5418:	9e f5       	brtc	.+102    	; 0x5480 <__addsf3x+0x7c>
    541a:	36 c1       	rjmp	.+620    	; 0x5688 <__fp_zero>
    541c:	0e f4       	brtc	.+2      	; 0x5420 <__addsf3x+0x1c>
    541e:	e0 95       	com	r30
    5420:	0b 2e       	mov	r0, r27
    5422:	ba 2f       	mov	r27, r26
    5424:	a0 2d       	mov	r26, r0
    5426:	0b 01       	movw	r0, r22
    5428:	b9 01       	movw	r22, r18
    542a:	90 01       	movw	r18, r0
    542c:	0c 01       	movw	r0, r24
    542e:	ca 01       	movw	r24, r20
    5430:	a0 01       	movw	r20, r0
    5432:	11 24       	eor	r1, r1
    5434:	ff 27       	eor	r31, r31
    5436:	59 1b       	sub	r21, r25
    5438:	99 f0       	breq	.+38     	; 0x5460 <__addsf3x+0x5c>
    543a:	59 3f       	cpi	r21, 0xF9	; 249
    543c:	50 f4       	brcc	.+20     	; 0x5452 <__addsf3x+0x4e>
    543e:	50 3e       	cpi	r21, 0xE0	; 224
    5440:	68 f1       	brcs	.+90     	; 0x549c <__addsf3x+0x98>
    5442:	1a 16       	cp	r1, r26
    5444:	f0 40       	sbci	r31, 0x00	; 0
    5446:	a2 2f       	mov	r26, r18
    5448:	23 2f       	mov	r18, r19
    544a:	34 2f       	mov	r19, r20
    544c:	44 27       	eor	r20, r20
    544e:	58 5f       	subi	r21, 0xF8	; 248
    5450:	f3 cf       	rjmp	.-26     	; 0x5438 <__addsf3x+0x34>
    5452:	46 95       	lsr	r20
    5454:	37 95       	ror	r19
    5456:	27 95       	ror	r18
    5458:	a7 95       	ror	r26
    545a:	f0 40       	sbci	r31, 0x00	; 0
    545c:	53 95       	inc	r21
    545e:	c9 f7       	brne	.-14     	; 0x5452 <__addsf3x+0x4e>
    5460:	7e f4       	brtc	.+30     	; 0x5480 <__addsf3x+0x7c>
    5462:	1f 16       	cp	r1, r31
    5464:	ba 0b       	sbc	r27, r26
    5466:	62 0b       	sbc	r22, r18
    5468:	73 0b       	sbc	r23, r19
    546a:	84 0b       	sbc	r24, r20
    546c:	ba f0       	brmi	.+46     	; 0x549c <__addsf3x+0x98>
    546e:	91 50       	subi	r25, 0x01	; 1
    5470:	a1 f0       	breq	.+40     	; 0x549a <__addsf3x+0x96>
    5472:	ff 0f       	add	r31, r31
    5474:	bb 1f       	adc	r27, r27
    5476:	66 1f       	adc	r22, r22
    5478:	77 1f       	adc	r23, r23
    547a:	88 1f       	adc	r24, r24
    547c:	c2 f7       	brpl	.-16     	; 0x546e <__addsf3x+0x6a>
    547e:	0e c0       	rjmp	.+28     	; 0x549c <__addsf3x+0x98>
    5480:	ba 0f       	add	r27, r26
    5482:	62 1f       	adc	r22, r18
    5484:	73 1f       	adc	r23, r19
    5486:	84 1f       	adc	r24, r20
    5488:	48 f4       	brcc	.+18     	; 0x549c <__addsf3x+0x98>
    548a:	87 95       	ror	r24
    548c:	77 95       	ror	r23
    548e:	67 95       	ror	r22
    5490:	b7 95       	ror	r27
    5492:	f7 95       	ror	r31
    5494:	9e 3f       	cpi	r25, 0xFE	; 254
    5496:	08 f0       	brcs	.+2      	; 0x549a <__addsf3x+0x96>
    5498:	b3 cf       	rjmp	.-154    	; 0x5400 <__addsf3+0x1e>
    549a:	93 95       	inc	r25
    549c:	88 0f       	add	r24, r24
    549e:	08 f0       	brcs	.+2      	; 0x54a2 <__addsf3x+0x9e>
    54a0:	99 27       	eor	r25, r25
    54a2:	ee 0f       	add	r30, r30
    54a4:	97 95       	ror	r25
    54a6:	87 95       	ror	r24
    54a8:	08 95       	ret

000054aa <__divsf3>:
    54aa:	0c d0       	rcall	.+24     	; 0x54c4 <__divsf3x>
    54ac:	ba c0       	rjmp	.+372    	; 0x5622 <__fp_round>
    54ae:	b2 d0       	rcall	.+356    	; 0x5614 <__fp_pscB>
    54b0:	40 f0       	brcs	.+16     	; 0x54c2 <__divsf3+0x18>
    54b2:	a9 d0       	rcall	.+338    	; 0x5606 <__fp_pscA>
    54b4:	30 f0       	brcs	.+12     	; 0x54c2 <__divsf3+0x18>
    54b6:	21 f4       	brne	.+8      	; 0x54c0 <__divsf3+0x16>
    54b8:	5f 3f       	cpi	r21, 0xFF	; 255
    54ba:	19 f0       	breq	.+6      	; 0x54c2 <__divsf3+0x18>
    54bc:	9b c0       	rjmp	.+310    	; 0x55f4 <__fp_inf>
    54be:	51 11       	cpse	r21, r1
    54c0:	e4 c0       	rjmp	.+456    	; 0x568a <__fp_szero>
    54c2:	9e c0       	rjmp	.+316    	; 0x5600 <__fp_nan>

000054c4 <__divsf3x>:
    54c4:	bf d0       	rcall	.+382    	; 0x5644 <__fp_split3>
    54c6:	98 f3       	brcs	.-26     	; 0x54ae <__divsf3+0x4>

000054c8 <__divsf3_pse>:
    54c8:	99 23       	and	r25, r25
    54ca:	c9 f3       	breq	.-14     	; 0x54be <__divsf3+0x14>
    54cc:	55 23       	and	r21, r21
    54ce:	b1 f3       	breq	.-20     	; 0x54bc <__divsf3+0x12>
    54d0:	95 1b       	sub	r25, r21
    54d2:	55 0b       	sbc	r21, r21
    54d4:	bb 27       	eor	r27, r27
    54d6:	aa 27       	eor	r26, r26
    54d8:	62 17       	cp	r22, r18
    54da:	73 07       	cpc	r23, r19
    54dc:	84 07       	cpc	r24, r20
    54de:	38 f0       	brcs	.+14     	; 0x54ee <__divsf3_pse+0x26>
    54e0:	9f 5f       	subi	r25, 0xFF	; 255
    54e2:	5f 4f       	sbci	r21, 0xFF	; 255
    54e4:	22 0f       	add	r18, r18
    54e6:	33 1f       	adc	r19, r19
    54e8:	44 1f       	adc	r20, r20
    54ea:	aa 1f       	adc	r26, r26
    54ec:	a9 f3       	breq	.-22     	; 0x54d8 <__divsf3_pse+0x10>
    54ee:	33 d0       	rcall	.+102    	; 0x5556 <__divsf3_pse+0x8e>
    54f0:	0e 2e       	mov	r0, r30
    54f2:	3a f0       	brmi	.+14     	; 0x5502 <__divsf3_pse+0x3a>
    54f4:	e0 e8       	ldi	r30, 0x80	; 128
    54f6:	30 d0       	rcall	.+96     	; 0x5558 <__divsf3_pse+0x90>
    54f8:	91 50       	subi	r25, 0x01	; 1
    54fa:	50 40       	sbci	r21, 0x00	; 0
    54fc:	e6 95       	lsr	r30
    54fe:	00 1c       	adc	r0, r0
    5500:	ca f7       	brpl	.-14     	; 0x54f4 <__divsf3_pse+0x2c>
    5502:	29 d0       	rcall	.+82     	; 0x5556 <__divsf3_pse+0x8e>
    5504:	fe 2f       	mov	r31, r30
    5506:	27 d0       	rcall	.+78     	; 0x5556 <__divsf3_pse+0x8e>
    5508:	66 0f       	add	r22, r22
    550a:	77 1f       	adc	r23, r23
    550c:	88 1f       	adc	r24, r24
    550e:	bb 1f       	adc	r27, r27
    5510:	26 17       	cp	r18, r22
    5512:	37 07       	cpc	r19, r23
    5514:	48 07       	cpc	r20, r24
    5516:	ab 07       	cpc	r26, r27
    5518:	b0 e8       	ldi	r27, 0x80	; 128
    551a:	09 f0       	breq	.+2      	; 0x551e <__divsf3_pse+0x56>
    551c:	bb 0b       	sbc	r27, r27
    551e:	80 2d       	mov	r24, r0
    5520:	bf 01       	movw	r22, r30
    5522:	ff 27       	eor	r31, r31
    5524:	93 58       	subi	r25, 0x83	; 131
    5526:	5f 4f       	sbci	r21, 0xFF	; 255
    5528:	2a f0       	brmi	.+10     	; 0x5534 <__divsf3_pse+0x6c>
    552a:	9e 3f       	cpi	r25, 0xFE	; 254
    552c:	51 05       	cpc	r21, r1
    552e:	68 f0       	brcs	.+26     	; 0x554a <__divsf3_pse+0x82>
    5530:	61 c0       	rjmp	.+194    	; 0x55f4 <__fp_inf>
    5532:	ab c0       	rjmp	.+342    	; 0x568a <__fp_szero>
    5534:	5f 3f       	cpi	r21, 0xFF	; 255
    5536:	ec f3       	brlt	.-6      	; 0x5532 <__divsf3_pse+0x6a>
    5538:	98 3e       	cpi	r25, 0xE8	; 232
    553a:	dc f3       	brlt	.-10     	; 0x5532 <__divsf3_pse+0x6a>
    553c:	86 95       	lsr	r24
    553e:	77 95       	ror	r23
    5540:	67 95       	ror	r22
    5542:	b7 95       	ror	r27
    5544:	f7 95       	ror	r31
    5546:	9f 5f       	subi	r25, 0xFF	; 255
    5548:	c9 f7       	brne	.-14     	; 0x553c <__divsf3_pse+0x74>
    554a:	88 0f       	add	r24, r24
    554c:	91 1d       	adc	r25, r1
    554e:	96 95       	lsr	r25
    5550:	87 95       	ror	r24
    5552:	97 f9       	bld	r25, 7
    5554:	08 95       	ret
    5556:	e1 e0       	ldi	r30, 0x01	; 1
    5558:	66 0f       	add	r22, r22
    555a:	77 1f       	adc	r23, r23
    555c:	88 1f       	adc	r24, r24
    555e:	bb 1f       	adc	r27, r27
    5560:	62 17       	cp	r22, r18
    5562:	73 07       	cpc	r23, r19
    5564:	84 07       	cpc	r24, r20
    5566:	ba 07       	cpc	r27, r26
    5568:	20 f0       	brcs	.+8      	; 0x5572 <__divsf3_pse+0xaa>
    556a:	62 1b       	sub	r22, r18
    556c:	73 0b       	sbc	r23, r19
    556e:	84 0b       	sbc	r24, r20
    5570:	ba 0b       	sbc	r27, r26
    5572:	ee 1f       	adc	r30, r30
    5574:	88 f7       	brcc	.-30     	; 0x5558 <__divsf3_pse+0x90>
    5576:	e0 95       	com	r30
    5578:	08 95       	ret

0000557a <__floatunsisf>:
    557a:	e8 94       	clt
    557c:	09 c0       	rjmp	.+18     	; 0x5590 <__floatsisf+0x12>

0000557e <__floatsisf>:
    557e:	97 fb       	bst	r25, 7
    5580:	3e f4       	brtc	.+14     	; 0x5590 <__floatsisf+0x12>
    5582:	90 95       	com	r25
    5584:	80 95       	com	r24
    5586:	70 95       	com	r23
    5588:	61 95       	neg	r22
    558a:	7f 4f       	sbci	r23, 0xFF	; 255
    558c:	8f 4f       	sbci	r24, 0xFF	; 255
    558e:	9f 4f       	sbci	r25, 0xFF	; 255
    5590:	99 23       	and	r25, r25
    5592:	a9 f0       	breq	.+42     	; 0x55be <__floatsisf+0x40>
    5594:	f9 2f       	mov	r31, r25
    5596:	96 e9       	ldi	r25, 0x96	; 150
    5598:	bb 27       	eor	r27, r27
    559a:	93 95       	inc	r25
    559c:	f6 95       	lsr	r31
    559e:	87 95       	ror	r24
    55a0:	77 95       	ror	r23
    55a2:	67 95       	ror	r22
    55a4:	b7 95       	ror	r27
    55a6:	f1 11       	cpse	r31, r1
    55a8:	f8 cf       	rjmp	.-16     	; 0x559a <__floatsisf+0x1c>
    55aa:	fa f4       	brpl	.+62     	; 0x55ea <__floatsisf+0x6c>
    55ac:	bb 0f       	add	r27, r27
    55ae:	11 f4       	brne	.+4      	; 0x55b4 <__floatsisf+0x36>
    55b0:	60 ff       	sbrs	r22, 0
    55b2:	1b c0       	rjmp	.+54     	; 0x55ea <__floatsisf+0x6c>
    55b4:	6f 5f       	subi	r22, 0xFF	; 255
    55b6:	7f 4f       	sbci	r23, 0xFF	; 255
    55b8:	8f 4f       	sbci	r24, 0xFF	; 255
    55ba:	9f 4f       	sbci	r25, 0xFF	; 255
    55bc:	16 c0       	rjmp	.+44     	; 0x55ea <__floatsisf+0x6c>
    55be:	88 23       	and	r24, r24
    55c0:	11 f0       	breq	.+4      	; 0x55c6 <__floatsisf+0x48>
    55c2:	96 e9       	ldi	r25, 0x96	; 150
    55c4:	11 c0       	rjmp	.+34     	; 0x55e8 <__floatsisf+0x6a>
    55c6:	77 23       	and	r23, r23
    55c8:	21 f0       	breq	.+8      	; 0x55d2 <__floatsisf+0x54>
    55ca:	9e e8       	ldi	r25, 0x8E	; 142
    55cc:	87 2f       	mov	r24, r23
    55ce:	76 2f       	mov	r23, r22
    55d0:	05 c0       	rjmp	.+10     	; 0x55dc <__floatsisf+0x5e>
    55d2:	66 23       	and	r22, r22
    55d4:	71 f0       	breq	.+28     	; 0x55f2 <__floatsisf+0x74>
    55d6:	96 e8       	ldi	r25, 0x86	; 134
    55d8:	86 2f       	mov	r24, r22
    55da:	70 e0       	ldi	r23, 0x00	; 0
    55dc:	60 e0       	ldi	r22, 0x00	; 0
    55de:	2a f0       	brmi	.+10     	; 0x55ea <__floatsisf+0x6c>
    55e0:	9a 95       	dec	r25
    55e2:	66 0f       	add	r22, r22
    55e4:	77 1f       	adc	r23, r23
    55e6:	88 1f       	adc	r24, r24
    55e8:	da f7       	brpl	.-10     	; 0x55e0 <__floatsisf+0x62>
    55ea:	88 0f       	add	r24, r24
    55ec:	96 95       	lsr	r25
    55ee:	87 95       	ror	r24
    55f0:	97 f9       	bld	r25, 7
    55f2:	08 95       	ret

000055f4 <__fp_inf>:
    55f4:	97 f9       	bld	r25, 7
    55f6:	9f 67       	ori	r25, 0x7F	; 127
    55f8:	80 e8       	ldi	r24, 0x80	; 128
    55fa:	70 e0       	ldi	r23, 0x00	; 0
    55fc:	60 e0       	ldi	r22, 0x00	; 0
    55fe:	08 95       	ret

00005600 <__fp_nan>:
    5600:	9f ef       	ldi	r25, 0xFF	; 255
    5602:	80 ec       	ldi	r24, 0xC0	; 192
    5604:	08 95       	ret

00005606 <__fp_pscA>:
    5606:	00 24       	eor	r0, r0
    5608:	0a 94       	dec	r0
    560a:	16 16       	cp	r1, r22
    560c:	17 06       	cpc	r1, r23
    560e:	18 06       	cpc	r1, r24
    5610:	09 06       	cpc	r0, r25
    5612:	08 95       	ret

00005614 <__fp_pscB>:
    5614:	00 24       	eor	r0, r0
    5616:	0a 94       	dec	r0
    5618:	12 16       	cp	r1, r18
    561a:	13 06       	cpc	r1, r19
    561c:	14 06       	cpc	r1, r20
    561e:	05 06       	cpc	r0, r21
    5620:	08 95       	ret

00005622 <__fp_round>:
    5622:	09 2e       	mov	r0, r25
    5624:	03 94       	inc	r0
    5626:	00 0c       	add	r0, r0
    5628:	11 f4       	brne	.+4      	; 0x562e <__fp_round+0xc>
    562a:	88 23       	and	r24, r24
    562c:	52 f0       	brmi	.+20     	; 0x5642 <__fp_round+0x20>
    562e:	bb 0f       	add	r27, r27
    5630:	40 f4       	brcc	.+16     	; 0x5642 <__fp_round+0x20>
    5632:	bf 2b       	or	r27, r31
    5634:	11 f4       	brne	.+4      	; 0x563a <__fp_round+0x18>
    5636:	60 ff       	sbrs	r22, 0
    5638:	04 c0       	rjmp	.+8      	; 0x5642 <__fp_round+0x20>
    563a:	6f 5f       	subi	r22, 0xFF	; 255
    563c:	7f 4f       	sbci	r23, 0xFF	; 255
    563e:	8f 4f       	sbci	r24, 0xFF	; 255
    5640:	9f 4f       	sbci	r25, 0xFF	; 255
    5642:	08 95       	ret

00005644 <__fp_split3>:
    5644:	57 fd       	sbrc	r21, 7
    5646:	90 58       	subi	r25, 0x80	; 128
    5648:	44 0f       	add	r20, r20
    564a:	55 1f       	adc	r21, r21
    564c:	59 f0       	breq	.+22     	; 0x5664 <__fp_splitA+0x10>
    564e:	5f 3f       	cpi	r21, 0xFF	; 255
    5650:	71 f0       	breq	.+28     	; 0x566e <__fp_splitA+0x1a>
    5652:	47 95       	ror	r20

00005654 <__fp_splitA>:
    5654:	88 0f       	add	r24, r24
    5656:	97 fb       	bst	r25, 7
    5658:	99 1f       	adc	r25, r25
    565a:	61 f0       	breq	.+24     	; 0x5674 <__fp_splitA+0x20>
    565c:	9f 3f       	cpi	r25, 0xFF	; 255
    565e:	79 f0       	breq	.+30     	; 0x567e <__fp_splitA+0x2a>
    5660:	87 95       	ror	r24
    5662:	08 95       	ret
    5664:	12 16       	cp	r1, r18
    5666:	13 06       	cpc	r1, r19
    5668:	14 06       	cpc	r1, r20
    566a:	55 1f       	adc	r21, r21
    566c:	f2 cf       	rjmp	.-28     	; 0x5652 <__fp_split3+0xe>
    566e:	46 95       	lsr	r20
    5670:	f1 df       	rcall	.-30     	; 0x5654 <__fp_splitA>
    5672:	08 c0       	rjmp	.+16     	; 0x5684 <__fp_splitA+0x30>
    5674:	16 16       	cp	r1, r22
    5676:	17 06       	cpc	r1, r23
    5678:	18 06       	cpc	r1, r24
    567a:	99 1f       	adc	r25, r25
    567c:	f1 cf       	rjmp	.-30     	; 0x5660 <__fp_splitA+0xc>
    567e:	86 95       	lsr	r24
    5680:	71 05       	cpc	r23, r1
    5682:	61 05       	cpc	r22, r1
    5684:	08 94       	sec
    5686:	08 95       	ret

00005688 <__fp_zero>:
    5688:	e8 94       	clt

0000568a <__fp_szero>:
    568a:	bb 27       	eor	r27, r27
    568c:	66 27       	eor	r22, r22
    568e:	77 27       	eor	r23, r23
    5690:	cb 01       	movw	r24, r22
    5692:	97 f9       	bld	r25, 7
    5694:	08 95       	ret

00005696 <__gesf2>:
    5696:	66 d0       	rcall	.+204    	; 0x5764 <__fp_cmp>
    5698:	08 f4       	brcc	.+2      	; 0x569c <__gesf2+0x6>
    569a:	8f ef       	ldi	r24, 0xFF	; 255
    569c:	08 95       	ret

0000569e <__mulsf3>:
    569e:	0b d0       	rcall	.+22     	; 0x56b6 <__mulsf3x>
    56a0:	c0 cf       	rjmp	.-128    	; 0x5622 <__fp_round>
    56a2:	b1 df       	rcall	.-158    	; 0x5606 <__fp_pscA>
    56a4:	28 f0       	brcs	.+10     	; 0x56b0 <__mulsf3+0x12>
    56a6:	b6 df       	rcall	.-148    	; 0x5614 <__fp_pscB>
    56a8:	18 f0       	brcs	.+6      	; 0x56b0 <__mulsf3+0x12>
    56aa:	95 23       	and	r25, r21
    56ac:	09 f0       	breq	.+2      	; 0x56b0 <__mulsf3+0x12>
    56ae:	a2 cf       	rjmp	.-188    	; 0x55f4 <__fp_inf>
    56b0:	a7 cf       	rjmp	.-178    	; 0x5600 <__fp_nan>
    56b2:	11 24       	eor	r1, r1
    56b4:	ea cf       	rjmp	.-44     	; 0x568a <__fp_szero>

000056b6 <__mulsf3x>:
    56b6:	c6 df       	rcall	.-116    	; 0x5644 <__fp_split3>
    56b8:	a0 f3       	brcs	.-24     	; 0x56a2 <__mulsf3+0x4>

000056ba <__mulsf3_pse>:
    56ba:	95 9f       	mul	r25, r21
    56bc:	d1 f3       	breq	.-12     	; 0x56b2 <__mulsf3+0x14>
    56be:	95 0f       	add	r25, r21
    56c0:	50 e0       	ldi	r21, 0x00	; 0
    56c2:	55 1f       	adc	r21, r21
    56c4:	62 9f       	mul	r22, r18
    56c6:	f0 01       	movw	r30, r0
    56c8:	72 9f       	mul	r23, r18
    56ca:	bb 27       	eor	r27, r27
    56cc:	f0 0d       	add	r31, r0
    56ce:	b1 1d       	adc	r27, r1
    56d0:	63 9f       	mul	r22, r19
    56d2:	aa 27       	eor	r26, r26
    56d4:	f0 0d       	add	r31, r0
    56d6:	b1 1d       	adc	r27, r1
    56d8:	aa 1f       	adc	r26, r26
    56da:	64 9f       	mul	r22, r20
    56dc:	66 27       	eor	r22, r22
    56de:	b0 0d       	add	r27, r0
    56e0:	a1 1d       	adc	r26, r1
    56e2:	66 1f       	adc	r22, r22
    56e4:	82 9f       	mul	r24, r18
    56e6:	22 27       	eor	r18, r18
    56e8:	b0 0d       	add	r27, r0
    56ea:	a1 1d       	adc	r26, r1
    56ec:	62 1f       	adc	r22, r18
    56ee:	73 9f       	mul	r23, r19
    56f0:	b0 0d       	add	r27, r0
    56f2:	a1 1d       	adc	r26, r1
    56f4:	62 1f       	adc	r22, r18
    56f6:	83 9f       	mul	r24, r19
    56f8:	a0 0d       	add	r26, r0
    56fa:	61 1d       	adc	r22, r1
    56fc:	22 1f       	adc	r18, r18
    56fe:	74 9f       	mul	r23, r20
    5700:	33 27       	eor	r19, r19
    5702:	a0 0d       	add	r26, r0
    5704:	61 1d       	adc	r22, r1
    5706:	23 1f       	adc	r18, r19
    5708:	84 9f       	mul	r24, r20
    570a:	60 0d       	add	r22, r0
    570c:	21 1d       	adc	r18, r1
    570e:	82 2f       	mov	r24, r18
    5710:	76 2f       	mov	r23, r22
    5712:	6a 2f       	mov	r22, r26
    5714:	11 24       	eor	r1, r1
    5716:	9f 57       	subi	r25, 0x7F	; 127
    5718:	50 40       	sbci	r21, 0x00	; 0
    571a:	8a f0       	brmi	.+34     	; 0x573e <__mulsf3_pse+0x84>
    571c:	e1 f0       	breq	.+56     	; 0x5756 <__mulsf3_pse+0x9c>
    571e:	88 23       	and	r24, r24
    5720:	4a f0       	brmi	.+18     	; 0x5734 <__mulsf3_pse+0x7a>
    5722:	ee 0f       	add	r30, r30
    5724:	ff 1f       	adc	r31, r31
    5726:	bb 1f       	adc	r27, r27
    5728:	66 1f       	adc	r22, r22
    572a:	77 1f       	adc	r23, r23
    572c:	88 1f       	adc	r24, r24
    572e:	91 50       	subi	r25, 0x01	; 1
    5730:	50 40       	sbci	r21, 0x00	; 0
    5732:	a9 f7       	brne	.-22     	; 0x571e <__mulsf3_pse+0x64>
    5734:	9e 3f       	cpi	r25, 0xFE	; 254
    5736:	51 05       	cpc	r21, r1
    5738:	70 f0       	brcs	.+28     	; 0x5756 <__mulsf3_pse+0x9c>
    573a:	5c cf       	rjmp	.-328    	; 0x55f4 <__fp_inf>
    573c:	a6 cf       	rjmp	.-180    	; 0x568a <__fp_szero>
    573e:	5f 3f       	cpi	r21, 0xFF	; 255
    5740:	ec f3       	brlt	.-6      	; 0x573c <__mulsf3_pse+0x82>
    5742:	98 3e       	cpi	r25, 0xE8	; 232
    5744:	dc f3       	brlt	.-10     	; 0x573c <__mulsf3_pse+0x82>
    5746:	86 95       	lsr	r24
    5748:	77 95       	ror	r23
    574a:	67 95       	ror	r22
    574c:	b7 95       	ror	r27
    574e:	f7 95       	ror	r31
    5750:	e7 95       	ror	r30
    5752:	9f 5f       	subi	r25, 0xFF	; 255
    5754:	c1 f7       	brne	.-16     	; 0x5746 <__mulsf3_pse+0x8c>
    5756:	fe 2b       	or	r31, r30
    5758:	88 0f       	add	r24, r24
    575a:	91 1d       	adc	r25, r1
    575c:	96 95       	lsr	r25
    575e:	87 95       	ror	r24
    5760:	97 f9       	bld	r25, 7
    5762:	08 95       	ret

00005764 <__fp_cmp>:
    5764:	99 0f       	add	r25, r25
    5766:	00 08       	sbc	r0, r0
    5768:	55 0f       	add	r21, r21
    576a:	aa 0b       	sbc	r26, r26
    576c:	e0 e8       	ldi	r30, 0x80	; 128
    576e:	fe ef       	ldi	r31, 0xFE	; 254
    5770:	16 16       	cp	r1, r22
    5772:	17 06       	cpc	r1, r23
    5774:	e8 07       	cpc	r30, r24
    5776:	f9 07       	cpc	r31, r25
    5778:	c0 f0       	brcs	.+48     	; 0x57aa <__fp_cmp+0x46>
    577a:	12 16       	cp	r1, r18
    577c:	13 06       	cpc	r1, r19
    577e:	e4 07       	cpc	r30, r20
    5780:	f5 07       	cpc	r31, r21
    5782:	98 f0       	brcs	.+38     	; 0x57aa <__fp_cmp+0x46>
    5784:	62 1b       	sub	r22, r18
    5786:	73 0b       	sbc	r23, r19
    5788:	84 0b       	sbc	r24, r20
    578a:	95 0b       	sbc	r25, r21
    578c:	39 f4       	brne	.+14     	; 0x579c <__fp_cmp+0x38>
    578e:	0a 26       	eor	r0, r26
    5790:	61 f0       	breq	.+24     	; 0x57aa <__fp_cmp+0x46>
    5792:	23 2b       	or	r18, r19
    5794:	24 2b       	or	r18, r20
    5796:	25 2b       	or	r18, r21
    5798:	21 f4       	brne	.+8      	; 0x57a2 <__fp_cmp+0x3e>
    579a:	08 95       	ret
    579c:	0a 26       	eor	r0, r26
    579e:	09 f4       	brne	.+2      	; 0x57a2 <__fp_cmp+0x3e>
    57a0:	a1 40       	sbci	r26, 0x01	; 1
    57a2:	a6 95       	lsr	r26
    57a4:	8f ef       	ldi	r24, 0xFF	; 255
    57a6:	81 1d       	adc	r24, r1
    57a8:	81 1d       	adc	r24, r1
    57aa:	08 95       	ret

000057ac <__divmodhi4>:
    57ac:	97 fb       	bst	r25, 7
    57ae:	07 2e       	mov	r0, r23
    57b0:	16 f4       	brtc	.+4      	; 0x57b6 <__divmodhi4+0xa>
    57b2:	00 94       	com	r0
    57b4:	06 d0       	rcall	.+12     	; 0x57c2 <__divmodhi4_neg1>
    57b6:	77 fd       	sbrc	r23, 7
    57b8:	08 d0       	rcall	.+16     	; 0x57ca <__divmodhi4_neg2>
    57ba:	33 d0       	rcall	.+102    	; 0x5822 <__udivmodhi4>
    57bc:	07 fc       	sbrc	r0, 7
    57be:	05 d0       	rcall	.+10     	; 0x57ca <__divmodhi4_neg2>
    57c0:	3e f4       	brtc	.+14     	; 0x57d0 <__divmodhi4_exit>

000057c2 <__divmodhi4_neg1>:
    57c2:	90 95       	com	r25
    57c4:	81 95       	neg	r24
    57c6:	9f 4f       	sbci	r25, 0xFF	; 255
    57c8:	08 95       	ret

000057ca <__divmodhi4_neg2>:
    57ca:	70 95       	com	r23
    57cc:	61 95       	neg	r22
    57ce:	7f 4f       	sbci	r23, 0xFF	; 255

000057d0 <__divmodhi4_exit>:
    57d0:	08 95       	ret

000057d2 <__divmodsi4>:
    57d2:	05 2e       	mov	r0, r21
    57d4:	97 fb       	bst	r25, 7
    57d6:	16 f4       	brtc	.+4      	; 0x57dc <__divmodsi4+0xa>
    57d8:	00 94       	com	r0
    57da:	0f d0       	rcall	.+30     	; 0x57fa <__negsi2>
    57dc:	57 fd       	sbrc	r21, 7
    57de:	05 d0       	rcall	.+10     	; 0x57ea <__divmodsi4_neg2>
    57e0:	34 d0       	rcall	.+104    	; 0x584a <__udivmodsi4>
    57e2:	07 fc       	sbrc	r0, 7
    57e4:	02 d0       	rcall	.+4      	; 0x57ea <__divmodsi4_neg2>
    57e6:	46 f4       	brtc	.+16     	; 0x57f8 <__divmodsi4_exit>
    57e8:	08 c0       	rjmp	.+16     	; 0x57fa <__negsi2>

000057ea <__divmodsi4_neg2>:
    57ea:	50 95       	com	r21
    57ec:	40 95       	com	r20
    57ee:	30 95       	com	r19
    57f0:	21 95       	neg	r18
    57f2:	3f 4f       	sbci	r19, 0xFF	; 255
    57f4:	4f 4f       	sbci	r20, 0xFF	; 255
    57f6:	5f 4f       	sbci	r21, 0xFF	; 255

000057f8 <__divmodsi4_exit>:
    57f8:	08 95       	ret

000057fa <__negsi2>:
    57fa:	90 95       	com	r25
    57fc:	80 95       	com	r24
    57fe:	70 95       	com	r23
    5800:	61 95       	neg	r22
    5802:	7f 4f       	sbci	r23, 0xFF	; 255
    5804:	8f 4f       	sbci	r24, 0xFF	; 255
    5806:	9f 4f       	sbci	r25, 0xFF	; 255
    5808:	08 95       	ret

0000580a <__usmulhisi3>:
    580a:	41 d0       	rcall	.+130    	; 0x588e <__umulhisi3>

0000580c <__usmulhisi3_tail>:
    580c:	b7 ff       	sbrs	r27, 7
    580e:	08 95       	ret
    5810:	82 1b       	sub	r24, r18
    5812:	93 0b       	sbc	r25, r19
    5814:	08 95       	ret

00005816 <__mulshisi3>:
    5816:	b7 ff       	sbrs	r27, 7
    5818:	49 c0       	rjmp	.+146    	; 0x58ac <__muluhisi3>

0000581a <__mulohisi3>:
    581a:	48 d0       	rcall	.+144    	; 0x58ac <__muluhisi3>
    581c:	82 1b       	sub	r24, r18
    581e:	93 0b       	sbc	r25, r19
    5820:	08 95       	ret

00005822 <__udivmodhi4>:
    5822:	aa 1b       	sub	r26, r26
    5824:	bb 1b       	sub	r27, r27
    5826:	51 e1       	ldi	r21, 0x11	; 17
    5828:	07 c0       	rjmp	.+14     	; 0x5838 <__udivmodhi4_ep>

0000582a <__udivmodhi4_loop>:
    582a:	aa 1f       	adc	r26, r26
    582c:	bb 1f       	adc	r27, r27
    582e:	a6 17       	cp	r26, r22
    5830:	b7 07       	cpc	r27, r23
    5832:	10 f0       	brcs	.+4      	; 0x5838 <__udivmodhi4_ep>
    5834:	a6 1b       	sub	r26, r22
    5836:	b7 0b       	sbc	r27, r23

00005838 <__udivmodhi4_ep>:
    5838:	88 1f       	adc	r24, r24
    583a:	99 1f       	adc	r25, r25
    583c:	5a 95       	dec	r21
    583e:	a9 f7       	brne	.-22     	; 0x582a <__udivmodhi4_loop>
    5840:	80 95       	com	r24
    5842:	90 95       	com	r25
    5844:	bc 01       	movw	r22, r24
    5846:	cd 01       	movw	r24, r26
    5848:	08 95       	ret

0000584a <__udivmodsi4>:
    584a:	a1 e2       	ldi	r26, 0x21	; 33
    584c:	1a 2e       	mov	r1, r26
    584e:	aa 1b       	sub	r26, r26
    5850:	bb 1b       	sub	r27, r27
    5852:	fd 01       	movw	r30, r26
    5854:	0d c0       	rjmp	.+26     	; 0x5870 <__udivmodsi4_ep>

00005856 <__udivmodsi4_loop>:
    5856:	aa 1f       	adc	r26, r26
    5858:	bb 1f       	adc	r27, r27
    585a:	ee 1f       	adc	r30, r30
    585c:	ff 1f       	adc	r31, r31
    585e:	a2 17       	cp	r26, r18
    5860:	b3 07       	cpc	r27, r19
    5862:	e4 07       	cpc	r30, r20
    5864:	f5 07       	cpc	r31, r21
    5866:	20 f0       	brcs	.+8      	; 0x5870 <__udivmodsi4_ep>
    5868:	a2 1b       	sub	r26, r18
    586a:	b3 0b       	sbc	r27, r19
    586c:	e4 0b       	sbc	r30, r20
    586e:	f5 0b       	sbc	r31, r21

00005870 <__udivmodsi4_ep>:
    5870:	66 1f       	adc	r22, r22
    5872:	77 1f       	adc	r23, r23
    5874:	88 1f       	adc	r24, r24
    5876:	99 1f       	adc	r25, r25
    5878:	1a 94       	dec	r1
    587a:	69 f7       	brne	.-38     	; 0x5856 <__udivmodsi4_loop>
    587c:	60 95       	com	r22
    587e:	70 95       	com	r23
    5880:	80 95       	com	r24
    5882:	90 95       	com	r25
    5884:	9b 01       	movw	r18, r22
    5886:	ac 01       	movw	r20, r24
    5888:	bd 01       	movw	r22, r26
    588a:	cf 01       	movw	r24, r30
    588c:	08 95       	ret

0000588e <__umulhisi3>:
    588e:	a2 9f       	mul	r26, r18
    5890:	b0 01       	movw	r22, r0
    5892:	b3 9f       	mul	r27, r19
    5894:	c0 01       	movw	r24, r0
    5896:	a3 9f       	mul	r26, r19
    5898:	70 0d       	add	r23, r0
    589a:	81 1d       	adc	r24, r1
    589c:	11 24       	eor	r1, r1
    589e:	91 1d       	adc	r25, r1
    58a0:	b2 9f       	mul	r27, r18
    58a2:	70 0d       	add	r23, r0
    58a4:	81 1d       	adc	r24, r1
    58a6:	11 24       	eor	r1, r1
    58a8:	91 1d       	adc	r25, r1
    58aa:	08 95       	ret

000058ac <__muluhisi3>:
    58ac:	f0 df       	rcall	.-32     	; 0x588e <__umulhisi3>
    58ae:	a5 9f       	mul	r26, r21
    58b0:	90 0d       	add	r25, r0
    58b2:	b4 9f       	mul	r27, r20
    58b4:	90 0d       	add	r25, r0
    58b6:	a4 9f       	mul	r26, r20
    58b8:	80 0d       	add	r24, r0
    58ba:	91 1d       	adc	r25, r1
    58bc:	11 24       	eor	r1, r1
    58be:	08 95       	ret

000058c0 <dtostrf>:
    58c0:	ef 92       	push	r14
    58c2:	0f 93       	push	r16
    58c4:	1f 93       	push	r17
    58c6:	cf 93       	push	r28
    58c8:	df 93       	push	r29
    58ca:	e8 01       	movw	r28, r16
    58cc:	47 ff       	sbrs	r20, 7
    58ce:	02 c0       	rjmp	.+4      	; 0x58d4 <dtostrf+0x14>
    58d0:	34 e1       	ldi	r19, 0x14	; 20
    58d2:	01 c0       	rjmp	.+2      	; 0x58d6 <dtostrf+0x16>
    58d4:	34 e0       	ldi	r19, 0x04	; 4
    58d6:	e4 2f       	mov	r30, r20
    58d8:	ff 27       	eor	r31, r31
    58da:	e7 fd       	sbrc	r30, 7
    58dc:	f0 95       	com	r31
    58de:	f7 ff       	sbrs	r31, 7
    58e0:	03 c0       	rjmp	.+6      	; 0x58e8 <dtostrf+0x28>
    58e2:	f1 95       	neg	r31
    58e4:	e1 95       	neg	r30
    58e6:	f1 09       	sbc	r31, r1
    58e8:	e3 2e       	mov	r14, r19
    58ea:	02 2f       	mov	r16, r18
    58ec:	2e 2f       	mov	r18, r30
    58ee:	ae 01       	movw	r20, r28
    58f0:	3a d5       	rcall	.+2676   	; 0x6366 <dtoa_prf>
    58f2:	ce 01       	movw	r24, r28
    58f4:	df 91       	pop	r29
    58f6:	cf 91       	pop	r28
    58f8:	1f 91       	pop	r17
    58fa:	0f 91       	pop	r16
    58fc:	ef 90       	pop	r14
    58fe:	08 95       	ret

00005900 <malloc>:
    5900:	cf 93       	push	r28
    5902:	df 93       	push	r29
    5904:	82 30       	cpi	r24, 0x02	; 2
    5906:	91 05       	cpc	r25, r1
    5908:	10 f4       	brcc	.+4      	; 0x590e <malloc+0xe>
    590a:	82 e0       	ldi	r24, 0x02	; 2
    590c:	90 e0       	ldi	r25, 0x00	; 0
    590e:	e0 91 00 07 	lds	r30, 0x0700
    5912:	f0 91 01 07 	lds	r31, 0x0701
    5916:	20 e0       	ldi	r18, 0x00	; 0
    5918:	30 e0       	ldi	r19, 0x00	; 0
    591a:	a0 e0       	ldi	r26, 0x00	; 0
    591c:	b0 e0       	ldi	r27, 0x00	; 0
    591e:	30 97       	sbiw	r30, 0x00	; 0
    5920:	39 f1       	breq	.+78     	; 0x5970 <malloc+0x70>
    5922:	40 81       	ld	r20, Z
    5924:	51 81       	ldd	r21, Z+1	; 0x01
    5926:	48 17       	cp	r20, r24
    5928:	59 07       	cpc	r21, r25
    592a:	b8 f0       	brcs	.+46     	; 0x595a <malloc+0x5a>
    592c:	48 17       	cp	r20, r24
    592e:	59 07       	cpc	r21, r25
    5930:	71 f4       	brne	.+28     	; 0x594e <malloc+0x4e>
    5932:	82 81       	ldd	r24, Z+2	; 0x02
    5934:	93 81       	ldd	r25, Z+3	; 0x03
    5936:	10 97       	sbiw	r26, 0x00	; 0
    5938:	29 f0       	breq	.+10     	; 0x5944 <malloc+0x44>
    593a:	13 96       	adiw	r26, 0x03	; 3
    593c:	9c 93       	st	X, r25
    593e:	8e 93       	st	-X, r24
    5940:	12 97       	sbiw	r26, 0x02	; 2
    5942:	2c c0       	rjmp	.+88     	; 0x599c <malloc+0x9c>
    5944:	90 93 01 07 	sts	0x0701, r25
    5948:	80 93 00 07 	sts	0x0700, r24
    594c:	27 c0       	rjmp	.+78     	; 0x599c <malloc+0x9c>
    594e:	21 15       	cp	r18, r1
    5950:	31 05       	cpc	r19, r1
    5952:	31 f0       	breq	.+12     	; 0x5960 <malloc+0x60>
    5954:	42 17       	cp	r20, r18
    5956:	53 07       	cpc	r21, r19
    5958:	18 f0       	brcs	.+6      	; 0x5960 <malloc+0x60>
    595a:	a9 01       	movw	r20, r18
    595c:	db 01       	movw	r26, r22
    595e:	01 c0       	rjmp	.+2      	; 0x5962 <malloc+0x62>
    5960:	ef 01       	movw	r28, r30
    5962:	9a 01       	movw	r18, r20
    5964:	bd 01       	movw	r22, r26
    5966:	df 01       	movw	r26, r30
    5968:	02 80       	ldd	r0, Z+2	; 0x02
    596a:	f3 81       	ldd	r31, Z+3	; 0x03
    596c:	e0 2d       	mov	r30, r0
    596e:	d7 cf       	rjmp	.-82     	; 0x591e <malloc+0x1e>
    5970:	21 15       	cp	r18, r1
    5972:	31 05       	cpc	r19, r1
    5974:	f9 f0       	breq	.+62     	; 0x59b4 <malloc+0xb4>
    5976:	28 1b       	sub	r18, r24
    5978:	39 0b       	sbc	r19, r25
    597a:	24 30       	cpi	r18, 0x04	; 4
    597c:	31 05       	cpc	r19, r1
    597e:	80 f4       	brcc	.+32     	; 0x59a0 <malloc+0xa0>
    5980:	8a 81       	ldd	r24, Y+2	; 0x02
    5982:	9b 81       	ldd	r25, Y+3	; 0x03
    5984:	61 15       	cp	r22, r1
    5986:	71 05       	cpc	r23, r1
    5988:	21 f0       	breq	.+8      	; 0x5992 <malloc+0x92>
    598a:	fb 01       	movw	r30, r22
    598c:	93 83       	std	Z+3, r25	; 0x03
    598e:	82 83       	std	Z+2, r24	; 0x02
    5990:	04 c0       	rjmp	.+8      	; 0x599a <malloc+0x9a>
    5992:	90 93 01 07 	sts	0x0701, r25
    5996:	80 93 00 07 	sts	0x0700, r24
    599a:	fe 01       	movw	r30, r28
    599c:	32 96       	adiw	r30, 0x02	; 2
    599e:	44 c0       	rjmp	.+136    	; 0x5a28 <malloc+0x128>
    59a0:	fe 01       	movw	r30, r28
    59a2:	e2 0f       	add	r30, r18
    59a4:	f3 1f       	adc	r31, r19
    59a6:	81 93       	st	Z+, r24
    59a8:	91 93       	st	Z+, r25
    59aa:	22 50       	subi	r18, 0x02	; 2
    59ac:	31 09       	sbc	r19, r1
    59ae:	39 83       	std	Y+1, r19	; 0x01
    59b0:	28 83       	st	Y, r18
    59b2:	3a c0       	rjmp	.+116    	; 0x5a28 <malloc+0x128>
    59b4:	20 91 fe 06 	lds	r18, 0x06FE
    59b8:	30 91 ff 06 	lds	r19, 0x06FF
    59bc:	23 2b       	or	r18, r19
    59be:	41 f4       	brne	.+16     	; 0x59d0 <malloc+0xd0>
    59c0:	20 91 02 01 	lds	r18, 0x0102
    59c4:	30 91 03 01 	lds	r19, 0x0103
    59c8:	30 93 ff 06 	sts	0x06FF, r19
    59cc:	20 93 fe 06 	sts	0x06FE, r18
    59d0:	20 91 00 01 	lds	r18, 0x0100
    59d4:	30 91 01 01 	lds	r19, 0x0101
    59d8:	21 15       	cp	r18, r1
    59da:	31 05       	cpc	r19, r1
    59dc:	41 f4       	brne	.+16     	; 0x59ee <malloc+0xee>
    59de:	2d b7       	in	r18, 0x3d	; 61
    59e0:	3e b7       	in	r19, 0x3e	; 62
    59e2:	40 91 04 01 	lds	r20, 0x0104
    59e6:	50 91 05 01 	lds	r21, 0x0105
    59ea:	24 1b       	sub	r18, r20
    59ec:	35 0b       	sbc	r19, r21
    59ee:	e0 91 fe 06 	lds	r30, 0x06FE
    59f2:	f0 91 ff 06 	lds	r31, 0x06FF
    59f6:	e2 17       	cp	r30, r18
    59f8:	f3 07       	cpc	r31, r19
    59fa:	a0 f4       	brcc	.+40     	; 0x5a24 <malloc+0x124>
    59fc:	2e 1b       	sub	r18, r30
    59fe:	3f 0b       	sbc	r19, r31
    5a00:	28 17       	cp	r18, r24
    5a02:	39 07       	cpc	r19, r25
    5a04:	78 f0       	brcs	.+30     	; 0x5a24 <malloc+0x124>
    5a06:	ac 01       	movw	r20, r24
    5a08:	4e 5f       	subi	r20, 0xFE	; 254
    5a0a:	5f 4f       	sbci	r21, 0xFF	; 255
    5a0c:	24 17       	cp	r18, r20
    5a0e:	35 07       	cpc	r19, r21
    5a10:	48 f0       	brcs	.+18     	; 0x5a24 <malloc+0x124>
    5a12:	4e 0f       	add	r20, r30
    5a14:	5f 1f       	adc	r21, r31
    5a16:	50 93 ff 06 	sts	0x06FF, r21
    5a1a:	40 93 fe 06 	sts	0x06FE, r20
    5a1e:	81 93       	st	Z+, r24
    5a20:	91 93       	st	Z+, r25
    5a22:	02 c0       	rjmp	.+4      	; 0x5a28 <malloc+0x128>
    5a24:	e0 e0       	ldi	r30, 0x00	; 0
    5a26:	f0 e0       	ldi	r31, 0x00	; 0
    5a28:	cf 01       	movw	r24, r30
    5a2a:	df 91       	pop	r29
    5a2c:	cf 91       	pop	r28
    5a2e:	08 95       	ret

00005a30 <free>:
    5a30:	cf 93       	push	r28
    5a32:	df 93       	push	r29
    5a34:	00 97       	sbiw	r24, 0x00	; 0
    5a36:	09 f4       	brne	.+2      	; 0x5a3a <free+0xa>
    5a38:	87 c0       	rjmp	.+270    	; 0x5b48 <free+0x118>
    5a3a:	fc 01       	movw	r30, r24
    5a3c:	32 97       	sbiw	r30, 0x02	; 2
    5a3e:	13 82       	std	Z+3, r1	; 0x03
    5a40:	12 82       	std	Z+2, r1	; 0x02
    5a42:	c0 91 00 07 	lds	r28, 0x0700
    5a46:	d0 91 01 07 	lds	r29, 0x0701
    5a4a:	20 97       	sbiw	r28, 0x00	; 0
    5a4c:	81 f4       	brne	.+32     	; 0x5a6e <free+0x3e>
    5a4e:	20 81       	ld	r18, Z
    5a50:	31 81       	ldd	r19, Z+1	; 0x01
    5a52:	28 0f       	add	r18, r24
    5a54:	39 1f       	adc	r19, r25
    5a56:	80 91 fe 06 	lds	r24, 0x06FE
    5a5a:	90 91 ff 06 	lds	r25, 0x06FF
    5a5e:	82 17       	cp	r24, r18
    5a60:	93 07       	cpc	r25, r19
    5a62:	79 f5       	brne	.+94     	; 0x5ac2 <free+0x92>
    5a64:	f0 93 ff 06 	sts	0x06FF, r31
    5a68:	e0 93 fe 06 	sts	0x06FE, r30
    5a6c:	6d c0       	rjmp	.+218    	; 0x5b48 <free+0x118>
    5a6e:	de 01       	movw	r26, r28
    5a70:	20 e0       	ldi	r18, 0x00	; 0
    5a72:	30 e0       	ldi	r19, 0x00	; 0
    5a74:	ae 17       	cp	r26, r30
    5a76:	bf 07       	cpc	r27, r31
    5a78:	50 f4       	brcc	.+20     	; 0x5a8e <free+0x5e>
    5a7a:	12 96       	adiw	r26, 0x02	; 2
    5a7c:	4d 91       	ld	r20, X+
    5a7e:	5c 91       	ld	r21, X
    5a80:	13 97       	sbiw	r26, 0x03	; 3
    5a82:	9d 01       	movw	r18, r26
    5a84:	41 15       	cp	r20, r1
    5a86:	51 05       	cpc	r21, r1
    5a88:	09 f1       	breq	.+66     	; 0x5acc <free+0x9c>
    5a8a:	da 01       	movw	r26, r20
    5a8c:	f3 cf       	rjmp	.-26     	; 0x5a74 <free+0x44>
    5a8e:	b3 83       	std	Z+3, r27	; 0x03
    5a90:	a2 83       	std	Z+2, r26	; 0x02
    5a92:	40 81       	ld	r20, Z
    5a94:	51 81       	ldd	r21, Z+1	; 0x01
    5a96:	84 0f       	add	r24, r20
    5a98:	95 1f       	adc	r25, r21
    5a9a:	8a 17       	cp	r24, r26
    5a9c:	9b 07       	cpc	r25, r27
    5a9e:	71 f4       	brne	.+28     	; 0x5abc <free+0x8c>
    5aa0:	8d 91       	ld	r24, X+
    5aa2:	9c 91       	ld	r25, X
    5aa4:	11 97       	sbiw	r26, 0x01	; 1
    5aa6:	84 0f       	add	r24, r20
    5aa8:	95 1f       	adc	r25, r21
    5aaa:	02 96       	adiw	r24, 0x02	; 2
    5aac:	91 83       	std	Z+1, r25	; 0x01
    5aae:	80 83       	st	Z, r24
    5ab0:	12 96       	adiw	r26, 0x02	; 2
    5ab2:	8d 91       	ld	r24, X+
    5ab4:	9c 91       	ld	r25, X
    5ab6:	13 97       	sbiw	r26, 0x03	; 3
    5ab8:	93 83       	std	Z+3, r25	; 0x03
    5aba:	82 83       	std	Z+2, r24	; 0x02
    5abc:	21 15       	cp	r18, r1
    5abe:	31 05       	cpc	r19, r1
    5ac0:	29 f4       	brne	.+10     	; 0x5acc <free+0x9c>
    5ac2:	f0 93 01 07 	sts	0x0701, r31
    5ac6:	e0 93 00 07 	sts	0x0700, r30
    5aca:	3e c0       	rjmp	.+124    	; 0x5b48 <free+0x118>
    5acc:	d9 01       	movw	r26, r18
    5ace:	13 96       	adiw	r26, 0x03	; 3
    5ad0:	fc 93       	st	X, r31
    5ad2:	ee 93       	st	-X, r30
    5ad4:	12 97       	sbiw	r26, 0x02	; 2
    5ad6:	4d 91       	ld	r20, X+
    5ad8:	5d 91       	ld	r21, X+
    5ada:	a4 0f       	add	r26, r20
    5adc:	b5 1f       	adc	r27, r21
    5ade:	ea 17       	cp	r30, r26
    5ae0:	fb 07       	cpc	r31, r27
    5ae2:	79 f4       	brne	.+30     	; 0x5b02 <free+0xd2>
    5ae4:	80 81       	ld	r24, Z
    5ae6:	91 81       	ldd	r25, Z+1	; 0x01
    5ae8:	84 0f       	add	r24, r20
    5aea:	95 1f       	adc	r25, r21
    5aec:	02 96       	adiw	r24, 0x02	; 2
    5aee:	d9 01       	movw	r26, r18
    5af0:	11 96       	adiw	r26, 0x01	; 1
    5af2:	9c 93       	st	X, r25
    5af4:	8e 93       	st	-X, r24
    5af6:	82 81       	ldd	r24, Z+2	; 0x02
    5af8:	93 81       	ldd	r25, Z+3	; 0x03
    5afa:	13 96       	adiw	r26, 0x03	; 3
    5afc:	9c 93       	st	X, r25
    5afe:	8e 93       	st	-X, r24
    5b00:	12 97       	sbiw	r26, 0x02	; 2
    5b02:	e0 e0       	ldi	r30, 0x00	; 0
    5b04:	f0 e0       	ldi	r31, 0x00	; 0
    5b06:	8a 81       	ldd	r24, Y+2	; 0x02
    5b08:	9b 81       	ldd	r25, Y+3	; 0x03
    5b0a:	00 97       	sbiw	r24, 0x00	; 0
    5b0c:	19 f0       	breq	.+6      	; 0x5b14 <free+0xe4>
    5b0e:	fe 01       	movw	r30, r28
    5b10:	ec 01       	movw	r28, r24
    5b12:	f9 cf       	rjmp	.-14     	; 0x5b06 <free+0xd6>
    5b14:	ce 01       	movw	r24, r28
    5b16:	02 96       	adiw	r24, 0x02	; 2
    5b18:	28 81       	ld	r18, Y
    5b1a:	39 81       	ldd	r19, Y+1	; 0x01
    5b1c:	82 0f       	add	r24, r18
    5b1e:	93 1f       	adc	r25, r19
    5b20:	20 91 fe 06 	lds	r18, 0x06FE
    5b24:	30 91 ff 06 	lds	r19, 0x06FF
    5b28:	28 17       	cp	r18, r24
    5b2a:	39 07       	cpc	r19, r25
    5b2c:	69 f4       	brne	.+26     	; 0x5b48 <free+0x118>
    5b2e:	30 97       	sbiw	r30, 0x00	; 0
    5b30:	29 f4       	brne	.+10     	; 0x5b3c <free+0x10c>
    5b32:	10 92 01 07 	sts	0x0701, r1
    5b36:	10 92 00 07 	sts	0x0700, r1
    5b3a:	02 c0       	rjmp	.+4      	; 0x5b40 <free+0x110>
    5b3c:	13 82       	std	Z+3, r1	; 0x03
    5b3e:	12 82       	std	Z+2, r1	; 0x02
    5b40:	d0 93 ff 06 	sts	0x06FF, r29
    5b44:	c0 93 fe 06 	sts	0x06FE, r28
    5b48:	df 91       	pop	r29
    5b4a:	cf 91       	pop	r28
    5b4c:	08 95       	ret

00005b4e <strtoul>:
    5b4e:	2f 92       	push	r2
    5b50:	3f 92       	push	r3
    5b52:	5f 92       	push	r5
    5b54:	6f 92       	push	r6
    5b56:	7f 92       	push	r7
    5b58:	8f 92       	push	r8
    5b5a:	9f 92       	push	r9
    5b5c:	af 92       	push	r10
    5b5e:	bf 92       	push	r11
    5b60:	cf 92       	push	r12
    5b62:	df 92       	push	r13
    5b64:	ef 92       	push	r14
    5b66:	ff 92       	push	r15
    5b68:	0f 93       	push	r16
    5b6a:	1f 93       	push	r17
    5b6c:	cf 93       	push	r28
    5b6e:	df 93       	push	r29
    5b70:	8b 01       	movw	r16, r22
    5b72:	ea 01       	movw	r28, r20
    5b74:	61 15       	cp	r22, r1
    5b76:	71 05       	cpc	r23, r1
    5b78:	21 f0       	breq	.+8      	; 0x5b82 <strtoul+0x34>
    5b7a:	db 01       	movw	r26, r22
    5b7c:	8c 93       	st	X, r24
    5b7e:	11 96       	adiw	r26, 0x01	; 1
    5b80:	9c 93       	st	X, r25
    5b82:	20 97       	sbiw	r28, 0x00	; 0
    5b84:	39 f0       	breq	.+14     	; 0x5b94 <strtoul+0x46>
    5b86:	9e 01       	movw	r18, r28
    5b88:	22 50       	subi	r18, 0x02	; 2
    5b8a:	31 09       	sbc	r19, r1
    5b8c:	23 32       	cpi	r18, 0x23	; 35
    5b8e:	31 05       	cpc	r19, r1
    5b90:	08 f0       	brcs	.+2      	; 0x5b94 <strtoul+0x46>
    5b92:	d5 c0       	rjmp	.+426    	; 0x5d3e <strtoul+0x1f0>
    5b94:	7c 01       	movw	r14, r24
    5b96:	67 01       	movw	r12, r14
    5b98:	bf ef       	ldi	r27, 0xFF	; 255
    5b9a:	cb 1a       	sub	r12, r27
    5b9c:	db 0a       	sbc	r13, r27
    5b9e:	56 01       	movw	r10, r12
    5ba0:	f7 01       	movw	r30, r14
    5ba2:	60 80       	ld	r6, Z
    5ba4:	86 2d       	mov	r24, r6
    5ba6:	90 e0       	ldi	r25, 0x00	; 0
    5ba8:	09 d1       	rcall	.+530    	; 0x5dbc <isspace>
    5baa:	89 2b       	or	r24, r25
    5bac:	11 f0       	breq	.+4      	; 0x5bb2 <strtoul+0x64>
    5bae:	76 01       	movw	r14, r12
    5bb0:	f2 cf       	rjmp	.-28     	; 0x5b96 <strtoul+0x48>
    5bb2:	fd e2       	ldi	r31, 0x2D	; 45
    5bb4:	6f 12       	cpse	r6, r31
    5bb6:	0a c0       	rjmp	.+20     	; 0x5bcc <strtoul+0x7e>
    5bb8:	57 01       	movw	r10, r14
    5bba:	82 e0       	ldi	r24, 0x02	; 2
    5bbc:	a8 0e       	add	r10, r24
    5bbe:	b1 1c       	adc	r11, r1
    5bc0:	d7 01       	movw	r26, r14
    5bc2:	11 96       	adiw	r26, 0x01	; 1
    5bc4:	6c 90       	ld	r6, X
    5bc6:	77 24       	eor	r7, r7
    5bc8:	73 94       	inc	r7
    5bca:	0b c0       	rjmp	.+22     	; 0x5be2 <strtoul+0x94>
    5bcc:	bb e2       	ldi	r27, 0x2B	; 43
    5bce:	6b 12       	cpse	r6, r27
    5bd0:	07 c0       	rjmp	.+14     	; 0x5be0 <strtoul+0x92>
    5bd2:	57 01       	movw	r10, r14
    5bd4:	e2 e0       	ldi	r30, 0x02	; 2
    5bd6:	ae 0e       	add	r10, r30
    5bd8:	b1 1c       	adc	r11, r1
    5bda:	d7 01       	movw	r26, r14
    5bdc:	11 96       	adiw	r26, 0x01	; 1
    5bde:	6c 90       	ld	r6, X
    5be0:	71 2c       	mov	r7, r1
    5be2:	ce 01       	movw	r24, r28
    5be4:	8f 7e       	andi	r24, 0xEF	; 239
    5be6:	89 2b       	or	r24, r25
    5be8:	89 f4       	brne	.+34     	; 0x5c0c <strtoul+0xbe>
    5bea:	b0 e3       	ldi	r27, 0x30	; 48
    5bec:	6b 12       	cpse	r6, r27
    5bee:	36 c0       	rjmp	.+108    	; 0x5c5c <strtoul+0x10e>
    5bf0:	f5 01       	movw	r30, r10
    5bf2:	80 81       	ld	r24, Z
    5bf4:	8f 7d       	andi	r24, 0xDF	; 223
    5bf6:	88 35       	cpi	r24, 0x58	; 88
    5bf8:	d1 f4       	brne	.+52     	; 0x5c2e <strtoul+0xe0>
    5bfa:	61 80       	ldd	r6, Z+1	; 0x01
    5bfc:	f2 e0       	ldi	r31, 0x02	; 2
    5bfe:	af 0e       	add	r10, r31
    5c00:	b1 1c       	adc	r11, r1
    5c02:	87 2d       	mov	r24, r7
    5c04:	82 60       	ori	r24, 0x02	; 2
    5c06:	78 2e       	mov	r7, r24
    5c08:	c0 e1       	ldi	r28, 0x10	; 16
    5c0a:	d0 e0       	ldi	r29, 0x00	; 0
    5c0c:	ca 30       	cpi	r28, 0x0A	; 10
    5c0e:	d1 05       	cpc	r29, r1
    5c10:	49 f1       	breq	.+82     	; 0x5c64 <strtoul+0x116>
    5c12:	c0 31       	cpi	r28, 0x10	; 16
    5c14:	d1 05       	cpc	r29, r1
    5c16:	21 f0       	breq	.+8      	; 0x5c20 <strtoul+0xd2>
    5c18:	c8 30       	cpi	r28, 0x08	; 8
    5c1a:	d1 05       	cpc	r29, r1
    5c1c:	99 f4       	brne	.+38     	; 0x5c44 <strtoul+0xf6>
    5c1e:	09 c0       	rjmp	.+18     	; 0x5c32 <strtoul+0xe4>
    5c20:	cc 24       	eor	r12, r12
    5c22:	ca 94       	dec	r12
    5c24:	dc 2c       	mov	r13, r12
    5c26:	ec 2c       	mov	r14, r12
    5c28:	af e0       	ldi	r26, 0x0F	; 15
    5c2a:	fa 2e       	mov	r15, r26
    5c2c:	21 c0       	rjmp	.+66     	; 0x5c70 <strtoul+0x122>
    5c2e:	20 97       	sbiw	r28, 0x00	; 0
    5c30:	69 f7       	brne	.-38     	; 0x5c0c <strtoul+0xbe>
    5c32:	c8 e0       	ldi	r28, 0x08	; 8
    5c34:	d0 e0       	ldi	r29, 0x00	; 0
    5c36:	cc 24       	eor	r12, r12
    5c38:	ca 94       	dec	r12
    5c3a:	dc 2c       	mov	r13, r12
    5c3c:	ec 2c       	mov	r14, r12
    5c3e:	ff e1       	ldi	r31, 0x1F	; 31
    5c40:	ff 2e       	mov	r15, r31
    5c42:	16 c0       	rjmp	.+44     	; 0x5c70 <strtoul+0x122>
    5c44:	6f ef       	ldi	r22, 0xFF	; 255
    5c46:	7f ef       	ldi	r23, 0xFF	; 255
    5c48:	cb 01       	movw	r24, r22
    5c4a:	9e 01       	movw	r18, r28
    5c4c:	44 27       	eor	r20, r20
    5c4e:	37 fd       	sbrc	r19, 7
    5c50:	40 95       	com	r20
    5c52:	54 2f       	mov	r21, r20
    5c54:	fa dd       	rcall	.-1036   	; 0x584a <__udivmodsi4>
    5c56:	69 01       	movw	r12, r18
    5c58:	7a 01       	movw	r14, r20
    5c5a:	0a c0       	rjmp	.+20     	; 0x5c70 <strtoul+0x122>
    5c5c:	20 97       	sbiw	r28, 0x00	; 0
    5c5e:	b1 f6       	brne	.-84     	; 0x5c0c <strtoul+0xbe>
    5c60:	ca e0       	ldi	r28, 0x0A	; 10
    5c62:	d0 e0       	ldi	r29, 0x00	; 0
    5c64:	e9 e9       	ldi	r30, 0x99	; 153
    5c66:	ce 2e       	mov	r12, r30
    5c68:	dc 2c       	mov	r13, r12
    5c6a:	ec 2c       	mov	r14, r12
    5c6c:	e9 e1       	ldi	r30, 0x19	; 25
    5c6e:	fe 2e       	mov	r15, r30
    5c70:	f5 01       	movw	r30, r10
    5c72:	60 e0       	ldi	r22, 0x00	; 0
    5c74:	20 e0       	ldi	r18, 0x00	; 0
    5c76:	30 e0       	ldi	r19, 0x00	; 0
    5c78:	a9 01       	movw	r20, r18
    5c7a:	4e 01       	movw	r8, r28
    5c7c:	aa 24       	eor	r10, r10
    5c7e:	97 fc       	sbrc	r9, 7
    5c80:	a0 94       	com	r10
    5c82:	ba 2c       	mov	r11, r10
    5c84:	1f 01       	movw	r2, r30
    5c86:	70 ed       	ldi	r23, 0xD0	; 208
    5c88:	57 2e       	mov	r5, r23
    5c8a:	56 0c       	add	r5, r6
    5c8c:	a9 e0       	ldi	r26, 0x09	; 9
    5c8e:	a5 15       	cp	r26, r5
    5c90:	70 f4       	brcc	.+28     	; 0x5cae <strtoul+0x160>
    5c92:	8f eb       	ldi	r24, 0xBF	; 191
    5c94:	86 0d       	add	r24, r6
    5c96:	8a 31       	cpi	r24, 0x1A	; 26
    5c98:	18 f4       	brcc	.+6      	; 0x5ca0 <strtoul+0x152>
    5c9a:	99 ec       	ldi	r25, 0xC9	; 201
    5c9c:	59 2e       	mov	r5, r25
    5c9e:	06 c0       	rjmp	.+12     	; 0x5cac <strtoul+0x15e>
    5ca0:	8f e9       	ldi	r24, 0x9F	; 159
    5ca2:	86 0d       	add	r24, r6
    5ca4:	8a 31       	cpi	r24, 0x1A	; 26
    5ca6:	40 f5       	brcc	.+80     	; 0x5cf8 <strtoul+0x1aa>
    5ca8:	89 ea       	ldi	r24, 0xA9	; 169
    5caa:	58 2e       	mov	r5, r24
    5cac:	56 0c       	add	r5, r6
    5cae:	85 2d       	mov	r24, r5
    5cb0:	90 e0       	ldi	r25, 0x00	; 0
    5cb2:	8c 17       	cp	r24, r28
    5cb4:	9d 07       	cpc	r25, r29
    5cb6:	04 f5       	brge	.+64     	; 0x5cf8 <strtoul+0x1aa>
    5cb8:	6f 3f       	cpi	r22, 0xFF	; 255
    5cba:	d1 f0       	breq	.+52     	; 0x5cf0 <strtoul+0x1a2>
    5cbc:	c2 16       	cp	r12, r18
    5cbe:	d3 06       	cpc	r13, r19
    5cc0:	e4 06       	cpc	r14, r20
    5cc2:	f5 06       	cpc	r15, r21
    5cc4:	90 f0       	brcs	.+36     	; 0x5cea <strtoul+0x19c>
    5cc6:	c5 01       	movw	r24, r10
    5cc8:	b4 01       	movw	r22, r8
    5cca:	52 d6       	rcall	.+3236   	; 0x6970 <__mulsi3>
    5ccc:	9b 01       	movw	r18, r22
    5cce:	ac 01       	movw	r20, r24
    5cd0:	85 2d       	mov	r24, r5
    5cd2:	90 e0       	ldi	r25, 0x00	; 0
    5cd4:	a0 e0       	ldi	r26, 0x00	; 0
    5cd6:	b0 e0       	ldi	r27, 0x00	; 0
    5cd8:	28 0f       	add	r18, r24
    5cda:	39 1f       	adc	r19, r25
    5cdc:	4a 1f       	adc	r20, r26
    5cde:	5b 1f       	adc	r21, r27
    5ce0:	28 17       	cp	r18, r24
    5ce2:	39 07       	cpc	r19, r25
    5ce4:	4a 07       	cpc	r20, r26
    5ce6:	5b 07       	cpc	r21, r27
    5ce8:	10 f4       	brcc	.+4      	; 0x5cee <strtoul+0x1a0>
    5cea:	6f ef       	ldi	r22, 0xFF	; 255
    5cec:	01 c0       	rjmp	.+2      	; 0x5cf0 <strtoul+0x1a2>
    5cee:	61 e0       	ldi	r22, 0x01	; 1
    5cf0:	31 96       	adiw	r30, 0x01	; 1
    5cf2:	d1 01       	movw	r26, r2
    5cf4:	6c 90       	ld	r6, X
    5cf6:	c6 cf       	rjmp	.-116    	; 0x5c84 <strtoul+0x136>
    5cf8:	01 15       	cp	r16, r1
    5cfa:	11 05       	cpc	r17, r1
    5cfc:	51 f0       	breq	.+20     	; 0x5d12 <strtoul+0x1c4>
    5cfe:	66 23       	and	r22, r22
    5d00:	11 f0       	breq	.+4      	; 0x5d06 <strtoul+0x1b8>
    5d02:	31 97       	sbiw	r30, 0x01	; 1
    5d04:	03 c0       	rjmp	.+6      	; 0x5d0c <strtoul+0x1be>
    5d06:	71 fe       	sbrs	r7, 1
    5d08:	04 c0       	rjmp	.+8      	; 0x5d12 <strtoul+0x1c4>
    5d0a:	32 97       	sbiw	r30, 0x02	; 2
    5d0c:	d8 01       	movw	r26, r16
    5d0e:	ed 93       	st	X+, r30
    5d10:	fc 93       	st	X, r31
    5d12:	70 fe       	sbrs	r7, 0
    5d14:	07 c0       	rjmp	.+14     	; 0x5d24 <strtoul+0x1d6>
    5d16:	50 95       	com	r21
    5d18:	40 95       	com	r20
    5d1a:	30 95       	com	r19
    5d1c:	21 95       	neg	r18
    5d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    5d20:	4f 4f       	sbci	r20, 0xFF	; 255
    5d22:	5f 4f       	sbci	r21, 0xFF	; 255
    5d24:	67 ff       	sbrs	r22, 7
    5d26:	10 c0       	rjmp	.+32     	; 0x5d48 <strtoul+0x1fa>
    5d28:	82 e2       	ldi	r24, 0x22	; 34
    5d2a:	90 e0       	ldi	r25, 0x00	; 0
    5d2c:	90 93 09 07 	sts	0x0709, r25
    5d30:	80 93 08 07 	sts	0x0708, r24
    5d34:	6f ef       	ldi	r22, 0xFF	; 255
    5d36:	7f ef       	ldi	r23, 0xFF	; 255
    5d38:	8f ef       	ldi	r24, 0xFF	; 255
    5d3a:	9f ef       	ldi	r25, 0xFF	; 255
    5d3c:	07 c0       	rjmp	.+14     	; 0x5d4c <strtoul+0x1fe>
    5d3e:	60 e0       	ldi	r22, 0x00	; 0
    5d40:	70 e0       	ldi	r23, 0x00	; 0
    5d42:	80 e0       	ldi	r24, 0x00	; 0
    5d44:	90 e0       	ldi	r25, 0x00	; 0
    5d46:	02 c0       	rjmp	.+4      	; 0x5d4c <strtoul+0x1fe>
    5d48:	b9 01       	movw	r22, r18
    5d4a:	ca 01       	movw	r24, r20
    5d4c:	df 91       	pop	r29
    5d4e:	cf 91       	pop	r28
    5d50:	1f 91       	pop	r17
    5d52:	0f 91       	pop	r16
    5d54:	ff 90       	pop	r15
    5d56:	ef 90       	pop	r14
    5d58:	df 90       	pop	r13
    5d5a:	cf 90       	pop	r12
    5d5c:	bf 90       	pop	r11
    5d5e:	af 90       	pop	r10
    5d60:	9f 90       	pop	r9
    5d62:	8f 90       	pop	r8
    5d64:	7f 90       	pop	r7
    5d66:	6f 90       	pop	r6
    5d68:	5f 90       	pop	r5
    5d6a:	3f 90       	pop	r3
    5d6c:	2f 90       	pop	r2
    5d6e:	08 95       	ret

00005d70 <atoi>:
    5d70:	fc 01       	movw	r30, r24
    5d72:	88 27       	eor	r24, r24
    5d74:	99 27       	eor	r25, r25
    5d76:	e8 94       	clt
    5d78:	21 91       	ld	r18, Z+
    5d7a:	20 32       	cpi	r18, 0x20	; 32
    5d7c:	e9 f3       	breq	.-6      	; 0x5d78 <atoi+0x8>
    5d7e:	29 30       	cpi	r18, 0x09	; 9
    5d80:	10 f0       	brcs	.+4      	; 0x5d86 <atoi+0x16>
    5d82:	2e 30       	cpi	r18, 0x0E	; 14
    5d84:	c8 f3       	brcs	.-14     	; 0x5d78 <atoi+0x8>
    5d86:	2b 32       	cpi	r18, 0x2B	; 43
    5d88:	39 f0       	breq	.+14     	; 0x5d98 <atoi+0x28>
    5d8a:	2d 32       	cpi	r18, 0x2D	; 45
    5d8c:	31 f4       	brne	.+12     	; 0x5d9a <atoi+0x2a>
    5d8e:	68 94       	set
    5d90:	03 c0       	rjmp	.+6      	; 0x5d98 <atoi+0x28>
    5d92:	51 d0       	rcall	.+162    	; 0x5e36 <__mulhi_const_10>
    5d94:	82 0f       	add	r24, r18
    5d96:	91 1d       	adc	r25, r1
    5d98:	21 91       	ld	r18, Z+
    5d9a:	20 53       	subi	r18, 0x30	; 48
    5d9c:	2a 30       	cpi	r18, 0x0A	; 10
    5d9e:	c8 f3       	brcs	.-14     	; 0x5d92 <atoi+0x22>
    5da0:	1e f4       	brtc	.+6      	; 0x5da8 <atoi+0x38>
    5da2:	90 95       	com	r25
    5da4:	81 95       	neg	r24
    5da6:	9f 4f       	sbci	r25, 0xFF	; 255
    5da8:	08 95       	ret

00005daa <isupper>:
    5daa:	85 fd       	sbrc	r24, 5
    5dac:	31 c5       	rjmp	.+2658   	; 0x6810 <__ctype_isfalse>

00005dae <isalpha>:
    5dae:	80 62       	ori	r24, 0x20	; 32

00005db0 <islower>:
    5db0:	91 11       	cpse	r25, r1
    5db2:	2e c5       	rjmp	.+2652   	; 0x6810 <__ctype_isfalse>
    5db4:	81 56       	subi	r24, 0x61	; 97
    5db6:	8a 51       	subi	r24, 0x1A	; 26
    5db8:	e0 f7       	brcc	.-8      	; 0x5db2 <islower+0x2>
    5dba:	08 95       	ret

00005dbc <isspace>:
    5dbc:	91 11       	cpse	r25, r1
    5dbe:	28 c5       	rjmp	.+2640   	; 0x6810 <__ctype_isfalse>
    5dc0:	80 32       	cpi	r24, 0x20	; 32
    5dc2:	19 f0       	breq	.+6      	; 0x5dca <isspace+0xe>
    5dc4:	89 50       	subi	r24, 0x09	; 9
    5dc6:	85 50       	subi	r24, 0x05	; 5
    5dc8:	d0 f7       	brcc	.-12     	; 0x5dbe <isspace+0x2>
    5dca:	08 95       	ret

00005dcc <tolower>:
    5dcc:	91 11       	cpse	r25, r1
    5dce:	08 95       	ret
    5dd0:	81 54       	subi	r24, 0x41	; 65
    5dd2:	8a 51       	subi	r24, 0x1A	; 26
    5dd4:	08 f4       	brcc	.+2      	; 0x5dd8 <tolower+0xc>
    5dd6:	80 5e       	subi	r24, 0xE0	; 224
    5dd8:	85 5a       	subi	r24, 0xA5	; 165
    5dda:	08 95       	ret

00005ddc <strcpy>:
    5ddc:	fb 01       	movw	r30, r22
    5dde:	dc 01       	movw	r26, r24
    5de0:	01 90       	ld	r0, Z+
    5de2:	0d 92       	st	X+, r0
    5de4:	00 20       	and	r0, r0
    5de6:	e1 f7       	brne	.-8      	; 0x5de0 <strcpy+0x4>
    5de8:	08 95       	ret

00005dea <strncasecmp>:
    5dea:	fb 01       	movw	r30, r22
    5dec:	dc 01       	movw	r26, r24
    5dee:	41 50       	subi	r20, 0x01	; 1
    5df0:	50 40       	sbci	r21, 0x00	; 0
    5df2:	88 f0       	brcs	.+34     	; 0x5e16 <strncasecmp+0x2c>
    5df4:	8d 91       	ld	r24, X+
    5df6:	81 34       	cpi	r24, 0x41	; 65
    5df8:	1c f0       	brlt	.+6      	; 0x5e00 <strncasecmp+0x16>
    5dfa:	8b 35       	cpi	r24, 0x5B	; 91
    5dfc:	0c f4       	brge	.+2      	; 0x5e00 <strncasecmp+0x16>
    5dfe:	80 5e       	subi	r24, 0xE0	; 224
    5e00:	61 91       	ld	r22, Z+
    5e02:	61 34       	cpi	r22, 0x41	; 65
    5e04:	1c f0       	brlt	.+6      	; 0x5e0c <strncasecmp+0x22>
    5e06:	6b 35       	cpi	r22, 0x5B	; 91
    5e08:	0c f4       	brge	.+2      	; 0x5e0c <strncasecmp+0x22>
    5e0a:	60 5e       	subi	r22, 0xE0	; 224
    5e0c:	86 1b       	sub	r24, r22
    5e0e:	61 11       	cpse	r22, r1
    5e10:	71 f3       	breq	.-36     	; 0x5dee <strncasecmp+0x4>
    5e12:	99 0b       	sbc	r25, r25
    5e14:	08 95       	ret
    5e16:	88 1b       	sub	r24, r24
    5e18:	fc cf       	rjmp	.-8      	; 0x5e12 <strncasecmp+0x28>

00005e1a <strncmp>:
    5e1a:	fb 01       	movw	r30, r22
    5e1c:	dc 01       	movw	r26, r24
    5e1e:	41 50       	subi	r20, 0x01	; 1
    5e20:	50 40       	sbci	r21, 0x00	; 0
    5e22:	30 f0       	brcs	.+12     	; 0x5e30 <strncmp+0x16>
    5e24:	8d 91       	ld	r24, X+
    5e26:	01 90       	ld	r0, Z+
    5e28:	80 19       	sub	r24, r0
    5e2a:	19 f4       	brne	.+6      	; 0x5e32 <strncmp+0x18>
    5e2c:	00 20       	and	r0, r0
    5e2e:	b9 f7       	brne	.-18     	; 0x5e1e <strncmp+0x4>
    5e30:	88 1b       	sub	r24, r24
    5e32:	99 0b       	sbc	r25, r25
    5e34:	08 95       	ret

00005e36 <__mulhi_const_10>:
    5e36:	7a e0       	ldi	r23, 0x0A	; 10
    5e38:	97 9f       	mul	r25, r23
    5e3a:	90 2d       	mov	r25, r0
    5e3c:	87 9f       	mul	r24, r23
    5e3e:	80 2d       	mov	r24, r0
    5e40:	91 0d       	add	r25, r1
    5e42:	11 24       	eor	r1, r1
    5e44:	08 95       	ret

00005e46 <fdevopen>:
    5e46:	0f 93       	push	r16
    5e48:	1f 93       	push	r17
    5e4a:	cf 93       	push	r28
    5e4c:	df 93       	push	r29
    5e4e:	ec 01       	movw	r28, r24
    5e50:	8b 01       	movw	r16, r22
    5e52:	00 97       	sbiw	r24, 0x00	; 0
    5e54:	31 f4       	brne	.+12     	; 0x5e62 <fdevopen+0x1c>
    5e56:	61 15       	cp	r22, r1
    5e58:	71 05       	cpc	r23, r1
    5e5a:	19 f4       	brne	.+6      	; 0x5e62 <fdevopen+0x1c>
    5e5c:	80 e0       	ldi	r24, 0x00	; 0
    5e5e:	90 e0       	ldi	r25, 0x00	; 0
    5e60:	37 c0       	rjmp	.+110    	; 0x5ed0 <fdevopen+0x8a>
    5e62:	6e e0       	ldi	r22, 0x0E	; 14
    5e64:	70 e0       	ldi	r23, 0x00	; 0
    5e66:	81 e0       	ldi	r24, 0x01	; 1
    5e68:	90 e0       	ldi	r25, 0x00	; 0
    5e6a:	63 d2       	rcall	.+1222   	; 0x6332 <calloc>
    5e6c:	fc 01       	movw	r30, r24
    5e6e:	00 97       	sbiw	r24, 0x00	; 0
    5e70:	a9 f3       	breq	.-22     	; 0x5e5c <fdevopen+0x16>
    5e72:	80 e8       	ldi	r24, 0x80	; 128
    5e74:	83 83       	std	Z+3, r24	; 0x03
    5e76:	01 15       	cp	r16, r1
    5e78:	11 05       	cpc	r17, r1
    5e7a:	71 f0       	breq	.+28     	; 0x5e98 <fdevopen+0x52>
    5e7c:	13 87       	std	Z+11, r17	; 0x0b
    5e7e:	02 87       	std	Z+10, r16	; 0x0a
    5e80:	81 e8       	ldi	r24, 0x81	; 129
    5e82:	83 83       	std	Z+3, r24	; 0x03
    5e84:	80 91 02 07 	lds	r24, 0x0702
    5e88:	90 91 03 07 	lds	r25, 0x0703
    5e8c:	89 2b       	or	r24, r25
    5e8e:	21 f4       	brne	.+8      	; 0x5e98 <fdevopen+0x52>
    5e90:	f0 93 03 07 	sts	0x0703, r31
    5e94:	e0 93 02 07 	sts	0x0702, r30
    5e98:	20 97       	sbiw	r28, 0x00	; 0
    5e9a:	c9 f0       	breq	.+50     	; 0x5ece <fdevopen+0x88>
    5e9c:	d1 87       	std	Z+9, r29	; 0x09
    5e9e:	c0 87       	std	Z+8, r28	; 0x08
    5ea0:	83 81       	ldd	r24, Z+3	; 0x03
    5ea2:	82 60       	ori	r24, 0x02	; 2
    5ea4:	83 83       	std	Z+3, r24	; 0x03
    5ea6:	80 91 04 07 	lds	r24, 0x0704
    5eaa:	90 91 05 07 	lds	r25, 0x0705
    5eae:	89 2b       	or	r24, r25
    5eb0:	71 f4       	brne	.+28     	; 0x5ece <fdevopen+0x88>
    5eb2:	f0 93 05 07 	sts	0x0705, r31
    5eb6:	e0 93 04 07 	sts	0x0704, r30
    5eba:	80 91 06 07 	lds	r24, 0x0706
    5ebe:	90 91 07 07 	lds	r25, 0x0707
    5ec2:	89 2b       	or	r24, r25
    5ec4:	21 f4       	brne	.+8      	; 0x5ece <fdevopen+0x88>
    5ec6:	f0 93 07 07 	sts	0x0707, r31
    5eca:	e0 93 06 07 	sts	0x0706, r30
    5ece:	cf 01       	movw	r24, r30
    5ed0:	df 91       	pop	r29
    5ed2:	cf 91       	pop	r28
    5ed4:	1f 91       	pop	r17
    5ed6:	0f 91       	pop	r16
    5ed8:	08 95       	ret

00005eda <printf>:
    5eda:	cf 93       	push	r28
    5edc:	df 93       	push	r29
    5ede:	cd b7       	in	r28, 0x3d	; 61
    5ee0:	de b7       	in	r29, 0x3e	; 62
    5ee2:	fe 01       	movw	r30, r28
    5ee4:	35 96       	adiw	r30, 0x05	; 5
    5ee6:	61 91       	ld	r22, Z+
    5ee8:	71 91       	ld	r23, Z+
    5eea:	af 01       	movw	r20, r30
    5eec:	80 91 04 07 	lds	r24, 0x0704
    5ef0:	90 91 05 07 	lds	r25, 0x0705
    5ef4:	30 d0       	rcall	.+96     	; 0x5f56 <vfprintf>
    5ef6:	df 91       	pop	r29
    5ef8:	cf 91       	pop	r28
    5efa:	08 95       	ret

00005efc <puts>:
    5efc:	0f 93       	push	r16
    5efe:	1f 93       	push	r17
    5f00:	cf 93       	push	r28
    5f02:	df 93       	push	r29
    5f04:	e0 91 04 07 	lds	r30, 0x0704
    5f08:	f0 91 05 07 	lds	r31, 0x0705
    5f0c:	23 81       	ldd	r18, Z+3	; 0x03
    5f0e:	21 ff       	sbrs	r18, 1
    5f10:	1b c0       	rjmp	.+54     	; 0x5f48 <puts+0x4c>
    5f12:	ec 01       	movw	r28, r24
    5f14:	00 e0       	ldi	r16, 0x00	; 0
    5f16:	10 e0       	ldi	r17, 0x00	; 0
    5f18:	89 91       	ld	r24, Y+
    5f1a:	60 91 04 07 	lds	r22, 0x0704
    5f1e:	70 91 05 07 	lds	r23, 0x0705
    5f22:	db 01       	movw	r26, r22
    5f24:	18 96       	adiw	r26, 0x08	; 8
    5f26:	ed 91       	ld	r30, X+
    5f28:	fc 91       	ld	r31, X
    5f2a:	19 97       	sbiw	r26, 0x09	; 9
    5f2c:	88 23       	and	r24, r24
    5f2e:	31 f0       	breq	.+12     	; 0x5f3c <puts+0x40>
    5f30:	09 95       	icall
    5f32:	89 2b       	or	r24, r25
    5f34:	89 f3       	breq	.-30     	; 0x5f18 <puts+0x1c>
    5f36:	0f ef       	ldi	r16, 0xFF	; 255
    5f38:	1f ef       	ldi	r17, 0xFF	; 255
    5f3a:	ee cf       	rjmp	.-36     	; 0x5f18 <puts+0x1c>
    5f3c:	8a e0       	ldi	r24, 0x0A	; 10
    5f3e:	09 95       	icall
    5f40:	89 2b       	or	r24, r25
    5f42:	11 f4       	brne	.+4      	; 0x5f48 <puts+0x4c>
    5f44:	c8 01       	movw	r24, r16
    5f46:	02 c0       	rjmp	.+4      	; 0x5f4c <puts+0x50>
    5f48:	8f ef       	ldi	r24, 0xFF	; 255
    5f4a:	9f ef       	ldi	r25, 0xFF	; 255
    5f4c:	df 91       	pop	r29
    5f4e:	cf 91       	pop	r28
    5f50:	1f 91       	pop	r17
    5f52:	0f 91       	pop	r16
    5f54:	08 95       	ret

00005f56 <vfprintf>:
    5f56:	2f 92       	push	r2
    5f58:	3f 92       	push	r3
    5f5a:	4f 92       	push	r4
    5f5c:	5f 92       	push	r5
    5f5e:	6f 92       	push	r6
    5f60:	7f 92       	push	r7
    5f62:	8f 92       	push	r8
    5f64:	9f 92       	push	r9
    5f66:	af 92       	push	r10
    5f68:	bf 92       	push	r11
    5f6a:	cf 92       	push	r12
    5f6c:	df 92       	push	r13
    5f6e:	ef 92       	push	r14
    5f70:	ff 92       	push	r15
    5f72:	0f 93       	push	r16
    5f74:	1f 93       	push	r17
    5f76:	cf 93       	push	r28
    5f78:	df 93       	push	r29
    5f7a:	cd b7       	in	r28, 0x3d	; 61
    5f7c:	de b7       	in	r29, 0x3e	; 62
    5f7e:	2c 97       	sbiw	r28, 0x0c	; 12
    5f80:	0f b6       	in	r0, 0x3f	; 63
    5f82:	f8 94       	cli
    5f84:	de bf       	out	0x3e, r29	; 62
    5f86:	0f be       	out	0x3f, r0	; 63
    5f88:	cd bf       	out	0x3d, r28	; 61
    5f8a:	7c 01       	movw	r14, r24
    5f8c:	6b 01       	movw	r12, r22
    5f8e:	8a 01       	movw	r16, r20
    5f90:	fc 01       	movw	r30, r24
    5f92:	17 82       	std	Z+7, r1	; 0x07
    5f94:	16 82       	std	Z+6, r1	; 0x06
    5f96:	83 81       	ldd	r24, Z+3	; 0x03
    5f98:	81 ff       	sbrs	r24, 1
    5f9a:	b0 c1       	rjmp	.+864    	; 0x62fc <vfprintf+0x3a6>
    5f9c:	ce 01       	movw	r24, r28
    5f9e:	01 96       	adiw	r24, 0x01	; 1
    5fa0:	4c 01       	movw	r8, r24
    5fa2:	f7 01       	movw	r30, r14
    5fa4:	93 81       	ldd	r25, Z+3	; 0x03
    5fa6:	f6 01       	movw	r30, r12
    5fa8:	93 fd       	sbrc	r25, 3
    5faa:	85 91       	lpm	r24, Z+
    5fac:	93 ff       	sbrs	r25, 3
    5fae:	81 91       	ld	r24, Z+
    5fb0:	6f 01       	movw	r12, r30
    5fb2:	88 23       	and	r24, r24
    5fb4:	09 f4       	brne	.+2      	; 0x5fb8 <vfprintf+0x62>
    5fb6:	9e c1       	rjmp	.+828    	; 0x62f4 <vfprintf+0x39e>
    5fb8:	85 32       	cpi	r24, 0x25	; 37
    5fba:	39 f4       	brne	.+14     	; 0x5fca <vfprintf+0x74>
    5fbc:	93 fd       	sbrc	r25, 3
    5fbe:	85 91       	lpm	r24, Z+
    5fc0:	93 ff       	sbrs	r25, 3
    5fc2:	81 91       	ld	r24, Z+
    5fc4:	6f 01       	movw	r12, r30
    5fc6:	85 32       	cpi	r24, 0x25	; 37
    5fc8:	21 f4       	brne	.+8      	; 0x5fd2 <vfprintf+0x7c>
    5fca:	b7 01       	movw	r22, r14
    5fcc:	90 e0       	ldi	r25, 0x00	; 0
    5fce:	40 d4       	rcall	.+2176   	; 0x6850 <fputc>
    5fd0:	e8 cf       	rjmp	.-48     	; 0x5fa2 <vfprintf+0x4c>
    5fd2:	51 2c       	mov	r5, r1
    5fd4:	31 2c       	mov	r3, r1
    5fd6:	20 e0       	ldi	r18, 0x00	; 0
    5fd8:	20 32       	cpi	r18, 0x20	; 32
    5fda:	a0 f4       	brcc	.+40     	; 0x6004 <vfprintf+0xae>
    5fdc:	8b 32       	cpi	r24, 0x2B	; 43
    5fde:	69 f0       	breq	.+26     	; 0x5ffa <vfprintf+0xa4>
    5fe0:	30 f4       	brcc	.+12     	; 0x5fee <vfprintf+0x98>
    5fe2:	80 32       	cpi	r24, 0x20	; 32
    5fe4:	59 f0       	breq	.+22     	; 0x5ffc <vfprintf+0xa6>
    5fe6:	83 32       	cpi	r24, 0x23	; 35
    5fe8:	69 f4       	brne	.+26     	; 0x6004 <vfprintf+0xae>
    5fea:	20 61       	ori	r18, 0x10	; 16
    5fec:	2c c0       	rjmp	.+88     	; 0x6046 <vfprintf+0xf0>
    5fee:	8d 32       	cpi	r24, 0x2D	; 45
    5ff0:	39 f0       	breq	.+14     	; 0x6000 <vfprintf+0xaa>
    5ff2:	80 33       	cpi	r24, 0x30	; 48
    5ff4:	39 f4       	brne	.+14     	; 0x6004 <vfprintf+0xae>
    5ff6:	21 60       	ori	r18, 0x01	; 1
    5ff8:	26 c0       	rjmp	.+76     	; 0x6046 <vfprintf+0xf0>
    5ffa:	22 60       	ori	r18, 0x02	; 2
    5ffc:	24 60       	ori	r18, 0x04	; 4
    5ffe:	23 c0       	rjmp	.+70     	; 0x6046 <vfprintf+0xf0>
    6000:	28 60       	ori	r18, 0x08	; 8
    6002:	21 c0       	rjmp	.+66     	; 0x6046 <vfprintf+0xf0>
    6004:	27 fd       	sbrc	r18, 7
    6006:	27 c0       	rjmp	.+78     	; 0x6056 <vfprintf+0x100>
    6008:	30 ed       	ldi	r19, 0xD0	; 208
    600a:	38 0f       	add	r19, r24
    600c:	3a 30       	cpi	r19, 0x0A	; 10
    600e:	78 f4       	brcc	.+30     	; 0x602e <vfprintf+0xd8>
    6010:	26 ff       	sbrs	r18, 6
    6012:	06 c0       	rjmp	.+12     	; 0x6020 <vfprintf+0xca>
    6014:	fa e0       	ldi	r31, 0x0A	; 10
    6016:	5f 9e       	mul	r5, r31
    6018:	30 0d       	add	r19, r0
    601a:	11 24       	eor	r1, r1
    601c:	53 2e       	mov	r5, r19
    601e:	13 c0       	rjmp	.+38     	; 0x6046 <vfprintf+0xf0>
    6020:	8a e0       	ldi	r24, 0x0A	; 10
    6022:	38 9e       	mul	r3, r24
    6024:	30 0d       	add	r19, r0
    6026:	11 24       	eor	r1, r1
    6028:	33 2e       	mov	r3, r19
    602a:	20 62       	ori	r18, 0x20	; 32
    602c:	0c c0       	rjmp	.+24     	; 0x6046 <vfprintf+0xf0>
    602e:	8e 32       	cpi	r24, 0x2E	; 46
    6030:	21 f4       	brne	.+8      	; 0x603a <vfprintf+0xe4>
    6032:	26 fd       	sbrc	r18, 6
    6034:	5f c1       	rjmp	.+702    	; 0x62f4 <vfprintf+0x39e>
    6036:	20 64       	ori	r18, 0x40	; 64
    6038:	06 c0       	rjmp	.+12     	; 0x6046 <vfprintf+0xf0>
    603a:	8c 36       	cpi	r24, 0x6C	; 108
    603c:	11 f4       	brne	.+4      	; 0x6042 <vfprintf+0xec>
    603e:	20 68       	ori	r18, 0x80	; 128
    6040:	02 c0       	rjmp	.+4      	; 0x6046 <vfprintf+0xf0>
    6042:	88 36       	cpi	r24, 0x68	; 104
    6044:	41 f4       	brne	.+16     	; 0x6056 <vfprintf+0x100>
    6046:	f6 01       	movw	r30, r12
    6048:	93 fd       	sbrc	r25, 3
    604a:	85 91       	lpm	r24, Z+
    604c:	93 ff       	sbrs	r25, 3
    604e:	81 91       	ld	r24, Z+
    6050:	6f 01       	movw	r12, r30
    6052:	81 11       	cpse	r24, r1
    6054:	c1 cf       	rjmp	.-126    	; 0x5fd8 <vfprintf+0x82>
    6056:	98 2f       	mov	r25, r24
    6058:	9f 7d       	andi	r25, 0xDF	; 223
    605a:	95 54       	subi	r25, 0x45	; 69
    605c:	93 30       	cpi	r25, 0x03	; 3
    605e:	28 f4       	brcc	.+10     	; 0x606a <vfprintf+0x114>
    6060:	0c 5f       	subi	r16, 0xFC	; 252
    6062:	1f 4f       	sbci	r17, 0xFF	; 255
    6064:	ff e3       	ldi	r31, 0x3F	; 63
    6066:	f9 83       	std	Y+1, r31	; 0x01
    6068:	0d c0       	rjmp	.+26     	; 0x6084 <vfprintf+0x12e>
    606a:	83 36       	cpi	r24, 0x63	; 99
    606c:	31 f0       	breq	.+12     	; 0x607a <vfprintf+0x124>
    606e:	83 37       	cpi	r24, 0x73	; 115
    6070:	71 f0       	breq	.+28     	; 0x608e <vfprintf+0x138>
    6072:	83 35       	cpi	r24, 0x53	; 83
    6074:	09 f0       	breq	.+2      	; 0x6078 <vfprintf+0x122>
    6076:	57 c0       	rjmp	.+174    	; 0x6126 <vfprintf+0x1d0>
    6078:	21 c0       	rjmp	.+66     	; 0x60bc <vfprintf+0x166>
    607a:	f8 01       	movw	r30, r16
    607c:	80 81       	ld	r24, Z
    607e:	89 83       	std	Y+1, r24	; 0x01
    6080:	0e 5f       	subi	r16, 0xFE	; 254
    6082:	1f 4f       	sbci	r17, 0xFF	; 255
    6084:	44 24       	eor	r4, r4
    6086:	43 94       	inc	r4
    6088:	51 2c       	mov	r5, r1
    608a:	54 01       	movw	r10, r8
    608c:	14 c0       	rjmp	.+40     	; 0x60b6 <vfprintf+0x160>
    608e:	38 01       	movw	r6, r16
    6090:	f2 e0       	ldi	r31, 0x02	; 2
    6092:	6f 0e       	add	r6, r31
    6094:	71 1c       	adc	r7, r1
    6096:	f8 01       	movw	r30, r16
    6098:	a0 80       	ld	r10, Z
    609a:	b1 80       	ldd	r11, Z+1	; 0x01
    609c:	26 ff       	sbrs	r18, 6
    609e:	03 c0       	rjmp	.+6      	; 0x60a6 <vfprintf+0x150>
    60a0:	65 2d       	mov	r22, r5
    60a2:	70 e0       	ldi	r23, 0x00	; 0
    60a4:	02 c0       	rjmp	.+4      	; 0x60aa <vfprintf+0x154>
    60a6:	6f ef       	ldi	r22, 0xFF	; 255
    60a8:	7f ef       	ldi	r23, 0xFF	; 255
    60aa:	c5 01       	movw	r24, r10
    60ac:	2c 87       	std	Y+12, r18	; 0x0c
    60ae:	c5 d3       	rcall	.+1930   	; 0x683a <strnlen>
    60b0:	2c 01       	movw	r4, r24
    60b2:	83 01       	movw	r16, r6
    60b4:	2c 85       	ldd	r18, Y+12	; 0x0c
    60b6:	2f 77       	andi	r18, 0x7F	; 127
    60b8:	22 2e       	mov	r2, r18
    60ba:	16 c0       	rjmp	.+44     	; 0x60e8 <vfprintf+0x192>
    60bc:	38 01       	movw	r6, r16
    60be:	f2 e0       	ldi	r31, 0x02	; 2
    60c0:	6f 0e       	add	r6, r31
    60c2:	71 1c       	adc	r7, r1
    60c4:	f8 01       	movw	r30, r16
    60c6:	a0 80       	ld	r10, Z
    60c8:	b1 80       	ldd	r11, Z+1	; 0x01
    60ca:	26 ff       	sbrs	r18, 6
    60cc:	03 c0       	rjmp	.+6      	; 0x60d4 <vfprintf+0x17e>
    60ce:	65 2d       	mov	r22, r5
    60d0:	70 e0       	ldi	r23, 0x00	; 0
    60d2:	02 c0       	rjmp	.+4      	; 0x60d8 <vfprintf+0x182>
    60d4:	6f ef       	ldi	r22, 0xFF	; 255
    60d6:	7f ef       	ldi	r23, 0xFF	; 255
    60d8:	c5 01       	movw	r24, r10
    60da:	2c 87       	std	Y+12, r18	; 0x0c
    60dc:	9c d3       	rcall	.+1848   	; 0x6816 <strnlen_P>
    60de:	2c 01       	movw	r4, r24
    60e0:	2c 85       	ldd	r18, Y+12	; 0x0c
    60e2:	20 68       	ori	r18, 0x80	; 128
    60e4:	22 2e       	mov	r2, r18
    60e6:	83 01       	movw	r16, r6
    60e8:	23 fc       	sbrc	r2, 3
    60ea:	19 c0       	rjmp	.+50     	; 0x611e <vfprintf+0x1c8>
    60ec:	83 2d       	mov	r24, r3
    60ee:	90 e0       	ldi	r25, 0x00	; 0
    60f0:	48 16       	cp	r4, r24
    60f2:	59 06       	cpc	r5, r25
    60f4:	a0 f4       	brcc	.+40     	; 0x611e <vfprintf+0x1c8>
    60f6:	b7 01       	movw	r22, r14
    60f8:	80 e2       	ldi	r24, 0x20	; 32
    60fa:	90 e0       	ldi	r25, 0x00	; 0
    60fc:	a9 d3       	rcall	.+1874   	; 0x6850 <fputc>
    60fe:	3a 94       	dec	r3
    6100:	f5 cf       	rjmp	.-22     	; 0x60ec <vfprintf+0x196>
    6102:	f5 01       	movw	r30, r10
    6104:	27 fc       	sbrc	r2, 7
    6106:	85 91       	lpm	r24, Z+
    6108:	27 fe       	sbrs	r2, 7
    610a:	81 91       	ld	r24, Z+
    610c:	5f 01       	movw	r10, r30
    610e:	b7 01       	movw	r22, r14
    6110:	90 e0       	ldi	r25, 0x00	; 0
    6112:	9e d3       	rcall	.+1852   	; 0x6850 <fputc>
    6114:	31 10       	cpse	r3, r1
    6116:	3a 94       	dec	r3
    6118:	f1 e0       	ldi	r31, 0x01	; 1
    611a:	4f 1a       	sub	r4, r31
    611c:	51 08       	sbc	r5, r1
    611e:	41 14       	cp	r4, r1
    6120:	51 04       	cpc	r5, r1
    6122:	79 f7       	brne	.-34     	; 0x6102 <vfprintf+0x1ac>
    6124:	de c0       	rjmp	.+444    	; 0x62e2 <vfprintf+0x38c>
    6126:	84 36       	cpi	r24, 0x64	; 100
    6128:	11 f0       	breq	.+4      	; 0x612e <vfprintf+0x1d8>
    612a:	89 36       	cpi	r24, 0x69	; 105
    612c:	31 f5       	brne	.+76     	; 0x617a <vfprintf+0x224>
    612e:	f8 01       	movw	r30, r16
    6130:	27 ff       	sbrs	r18, 7
    6132:	07 c0       	rjmp	.+14     	; 0x6142 <vfprintf+0x1ec>
    6134:	60 81       	ld	r22, Z
    6136:	71 81       	ldd	r23, Z+1	; 0x01
    6138:	82 81       	ldd	r24, Z+2	; 0x02
    613a:	93 81       	ldd	r25, Z+3	; 0x03
    613c:	0c 5f       	subi	r16, 0xFC	; 252
    613e:	1f 4f       	sbci	r17, 0xFF	; 255
    6140:	08 c0       	rjmp	.+16     	; 0x6152 <vfprintf+0x1fc>
    6142:	60 81       	ld	r22, Z
    6144:	71 81       	ldd	r23, Z+1	; 0x01
    6146:	88 27       	eor	r24, r24
    6148:	77 fd       	sbrc	r23, 7
    614a:	80 95       	com	r24
    614c:	98 2f       	mov	r25, r24
    614e:	0e 5f       	subi	r16, 0xFE	; 254
    6150:	1f 4f       	sbci	r17, 0xFF	; 255
    6152:	2f 76       	andi	r18, 0x6F	; 111
    6154:	b2 2e       	mov	r11, r18
    6156:	97 ff       	sbrs	r25, 7
    6158:	09 c0       	rjmp	.+18     	; 0x616c <vfprintf+0x216>
    615a:	90 95       	com	r25
    615c:	80 95       	com	r24
    615e:	70 95       	com	r23
    6160:	61 95       	neg	r22
    6162:	7f 4f       	sbci	r23, 0xFF	; 255
    6164:	8f 4f       	sbci	r24, 0xFF	; 255
    6166:	9f 4f       	sbci	r25, 0xFF	; 255
    6168:	20 68       	ori	r18, 0x80	; 128
    616a:	b2 2e       	mov	r11, r18
    616c:	2a e0       	ldi	r18, 0x0A	; 10
    616e:	30 e0       	ldi	r19, 0x00	; 0
    6170:	a4 01       	movw	r20, r8
    6172:	a0 d3       	rcall	.+1856   	; 0x68b4 <__ultoa_invert>
    6174:	a8 2e       	mov	r10, r24
    6176:	a8 18       	sub	r10, r8
    6178:	43 c0       	rjmp	.+134    	; 0x6200 <vfprintf+0x2aa>
    617a:	85 37       	cpi	r24, 0x75	; 117
    617c:	29 f4       	brne	.+10     	; 0x6188 <vfprintf+0x232>
    617e:	2f 7e       	andi	r18, 0xEF	; 239
    6180:	b2 2e       	mov	r11, r18
    6182:	2a e0       	ldi	r18, 0x0A	; 10
    6184:	30 e0       	ldi	r19, 0x00	; 0
    6186:	25 c0       	rjmp	.+74     	; 0x61d2 <vfprintf+0x27c>
    6188:	f2 2f       	mov	r31, r18
    618a:	f9 7f       	andi	r31, 0xF9	; 249
    618c:	bf 2e       	mov	r11, r31
    618e:	8f 36       	cpi	r24, 0x6F	; 111
    6190:	c1 f0       	breq	.+48     	; 0x61c2 <vfprintf+0x26c>
    6192:	18 f4       	brcc	.+6      	; 0x619a <vfprintf+0x244>
    6194:	88 35       	cpi	r24, 0x58	; 88
    6196:	79 f0       	breq	.+30     	; 0x61b6 <vfprintf+0x260>
    6198:	ad c0       	rjmp	.+346    	; 0x62f4 <vfprintf+0x39e>
    619a:	80 37       	cpi	r24, 0x70	; 112
    619c:	19 f0       	breq	.+6      	; 0x61a4 <vfprintf+0x24e>
    619e:	88 37       	cpi	r24, 0x78	; 120
    61a0:	21 f0       	breq	.+8      	; 0x61aa <vfprintf+0x254>
    61a2:	a8 c0       	rjmp	.+336    	; 0x62f4 <vfprintf+0x39e>
    61a4:	2f 2f       	mov	r18, r31
    61a6:	20 61       	ori	r18, 0x10	; 16
    61a8:	b2 2e       	mov	r11, r18
    61aa:	b4 fe       	sbrs	r11, 4
    61ac:	0d c0       	rjmp	.+26     	; 0x61c8 <vfprintf+0x272>
    61ae:	8b 2d       	mov	r24, r11
    61b0:	84 60       	ori	r24, 0x04	; 4
    61b2:	b8 2e       	mov	r11, r24
    61b4:	09 c0       	rjmp	.+18     	; 0x61c8 <vfprintf+0x272>
    61b6:	24 ff       	sbrs	r18, 4
    61b8:	0a c0       	rjmp	.+20     	; 0x61ce <vfprintf+0x278>
    61ba:	9f 2f       	mov	r25, r31
    61bc:	96 60       	ori	r25, 0x06	; 6
    61be:	b9 2e       	mov	r11, r25
    61c0:	06 c0       	rjmp	.+12     	; 0x61ce <vfprintf+0x278>
    61c2:	28 e0       	ldi	r18, 0x08	; 8
    61c4:	30 e0       	ldi	r19, 0x00	; 0
    61c6:	05 c0       	rjmp	.+10     	; 0x61d2 <vfprintf+0x27c>
    61c8:	20 e1       	ldi	r18, 0x10	; 16
    61ca:	30 e0       	ldi	r19, 0x00	; 0
    61cc:	02 c0       	rjmp	.+4      	; 0x61d2 <vfprintf+0x27c>
    61ce:	20 e1       	ldi	r18, 0x10	; 16
    61d0:	32 e0       	ldi	r19, 0x02	; 2
    61d2:	f8 01       	movw	r30, r16
    61d4:	b7 fe       	sbrs	r11, 7
    61d6:	07 c0       	rjmp	.+14     	; 0x61e6 <vfprintf+0x290>
    61d8:	60 81       	ld	r22, Z
    61da:	71 81       	ldd	r23, Z+1	; 0x01
    61dc:	82 81       	ldd	r24, Z+2	; 0x02
    61de:	93 81       	ldd	r25, Z+3	; 0x03
    61e0:	0c 5f       	subi	r16, 0xFC	; 252
    61e2:	1f 4f       	sbci	r17, 0xFF	; 255
    61e4:	06 c0       	rjmp	.+12     	; 0x61f2 <vfprintf+0x29c>
    61e6:	60 81       	ld	r22, Z
    61e8:	71 81       	ldd	r23, Z+1	; 0x01
    61ea:	80 e0       	ldi	r24, 0x00	; 0
    61ec:	90 e0       	ldi	r25, 0x00	; 0
    61ee:	0e 5f       	subi	r16, 0xFE	; 254
    61f0:	1f 4f       	sbci	r17, 0xFF	; 255
    61f2:	a4 01       	movw	r20, r8
    61f4:	5f d3       	rcall	.+1726   	; 0x68b4 <__ultoa_invert>
    61f6:	a8 2e       	mov	r10, r24
    61f8:	a8 18       	sub	r10, r8
    61fa:	fb 2d       	mov	r31, r11
    61fc:	ff 77       	andi	r31, 0x7F	; 127
    61fe:	bf 2e       	mov	r11, r31
    6200:	b6 fe       	sbrs	r11, 6
    6202:	0b c0       	rjmp	.+22     	; 0x621a <vfprintf+0x2c4>
    6204:	2b 2d       	mov	r18, r11
    6206:	2e 7f       	andi	r18, 0xFE	; 254
    6208:	a5 14       	cp	r10, r5
    620a:	50 f4       	brcc	.+20     	; 0x6220 <vfprintf+0x2ca>
    620c:	b4 fe       	sbrs	r11, 4
    620e:	0a c0       	rjmp	.+20     	; 0x6224 <vfprintf+0x2ce>
    6210:	b2 fc       	sbrc	r11, 2
    6212:	08 c0       	rjmp	.+16     	; 0x6224 <vfprintf+0x2ce>
    6214:	2b 2d       	mov	r18, r11
    6216:	2e 7e       	andi	r18, 0xEE	; 238
    6218:	05 c0       	rjmp	.+10     	; 0x6224 <vfprintf+0x2ce>
    621a:	7a 2c       	mov	r7, r10
    621c:	2b 2d       	mov	r18, r11
    621e:	03 c0       	rjmp	.+6      	; 0x6226 <vfprintf+0x2d0>
    6220:	7a 2c       	mov	r7, r10
    6222:	01 c0       	rjmp	.+2      	; 0x6226 <vfprintf+0x2d0>
    6224:	75 2c       	mov	r7, r5
    6226:	24 ff       	sbrs	r18, 4
    6228:	0d c0       	rjmp	.+26     	; 0x6244 <vfprintf+0x2ee>
    622a:	fe 01       	movw	r30, r28
    622c:	ea 0d       	add	r30, r10
    622e:	f1 1d       	adc	r31, r1
    6230:	80 81       	ld	r24, Z
    6232:	80 33       	cpi	r24, 0x30	; 48
    6234:	11 f4       	brne	.+4      	; 0x623a <vfprintf+0x2e4>
    6236:	29 7e       	andi	r18, 0xE9	; 233
    6238:	09 c0       	rjmp	.+18     	; 0x624c <vfprintf+0x2f6>
    623a:	22 ff       	sbrs	r18, 2
    623c:	06 c0       	rjmp	.+12     	; 0x624a <vfprintf+0x2f4>
    623e:	73 94       	inc	r7
    6240:	73 94       	inc	r7
    6242:	04 c0       	rjmp	.+8      	; 0x624c <vfprintf+0x2f6>
    6244:	82 2f       	mov	r24, r18
    6246:	86 78       	andi	r24, 0x86	; 134
    6248:	09 f0       	breq	.+2      	; 0x624c <vfprintf+0x2f6>
    624a:	73 94       	inc	r7
    624c:	23 fd       	sbrc	r18, 3
    624e:	12 c0       	rjmp	.+36     	; 0x6274 <vfprintf+0x31e>
    6250:	20 ff       	sbrs	r18, 0
    6252:	06 c0       	rjmp	.+12     	; 0x6260 <vfprintf+0x30a>
    6254:	5a 2c       	mov	r5, r10
    6256:	73 14       	cp	r7, r3
    6258:	18 f4       	brcc	.+6      	; 0x6260 <vfprintf+0x30a>
    625a:	53 0c       	add	r5, r3
    625c:	57 18       	sub	r5, r7
    625e:	73 2c       	mov	r7, r3
    6260:	73 14       	cp	r7, r3
    6262:	60 f4       	brcc	.+24     	; 0x627c <vfprintf+0x326>
    6264:	b7 01       	movw	r22, r14
    6266:	80 e2       	ldi	r24, 0x20	; 32
    6268:	90 e0       	ldi	r25, 0x00	; 0
    626a:	2c 87       	std	Y+12, r18	; 0x0c
    626c:	f1 d2       	rcall	.+1506   	; 0x6850 <fputc>
    626e:	73 94       	inc	r7
    6270:	2c 85       	ldd	r18, Y+12	; 0x0c
    6272:	f6 cf       	rjmp	.-20     	; 0x6260 <vfprintf+0x30a>
    6274:	73 14       	cp	r7, r3
    6276:	10 f4       	brcc	.+4      	; 0x627c <vfprintf+0x326>
    6278:	37 18       	sub	r3, r7
    627a:	01 c0       	rjmp	.+2      	; 0x627e <vfprintf+0x328>
    627c:	31 2c       	mov	r3, r1
    627e:	24 ff       	sbrs	r18, 4
    6280:	11 c0       	rjmp	.+34     	; 0x62a4 <vfprintf+0x34e>
    6282:	b7 01       	movw	r22, r14
    6284:	80 e3       	ldi	r24, 0x30	; 48
    6286:	90 e0       	ldi	r25, 0x00	; 0
    6288:	2c 87       	std	Y+12, r18	; 0x0c
    628a:	e2 d2       	rcall	.+1476   	; 0x6850 <fputc>
    628c:	2c 85       	ldd	r18, Y+12	; 0x0c
    628e:	22 ff       	sbrs	r18, 2
    6290:	16 c0       	rjmp	.+44     	; 0x62be <vfprintf+0x368>
    6292:	21 ff       	sbrs	r18, 1
    6294:	03 c0       	rjmp	.+6      	; 0x629c <vfprintf+0x346>
    6296:	88 e5       	ldi	r24, 0x58	; 88
    6298:	90 e0       	ldi	r25, 0x00	; 0
    629a:	02 c0       	rjmp	.+4      	; 0x62a0 <vfprintf+0x34a>
    629c:	88 e7       	ldi	r24, 0x78	; 120
    629e:	90 e0       	ldi	r25, 0x00	; 0
    62a0:	b7 01       	movw	r22, r14
    62a2:	0c c0       	rjmp	.+24     	; 0x62bc <vfprintf+0x366>
    62a4:	82 2f       	mov	r24, r18
    62a6:	86 78       	andi	r24, 0x86	; 134
    62a8:	51 f0       	breq	.+20     	; 0x62be <vfprintf+0x368>
    62aa:	21 fd       	sbrc	r18, 1
    62ac:	02 c0       	rjmp	.+4      	; 0x62b2 <vfprintf+0x35c>
    62ae:	80 e2       	ldi	r24, 0x20	; 32
    62b0:	01 c0       	rjmp	.+2      	; 0x62b4 <vfprintf+0x35e>
    62b2:	8b e2       	ldi	r24, 0x2B	; 43
    62b4:	27 fd       	sbrc	r18, 7
    62b6:	8d e2       	ldi	r24, 0x2D	; 45
    62b8:	b7 01       	movw	r22, r14
    62ba:	90 e0       	ldi	r25, 0x00	; 0
    62bc:	c9 d2       	rcall	.+1426   	; 0x6850 <fputc>
    62be:	a5 14       	cp	r10, r5
    62c0:	30 f4       	brcc	.+12     	; 0x62ce <vfprintf+0x378>
    62c2:	b7 01       	movw	r22, r14
    62c4:	80 e3       	ldi	r24, 0x30	; 48
    62c6:	90 e0       	ldi	r25, 0x00	; 0
    62c8:	c3 d2       	rcall	.+1414   	; 0x6850 <fputc>
    62ca:	5a 94       	dec	r5
    62cc:	f8 cf       	rjmp	.-16     	; 0x62be <vfprintf+0x368>
    62ce:	aa 94       	dec	r10
    62d0:	f4 01       	movw	r30, r8
    62d2:	ea 0d       	add	r30, r10
    62d4:	f1 1d       	adc	r31, r1
    62d6:	80 81       	ld	r24, Z
    62d8:	b7 01       	movw	r22, r14
    62da:	90 e0       	ldi	r25, 0x00	; 0
    62dc:	b9 d2       	rcall	.+1394   	; 0x6850 <fputc>
    62de:	a1 10       	cpse	r10, r1
    62e0:	f6 cf       	rjmp	.-20     	; 0x62ce <vfprintf+0x378>
    62e2:	33 20       	and	r3, r3
    62e4:	09 f4       	brne	.+2      	; 0x62e8 <vfprintf+0x392>
    62e6:	5d ce       	rjmp	.-838    	; 0x5fa2 <vfprintf+0x4c>
    62e8:	b7 01       	movw	r22, r14
    62ea:	80 e2       	ldi	r24, 0x20	; 32
    62ec:	90 e0       	ldi	r25, 0x00	; 0
    62ee:	b0 d2       	rcall	.+1376   	; 0x6850 <fputc>
    62f0:	3a 94       	dec	r3
    62f2:	f7 cf       	rjmp	.-18     	; 0x62e2 <vfprintf+0x38c>
    62f4:	f7 01       	movw	r30, r14
    62f6:	86 81       	ldd	r24, Z+6	; 0x06
    62f8:	97 81       	ldd	r25, Z+7	; 0x07
    62fa:	02 c0       	rjmp	.+4      	; 0x6300 <vfprintf+0x3aa>
    62fc:	8f ef       	ldi	r24, 0xFF	; 255
    62fe:	9f ef       	ldi	r25, 0xFF	; 255
    6300:	2c 96       	adiw	r28, 0x0c	; 12
    6302:	0f b6       	in	r0, 0x3f	; 63
    6304:	f8 94       	cli
    6306:	de bf       	out	0x3e, r29	; 62
    6308:	0f be       	out	0x3f, r0	; 63
    630a:	cd bf       	out	0x3d, r28	; 61
    630c:	df 91       	pop	r29
    630e:	cf 91       	pop	r28
    6310:	1f 91       	pop	r17
    6312:	0f 91       	pop	r16
    6314:	ff 90       	pop	r15
    6316:	ef 90       	pop	r14
    6318:	df 90       	pop	r13
    631a:	cf 90       	pop	r12
    631c:	bf 90       	pop	r11
    631e:	af 90       	pop	r10
    6320:	9f 90       	pop	r9
    6322:	8f 90       	pop	r8
    6324:	7f 90       	pop	r7
    6326:	6f 90       	pop	r6
    6328:	5f 90       	pop	r5
    632a:	4f 90       	pop	r4
    632c:	3f 90       	pop	r3
    632e:	2f 90       	pop	r2
    6330:	08 95       	ret

00006332 <calloc>:
    6332:	0f 93       	push	r16
    6334:	1f 93       	push	r17
    6336:	cf 93       	push	r28
    6338:	df 93       	push	r29
    633a:	86 9f       	mul	r24, r22
    633c:	80 01       	movw	r16, r0
    633e:	87 9f       	mul	r24, r23
    6340:	10 0d       	add	r17, r0
    6342:	96 9f       	mul	r25, r22
    6344:	10 0d       	add	r17, r0
    6346:	11 24       	eor	r1, r1
    6348:	c8 01       	movw	r24, r16
    634a:	da da       	rcall	.-2636   	; 0x5900 <malloc>
    634c:	ec 01       	movw	r28, r24
    634e:	00 97       	sbiw	r24, 0x00	; 0
    6350:	21 f0       	breq	.+8      	; 0x635a <calloc+0x28>
    6352:	a8 01       	movw	r20, r16
    6354:	60 e0       	ldi	r22, 0x00	; 0
    6356:	70 e0       	ldi	r23, 0x00	; 0
    6358:	69 d2       	rcall	.+1234   	; 0x682c <memset>
    635a:	ce 01       	movw	r24, r28
    635c:	df 91       	pop	r29
    635e:	cf 91       	pop	r28
    6360:	1f 91       	pop	r17
    6362:	0f 91       	pop	r16
    6364:	08 95       	ret

00006366 <dtoa_prf>:
    6366:	6f 92       	push	r6
    6368:	7f 92       	push	r7
    636a:	9f 92       	push	r9
    636c:	af 92       	push	r10
    636e:	bf 92       	push	r11
    6370:	cf 92       	push	r12
    6372:	df 92       	push	r13
    6374:	ef 92       	push	r14
    6376:	ff 92       	push	r15
    6378:	0f 93       	push	r16
    637a:	1f 93       	push	r17
    637c:	cf 93       	push	r28
    637e:	df 93       	push	r29
    6380:	cd b7       	in	r28, 0x3d	; 61
    6382:	de b7       	in	r29, 0x3e	; 62
    6384:	29 97       	sbiw	r28, 0x09	; 9
    6386:	0f b6       	in	r0, 0x3f	; 63
    6388:	f8 94       	cli
    638a:	de bf       	out	0x3e, r29	; 62
    638c:	0f be       	out	0x3f, r0	; 63
    638e:	cd bf       	out	0x3d, r28	; 61
    6390:	6a 01       	movw	r12, r20
    6392:	b2 2e       	mov	r11, r18
    6394:	10 2f       	mov	r17, r16
    6396:	0c 33       	cpi	r16, 0x3C	; 60
    6398:	20 f4       	brcc	.+8      	; 0x63a2 <dtoa_prf+0x3c>
    639a:	ff 24       	eor	r15, r15
    639c:	f3 94       	inc	r15
    639e:	f0 0e       	add	r15, r16
    63a0:	02 c0       	rjmp	.+4      	; 0x63a6 <dtoa_prf+0x40>
    63a2:	4c e3       	ldi	r20, 0x3C	; 60
    63a4:	f4 2e       	mov	r15, r20
    63a6:	0f 2d       	mov	r16, r15
    63a8:	27 e0       	ldi	r18, 0x07	; 7
    63aa:	ae 01       	movw	r20, r28
    63ac:	4f 5f       	subi	r20, 0xFF	; 255
    63ae:	5f 4f       	sbci	r21, 0xFF	; 255
    63b0:	57 d1       	rcall	.+686    	; 0x6660 <__ftoa_engine>
    63b2:	79 81       	ldd	r23, Y+1	; 0x01
    63b4:	27 2f       	mov	r18, r23
    63b6:	29 70       	andi	r18, 0x09	; 9
    63b8:	21 30       	cpi	r18, 0x01	; 1
    63ba:	31 f0       	breq	.+12     	; 0x63c8 <dtoa_prf+0x62>
    63bc:	e1 fc       	sbrc	r14, 1
    63be:	06 c0       	rjmp	.+12     	; 0x63cc <dtoa_prf+0x66>
    63c0:	e0 fc       	sbrc	r14, 0
    63c2:	06 c0       	rjmp	.+12     	; 0x63d0 <dtoa_prf+0x6a>
    63c4:	60 e0       	ldi	r22, 0x00	; 0
    63c6:	05 c0       	rjmp	.+10     	; 0x63d2 <dtoa_prf+0x6c>
    63c8:	6d e2       	ldi	r22, 0x2D	; 45
    63ca:	03 c0       	rjmp	.+6      	; 0x63d2 <dtoa_prf+0x6c>
    63cc:	6b e2       	ldi	r22, 0x2B	; 43
    63ce:	01 c0       	rjmp	.+2      	; 0x63d2 <dtoa_prf+0x6c>
    63d0:	60 e2       	ldi	r22, 0x20	; 32
    63d2:	ae 2d       	mov	r26, r14
    63d4:	a0 71       	andi	r26, 0x10	; 16
    63d6:	73 ff       	sbrs	r23, 3
    63d8:	36 c0       	rjmp	.+108    	; 0x6446 <dtoa_prf+0xe0>
    63da:	66 23       	and	r22, r22
    63dc:	11 f0       	breq	.+4      	; 0x63e2 <dtoa_prf+0x7c>
    63de:	84 e0       	ldi	r24, 0x04	; 4
    63e0:	01 c0       	rjmp	.+2      	; 0x63e4 <dtoa_prf+0x7e>
    63e2:	83 e0       	ldi	r24, 0x03	; 3
    63e4:	8b 15       	cp	r24, r11
    63e6:	10 f4       	brcc	.+4      	; 0x63ec <dtoa_prf+0x86>
    63e8:	b8 1a       	sub	r11, r24
    63ea:	01 c0       	rjmp	.+2      	; 0x63ee <dtoa_prf+0x88>
    63ec:	b1 2c       	mov	r11, r1
    63ee:	a1 11       	cpse	r26, r1
    63f0:	0b c0       	rjmp	.+22     	; 0x6408 <dtoa_prf+0xa2>
    63f2:	f6 01       	movw	r30, r12
    63f4:	8b 2d       	mov	r24, r11
    63f6:	90 e2       	ldi	r25, 0x20	; 32
    63f8:	88 23       	and	r24, r24
    63fa:	19 f0       	breq	.+6      	; 0x6402 <dtoa_prf+0x9c>
    63fc:	91 93       	st	Z+, r25
    63fe:	81 50       	subi	r24, 0x01	; 1
    6400:	fb cf       	rjmp	.-10     	; 0x63f8 <dtoa_prf+0x92>
    6402:	cb 0c       	add	r12, r11
    6404:	d1 1c       	adc	r13, r1
    6406:	b1 2c       	mov	r11, r1
    6408:	66 23       	and	r22, r22
    640a:	31 f0       	breq	.+12     	; 0x6418 <dtoa_prf+0xb2>
    640c:	f6 01       	movw	r30, r12
    640e:	60 83       	st	Z, r22
    6410:	96 01       	movw	r18, r12
    6412:	2f 5f       	subi	r18, 0xFF	; 255
    6414:	3f 4f       	sbci	r19, 0xFF	; 255
    6416:	69 01       	movw	r12, r18
    6418:	c6 01       	movw	r24, r12
    641a:	03 96       	adiw	r24, 0x03	; 3
    641c:	e2 fe       	sbrs	r14, 2
    641e:	05 c0       	rjmp	.+10     	; 0x642a <dtoa_prf+0xc4>
    6420:	2e e4       	ldi	r18, 0x4E	; 78
    6422:	f6 01       	movw	r30, r12
    6424:	20 83       	st	Z, r18
    6426:	31 e4       	ldi	r19, 0x41	; 65
    6428:	04 c0       	rjmp	.+8      	; 0x6432 <dtoa_prf+0xcc>
    642a:	2e e6       	ldi	r18, 0x6E	; 110
    642c:	f6 01       	movw	r30, r12
    642e:	20 83       	st	Z, r18
    6430:	31 e6       	ldi	r19, 0x61	; 97
    6432:	31 83       	std	Z+1, r19	; 0x01
    6434:	22 83       	std	Z+2, r18	; 0x02
    6436:	fc 01       	movw	r30, r24
    6438:	2b 2d       	mov	r18, r11
    643a:	30 e2       	ldi	r19, 0x20	; 32
    643c:	22 23       	and	r18, r18
    643e:	f1 f1       	breq	.+124    	; 0x64bc <dtoa_prf+0x156>
    6440:	31 93       	st	Z+, r19
    6442:	21 50       	subi	r18, 0x01	; 1
    6444:	fb cf       	rjmp	.-10     	; 0x643c <dtoa_prf+0xd6>
    6446:	72 ff       	sbrs	r23, 2
    6448:	40 c0       	rjmp	.+128    	; 0x64ca <dtoa_prf+0x164>
    644a:	66 23       	and	r22, r22
    644c:	11 f0       	breq	.+4      	; 0x6452 <dtoa_prf+0xec>
    644e:	84 e0       	ldi	r24, 0x04	; 4
    6450:	01 c0       	rjmp	.+2      	; 0x6454 <dtoa_prf+0xee>
    6452:	83 e0       	ldi	r24, 0x03	; 3
    6454:	8b 15       	cp	r24, r11
    6456:	10 f4       	brcc	.+4      	; 0x645c <dtoa_prf+0xf6>
    6458:	b8 1a       	sub	r11, r24
    645a:	01 c0       	rjmp	.+2      	; 0x645e <dtoa_prf+0xf8>
    645c:	b1 2c       	mov	r11, r1
    645e:	a1 11       	cpse	r26, r1
    6460:	0b c0       	rjmp	.+22     	; 0x6478 <dtoa_prf+0x112>
    6462:	f6 01       	movw	r30, r12
    6464:	8b 2d       	mov	r24, r11
    6466:	90 e2       	ldi	r25, 0x20	; 32
    6468:	88 23       	and	r24, r24
    646a:	19 f0       	breq	.+6      	; 0x6472 <dtoa_prf+0x10c>
    646c:	91 93       	st	Z+, r25
    646e:	81 50       	subi	r24, 0x01	; 1
    6470:	fb cf       	rjmp	.-10     	; 0x6468 <dtoa_prf+0x102>
    6472:	cb 0c       	add	r12, r11
    6474:	d1 1c       	adc	r13, r1
    6476:	b1 2c       	mov	r11, r1
    6478:	66 23       	and	r22, r22
    647a:	31 f0       	breq	.+12     	; 0x6488 <dtoa_prf+0x122>
    647c:	f6 01       	movw	r30, r12
    647e:	60 83       	st	Z, r22
    6480:	96 01       	movw	r18, r12
    6482:	2f 5f       	subi	r18, 0xFF	; 255
    6484:	3f 4f       	sbci	r19, 0xFF	; 255
    6486:	69 01       	movw	r12, r18
    6488:	c6 01       	movw	r24, r12
    648a:	03 96       	adiw	r24, 0x03	; 3
    648c:	e2 fe       	sbrs	r14, 2
    648e:	07 c0       	rjmp	.+14     	; 0x649e <dtoa_prf+0x138>
    6490:	29 e4       	ldi	r18, 0x49	; 73
    6492:	f6 01       	movw	r30, r12
    6494:	20 83       	st	Z, r18
    6496:	2e e4       	ldi	r18, 0x4E	; 78
    6498:	21 83       	std	Z+1, r18	; 0x01
    649a:	26 e4       	ldi	r18, 0x46	; 70
    649c:	06 c0       	rjmp	.+12     	; 0x64aa <dtoa_prf+0x144>
    649e:	29 e6       	ldi	r18, 0x69	; 105
    64a0:	f6 01       	movw	r30, r12
    64a2:	20 83       	st	Z, r18
    64a4:	2e e6       	ldi	r18, 0x6E	; 110
    64a6:	21 83       	std	Z+1, r18	; 0x01
    64a8:	26 e6       	ldi	r18, 0x66	; 102
    64aa:	22 83       	std	Z+2, r18	; 0x02
    64ac:	fc 01       	movw	r30, r24
    64ae:	2b 2d       	mov	r18, r11
    64b0:	30 e2       	ldi	r19, 0x20	; 32
    64b2:	22 23       	and	r18, r18
    64b4:	19 f0       	breq	.+6      	; 0x64bc <dtoa_prf+0x156>
    64b6:	31 93       	st	Z+, r19
    64b8:	21 50       	subi	r18, 0x01	; 1
    64ba:	fb cf       	rjmp	.-10     	; 0x64b2 <dtoa_prf+0x14c>
    64bc:	fc 01       	movw	r30, r24
    64be:	eb 0d       	add	r30, r11
    64c0:	f1 1d       	adc	r31, r1
    64c2:	10 82       	st	Z, r1
    64c4:	8e ef       	ldi	r24, 0xFE	; 254
    64c6:	9f ef       	ldi	r25, 0xFF	; 255
    64c8:	b7 c0       	rjmp	.+366    	; 0x6638 <dtoa_prf+0x2d2>
    64ca:	b1 e0       	ldi	r27, 0x01	; 1
    64cc:	61 11       	cpse	r22, r1
    64ce:	01 c0       	rjmp	.+2      	; 0x64d2 <dtoa_prf+0x16c>
    64d0:	b0 e0       	ldi	r27, 0x00	; 0
    64d2:	4b 2f       	mov	r20, r27
    64d4:	50 e0       	ldi	r21, 0x00	; 0
    64d6:	18 16       	cp	r1, r24
    64d8:	19 06       	cpc	r1, r25
    64da:	24 f4       	brge	.+8      	; 0x64e4 <dtoa_prf+0x17e>
    64dc:	9c 01       	movw	r18, r24
    64de:	2f 5f       	subi	r18, 0xFF	; 255
    64e0:	3f 4f       	sbci	r19, 0xFF	; 255
    64e2:	02 c0       	rjmp	.+4      	; 0x64e8 <dtoa_prf+0x182>
    64e4:	21 e0       	ldi	r18, 0x01	; 1
    64e6:	30 e0       	ldi	r19, 0x00	; 0
    64e8:	24 0f       	add	r18, r20
    64ea:	35 1f       	adc	r19, r21
    64ec:	11 23       	and	r17, r17
    64ee:	29 f0       	breq	.+10     	; 0x64fa <dtoa_prf+0x194>
    64f0:	41 2f       	mov	r20, r17
    64f2:	50 e0       	ldi	r21, 0x00	; 0
    64f4:	4f 5f       	subi	r20, 0xFF	; 255
    64f6:	5f 4f       	sbci	r21, 0xFF	; 255
    64f8:	02 c0       	rjmp	.+4      	; 0x64fe <dtoa_prf+0x198>
    64fa:	40 e0       	ldi	r20, 0x00	; 0
    64fc:	50 e0       	ldi	r21, 0x00	; 0
    64fe:	42 0f       	add	r20, r18
    6500:	53 1f       	adc	r21, r19
    6502:	2b 2d       	mov	r18, r11
    6504:	30 e0       	ldi	r19, 0x00	; 0
    6506:	42 17       	cp	r20, r18
    6508:	53 07       	cpc	r21, r19
    650a:	14 f4       	brge	.+4      	; 0x6510 <dtoa_prf+0x1aa>
    650c:	b4 1a       	sub	r11, r20
    650e:	01 c0       	rjmp	.+2      	; 0x6512 <dtoa_prf+0x1ac>
    6510:	b1 2c       	mov	r11, r1
    6512:	2e 2d       	mov	r18, r14
    6514:	28 71       	andi	r18, 0x18	; 24
    6516:	59 f4       	brne	.+22     	; 0x652e <dtoa_prf+0x1c8>
    6518:	f6 01       	movw	r30, r12
    651a:	2b 2d       	mov	r18, r11
    651c:	30 e2       	ldi	r19, 0x20	; 32
    651e:	22 23       	and	r18, r18
    6520:	19 f0       	breq	.+6      	; 0x6528 <dtoa_prf+0x1c2>
    6522:	31 93       	st	Z+, r19
    6524:	21 50       	subi	r18, 0x01	; 1
    6526:	fb cf       	rjmp	.-10     	; 0x651e <dtoa_prf+0x1b8>
    6528:	cb 0c       	add	r12, r11
    652a:	d1 1c       	adc	r13, r1
    652c:	b1 2c       	mov	r11, r1
    652e:	bb 23       	and	r27, r27
    6530:	31 f0       	breq	.+12     	; 0x653e <dtoa_prf+0x1d8>
    6532:	f6 01       	movw	r30, r12
    6534:	60 83       	st	Z, r22
    6536:	96 01       	movw	r18, r12
    6538:	2f 5f       	subi	r18, 0xFF	; 255
    653a:	3f 4f       	sbci	r19, 0xFF	; 255
    653c:	69 01       	movw	r12, r18
    653e:	a1 11       	cpse	r26, r1
    6540:	0b c0       	rjmp	.+22     	; 0x6558 <dtoa_prf+0x1f2>
    6542:	f6 01       	movw	r30, r12
    6544:	2b 2d       	mov	r18, r11
    6546:	30 e3       	ldi	r19, 0x30	; 48
    6548:	22 23       	and	r18, r18
    654a:	19 f0       	breq	.+6      	; 0x6552 <dtoa_prf+0x1ec>
    654c:	31 93       	st	Z+, r19
    654e:	21 50       	subi	r18, 0x01	; 1
    6550:	fb cf       	rjmp	.-10     	; 0x6548 <dtoa_prf+0x1e2>
    6552:	cb 0c       	add	r12, r11
    6554:	d1 1c       	adc	r13, r1
    6556:	b1 2c       	mov	r11, r1
    6558:	f8 0e       	add	r15, r24
    655a:	0a 81       	ldd	r16, Y+2	; 0x02
    655c:	37 2f       	mov	r19, r23
    655e:	30 71       	andi	r19, 0x10	; 16
    6560:	a3 2e       	mov	r10, r19
    6562:	74 ff       	sbrs	r23, 4
    6564:	03 c0       	rjmp	.+6      	; 0x656c <dtoa_prf+0x206>
    6566:	01 33       	cpi	r16, 0x31	; 49
    6568:	09 f4       	brne	.+2      	; 0x656c <dtoa_prf+0x206>
    656a:	fa 94       	dec	r15
    656c:	1f 14       	cp	r1, r15
    656e:	2c f4       	brge	.+10     	; 0x657a <dtoa_prf+0x214>
    6570:	2f 2d       	mov	r18, r15
    6572:	29 30       	cpi	r18, 0x09	; 9
    6574:	18 f0       	brcs	.+6      	; 0x657c <dtoa_prf+0x216>
    6576:	28 e0       	ldi	r18, 0x08	; 8
    6578:	01 c0       	rjmp	.+2      	; 0x657c <dtoa_prf+0x216>
    657a:	21 e0       	ldi	r18, 0x01	; 1
    657c:	68 2f       	mov	r22, r24
    657e:	39 2f       	mov	r19, r25
    6580:	97 ff       	sbrs	r25, 7
    6582:	02 c0       	rjmp	.+4      	; 0x6588 <dtoa_prf+0x222>
    6584:	60 e0       	ldi	r22, 0x00	; 0
    6586:	30 e0       	ldi	r19, 0x00	; 0
    6588:	46 2f       	mov	r20, r22
    658a:	53 2f       	mov	r21, r19
    658c:	61 2c       	mov	r6, r1
    658e:	71 2c       	mov	r7, r1
    6590:	3e e2       	ldi	r19, 0x2E	; 46
    6592:	93 2e       	mov	r9, r19
    6594:	bc 01       	movw	r22, r24
    6596:	62 1b       	sub	r22, r18
    6598:	71 09       	sbc	r23, r1
    659a:	9b 01       	movw	r18, r22
    659c:	dc 01       	movw	r26, r24
    659e:	a4 1b       	sub	r26, r20
    65a0:	b5 0b       	sbc	r27, r21
    65a2:	e1 e0       	ldi	r30, 0x01	; 1
    65a4:	f0 e0       	ldi	r31, 0x00	; 0
    65a6:	ec 0f       	add	r30, r28
    65a8:	fd 1f       	adc	r31, r29
    65aa:	ae 0f       	add	r26, r30
    65ac:	bf 1f       	adc	r27, r31
    65ae:	e1 2e       	mov	r14, r17
    65b0:	f1 2c       	mov	r15, r1
    65b2:	f1 94       	neg	r15
    65b4:	e1 94       	neg	r14
    65b6:	f1 08       	sbc	r15, r1
    65b8:	4f 3f       	cpi	r20, 0xFF	; 255
    65ba:	ff ef       	ldi	r31, 0xFF	; 255
    65bc:	5f 07       	cpc	r21, r31
    65be:	31 f4       	brne	.+12     	; 0x65cc <dtoa_prf+0x266>
    65c0:	f6 01       	movw	r30, r12
    65c2:	90 82       	st	Z, r9
    65c4:	b6 01       	movw	r22, r12
    65c6:	6f 5f       	subi	r22, 0xFF	; 255
    65c8:	7f 4f       	sbci	r23, 0xFF	; 255
    65ca:	6b 01       	movw	r12, r22
    65cc:	84 17       	cp	r24, r20
    65ce:	95 07       	cpc	r25, r21
    65d0:	4c f0       	brlt	.+18     	; 0x65e4 <dtoa_prf+0x27e>
    65d2:	24 17       	cp	r18, r20
    65d4:	35 07       	cpc	r19, r21
    65d6:	34 f4       	brge	.+12     	; 0x65e4 <dtoa_prf+0x27e>
    65d8:	bd 01       	movw	r22, r26
    65da:	66 0d       	add	r22, r6
    65dc:	77 1d       	adc	r23, r7
    65de:	fb 01       	movw	r30, r22
    65e0:	11 81       	ldd	r17, Z+1	; 0x01
    65e2:	01 c0       	rjmp	.+2      	; 0x65e6 <dtoa_prf+0x280>
    65e4:	10 e3       	ldi	r17, 0x30	; 48
    65e6:	41 50       	subi	r20, 0x01	; 1
    65e8:	51 09       	sbc	r21, r1
    65ea:	ff ef       	ldi	r31, 0xFF	; 255
    65ec:	6f 1a       	sub	r6, r31
    65ee:	7f 0a       	sbc	r7, r31
    65f0:	b6 01       	movw	r22, r12
    65f2:	6f 5f       	subi	r22, 0xFF	; 255
    65f4:	7f 4f       	sbci	r23, 0xFF	; 255
    65f6:	4e 15       	cp	r20, r14
    65f8:	5f 05       	cpc	r21, r15
    65fa:	24 f0       	brlt	.+8      	; 0x6604 <dtoa_prf+0x29e>
    65fc:	f6 01       	movw	r30, r12
    65fe:	10 83       	st	Z, r17
    6600:	6b 01       	movw	r12, r22
    6602:	da cf       	rjmp	.-76     	; 0x65b8 <dtoa_prf+0x252>
    6604:	48 17       	cp	r20, r24
    6606:	59 07       	cpc	r21, r25
    6608:	39 f4       	brne	.+14     	; 0x6618 <dtoa_prf+0x2b2>
    660a:	06 33       	cpi	r16, 0x36	; 54
    660c:	20 f4       	brcc	.+8      	; 0x6616 <dtoa_prf+0x2b0>
    660e:	05 33       	cpi	r16, 0x35	; 53
    6610:	19 f4       	brne	.+6      	; 0x6618 <dtoa_prf+0x2b2>
    6612:	a1 10       	cpse	r10, r1
    6614:	01 c0       	rjmp	.+2      	; 0x6618 <dtoa_prf+0x2b2>
    6616:	11 e3       	ldi	r17, 0x31	; 49
    6618:	f6 01       	movw	r30, r12
    661a:	10 83       	st	Z, r17
    661c:	fb 01       	movw	r30, r22
    661e:	8b 2d       	mov	r24, r11
    6620:	90 e2       	ldi	r25, 0x20	; 32
    6622:	88 23       	and	r24, r24
    6624:	19 f0       	breq	.+6      	; 0x662c <dtoa_prf+0x2c6>
    6626:	91 93       	st	Z+, r25
    6628:	81 50       	subi	r24, 0x01	; 1
    662a:	fb cf       	rjmp	.-10     	; 0x6622 <dtoa_prf+0x2bc>
    662c:	fb 01       	movw	r30, r22
    662e:	eb 0d       	add	r30, r11
    6630:	f1 1d       	adc	r31, r1
    6632:	10 82       	st	Z, r1
    6634:	80 e0       	ldi	r24, 0x00	; 0
    6636:	90 e0       	ldi	r25, 0x00	; 0
    6638:	29 96       	adiw	r28, 0x09	; 9
    663a:	0f b6       	in	r0, 0x3f	; 63
    663c:	f8 94       	cli
    663e:	de bf       	out	0x3e, r29	; 62
    6640:	0f be       	out	0x3f, r0	; 63
    6642:	cd bf       	out	0x3d, r28	; 61
    6644:	df 91       	pop	r29
    6646:	cf 91       	pop	r28
    6648:	1f 91       	pop	r17
    664a:	0f 91       	pop	r16
    664c:	ff 90       	pop	r15
    664e:	ef 90       	pop	r14
    6650:	df 90       	pop	r13
    6652:	cf 90       	pop	r12
    6654:	bf 90       	pop	r11
    6656:	af 90       	pop	r10
    6658:	9f 90       	pop	r9
    665a:	7f 90       	pop	r7
    665c:	6f 90       	pop	r6
    665e:	08 95       	ret

00006660 <__ftoa_engine>:
    6660:	28 30       	cpi	r18, 0x08	; 8
    6662:	08 f0       	brcs	.+2      	; 0x6666 <__ftoa_engine+0x6>
    6664:	27 e0       	ldi	r18, 0x07	; 7
    6666:	33 27       	eor	r19, r19
    6668:	da 01       	movw	r26, r20
    666a:	99 0f       	add	r25, r25
    666c:	31 1d       	adc	r19, r1
    666e:	87 fd       	sbrc	r24, 7
    6670:	91 60       	ori	r25, 0x01	; 1
    6672:	00 96       	adiw	r24, 0x00	; 0
    6674:	61 05       	cpc	r22, r1
    6676:	71 05       	cpc	r23, r1
    6678:	39 f4       	brne	.+14     	; 0x6688 <__ftoa_engine+0x28>
    667a:	32 60       	ori	r19, 0x02	; 2
    667c:	2e 5f       	subi	r18, 0xFE	; 254
    667e:	3d 93       	st	X+, r19
    6680:	30 e3       	ldi	r19, 0x30	; 48
    6682:	2a 95       	dec	r18
    6684:	e1 f7       	brne	.-8      	; 0x667e <__ftoa_engine+0x1e>
    6686:	08 95       	ret
    6688:	9f 3f       	cpi	r25, 0xFF	; 255
    668a:	30 f0       	brcs	.+12     	; 0x6698 <__ftoa_engine+0x38>
    668c:	80 38       	cpi	r24, 0x80	; 128
    668e:	71 05       	cpc	r23, r1
    6690:	61 05       	cpc	r22, r1
    6692:	09 f0       	breq	.+2      	; 0x6696 <__ftoa_engine+0x36>
    6694:	3c 5f       	subi	r19, 0xFC	; 252
    6696:	3c 5f       	subi	r19, 0xFC	; 252
    6698:	3d 93       	st	X+, r19
    669a:	91 30       	cpi	r25, 0x01	; 1
    669c:	08 f0       	brcs	.+2      	; 0x66a0 <__ftoa_engine+0x40>
    669e:	80 68       	ori	r24, 0x80	; 128
    66a0:	91 1d       	adc	r25, r1
    66a2:	df 93       	push	r29
    66a4:	cf 93       	push	r28
    66a6:	1f 93       	push	r17
    66a8:	0f 93       	push	r16
    66aa:	ff 92       	push	r15
    66ac:	ef 92       	push	r14
    66ae:	19 2f       	mov	r17, r25
    66b0:	98 7f       	andi	r25, 0xF8	; 248
    66b2:	96 95       	lsr	r25
    66b4:	e9 2f       	mov	r30, r25
    66b6:	96 95       	lsr	r25
    66b8:	96 95       	lsr	r25
    66ba:	e9 0f       	add	r30, r25
    66bc:	ff 27       	eor	r31, r31
    66be:	ea 51       	subi	r30, 0x1A	; 26
    66c0:	ff 4f       	sbci	r31, 0xFF	; 255
    66c2:	99 27       	eor	r25, r25
    66c4:	33 27       	eor	r19, r19
    66c6:	ee 24       	eor	r14, r14
    66c8:	ff 24       	eor	r15, r15
    66ca:	a7 01       	movw	r20, r14
    66cc:	e7 01       	movw	r28, r14
    66ce:	05 90       	lpm	r0, Z+
    66d0:	08 94       	sec
    66d2:	07 94       	ror	r0
    66d4:	28 f4       	brcc	.+10     	; 0x66e0 <__ftoa_engine+0x80>
    66d6:	36 0f       	add	r19, r22
    66d8:	e7 1e       	adc	r14, r23
    66da:	f8 1e       	adc	r15, r24
    66dc:	49 1f       	adc	r20, r25
    66de:	51 1d       	adc	r21, r1
    66e0:	66 0f       	add	r22, r22
    66e2:	77 1f       	adc	r23, r23
    66e4:	88 1f       	adc	r24, r24
    66e6:	99 1f       	adc	r25, r25
    66e8:	06 94       	lsr	r0
    66ea:	a1 f7       	brne	.-24     	; 0x66d4 <__ftoa_engine+0x74>
    66ec:	05 90       	lpm	r0, Z+
    66ee:	07 94       	ror	r0
    66f0:	28 f4       	brcc	.+10     	; 0x66fc <__ftoa_engine+0x9c>
    66f2:	e7 0e       	add	r14, r23
    66f4:	f8 1e       	adc	r15, r24
    66f6:	49 1f       	adc	r20, r25
    66f8:	56 1f       	adc	r21, r22
    66fa:	c1 1d       	adc	r28, r1
    66fc:	77 0f       	add	r23, r23
    66fe:	88 1f       	adc	r24, r24
    6700:	99 1f       	adc	r25, r25
    6702:	66 1f       	adc	r22, r22
    6704:	06 94       	lsr	r0
    6706:	a1 f7       	brne	.-24     	; 0x66f0 <__ftoa_engine+0x90>
    6708:	05 90       	lpm	r0, Z+
    670a:	07 94       	ror	r0
    670c:	28 f4       	brcc	.+10     	; 0x6718 <__ftoa_engine+0xb8>
    670e:	f8 0e       	add	r15, r24
    6710:	49 1f       	adc	r20, r25
    6712:	56 1f       	adc	r21, r22
    6714:	c7 1f       	adc	r28, r23
    6716:	d1 1d       	adc	r29, r1
    6718:	88 0f       	add	r24, r24
    671a:	99 1f       	adc	r25, r25
    671c:	66 1f       	adc	r22, r22
    671e:	77 1f       	adc	r23, r23
    6720:	06 94       	lsr	r0
    6722:	a1 f7       	brne	.-24     	; 0x670c <__ftoa_engine+0xac>
    6724:	05 90       	lpm	r0, Z+
    6726:	07 94       	ror	r0
    6728:	20 f4       	brcc	.+8      	; 0x6732 <__ftoa_engine+0xd2>
    672a:	49 0f       	add	r20, r25
    672c:	56 1f       	adc	r21, r22
    672e:	c7 1f       	adc	r28, r23
    6730:	d8 1f       	adc	r29, r24
    6732:	99 0f       	add	r25, r25
    6734:	66 1f       	adc	r22, r22
    6736:	77 1f       	adc	r23, r23
    6738:	88 1f       	adc	r24, r24
    673a:	06 94       	lsr	r0
    673c:	a9 f7       	brne	.-22     	; 0x6728 <__ftoa_engine+0xc8>
    673e:	84 91       	lpm	r24, Z
    6740:	10 95       	com	r17
    6742:	17 70       	andi	r17, 0x07	; 7
    6744:	41 f0       	breq	.+16     	; 0x6756 <__ftoa_engine+0xf6>
    6746:	d6 95       	lsr	r29
    6748:	c7 95       	ror	r28
    674a:	57 95       	ror	r21
    674c:	47 95       	ror	r20
    674e:	f7 94       	ror	r15
    6750:	e7 94       	ror	r14
    6752:	1a 95       	dec	r17
    6754:	c1 f7       	brne	.-16     	; 0x6746 <__ftoa_engine+0xe6>
    6756:	ec e8       	ldi	r30, 0x8C	; 140
    6758:	f0 e0       	ldi	r31, 0x00	; 0
    675a:	68 94       	set
    675c:	15 90       	lpm	r1, Z+
    675e:	15 91       	lpm	r17, Z+
    6760:	35 91       	lpm	r19, Z+
    6762:	65 91       	lpm	r22, Z+
    6764:	95 91       	lpm	r25, Z+
    6766:	05 90       	lpm	r0, Z+
    6768:	7f e2       	ldi	r23, 0x2F	; 47
    676a:	73 95       	inc	r23
    676c:	e1 18       	sub	r14, r1
    676e:	f1 0a       	sbc	r15, r17
    6770:	43 0b       	sbc	r20, r19
    6772:	56 0b       	sbc	r21, r22
    6774:	c9 0b       	sbc	r28, r25
    6776:	d0 09       	sbc	r29, r0
    6778:	c0 f7       	brcc	.-16     	; 0x676a <__ftoa_engine+0x10a>
    677a:	e1 0c       	add	r14, r1
    677c:	f1 1e       	adc	r15, r17
    677e:	43 1f       	adc	r20, r19
    6780:	56 1f       	adc	r21, r22
    6782:	c9 1f       	adc	r28, r25
    6784:	d0 1d       	adc	r29, r0
    6786:	7e f4       	brtc	.+30     	; 0x67a6 <__ftoa_engine+0x146>
    6788:	70 33       	cpi	r23, 0x30	; 48
    678a:	11 f4       	brne	.+4      	; 0x6790 <__ftoa_engine+0x130>
    678c:	8a 95       	dec	r24
    678e:	e6 cf       	rjmp	.-52     	; 0x675c <__ftoa_engine+0xfc>
    6790:	e8 94       	clt
    6792:	01 50       	subi	r16, 0x01	; 1
    6794:	30 f0       	brcs	.+12     	; 0x67a2 <__ftoa_engine+0x142>
    6796:	08 0f       	add	r16, r24
    6798:	0a f4       	brpl	.+2      	; 0x679c <__ftoa_engine+0x13c>
    679a:	00 27       	eor	r16, r16
    679c:	02 17       	cp	r16, r18
    679e:	08 f4       	brcc	.+2      	; 0x67a2 <__ftoa_engine+0x142>
    67a0:	20 2f       	mov	r18, r16
    67a2:	23 95       	inc	r18
    67a4:	02 2f       	mov	r16, r18
    67a6:	7a 33       	cpi	r23, 0x3A	; 58
    67a8:	28 f0       	brcs	.+10     	; 0x67b4 <__ftoa_engine+0x154>
    67aa:	79 e3       	ldi	r23, 0x39	; 57
    67ac:	7d 93       	st	X+, r23
    67ae:	2a 95       	dec	r18
    67b0:	e9 f7       	brne	.-6      	; 0x67ac <__ftoa_engine+0x14c>
    67b2:	10 c0       	rjmp	.+32     	; 0x67d4 <__ftoa_engine+0x174>
    67b4:	7d 93       	st	X+, r23
    67b6:	2a 95       	dec	r18
    67b8:	89 f6       	brne	.-94     	; 0x675c <__ftoa_engine+0xfc>
    67ba:	06 94       	lsr	r0
    67bc:	97 95       	ror	r25
    67be:	67 95       	ror	r22
    67c0:	37 95       	ror	r19
    67c2:	17 95       	ror	r17
    67c4:	17 94       	ror	r1
    67c6:	e1 18       	sub	r14, r1
    67c8:	f1 0a       	sbc	r15, r17
    67ca:	43 0b       	sbc	r20, r19
    67cc:	56 0b       	sbc	r21, r22
    67ce:	c9 0b       	sbc	r28, r25
    67d0:	d0 09       	sbc	r29, r0
    67d2:	98 f0       	brcs	.+38     	; 0x67fa <__ftoa_engine+0x19a>
    67d4:	23 95       	inc	r18
    67d6:	7e 91       	ld	r23, -X
    67d8:	73 95       	inc	r23
    67da:	7a 33       	cpi	r23, 0x3A	; 58
    67dc:	08 f0       	brcs	.+2      	; 0x67e0 <__ftoa_engine+0x180>
    67de:	70 e3       	ldi	r23, 0x30	; 48
    67e0:	7c 93       	st	X, r23
    67e2:	20 13       	cpse	r18, r16
    67e4:	b8 f7       	brcc	.-18     	; 0x67d4 <__ftoa_engine+0x174>
    67e6:	7e 91       	ld	r23, -X
    67e8:	70 61       	ori	r23, 0x10	; 16
    67ea:	7d 93       	st	X+, r23
    67ec:	30 f0       	brcs	.+12     	; 0x67fa <__ftoa_engine+0x19a>
    67ee:	83 95       	inc	r24
    67f0:	71 e3       	ldi	r23, 0x31	; 49
    67f2:	7d 93       	st	X+, r23
    67f4:	70 e3       	ldi	r23, 0x30	; 48
    67f6:	2a 95       	dec	r18
    67f8:	e1 f7       	brne	.-8      	; 0x67f2 <__ftoa_engine+0x192>
    67fa:	11 24       	eor	r1, r1
    67fc:	ef 90       	pop	r14
    67fe:	ff 90       	pop	r15
    6800:	0f 91       	pop	r16
    6802:	1f 91       	pop	r17
    6804:	cf 91       	pop	r28
    6806:	df 91       	pop	r29
    6808:	99 27       	eor	r25, r25
    680a:	87 fd       	sbrc	r24, 7
    680c:	90 95       	com	r25
    680e:	08 95       	ret

00006810 <__ctype_isfalse>:
    6810:	99 27       	eor	r25, r25
    6812:	88 27       	eor	r24, r24

00006814 <__ctype_istrue>:
    6814:	08 95       	ret

00006816 <strnlen_P>:
    6816:	fc 01       	movw	r30, r24
    6818:	05 90       	lpm	r0, Z+
    681a:	61 50       	subi	r22, 0x01	; 1
    681c:	70 40       	sbci	r23, 0x00	; 0
    681e:	01 10       	cpse	r0, r1
    6820:	d8 f7       	brcc	.-10     	; 0x6818 <strnlen_P+0x2>
    6822:	80 95       	com	r24
    6824:	90 95       	com	r25
    6826:	8e 0f       	add	r24, r30
    6828:	9f 1f       	adc	r25, r31
    682a:	08 95       	ret

0000682c <memset>:
    682c:	dc 01       	movw	r26, r24
    682e:	01 c0       	rjmp	.+2      	; 0x6832 <memset+0x6>
    6830:	6d 93       	st	X+, r22
    6832:	41 50       	subi	r20, 0x01	; 1
    6834:	50 40       	sbci	r21, 0x00	; 0
    6836:	e0 f7       	brcc	.-8      	; 0x6830 <memset+0x4>
    6838:	08 95       	ret

0000683a <strnlen>:
    683a:	fc 01       	movw	r30, r24
    683c:	61 50       	subi	r22, 0x01	; 1
    683e:	70 40       	sbci	r23, 0x00	; 0
    6840:	01 90       	ld	r0, Z+
    6842:	01 10       	cpse	r0, r1
    6844:	d8 f7       	brcc	.-10     	; 0x683c <strnlen+0x2>
    6846:	80 95       	com	r24
    6848:	90 95       	com	r25
    684a:	8e 0f       	add	r24, r30
    684c:	9f 1f       	adc	r25, r31
    684e:	08 95       	ret

00006850 <fputc>:
    6850:	0f 93       	push	r16
    6852:	1f 93       	push	r17
    6854:	cf 93       	push	r28
    6856:	df 93       	push	r29
    6858:	18 2f       	mov	r17, r24
    685a:	09 2f       	mov	r16, r25
    685c:	eb 01       	movw	r28, r22
    685e:	8b 81       	ldd	r24, Y+3	; 0x03
    6860:	81 fd       	sbrc	r24, 1
    6862:	03 c0       	rjmp	.+6      	; 0x686a <fputc+0x1a>
    6864:	8f ef       	ldi	r24, 0xFF	; 255
    6866:	9f ef       	ldi	r25, 0xFF	; 255
    6868:	20 c0       	rjmp	.+64     	; 0x68aa <fputc+0x5a>
    686a:	82 ff       	sbrs	r24, 2
    686c:	10 c0       	rjmp	.+32     	; 0x688e <fputc+0x3e>
    686e:	4e 81       	ldd	r20, Y+6	; 0x06
    6870:	5f 81       	ldd	r21, Y+7	; 0x07
    6872:	2c 81       	ldd	r18, Y+4	; 0x04
    6874:	3d 81       	ldd	r19, Y+5	; 0x05
    6876:	42 17       	cp	r20, r18
    6878:	53 07       	cpc	r21, r19
    687a:	7c f4       	brge	.+30     	; 0x689a <fputc+0x4a>
    687c:	e8 81       	ld	r30, Y
    687e:	f9 81       	ldd	r31, Y+1	; 0x01
    6880:	9f 01       	movw	r18, r30
    6882:	2f 5f       	subi	r18, 0xFF	; 255
    6884:	3f 4f       	sbci	r19, 0xFF	; 255
    6886:	39 83       	std	Y+1, r19	; 0x01
    6888:	28 83       	st	Y, r18
    688a:	10 83       	st	Z, r17
    688c:	06 c0       	rjmp	.+12     	; 0x689a <fputc+0x4a>
    688e:	e8 85       	ldd	r30, Y+8	; 0x08
    6890:	f9 85       	ldd	r31, Y+9	; 0x09
    6892:	81 2f       	mov	r24, r17
    6894:	09 95       	icall
    6896:	89 2b       	or	r24, r25
    6898:	29 f7       	brne	.-54     	; 0x6864 <fputc+0x14>
    689a:	2e 81       	ldd	r18, Y+6	; 0x06
    689c:	3f 81       	ldd	r19, Y+7	; 0x07
    689e:	2f 5f       	subi	r18, 0xFF	; 255
    68a0:	3f 4f       	sbci	r19, 0xFF	; 255
    68a2:	3f 83       	std	Y+7, r19	; 0x07
    68a4:	2e 83       	std	Y+6, r18	; 0x06
    68a6:	81 2f       	mov	r24, r17
    68a8:	90 2f       	mov	r25, r16
    68aa:	df 91       	pop	r29
    68ac:	cf 91       	pop	r28
    68ae:	1f 91       	pop	r17
    68b0:	0f 91       	pop	r16
    68b2:	08 95       	ret

000068b4 <__ultoa_invert>:
    68b4:	fa 01       	movw	r30, r20
    68b6:	aa 27       	eor	r26, r26
    68b8:	28 30       	cpi	r18, 0x08	; 8
    68ba:	51 f1       	breq	.+84     	; 0x6910 <__ultoa_invert+0x5c>
    68bc:	20 31       	cpi	r18, 0x10	; 16
    68be:	81 f1       	breq	.+96     	; 0x6920 <__ultoa_invert+0x6c>
    68c0:	e8 94       	clt
    68c2:	6f 93       	push	r22
    68c4:	6e 7f       	andi	r22, 0xFE	; 254
    68c6:	6e 5f       	subi	r22, 0xFE	; 254
    68c8:	7f 4f       	sbci	r23, 0xFF	; 255
    68ca:	8f 4f       	sbci	r24, 0xFF	; 255
    68cc:	9f 4f       	sbci	r25, 0xFF	; 255
    68ce:	af 4f       	sbci	r26, 0xFF	; 255
    68d0:	b1 e0       	ldi	r27, 0x01	; 1
    68d2:	3e d0       	rcall	.+124    	; 0x6950 <__ultoa_invert+0x9c>
    68d4:	b4 e0       	ldi	r27, 0x04	; 4
    68d6:	3c d0       	rcall	.+120    	; 0x6950 <__ultoa_invert+0x9c>
    68d8:	67 0f       	add	r22, r23
    68da:	78 1f       	adc	r23, r24
    68dc:	89 1f       	adc	r24, r25
    68de:	9a 1f       	adc	r25, r26
    68e0:	a1 1d       	adc	r26, r1
    68e2:	68 0f       	add	r22, r24
    68e4:	79 1f       	adc	r23, r25
    68e6:	8a 1f       	adc	r24, r26
    68e8:	91 1d       	adc	r25, r1
    68ea:	a1 1d       	adc	r26, r1
    68ec:	6a 0f       	add	r22, r26
    68ee:	71 1d       	adc	r23, r1
    68f0:	81 1d       	adc	r24, r1
    68f2:	91 1d       	adc	r25, r1
    68f4:	a1 1d       	adc	r26, r1
    68f6:	20 d0       	rcall	.+64     	; 0x6938 <__ultoa_invert+0x84>
    68f8:	09 f4       	brne	.+2      	; 0x68fc <__ultoa_invert+0x48>
    68fa:	68 94       	set
    68fc:	3f 91       	pop	r19
    68fe:	2a e0       	ldi	r18, 0x0A	; 10
    6900:	26 9f       	mul	r18, r22
    6902:	11 24       	eor	r1, r1
    6904:	30 19       	sub	r19, r0
    6906:	30 5d       	subi	r19, 0xD0	; 208
    6908:	31 93       	st	Z+, r19
    690a:	de f6       	brtc	.-74     	; 0x68c2 <__ultoa_invert+0xe>
    690c:	cf 01       	movw	r24, r30
    690e:	08 95       	ret
    6910:	46 2f       	mov	r20, r22
    6912:	47 70       	andi	r20, 0x07	; 7
    6914:	40 5d       	subi	r20, 0xD0	; 208
    6916:	41 93       	st	Z+, r20
    6918:	b3 e0       	ldi	r27, 0x03	; 3
    691a:	0f d0       	rcall	.+30     	; 0x693a <__ultoa_invert+0x86>
    691c:	c9 f7       	brne	.-14     	; 0x6910 <__ultoa_invert+0x5c>
    691e:	f6 cf       	rjmp	.-20     	; 0x690c <__ultoa_invert+0x58>
    6920:	46 2f       	mov	r20, r22
    6922:	4f 70       	andi	r20, 0x0F	; 15
    6924:	40 5d       	subi	r20, 0xD0	; 208
    6926:	4a 33       	cpi	r20, 0x3A	; 58
    6928:	18 f0       	brcs	.+6      	; 0x6930 <__ultoa_invert+0x7c>
    692a:	49 5d       	subi	r20, 0xD9	; 217
    692c:	31 fd       	sbrc	r19, 1
    692e:	40 52       	subi	r20, 0x20	; 32
    6930:	41 93       	st	Z+, r20
    6932:	02 d0       	rcall	.+4      	; 0x6938 <__ultoa_invert+0x84>
    6934:	a9 f7       	brne	.-22     	; 0x6920 <__ultoa_invert+0x6c>
    6936:	ea cf       	rjmp	.-44     	; 0x690c <__ultoa_invert+0x58>
    6938:	b4 e0       	ldi	r27, 0x04	; 4
    693a:	a6 95       	lsr	r26
    693c:	97 95       	ror	r25
    693e:	87 95       	ror	r24
    6940:	77 95       	ror	r23
    6942:	67 95       	ror	r22
    6944:	ba 95       	dec	r27
    6946:	c9 f7       	brne	.-14     	; 0x693a <__ultoa_invert+0x86>
    6948:	00 97       	sbiw	r24, 0x00	; 0
    694a:	61 05       	cpc	r22, r1
    694c:	71 05       	cpc	r23, r1
    694e:	08 95       	ret
    6950:	9b 01       	movw	r18, r22
    6952:	ac 01       	movw	r20, r24
    6954:	0a 2e       	mov	r0, r26
    6956:	06 94       	lsr	r0
    6958:	57 95       	ror	r21
    695a:	47 95       	ror	r20
    695c:	37 95       	ror	r19
    695e:	27 95       	ror	r18
    6960:	ba 95       	dec	r27
    6962:	c9 f7       	brne	.-14     	; 0x6956 <__ultoa_invert+0xa2>
    6964:	62 0f       	add	r22, r18
    6966:	73 1f       	adc	r23, r19
    6968:	84 1f       	adc	r24, r20
    696a:	95 1f       	adc	r25, r21
    696c:	a0 1d       	adc	r26, r0
    696e:	08 95       	ret

00006970 <__mulsi3>:
    6970:	db 01       	movw	r26, r22
    6972:	8f 93       	push	r24
    6974:	9f 93       	push	r25
    6976:	0e 94 56 2c 	call	0x58ac	; 0x58ac <__muluhisi3>
    697a:	bf 91       	pop	r27
    697c:	af 91       	pop	r26
    697e:	a2 9f       	mul	r26, r18
    6980:	80 0d       	add	r24, r0
    6982:	91 1d       	adc	r25, r1
    6984:	a3 9f       	mul	r26, r19
    6986:	90 0d       	add	r25, r0
    6988:	b2 9f       	mul	r27, r18
    698a:	90 0d       	add	r25, r0
    698c:	11 24       	eor	r1, r1
    698e:	08 95       	ret

00006990 <_exit>:
    6990:	f8 94       	cli

00006992 <__stop_program>:
    6992:	ff cf       	rjmp	.-2      	; 0x6992 <__stop_program>
