
iot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000302  00800100  000073ba  0000744e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000073ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000356  00800402  00800402  00007750  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007750  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000160  00000000  00000000  000077ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00008d4f  00000000  00000000  0000790c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ff6  00000000  00000000  0001065b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002cca  00000000  00000000  00011651  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000538  00000000  00000000  0001431c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000261a  00000000  00000000  00014854  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000055c4  00000000  00000000  00016e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a38  00000000  00000000  0001c432  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	df c0       	rjmp	.+446    	; 0x1c4 <__bad_interrupt>
       6:	00 00       	nop
       8:	dd c0       	rjmp	.+442    	; 0x1c4 <__bad_interrupt>
       a:	00 00       	nop
       c:	db c0       	rjmp	.+438    	; 0x1c4 <__bad_interrupt>
       e:	00 00       	nop
      10:	d9 c0       	rjmp	.+434    	; 0x1c4 <__bad_interrupt>
      12:	00 00       	nop
      14:	d7 c0       	rjmp	.+430    	; 0x1c4 <__bad_interrupt>
      16:	00 00       	nop
      18:	d5 c0       	rjmp	.+426    	; 0x1c4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d3 c0       	rjmp	.+422    	; 0x1c4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d1 c0       	rjmp	.+418    	; 0x1c4 <__bad_interrupt>
      22:	00 00       	nop
      24:	60 c1       	rjmp	.+704    	; 0x2e6 <__vector_9>
      26:	00 00       	nop
      28:	cd c0       	rjmp	.+410    	; 0x1c4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cb c0       	rjmp	.+406    	; 0x1c4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	2d c1       	rjmp	.+602    	; 0x28c <__vector_12>
      32:	00 00       	nop
      34:	c7 c0       	rjmp	.+398    	; 0x1c4 <__bad_interrupt>
      36:	00 00       	nop
      38:	c5 c0       	rjmp	.+394    	; 0x1c4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	fa c0       	rjmp	.+500    	; 0x232 <__vector_15>
      3e:	00 00       	nop
      40:	c1 c0       	rjmp	.+386    	; 0x1c4 <__bad_interrupt>
      42:	00 00       	nop
      44:	bf c0       	rjmp	.+382    	; 0x1c4 <__bad_interrupt>
      46:	00 00       	nop
      48:	a8 c1       	rjmp	.+848    	; 0x39a <__vector_18>
      4a:	00 00       	nop
      4c:	bb c0       	rjmp	.+374    	; 0x1c4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	b9 c0       	rjmp	.+370    	; 0x1c4 <__bad_interrupt>
      52:	00 00       	nop
      54:	b7 c0       	rjmp	.+366    	; 0x1c4 <__bad_interrupt>
      56:	00 00       	nop
      58:	b5 c0       	rjmp	.+362    	; 0x1c4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b3 c0       	rjmp	.+358    	; 0x1c4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b1 c0       	rjmp	.+354    	; 0x1c4 <__bad_interrupt>
      62:	00 00       	nop
      64:	af c0       	rjmp	.+350    	; 0x1c4 <__bad_interrupt>
      66:	00 00       	nop
      68:	6b c1       	rjmp	.+726    	; 0x340 <__vector_26>
      6a:	00 00       	nop
      6c:	ab c0       	rjmp	.+342    	; 0x1c4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a9 c0       	rjmp	.+338    	; 0x1c4 <__bad_interrupt>
      72:	00 00       	nop
      74:	a7 c0       	rjmp	.+334    	; 0x1c4 <__bad_interrupt>
      76:	00 00       	nop
      78:	c9 c1       	rjmp	.+914    	; 0x40c <__vector_30>
      7a:	00 00       	nop
      7c:	a3 c0       	rjmp	.+326    	; 0x1c4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a1 c0       	rjmp	.+322    	; 0x1c4 <__bad_interrupt>
      82:	00 00       	nop
      84:	9f c0       	rjmp	.+318    	; 0x1c4 <__bad_interrupt>
      86:	00 00       	nop
      88:	9d c0       	rjmp	.+314    	; 0x1c4 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	00 40       	sbci	r16, 0x00	; 0
      8e:	7a 10       	cpse	r7, r10
      90:	f3 5a       	subi	r31, 0xA3	; 163
      92:	00 a0       	ldd	r0, Z+32	; 0x20
      94:	72 4e       	sbci	r23, 0xE2	; 226
      96:	18 09       	sbc	r17, r8
      98:	00 10       	cpse	r0, r0
      9a:	a5 d4       	rcall	.+2378   	; 0x9e6 <_ZN13iotIrReceiver12stateMachineEv+0x60>
      9c:	e8 00       	.word	0x00e8	; ????
      9e:	00 e8       	ldi	r16, 0x80	; 128
      a0:	76 48       	sbci	r23, 0x86	; 134
      a2:	17 00       	.word	0x0017	; ????
      a4:	00 e4       	ldi	r16, 0x40	; 64
      a6:	0b 54       	subi	r16, 0x4B	; 75
      a8:	02 00       	.word	0x0002	; ????
      aa:	00 ca       	rjmp	.-3072   	; 0xfffff4ac <__eeprom_end+0xff7ef4ac>
      ac:	9a 3b       	cpi	r25, 0xBA	; 186
      ae:	00 00       	nop
      b0:	00 e1       	ldi	r16, 0x10	; 16
      b2:	f5 05       	cpc	r31, r5
      b4:	00 00       	nop
      b6:	80 96       	adiw	r24, 0x20	; 32
      b8:	98 00       	.word	0x0098	; ????
      ba:	00 00       	nop
      bc:	40 42       	sbci	r20, 0x20	; 32
      be:	0f 00       	.word	0x000f	; ????
      c0:	00 00       	nop
      c2:	a0 86       	std	Z+8, r10	; 0x08
      c4:	01 00       	.word	0x0001	; ????
      c6:	00 00       	nop
      c8:	10 27       	eor	r17, r16
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	e8 03       	fmulsu	r22, r16
      d0:	00 00       	nop
      d2:	00 00       	nop
      d4:	64 00       	.word	0x0064	; ????
      d6:	00 00       	nop
      d8:	00 00       	nop
      da:	0a 00       	.word	0x000a	; ????
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	01 00       	.word	0x0001	; ????
      e2:	00 00       	nop
      e4:	00 00       	nop
      e6:	2c 76       	andi	r18, 0x6C	; 108
      e8:	d8 88       	ldd	r13, Y+16	; 0x10
      ea:	dc 67       	ori	r29, 0x7C	; 124
      ec:	4f 08       	sbc	r4, r15
      ee:	23 df       	rcall	.-442    	; 0xffffff36 <__eeprom_end+0xff7eff36>
      f0:	c1 df       	rcall	.-126    	; 0x74 <__SREG__+0x35>
      f2:	ae 59       	subi	r26, 0x9E	; 158
      f4:	e1 b1       	in	r30, 0x01	; 1
      f6:	b7 96       	adiw	r30, 0x27	; 39
      f8:	e5 e3       	ldi	r30, 0x35	; 53
      fa:	e4 53       	subi	r30, 0x34	; 52
      fc:	c6 3a       	cpi	r28, 0xA6	; 166
      fe:	e6 51       	subi	r30, 0x16	; 22
     100:	99 76       	andi	r25, 0x69	; 105
     102:	96 e8       	ldi	r25, 0x86	; 134
     104:	e6 c2       	rjmp	.+1484   	; 0x6d2 <_ZN11iotTerminal7putCharEcP6__file+0xb6>
     106:	84 26       	eor	r8, r20
     108:	eb 89       	ldd	r30, Y+19	; 0x13
     10a:	8c 9b       	sbis	0x11, 4	; 17
     10c:	62 ed       	ldi	r22, 0xD2	; 210
     10e:	40 7c       	andi	r20, 0xC0	; 192
     110:	6f fc       	.word	0xfc6f	; ????
     112:	ef bc       	out	0x2f, r14	; 47
     114:	9c 9f       	mul	r25, r28
     116:	40 f2       	brcs	.-112    	; 0xa8 <__trampolines_end+0x1c>
     118:	ba a5       	ldd	r27, Y+42	; 0x2a
     11a:	6f a5       	ldd	r22, Y+47	; 0x2f
     11c:	f4 90       	lpm	r15, Z
     11e:	05 5a       	subi	r16, 0xA5	; 165
     120:	2a f7       	brpl	.-54     	; 0xec <__trampolines_end+0x60>
     122:	5c 93       	st	X, r21
     124:	6b 6c       	ori	r22, 0xCB	; 203
     126:	f9 67       	ori	r31, 0x79	; 121
     128:	6d c1       	rjmp	.+730    	; 0x404 <__vector_18+0x6a>
     12a:	1b fc       	.word	0xfc1b	; ????
     12c:	e0 e4       	ldi	r30, 0x40	; 64
     12e:	0d 47       	sbci	r16, 0x7D	; 125
     130:	fe f5       	brtc	.+126    	; 0x1b0 <__do_clear_bss+0x4>
     132:	20 e6       	ldi	r18, 0x60	; 96
     134:	b5 00       	.word	0x00b5	; ????
     136:	d0 ed       	ldi	r29, 0xD0	; 208
     138:	90 2e       	mov	r9, r16
     13a:	03 00       	.word	0x0003	; ????
     13c:	94 35       	cpi	r25, 0x54	; 84
     13e:	77 05       	cpc	r23, r7
     140:	00 80       	ld	r0, Z
     142:	84 1e       	adc	r8, r20
     144:	08 00       	.word	0x0008	; ????
     146:	00 20       	and	r0, r0
     148:	4e 0a       	sbc	r4, r30
     14a:	00 00       	nop
     14c:	00 c8       	rjmp	.-4096   	; 0xfffff14e <__eeprom_end+0xff7ef14e>
     14e:	0c 33       	cpi	r16, 0x3C	; 60
     150:	33 33       	cpi	r19, 0x33	; 51
     152:	33 0f       	add	r19, r19
     154:	98 6e       	ori	r25, 0xE8	; 232
     156:	12 83       	std	Z+2, r17	; 0x02
     158:	11 41       	sbci	r17, 0x11	; 17
     15a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     15c:	21 14       	cp	r2, r1
     15e:	89 3b       	cpi	r24, 0xB9	; 185
     160:	e6 55       	subi	r30, 0x56	; 86
     162:	16 cf       	rjmp	.-468    	; 0xffffff90 <__eeprom_end+0xff7eff90>
     164:	fe e6       	ldi	r31, 0x6E	; 110
     166:	db 18       	sub	r13, r11
     168:	d1 84       	ldd	r13, Z+9	; 0x09
     16a:	4b 38       	cpi	r20, 0x8B	; 139
     16c:	1b f7       	brvc	.-58     	; 0x134 <__trampolines_end+0xa8>
     16e:	7c 1d       	adc	r23, r12
     170:	90 1d       	adc	r25, r0
     172:	a4 bb       	out	0x14, r26	; 20
     174:	e4 24       	eor	r14, r4
     176:	20 32       	cpi	r18, 0x20	; 32
     178:	84 72       	andi	r24, 0x24	; 36
     17a:	5e 22       	and	r5, r30
     17c:	81 00       	.word	0x0081	; ????
     17e:	c9 f1       	breq	.+114    	; 0x1f2 <_ZN6iotPin8getpPortENS_8iotPinIdE+0x4>
     180:	24 ec       	ldi	r18, 0xC4	; 196
     182:	a1 e5       	ldi	r26, 0x51	; 81
     184:	3d 27       	eor	r19, r29

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d0 e1       	ldi	r29, 0x10	; 16
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61

00000192 <__do_copy_data>:
     192:	14 e0       	ldi	r17, 0x04	; 4
     194:	a0 e0       	ldi	r26, 0x00	; 0
     196:	b1 e0       	ldi	r27, 0x01	; 1
     198:	ea eb       	ldi	r30, 0xBA	; 186
     19a:	f3 e7       	ldi	r31, 0x73	; 115
     19c:	00 e0       	ldi	r16, 0x00	; 0
     19e:	0b bf       	out	0x3b, r16	; 59
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <__do_copy_data+0x14>
     1a2:	07 90       	elpm	r0, Z+
     1a4:	0d 92       	st	X+, r0
     1a6:	a2 30       	cpi	r26, 0x02	; 2
     1a8:	b1 07       	cpc	r27, r17
     1aa:	d9 f7       	brne	.-10     	; 0x1a2 <__do_copy_data+0x10>

000001ac <__do_clear_bss>:
     1ac:	27 e0       	ldi	r18, 0x07	; 7
     1ae:	a2 e0       	ldi	r26, 0x02	; 2
     1b0:	b4 e0       	ldi	r27, 0x04	; 4
     1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <.do_clear_bss_start>

000001b4 <.do_clear_bss_loop>:
     1b4:	1d 92       	st	X+, r1

000001b6 <.do_clear_bss_start>:
     1b6:	a8 35       	cpi	r26, 0x58	; 88
     1b8:	b2 07       	cpc	r27, r18
     1ba:	e1 f7       	brne	.-8      	; 0x1b4 <.do_clear_bss_loop>
     1bc:	0e 94 84 1b 	call	0x3708	; 0x3708 <main>
     1c0:	0c 94 db 39 	jmp	0x73b6	; 0x73b6 <_exit>

000001c4 <__bad_interrupt>:
     1c4:	1d cf       	rjmp	.-454    	; 0x0 <__vectors>

000001c6 <_Znwj>:

volatile uint8_t *
iotPin::getpDDR(iotPin::iotPortId id)
{
	return isValid(id) ? pDDR[id] : NULL;
}
     1c6:	0c 94 93 31 	jmp	0x6326	; 0x6326 <malloc>
     1ca:	08 95       	ret

000001cc <_ZN6iotPin7getpPinENS_8iotPinIdE>:

volatile uint8_t *
iotPin::getpPin(iotPin::iotPinId id)
{
	return isValid(id) ? pPin[id / iotcNumPinsPerPorts] : NULL;
     1cc:	85 33       	cpi	r24, 0x35	; 53
     1ce:	60 f4       	brcc	.+24     	; 0x1e8 <_ZN6iotPin7getpPinENS_8iotPinIdE+0x1c>
     1d0:	86 95       	lsr	r24
     1d2:	86 95       	lsr	r24
     1d4:	86 95       	lsr	r24
     1d6:	e8 2f       	mov	r30, r24
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	ee 0f       	add	r30, r30
     1dc:	ff 1f       	adc	r31, r31
     1de:	e2 5a       	subi	r30, 0xA2	; 162
     1e0:	fe 4f       	sbci	r31, 0xFE	; 254
     1e2:	80 81       	ld	r24, Z
     1e4:	91 81       	ldd	r25, Z+1	; 0x01
     1e6:	08 95       	ret
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	90 e0       	ldi	r25, 0x00	; 0
}
     1ec:	08 95       	ret

000001ee <_ZN6iotPin8getpPortENS_8iotPinIdE>:

volatile uint8_t *
iotPin::getpPort(iotPin::iotPinId id)
{
	return isValid(id) ? pPort[id / iotcNumPinsPerPorts] : NULL;
     1ee:	85 33       	cpi	r24, 0x35	; 53
     1f0:	60 f4       	brcc	.+24     	; 0x20a <_ZN6iotPin8getpPortENS_8iotPinIdE+0x1c>
     1f2:	86 95       	lsr	r24
     1f4:	86 95       	lsr	r24
     1f6:	86 95       	lsr	r24
     1f8:	e8 2f       	mov	r30, r24
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	ee 0f       	add	r30, r30
     1fe:	ff 1f       	adc	r31, r31
     200:	e0 5b       	subi	r30, 0xB0	; 176
     202:	fe 4f       	sbci	r31, 0xFE	; 254
     204:	80 81       	ld	r24, Z
     206:	91 81       	ldd	r25, Z+1	; 0x01
     208:	08 95       	ret
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	90 e0       	ldi	r25, 0x00	; 0
}
     20e:	08 95       	ret

00000210 <_ZN6iotPin7getpDDRENS_8iotPinIdE>:

volatile uint8_t *
iotPin::getpDDR(iotPin::iotPinId id)
{
	return isValid(id) ? pDDR[id / iotcNumPinsPerPorts] : NULL;
     210:	85 33       	cpi	r24, 0x35	; 53
     212:	60 f4       	brcc	.+24     	; 0x22c <_ZN6iotPin7getpDDRENS_8iotPinIdE+0x1c>
     214:	86 95       	lsr	r24
     216:	86 95       	lsr	r24
     218:	86 95       	lsr	r24
     21a:	e8 2f       	mov	r30, r24
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	ee 0f       	add	r30, r30
     220:	ff 1f       	adc	r31, r31
     222:	ee 5b       	subi	r30, 0xBE	; 190
     224:	fe 4f       	sbci	r31, 0xFE	; 254
     226:	80 81       	ld	r24, Z
     228:	91 81       	ldd	r25, Z+1	; 0x01
     22a:	08 95       	ret
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
}
     230:	08 95       	ret

00000232 <__vector_15>:
void	(* iotTimer::iCallback1) (void) = (void (*) (void)) NULL;
void	(* iotTimer::iCallback2) (void) = (void (*) (void)) NULL;
void	(* iotTimer::iCallback3) (void) = (void (*) (void)) NULL;

ISR(TIMER0_COMP_vect)
{
     232:	1f 92       	push	r1
     234:	0f 92       	push	r0
     236:	0f b6       	in	r0, 0x3f	; 63
     238:	0f 92       	push	r0
     23a:	11 24       	eor	r1, r1
     23c:	0b b6       	in	r0, 0x3b	; 59
     23e:	0f 92       	push	r0
     240:	2f 93       	push	r18
     242:	3f 93       	push	r19
     244:	4f 93       	push	r20
     246:	5f 93       	push	r21
     248:	6f 93       	push	r22
     24a:	7f 93       	push	r23
     24c:	8f 93       	push	r24
     24e:	9f 93       	push	r25
     250:	af 93       	push	r26
     252:	bf 93       	push	r27
     254:	ef 93       	push	r30
     256:	ff 93       	push	r31
	if(iotTimer::iCallback0) (* iotTimer::iCallback0)();
     258:	e0 91 31 07 	lds	r30, 0x0731
     25c:	f0 91 32 07 	lds	r31, 0x0732
     260:	30 97       	sbiw	r30, 0x00	; 0
     262:	09 f0       	breq	.+2      	; 0x266 <__vector_15+0x34>
     264:	09 95       	icall
}
     266:	ff 91       	pop	r31
     268:	ef 91       	pop	r30
     26a:	bf 91       	pop	r27
     26c:	af 91       	pop	r26
     26e:	9f 91       	pop	r25
     270:	8f 91       	pop	r24
     272:	7f 91       	pop	r23
     274:	6f 91       	pop	r22
     276:	5f 91       	pop	r21
     278:	4f 91       	pop	r20
     27a:	3f 91       	pop	r19
     27c:	2f 91       	pop	r18
     27e:	0f 90       	pop	r0
     280:	0b be       	out	0x3b, r0	; 59
     282:	0f 90       	pop	r0
     284:	0f be       	out	0x3f, r0	; 63
     286:	0f 90       	pop	r0
     288:	1f 90       	pop	r1
     28a:	18 95       	reti

0000028c <__vector_12>:

ISR(TIMER1_COMPA_vect)
{
     28c:	1f 92       	push	r1
     28e:	0f 92       	push	r0
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	0f 92       	push	r0
     294:	11 24       	eor	r1, r1
     296:	0b b6       	in	r0, 0x3b	; 59
     298:	0f 92       	push	r0
     29a:	2f 93       	push	r18
     29c:	3f 93       	push	r19
     29e:	4f 93       	push	r20
     2a0:	5f 93       	push	r21
     2a2:	6f 93       	push	r22
     2a4:	7f 93       	push	r23
     2a6:	8f 93       	push	r24
     2a8:	9f 93       	push	r25
     2aa:	af 93       	push	r26
     2ac:	bf 93       	push	r27
     2ae:	ef 93       	push	r30
     2b0:	ff 93       	push	r31
	if(iotTimer::iCallback1) (* iotTimer::iCallback1)();
     2b2:	e0 91 2f 07 	lds	r30, 0x072F
     2b6:	f0 91 30 07 	lds	r31, 0x0730
     2ba:	30 97       	sbiw	r30, 0x00	; 0
     2bc:	09 f0       	breq	.+2      	; 0x2c0 <__vector_12+0x34>
     2be:	09 95       	icall
}
     2c0:	ff 91       	pop	r31
     2c2:	ef 91       	pop	r30
     2c4:	bf 91       	pop	r27
     2c6:	af 91       	pop	r26
     2c8:	9f 91       	pop	r25
     2ca:	8f 91       	pop	r24
     2cc:	7f 91       	pop	r23
     2ce:	6f 91       	pop	r22
     2d0:	5f 91       	pop	r21
     2d2:	4f 91       	pop	r20
     2d4:	3f 91       	pop	r19
     2d6:	2f 91       	pop	r18
     2d8:	0f 90       	pop	r0
     2da:	0b be       	out	0x3b, r0	; 59
     2dc:	0f 90       	pop	r0
     2de:	0f be       	out	0x3f, r0	; 63
     2e0:	0f 90       	pop	r0
     2e2:	1f 90       	pop	r1
     2e4:	18 95       	reti

000002e6 <__vector_9>:

ISR(TIMER2_COMP_vect)
{
     2e6:	1f 92       	push	r1
     2e8:	0f 92       	push	r0
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	0f 92       	push	r0
     2ee:	11 24       	eor	r1, r1
     2f0:	0b b6       	in	r0, 0x3b	; 59
     2f2:	0f 92       	push	r0
     2f4:	2f 93       	push	r18
     2f6:	3f 93       	push	r19
     2f8:	4f 93       	push	r20
     2fa:	5f 93       	push	r21
     2fc:	6f 93       	push	r22
     2fe:	7f 93       	push	r23
     300:	8f 93       	push	r24
     302:	9f 93       	push	r25
     304:	af 93       	push	r26
     306:	bf 93       	push	r27
     308:	ef 93       	push	r30
     30a:	ff 93       	push	r31
	if(iotTimer::iCallback2) (* iotTimer::iCallback2)();
     30c:	e0 91 2d 07 	lds	r30, 0x072D
     310:	f0 91 2e 07 	lds	r31, 0x072E
     314:	30 97       	sbiw	r30, 0x00	; 0
     316:	09 f0       	breq	.+2      	; 0x31a <__vector_9+0x34>
     318:	09 95       	icall
}
     31a:	ff 91       	pop	r31
     31c:	ef 91       	pop	r30
     31e:	bf 91       	pop	r27
     320:	af 91       	pop	r26
     322:	9f 91       	pop	r25
     324:	8f 91       	pop	r24
     326:	7f 91       	pop	r23
     328:	6f 91       	pop	r22
     32a:	5f 91       	pop	r21
     32c:	4f 91       	pop	r20
     32e:	3f 91       	pop	r19
     330:	2f 91       	pop	r18
     332:	0f 90       	pop	r0
     334:	0b be       	out	0x3b, r0	; 59
     336:	0f 90       	pop	r0
     338:	0f be       	out	0x3f, r0	; 63
     33a:	0f 90       	pop	r0
     33c:	1f 90       	pop	r1
     33e:	18 95       	reti

00000340 <__vector_26>:

ISR(TIMER3_COMPA_vect)
{
     340:	1f 92       	push	r1
     342:	0f 92       	push	r0
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	0f 92       	push	r0
     348:	11 24       	eor	r1, r1
     34a:	0b b6       	in	r0, 0x3b	; 59
     34c:	0f 92       	push	r0
     34e:	2f 93       	push	r18
     350:	3f 93       	push	r19
     352:	4f 93       	push	r20
     354:	5f 93       	push	r21
     356:	6f 93       	push	r22
     358:	7f 93       	push	r23
     35a:	8f 93       	push	r24
     35c:	9f 93       	push	r25
     35e:	af 93       	push	r26
     360:	bf 93       	push	r27
     362:	ef 93       	push	r30
     364:	ff 93       	push	r31
	if(iotTimer::iCallback3) (* iotTimer::iCallback3)();
     366:	e0 91 2b 07 	lds	r30, 0x072B
     36a:	f0 91 2c 07 	lds	r31, 0x072C
     36e:	30 97       	sbiw	r30, 0x00	; 0
     370:	09 f0       	breq	.+2      	; 0x374 <__vector_26+0x34>
     372:	09 95       	icall
}
     374:	ff 91       	pop	r31
     376:	ef 91       	pop	r30
     378:	bf 91       	pop	r27
     37a:	af 91       	pop	r26
     37c:	9f 91       	pop	r25
     37e:	8f 91       	pop	r24
     380:	7f 91       	pop	r23
     382:	6f 91       	pop	r22
     384:	5f 91       	pop	r21
     386:	4f 91       	pop	r20
     388:	3f 91       	pop	r19
     38a:	2f 91       	pop	r18
     38c:	0f 90       	pop	r0
     38e:	0b be       	out	0x3b, r0	; 59
     390:	0f 90       	pop	r0
     392:	0f be       	out	0x3f, r0	; 63
     394:	0f 90       	pop	r0
     396:	1f 90       	pop	r1
     398:	18 95       	reti

0000039a <__vector_18>:

void	(* iotUart::irx0Callback) (void) = (void (*) (void)) NULL;
void	(* iotUart::irx1Callback) (void) = (void (*) (void)) NULL;

ISR(USART0_RX_vect)
{
     39a:	1f 92       	push	r1
     39c:	0f 92       	push	r0
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	0f 92       	push	r0
     3a2:	11 24       	eor	r1, r1
     3a4:	0b b6       	in	r0, 0x3b	; 59
     3a6:	0f 92       	push	r0
     3a8:	2f 93       	push	r18
     3aa:	3f 93       	push	r19
     3ac:	8f 93       	push	r24
     3ae:	9f 93       	push	r25
     3b0:	ef 93       	push	r30
     3b2:	ff 93       	push	r31
	if((iotUart::irx0Head + 1) % iotcUartBuffSize != iotUart::irx0Tail) {
     3b4:	20 91 28 07 	lds	r18, 0x0728
     3b8:	80 91 27 07 	lds	r24, 0x0727
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	2f 5f       	subi	r18, 0xFF	; 255
     3c0:	3f 4f       	sbci	r19, 0xFF	; 255
     3c2:	2f 77       	andi	r18, 0x7F	; 127
     3c4:	30 78       	andi	r19, 0x80	; 128
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	28 17       	cp	r18, r24
     3ca:	39 07       	cpc	r19, r25
     3cc:	91 f0       	breq	.+36     	; 0x3f2 <__vector_18+0x58>
		// buffer is not full.
		iotUart::irx0Buff[iotUart::irx0Head] = UDR0;
     3ce:	90 91 28 07 	lds	r25, 0x0728
     3d2:	8c b1       	in	r24, 0x0c	; 12
     3d4:	e0 91 23 07 	lds	r30, 0x0723
     3d8:	f0 91 24 07 	lds	r31, 0x0724
     3dc:	e9 0f       	add	r30, r25
     3de:	f1 1d       	adc	r31, r1
     3e0:	80 83       	st	Z, r24
		iotUart::irx0Head = (iotUart::irx0Head + 1) % iotcUartBuffSize;
     3e2:	80 91 28 07 	lds	r24, 0x0728
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	01 96       	adiw	r24, 0x01	; 1
     3ea:	8f 77       	andi	r24, 0x7F	; 127
     3ec:	90 78       	andi	r25, 0x80	; 128
     3ee:	80 93 28 07 	sts	0x0728, r24
	}	// else buffer overflows! - chars are being lost.
}
     3f2:	ff 91       	pop	r31
     3f4:	ef 91       	pop	r30
     3f6:	9f 91       	pop	r25
     3f8:	8f 91       	pop	r24
     3fa:	3f 91       	pop	r19
     3fc:	2f 91       	pop	r18
     3fe:	0f 90       	pop	r0
     400:	0b be       	out	0x3b, r0	; 59
     402:	0f 90       	pop	r0
     404:	0f be       	out	0x3f, r0	; 63
     406:	0f 90       	pop	r0
     408:	1f 90       	pop	r1
     40a:	18 95       	reti

0000040c <__vector_30>:

ISR(USART1_RX_vect)
{
     40c:	1f 92       	push	r1
     40e:	0f 92       	push	r0
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	0f 92       	push	r0
     414:	11 24       	eor	r1, r1
     416:	0b b6       	in	r0, 0x3b	; 59
     418:	0f 92       	push	r0
     41a:	2f 93       	push	r18
     41c:	3f 93       	push	r19
     41e:	8f 93       	push	r24
     420:	9f 93       	push	r25
     422:	ef 93       	push	r30
     424:	ff 93       	push	r31
	if((iotUart::irx1Head + 1) % iotcUartBuffSize != iotUart::irx1Tail) {
     426:	20 91 20 07 	lds	r18, 0x0720
     42a:	80 91 1f 07 	lds	r24, 0x071F
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	2f 5f       	subi	r18, 0xFF	; 255
     432:	3f 4f       	sbci	r19, 0xFF	; 255
     434:	2f 77       	andi	r18, 0x7F	; 127
     436:	30 78       	andi	r19, 0x80	; 128
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	28 17       	cp	r18, r24
     43c:	39 07       	cpc	r19, r25
     43e:	99 f0       	breq	.+38     	; 0x466 <__vector_30+0x5a>
		// buffer is not full.
		iotUart::irx1Buff[iotUart::irx1Head] = UDR1;
     440:	90 91 20 07 	lds	r25, 0x0720
     444:	80 91 9c 00 	lds	r24, 0x009C
     448:	e0 91 1b 07 	lds	r30, 0x071B
     44c:	f0 91 1c 07 	lds	r31, 0x071C
     450:	e9 0f       	add	r30, r25
     452:	f1 1d       	adc	r31, r1
     454:	80 83       	st	Z, r24
		iotUart::irx1Head = (iotUart::irx1Head + 1) % iotcUartBuffSize;
     456:	80 91 20 07 	lds	r24, 0x0720
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	8f 77       	andi	r24, 0x7F	; 127
     460:	90 78       	andi	r25, 0x80	; 128
     462:	80 93 20 07 	sts	0x0720, r24
	}	// else buffer overflows! - chars are being lost.
}
     466:	ff 91       	pop	r31
     468:	ef 91       	pop	r30
     46a:	9f 91       	pop	r25
     46c:	8f 91       	pop	r24
     46e:	3f 91       	pop	r19
     470:	2f 91       	pop	r18
     472:	0f 90       	pop	r0
     474:	0b be       	out	0x3b, r0	; 59
     476:	0f 90       	pop	r0
     478:	0f be       	out	0x3f, r0	; 63
     47a:	0f 90       	pop	r0
     47c:	1f 90       	pop	r1
     47e:	18 95       	reti

00000480 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE>:
			F_CPU * iotcIrUSecPerTick / 1000000);
}
iotIrReceiver::~iotIrReceiver() {
	delete iDecoder; iDecoder = (iotIrDecoder *) NULL;
	if(!iotIrTransmitter::iTimer) delete iTimer;
	iTimer = (iotTimer *) NULL;
     480:	cf 93       	push	r28
     482:	c6 2f       	mov	r28, r22
     484:	80 91 37 07 	lds	r24, 0x0737
     488:	90 91 38 07 	lds	r25, 0x0738
     48c:	89 2b       	or	r24, r25
     48e:	09 f0       	breq	.+2      	; 0x492 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0x12>
     490:	63 c0       	rjmp	.+198    	; 0x558 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0xd8>
     492:	85 ed       	ldi	r24, 0xD5	; 213
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	97 de       	rcall	.-722    	; 0x1c6 <_Znwj>
     498:	90 93 38 07 	sts	0x0738, r25
     49c:	80 93 37 07 	sts	0x0737, r24
     4a0:	80 91 33 07 	lds	r24, 0x0733
     4a4:	90 91 34 07 	lds	r25, 0x0734
     4a8:	00 97       	sbiw	r24, 0x00	; 0
     4aa:	29 f0       	breq	.+10     	; 0x4b6 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0x36>
     4ac:	90 93 36 07 	sts	0x0736, r25
     4b0:	80 93 35 07 	sts	0x0735, r24
     4b4:	51 c0       	rjmp	.+162    	; 0x558 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0xd8>
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	85 de       	rcall	.-758    	; 0x1c6 <_Znwj>
     4bc:	fc 01       	movw	r30, r24
     4be:	10 82       	st	Z, r1
     4c0:	c2 30       	cpi	r28, 0x02	; 2
     4c2:	a1 f0       	breq	.+40     	; 0x4ec <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0x6c>
     4c4:	18 f4       	brcc	.+6      	; 0x4cc <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0x4c>
     4c6:	c1 30       	cpi	r28, 0x01	; 1
     4c8:	31 f0       	breq	.+12     	; 0x4d6 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0x56>
     4ca:	42 c0       	rjmp	.+132    	; 0x550 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0xd0>
     4cc:	c3 30       	cpi	r28, 0x03	; 3
     4ce:	e9 f0       	breq	.+58     	; 0x50a <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0x8a>
     4d0:	c4 30       	cpi	r28, 0x04	; 4
     4d2:	31 f1       	breq	.+76     	; 0x520 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0xa0>
     4d4:	3d c0       	rjmp	.+122    	; 0x550 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0xd0>
     4d6:	23 b7       	in	r18, 0x33	; 51
     4d8:	27 70       	andi	r18, 0x07	; 7
     4da:	d1 f5       	brne	.+116    	; 0x550 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0xd0>
     4dc:	12 be       	out	0x32, r1	; 50
     4de:	20 e2       	ldi	r18, 0x20	; 32
     4e0:	21 bf       	out	0x31, r18	; 49
     4e2:	23 b7       	in	r18, 0x33	; 51
     4e4:	20 7f       	andi	r18, 0xF0	; 240
     4e6:	29 60       	ori	r18, 0x09	; 9
     4e8:	23 bf       	out	0x33, r18	; 51
     4ea:	30 c0       	rjmp	.+96     	; 0x54c <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0xcc>
     4ec:	2e b5       	in	r18, 0x2e	; 46
     4ee:	27 70       	andi	r18, 0x07	; 7
     4f0:	79 f5       	brne	.+94     	; 0x550 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0xd0>
     4f2:	1d bc       	out	0x2d, r1	; 45
     4f4:	1c bc       	out	0x2c, r1	; 44
     4f6:	20 e2       	ldi	r18, 0x20	; 32
     4f8:	33 e0       	ldi	r19, 0x03	; 3
     4fa:	3b bd       	out	0x2b, r19	; 43
     4fc:	2a bd       	out	0x2a, r18	; 42
     4fe:	1f bc       	out	0x2f, r1	; 47
     500:	2e b5       	in	r18, 0x2e	; 46
     502:	20 7f       	andi	r18, 0xF0	; 240
     504:	29 60       	ori	r18, 0x09	; 9
     506:	2e bd       	out	0x2e, r18	; 46
     508:	21 c0       	rjmp	.+66     	; 0x54c <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0xcc>
     50a:	25 b5       	in	r18, 0x25	; 37
     50c:	27 70       	andi	r18, 0x07	; 7
     50e:	01 f5       	brne	.+64     	; 0x550 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0xd0>
     510:	14 bc       	out	0x24, r1	; 36
     512:	20 e2       	ldi	r18, 0x20	; 32
     514:	23 bd       	out	0x23, r18	; 35
     516:	25 b5       	in	r18, 0x25	; 37
     518:	20 7f       	andi	r18, 0xF0	; 240
     51a:	29 60       	ori	r18, 0x09	; 9
     51c:	25 bd       	out	0x25, r18	; 37
     51e:	16 c0       	rjmp	.+44     	; 0x54c <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0xcc>
     520:	20 91 8a 00 	lds	r18, 0x008A
     524:	27 70       	andi	r18, 0x07	; 7
     526:	a1 f4       	brne	.+40     	; 0x550 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE+0xd0>
     528:	10 92 89 00 	sts	0x0089, r1
     52c:	10 92 88 00 	sts	0x0088, r1
     530:	20 e2       	ldi	r18, 0x20	; 32
     532:	33 e0       	ldi	r19, 0x03	; 3
     534:	30 93 87 00 	sts	0x0087, r19
     538:	20 93 86 00 	sts	0x0086, r18
     53c:	10 92 8b 00 	sts	0x008B, r1
     540:	ea e8       	ldi	r30, 0x8A	; 138
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	20 81       	ld	r18, Z
     546:	20 7f       	andi	r18, 0xF0	; 240
     548:	29 60       	ori	r18, 0x09	; 9
     54a:	20 83       	st	Z, r18
     54c:	fc 01       	movw	r30, r24
     54e:	c0 83       	st	Z, r28
     550:	90 93 36 07 	sts	0x0736, r25
     554:	80 93 35 07 	sts	0x0735, r24
     558:	cf 91       	pop	r28
     55a:	08 95       	ret

0000055c <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE>:

//-----------------------------------------------------------------------------
//	iotIrRcTransmitter::iotIrRcTransmitter -
//	iotIrRcTransmitter::~iotIrTransmitter -
//-----------------------------------------------------------------------------
iotIrTransmitter::iotIrTransmitter(iotTimer::iotTimerId aTimerId) {
     55c:	cf 93       	push	r28
     55e:	c6 2f       	mov	r28, r22
	if(iotIrReceiver::iTimer) iTimer = iotIrReceiver::iTimer;
     560:	80 91 35 07 	lds	r24, 0x0735
     564:	90 91 36 07 	lds	r25, 0x0736
     568:	00 97       	sbiw	r24, 0x00	; 0
     56a:	29 f0       	breq	.+10     	; 0x576 <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0x1a>
     56c:	90 93 34 07 	sts	0x0734, r25
     570:	80 93 33 07 	sts	0x0733, r24
     574:	51 c0       	rjmp	.+162    	; 0x618 <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0xbc>
	else
		iTimer = new iotTimer(aTimerId, iotTimer::iotcPsd1,
			F_CPU * iotcIrUSecPerTick / 1000000);
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	25 de       	rcall	.-950    	; 0x1c6 <_Znwj>
		typedef enum {		// 32 & 128 only for 8-bit counters 0 & 2.
			iotcPsdNo, iotcPsd1, iotcPsd8, iotcPsd32, iotcPsd64, iotcPsd128,
			iotcPsd256, iotcPsd1024
		} iotTimerPsd;
		iotTimer(iotTimerId aId, iotTimerPsd aPsd, unsigned int aCount) {
			iId = iotcTimerNone;
     57c:	fc 01       	movw	r30, r24
     57e:	10 82       	st	Z, r1
					case iotcPsd256: psd = 4; break;
					case iotcPsd1024: psd = 5; break;
					default: return;
				}
			}
			switch(aId) {
     580:	c2 30       	cpi	r28, 0x02	; 2
     582:	a1 f0       	breq	.+40     	; 0x5ac <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0x50>
     584:	18 f4       	brcc	.+6      	; 0x58c <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0x30>
     586:	c1 30       	cpi	r28, 0x01	; 1
     588:	31 f0       	breq	.+12     	; 0x596 <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0x3a>
     58a:	42 c0       	rjmp	.+132    	; 0x610 <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0xb4>
     58c:	c3 30       	cpi	r28, 0x03	; 3
     58e:	e9 f0       	breq	.+58     	; 0x5ca <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0x6e>
     590:	c4 30       	cpi	r28, 0x04	; 4
     592:	31 f1       	breq	.+76     	; 0x5e0 <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0x84>
     594:	3d c0       	rjmp	.+122    	; 0x610 <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0xb4>
				case iotcTimer0:
					if((TCCR0 & 0x07) != 0) return;
     596:	23 b7       	in	r18, 0x33	; 51
     598:	27 70       	andi	r18, 0x07	; 7
     59a:	d1 f5       	brne	.+116    	; 0x610 <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0xb4>
					TCNT0 = 0; OCR0 = aCount & 0xff; 
     59c:	12 be       	out	0x32, r1	; 50
     59e:	20 e2       	ldi	r18, 0x20	; 32
     5a0:	21 bf       	out	0x31, r18	; 49
					TCCR0 = (TCCR0 & ~(0x07)) | (1 << WGM01) | psd;
     5a2:	23 b7       	in	r18, 0x33	; 51
     5a4:	20 7f       	andi	r18, 0xF0	; 240
     5a6:	29 60       	ori	r18, 0x09	; 9
     5a8:	23 bf       	out	0x33, r18	; 51
     5aa:	30 c0       	rjmp	.+96     	; 0x60c <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0xb0>
					break;
				case iotcTimer1:
					if((TCCR1B & 0x07) != 0) return;
     5ac:	2e b5       	in	r18, 0x2e	; 46
     5ae:	27 70       	andi	r18, 0x07	; 7
     5b0:	79 f5       	brne	.+94     	; 0x610 <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0xb4>
					TCNT1 = 0; OCR1A = aCount; TCCR1A = 0;
     5b2:	1d bc       	out	0x2d, r1	; 45
     5b4:	1c bc       	out	0x2c, r1	; 44
     5b6:	20 e2       	ldi	r18, 0x20	; 32
     5b8:	33 e0       	ldi	r19, 0x03	; 3
     5ba:	3b bd       	out	0x2b, r19	; 43
     5bc:	2a bd       	out	0x2a, r18	; 42
     5be:	1f bc       	out	0x2f, r1	; 47
					TCCR1B = (TCCR1B & ~(0x07)) | (1 << WGM12) | psd;
     5c0:	2e b5       	in	r18, 0x2e	; 46
     5c2:	20 7f       	andi	r18, 0xF0	; 240
     5c4:	29 60       	ori	r18, 0x09	; 9
     5c6:	2e bd       	out	0x2e, r18	; 46
     5c8:	21 c0       	rjmp	.+66     	; 0x60c <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0xb0>
					break;
				case iotcTimer2:
					if((TCCR2 & 0x07) != 0) return;
     5ca:	25 b5       	in	r18, 0x25	; 37
     5cc:	27 70       	andi	r18, 0x07	; 7
     5ce:	01 f5       	brne	.+64     	; 0x610 <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0xb4>
					TCNT2 = 0; OCR2 = aCount & 0xff;
     5d0:	14 bc       	out	0x24, r1	; 36
     5d2:	20 e2       	ldi	r18, 0x20	; 32
     5d4:	23 bd       	out	0x23, r18	; 35
					TCCR2 = (TCCR2 & ~(0x07)) | (1 << WGM21) | psd;
     5d6:	25 b5       	in	r18, 0x25	; 37
     5d8:	20 7f       	andi	r18, 0xF0	; 240
     5da:	29 60       	ori	r18, 0x09	; 9
     5dc:	25 bd       	out	0x25, r18	; 37
     5de:	16 c0       	rjmp	.+44     	; 0x60c <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0xb0>
					break;
				case iotcTimer3:
					if((TCCR3B & 0x07) != 0) return;
     5e0:	20 91 8a 00 	lds	r18, 0x008A
     5e4:	27 70       	andi	r18, 0x07	; 7
     5e6:	a1 f4       	brne	.+40     	; 0x610 <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE+0xb4>
					TCNT3 = 0; OCR3A = aCount; TCCR3A = 0;
     5e8:	10 92 89 00 	sts	0x0089, r1
     5ec:	10 92 88 00 	sts	0x0088, r1
     5f0:	20 e2       	ldi	r18, 0x20	; 32
     5f2:	33 e0       	ldi	r19, 0x03	; 3
     5f4:	30 93 87 00 	sts	0x0087, r19
     5f8:	20 93 86 00 	sts	0x0086, r18
     5fc:	10 92 8b 00 	sts	0x008B, r1
					TCCR3B = (TCCR3B & ~(0x07)) | (1 << WGM32) | psd;
     600:	ea e8       	ldi	r30, 0x8A	; 138
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	20 81       	ld	r18, Z
     606:	20 7f       	andi	r18, 0xF0	; 240
     608:	29 60       	ori	r18, 0x09	; 9
     60a:	20 83       	st	Z, r18
					break;
				default: return;
			}
			iId = aId;
     60c:	fc 01       	movw	r30, r24
     60e:	c0 83       	st	Z, r28
     610:	90 93 34 07 	sts	0x0734, r25
     614:	80 93 33 07 	sts	0x0733, r24
}
     618:	cf 91       	pop	r28
     61a:	08 95       	ret

0000061c <_ZN11iotTerminal7putCharEcP6__file>:
			if(iUart) iUart->processOne();
		}
		static int
		putChar(char c, FILE *f)
		{
			if(iUart) return(iUart->putChar(c));
     61c:	e0 91 15 07 	lds	r30, 0x0715
     620:	f0 91 16 07 	lds	r31, 0x0716
     624:	30 97       	sbiw	r30, 0x00	; 0
     626:	09 f4       	brne	.+2      	; 0x62a <_ZN11iotTerminal7putCharEcP6__file+0xe>
     628:	9e c0       	rjmp	.+316    	; 0x766 <_ZN11iotTerminal7putCharEcP6__file+0x14a>
				iotmAtomic(itx1Tail = (itx1Tail + 1) % iotcUartBuffSize);
			}
		}
		int
		putChar(char c) {
			if(iId == iotcUart0) {
     62a:	90 81       	ld	r25, Z
     62c:	91 30       	cpi	r25, 0x01	; 1
     62e:	09 f0       	breq	.+2      	; 0x632 <_ZN11iotTerminal7putCharEcP6__file+0x16>
     630:	46 c0       	rjmp	.+140    	; 0x6be <_ZN11iotTerminal7putCharEcP6__file+0xa2>
				if(itx0Head == itx0Tail) {
     632:	20 91 2a 07 	lds	r18, 0x072A
     636:	90 91 29 07 	lds	r25, 0x0729
     63a:	29 13       	cpse	r18, r25
     63c:	05 c0       	rjmp	.+10     	; 0x648 <_ZN11iotTerminal7putCharEcP6__file+0x2c>
					// buffer empty
					if(UCSR0A & (1 << UDRE)) {		// register empty
     63e:	5d 9b       	sbis	0x0b, 5	; 11
     640:	28 c0       	rjmp	.+80     	; 0x692 <_ZN11iotTerminal7putCharEcP6__file+0x76>
						UDR0 = c;
     642:	8c b9       	out	0x0c, r24	; 12
						return(c);	
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	08 95       	ret
					}
				} else if((itx0Head + 1) % iotcUartBuffSize == itx0Tail) {
     648:	40 91 2a 07 	lds	r20, 0x072A
     64c:	20 91 29 07 	lds	r18, 0x0729
     650:	50 e0       	ldi	r21, 0x00	; 0
     652:	4f 5f       	subi	r20, 0xFF	; 255
     654:	5f 4f       	sbci	r21, 0xFF	; 255
     656:	4f 77       	andi	r20, 0x7F	; 127
     658:	50 78       	andi	r21, 0x80	; 128
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	42 17       	cp	r20, r18
     65e:	53 07       	cpc	r21, r19
     660:	c1 f4       	brne	.+48     	; 0x692 <_ZN11iotTerminal7putCharEcP6__file+0x76>
					// buffer full
					// wait until the data register becomes empty.
					while(!(UCSR0A & (1 << UDRE))) ;
     662:	5d 9b       	sbis	0x0b, 5	; 11
     664:	fe cf       	rjmp	.-4      	; 0x662 <_ZN11iotTerminal7putCharEcP6__file+0x46>
					UDR0 = itx0Buff[itx0Tail];
     666:	90 91 29 07 	lds	r25, 0x0729
     66a:	e0 91 25 07 	lds	r30, 0x0725
     66e:	f0 91 26 07 	lds	r31, 0x0726
     672:	e9 0f       	add	r30, r25
     674:	f1 1d       	adc	r31, r1
     676:	90 81       	ld	r25, Z
     678:	9c b9       	out	0x0c, r25	; 12
					iotmAtomic(itx0Tail = (itx0Tail + 1) % iotcUartBuffSize);
     67a:	9f b7       	in	r25, 0x3f	; 63
     67c:	f8 94       	cli
     67e:	20 91 29 07 	lds	r18, 0x0729
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	2f 5f       	subi	r18, 0xFF	; 255
     686:	3f 4f       	sbci	r19, 0xFF	; 255
     688:	2f 77       	andi	r18, 0x7F	; 127
     68a:	30 78       	andi	r19, 0x80	; 128
     68c:	20 93 29 07 	sts	0x0729, r18
     690:	9f bf       	out	0x3f, r25	; 63
				}
				itx0Buff[itx0Head] = c;
     692:	90 91 2a 07 	lds	r25, 0x072A
     696:	e0 91 25 07 	lds	r30, 0x0725
     69a:	f0 91 26 07 	lds	r31, 0x0726
     69e:	e9 0f       	add	r30, r25
     6a0:	f1 1d       	adc	r31, r1
     6a2:	80 83       	st	Z, r24
				iotmAtomic(itx0Head = (itx0Head + 1) % iotcUartBuffSize);
     6a4:	9f b7       	in	r25, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	20 91 2a 07 	lds	r18, 0x072A
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	2f 5f       	subi	r18, 0xFF	; 255
     6b0:	3f 4f       	sbci	r19, 0xFF	; 255
     6b2:	2f 77       	andi	r18, 0x7F	; 127
     6b4:	30 78       	andi	r19, 0x80	; 128
     6b6:	20 93 2a 07 	sts	0x072A, r18
     6ba:	9f bf       	out	0x3f, r25	; 63
     6bc:	4f c0       	rjmp	.+158    	; 0x75c <_ZN11iotTerminal7putCharEcP6__file+0x140>
			} else if(iId == iotcUart1) {
     6be:	92 30       	cpi	r25, 0x02	; 2
     6c0:	09 f0       	breq	.+2      	; 0x6c4 <_ZN11iotTerminal7putCharEcP6__file+0xa8>
     6c2:	4e c0       	rjmp	.+156    	; 0x760 <_ZN11iotTerminal7putCharEcP6__file+0x144>
				if(itx1Head == itx1Tail) {
     6c4:	20 91 22 07 	lds	r18, 0x0722
     6c8:	90 91 21 07 	lds	r25, 0x0721
     6cc:	29 13       	cpse	r18, r25
     6ce:	08 c0       	rjmp	.+16     	; 0x6e0 <_ZN11iotTerminal7putCharEcP6__file+0xc4>
					// buffer empty
					if(UCSR1A & (1 << UDRE)) {		// register empty
     6d0:	90 91 9b 00 	lds	r25, 0x009B
     6d4:	95 ff       	sbrs	r25, 5
     6d6:	2d c0       	rjmp	.+90     	; 0x732 <_ZN11iotTerminal7putCharEcP6__file+0x116>
						UDR1 = c;
     6d8:	80 93 9c 00 	sts	0x009C, r24
						return(c);
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	08 95       	ret
					}
				} else if((itx1Head + 1) % iotcUartBuffSize == itx1Tail) {
     6e0:	40 91 22 07 	lds	r20, 0x0722
     6e4:	20 91 21 07 	lds	r18, 0x0721
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	4f 5f       	subi	r20, 0xFF	; 255
     6ec:	5f 4f       	sbci	r21, 0xFF	; 255
     6ee:	4f 77       	andi	r20, 0x7F	; 127
     6f0:	50 78       	andi	r21, 0x80	; 128
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	42 17       	cp	r20, r18
     6f6:	53 07       	cpc	r21, r19
     6f8:	e1 f4       	brne	.+56     	; 0x732 <_ZN11iotTerminal7putCharEcP6__file+0x116>
					// buffer full
					// wait until the data register becomes empty.
					while(!(UCSR1A & (1 << UDRE))) ;
     6fa:	eb e9       	ldi	r30, 0x9B	; 155
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	90 81       	ld	r25, Z
     700:	95 ff       	sbrs	r25, 5
     702:	fd cf       	rjmp	.-6      	; 0x6fe <_ZN11iotTerminal7putCharEcP6__file+0xe2>
					UDR1 = itx1Buff[itx1Tail];
     704:	90 91 21 07 	lds	r25, 0x0721
     708:	e0 91 1d 07 	lds	r30, 0x071D
     70c:	f0 91 1e 07 	lds	r31, 0x071E
     710:	e9 0f       	add	r30, r25
     712:	f1 1d       	adc	r31, r1
     714:	90 81       	ld	r25, Z
     716:	90 93 9c 00 	sts	0x009C, r25

					iotmAtomic(itx1Tail = (itx1Tail + 1) % iotcUartBuffSize);
     71a:	9f b7       	in	r25, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	20 91 21 07 	lds	r18, 0x0721
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	2f 5f       	subi	r18, 0xFF	; 255
     726:	3f 4f       	sbci	r19, 0xFF	; 255
     728:	2f 77       	andi	r18, 0x7F	; 127
     72a:	30 78       	andi	r19, 0x80	; 128
     72c:	20 93 21 07 	sts	0x0721, r18
     730:	9f bf       	out	0x3f, r25	; 63
				}
				itx1Buff[itx1Head] = c;
     732:	90 91 22 07 	lds	r25, 0x0722
     736:	e0 91 1d 07 	lds	r30, 0x071D
     73a:	f0 91 1e 07 	lds	r31, 0x071E
     73e:	e9 0f       	add	r30, r25
     740:	f1 1d       	adc	r31, r1
     742:	80 83       	st	Z, r24
				iotmAtomic(itx1Head = (itx1Head + 1) % iotcUartBuffSize);
     744:	9f b7       	in	r25, 0x3f	; 63
     746:	f8 94       	cli
     748:	20 91 22 07 	lds	r18, 0x0722
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	2f 5f       	subi	r18, 0xFF	; 255
     750:	3f 4f       	sbci	r19, 0xFF	; 255
     752:	2f 77       	andi	r18, 0x7F	; 127
     754:	30 78       	andi	r19, 0x80	; 128
     756:	20 93 22 07 	sts	0x0722, r18
     75a:	9f bf       	out	0x3f, r25	; 63
			} else return 0;
			return(c);
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	08 95       	ret

					iotmAtomic(itx1Tail = (itx1Tail + 1) % iotcUartBuffSize);
				}
				itx1Buff[itx1Head] = c;
				iotmAtomic(itx1Head = (itx1Head + 1) % iotcUartBuffSize);
			} else return 0;
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	90 e0       	ldi	r25, 0x00	; 0
			if(iUart) iUart->processOne();
		}
		static int
		putChar(char c, FILE *f)
		{
			if(iUart) return(iUart->putChar(c));
     764:	08 95       	ret
			return(-1);
     766:	8f ef       	ldi	r24, 0xFF	; 255
     768:	9f ef       	ldi	r25, 0xFF	; 255
		}
     76a:	08 95       	ret

0000076c <_ZN11iotTerminal11receiveLineEv>:
		{
			if(iUart) return(iUart->getChar());
			return(-1);
		}
		static void
		receiveLine() {
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
			if(!iUart) return;
     774:	80 91 15 07 	lds	r24, 0x0715
     778:	90 91 16 07 	lds	r25, 0x0716
     77c:	89 2b       	or	r24, r25
     77e:	09 f4       	brne	.+2      	; 0x782 <_ZN11iotTerminal11receiveLineEv+0x16>
     780:	ab c0       	rjmp	.+342    	; 0x8d8 <_ZN11iotTerminal11receiveLineEv+0x16c>
				c = irx0Buff[irx0Tail];
				iotmAtomic(irx0Tail = (irx0Tail + 1) % iotcUartBuffSize);
			} else if(iId == iotcUart1) {
				if(irx1Tail == irx1Head) {	// buffer empty
					// wait until the data is received.
					while((UCSR1A & (1 << RXC1)) == 0) ;
     782:	ab e9       	ldi	r26, 0x9B	; 155
     784:	b0 e0       	ldi	r27, 0x00	; 0
					return(UDR1);
     786:	cc e9       	ldi	r28, 0x9C	; 156
     788:	d0 e0       	ldi	r29, 0x00	; 0
			while(iUart->peekChar() > -1) {
				c = iUart->getChar();
				if(c == '\n') {
					iLine[iCurChar] = '\0';
					iLineToParse = iLine;
					iLine = (iLine == iLine1) ? iLine2 : iLine1;
     78a:	43 ee       	ldi	r20, 0xE3	; 227
     78c:	56 e0       	ldi	r21, 0x06	; 6
     78e:	61 eb       	ldi	r22, 0xB1	; 177
     790:	76 e0       	ldi	r23, 0x06	; 6
     792:	7b c0       	rjmp	.+246    	; 0x88a <_ZN11iotTerminal11receiveLineEv+0x11e>
		getChar(void) {
			char	c;
			if(iId == iotcUart0) {
				if(irx0Tail == irx0Head) {	// buffer empty
					// wait until the data is received.
					while((UCSR0A & (1 << RXC0)) == 0) ;
     794:	5f 9b       	sbis	0x0b, 7	; 11
     796:	fe cf       	rjmp	.-4      	; 0x794 <_ZN11iotTerminal11receiveLineEv+0x28>
					return(UDR0);
     798:	8c b1       	in	r24, 0x0c	; 12
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	32 c0       	rjmp	.+100    	; 0x802 <_ZN11iotTerminal11receiveLineEv+0x96>
				}
				c = irx0Buff[irx0Tail];
     79e:	80 91 27 07 	lds	r24, 0x0727
     7a2:	e0 91 23 07 	lds	r30, 0x0723
     7a6:	f0 91 24 07 	lds	r31, 0x0724
     7aa:	e8 0f       	add	r30, r24
     7ac:	f1 1d       	adc	r31, r1
     7ae:	80 81       	ld	r24, Z
				iotmAtomic(irx0Tail = (irx0Tail + 1) % iotcUartBuffSize);
     7b0:	9f b7       	in	r25, 0x3f	; 63
     7b2:	f8 94       	cli
     7b4:	20 91 27 07 	lds	r18, 0x0727
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	2f 5f       	subi	r18, 0xFF	; 255
     7bc:	3f 4f       	sbci	r19, 0xFF	; 255
     7be:	2f 77       	andi	r18, 0x7F	; 127
     7c0:	30 78       	andi	r19, 0x80	; 128
     7c2:	20 93 27 07 	sts	0x0727, r18
     7c6:	9f bf       	out	0x3f, r25	; 63
     7c8:	1b c0       	rjmp	.+54     	; 0x800 <_ZN11iotTerminal11receiveLineEv+0x94>
			} else if(iId == iotcUart1) {
				if(irx1Tail == irx1Head) {	// buffer empty
					// wait until the data is received.
					while((UCSR1A & (1 << RXC1)) == 0) ;
     7ca:	8c 91       	ld	r24, X
     7cc:	88 23       	and	r24, r24
     7ce:	ec f7       	brge	.-6      	; 0x7ca <_ZN11iotTerminal11receiveLineEv+0x5e>
					return(UDR1);
     7d0:	88 81       	ld	r24, Y
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	16 c0       	rjmp	.+44     	; 0x802 <_ZN11iotTerminal11receiveLineEv+0x96>
				}
				c = irx1Buff[irx1Tail];
     7d6:	80 91 1f 07 	lds	r24, 0x071F
     7da:	e0 91 1b 07 	lds	r30, 0x071B
     7de:	f0 91 1c 07 	lds	r31, 0x071C
     7e2:	e8 0f       	add	r30, r24
     7e4:	f1 1d       	adc	r31, r1
     7e6:	80 81       	ld	r24, Z
				iotmAtomic(irx1Tail = (irx1Tail + 1) % iotcUartBuffSize);
     7e8:	9f b7       	in	r25, 0x3f	; 63
     7ea:	f8 94       	cli
     7ec:	20 91 1f 07 	lds	r18, 0x071F
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	2f 5f       	subi	r18, 0xFF	; 255
     7f4:	3f 4f       	sbci	r19, 0xFF	; 255
     7f6:	2f 77       	andi	r18, 0x7F	; 127
     7f8:	30 78       	andi	r19, 0x80	; 128
     7fa:	20 93 1f 07 	sts	0x071F, r18
     7fe:	9f bf       	out	0x3f, r25	; 63
			} else return(-1);
			return(c);
     800:	90 e0       	ldi	r25, 0x00	; 0
			if(!iUart) return;
			
			int		c;
			while(iUart->peekChar() > -1) {
				c = iUart->getChar();
				if(c == '\n') {
     802:	8a 30       	cpi	r24, 0x0A	; 10
     804:	91 05       	cpc	r25, r1
     806:	21 f5       	brne	.+72     	; 0x850 <_ZN11iotTerminal11receiveLineEv+0xe4>
					iLine[iCurChar] = '\0';
     808:	e0 91 40 01 	lds	r30, 0x0140
     80c:	f0 91 41 01 	lds	r31, 0x0141
     810:	80 91 ad 06 	lds	r24, 0x06AD
     814:	90 91 ae 06 	lds	r25, 0x06AE
     818:	e8 0f       	add	r30, r24
     81a:	f9 1f       	adc	r31, r25
     81c:	10 82       	st	Z, r1
					iLineToParse = iLine;
     81e:	80 91 40 01 	lds	r24, 0x0140
     822:	90 91 41 01 	lds	r25, 0x0141
     826:	90 93 b0 06 	sts	0x06B0, r25
     82a:	80 93 af 06 	sts	0x06AF, r24
					iLine = (iLine == iLine1) ? iLine2 : iLine1;
     82e:	83 5e       	subi	r24, 0xE3	; 227
     830:	96 40       	sbci	r25, 0x06	; 6
     832:	19 f4       	brne	.+6      	; 0x83a <_ZN11iotTerminal11receiveLineEv+0xce>
     834:	96 2f       	mov	r25, r22
     836:	87 2f       	mov	r24, r23
     838:	02 c0       	rjmp	.+4      	; 0x83e <_ZN11iotTerminal11receiveLineEv+0xd2>
     83a:	94 2f       	mov	r25, r20
     83c:	85 2f       	mov	r24, r21
     83e:	90 93 40 01 	sts	0x0140, r25
     842:	80 93 41 01 	sts	0x0141, r24
					iCurChar = 0;
     846:	10 92 ae 06 	sts	0x06AE, r1
     84a:	10 92 ad 06 	sts	0x06AD, r1
     84e:	1d c0       	rjmp	.+58     	; 0x88a <_ZN11iotTerminal11receiveLineEv+0x11e>
				} else if(iCurChar < iotcMaxLine - 2) {
     850:	20 91 ad 06 	lds	r18, 0x06AD
     854:	30 91 ae 06 	lds	r19, 0x06AE
     858:	20 33       	cpi	r18, 0x30	; 48
     85a:	31 05       	cpc	r19, r1
     85c:	94 f4       	brge	.+36     	; 0x882 <_ZN11iotTerminal11receiveLineEv+0x116>
					if(c != '\r') iLine[iCurChar++] = c;
     85e:	8d 30       	cpi	r24, 0x0D	; 13
     860:	91 05       	cpc	r25, r1
     862:	99 f0       	breq	.+38     	; 0x88a <_ZN11iotTerminal11receiveLineEv+0x11e>
     864:	e0 91 40 01 	lds	r30, 0x0140
     868:	f0 91 41 01 	lds	r31, 0x0141
     86c:	89 01       	movw	r16, r18
     86e:	0f 5f       	subi	r16, 0xFF	; 255
     870:	1f 4f       	sbci	r17, 0xFF	; 255
     872:	10 93 ae 06 	sts	0x06AE, r17
     876:	00 93 ad 06 	sts	0x06AD, r16
     87a:	e2 0f       	add	r30, r18
     87c:	f3 1f       	adc	r31, r19
     87e:	80 83       	st	Z, r24
     880:	04 c0       	rjmp	.+8      	; 0x88a <_ZN11iotTerminal11receiveLineEv+0x11e>
				} else iCurChar = 0;	// line overflow - thrown away.
     882:	10 92 ae 06 	sts	0x06AE, r1
     886:	10 92 ad 06 	sts	0x06AD, r1
			} else return 0;
			return(c);
		}
		int
		peekChar(void) {
			if(iId == iotcUart0) {
     88a:	e0 91 15 07 	lds	r30, 0x0715
     88e:	f0 91 16 07 	lds	r31, 0x0716
     892:	80 81       	ld	r24, Z
     894:	81 30       	cpi	r24, 0x01	; 1
     896:	79 f4       	brne	.+30     	; 0x8b6 <_ZN11iotTerminal11receiveLineEv+0x14a>
				if(irx0Tail != irx0Head) return(irx0Buff[irx0Tail]);
     898:	90 91 27 07 	lds	r25, 0x0727
     89c:	80 91 28 07 	lds	r24, 0x0728
     8a0:	98 17       	cp	r25, r24
     8a2:	d1 f0       	breq	.+52     	; 0x8d8 <_ZN11iotTerminal11receiveLineEv+0x16c>
     8a4:	80 91 27 07 	lds	r24, 0x0727
		}
		int
		getChar(void) {
			char	c;
			if(iId == iotcUart0) {
				if(irx0Tail == irx0Head) {	// buffer empty
     8a8:	90 91 27 07 	lds	r25, 0x0727
     8ac:	80 91 28 07 	lds	r24, 0x0728
     8b0:	98 13       	cpse	r25, r24
     8b2:	75 cf       	rjmp	.-278    	; 0x79e <_ZN11iotTerminal11receiveLineEv+0x32>
     8b4:	6f cf       	rjmp	.-290    	; 0x794 <_ZN11iotTerminal11receiveLineEv+0x28>
		}
		int
		peekChar(void) {
			if(iId == iotcUart0) {
				if(irx0Tail != irx0Head) return(irx0Buff[irx0Tail]);
			} else if(iId == iotcUart1) {
     8b6:	82 30       	cpi	r24, 0x02	; 2
     8b8:	79 f4       	brne	.+30     	; 0x8d8 <_ZN11iotTerminal11receiveLineEv+0x16c>
				if(irx1Tail != irx1Head) return(irx1Buff[irx1Tail]);
     8ba:	90 91 1f 07 	lds	r25, 0x071F
     8be:	80 91 20 07 	lds	r24, 0x0720
     8c2:	98 17       	cp	r25, r24
     8c4:	49 f0       	breq	.+18     	; 0x8d8 <_ZN11iotTerminal11receiveLineEv+0x16c>
     8c6:	80 91 1f 07 	lds	r24, 0x071F
					return(UDR0);
				}
				c = irx0Buff[irx0Tail];
				iotmAtomic(irx0Tail = (irx0Tail + 1) % iotcUartBuffSize);
			} else if(iId == iotcUart1) {
				if(irx1Tail == irx1Head) {	// buffer empty
     8ca:	90 91 1f 07 	lds	r25, 0x071F
     8ce:	80 91 20 07 	lds	r24, 0x0720
     8d2:	98 13       	cpse	r25, r24
     8d4:	80 cf       	rjmp	.-256    	; 0x7d6 <_ZN11iotTerminal11receiveLineEv+0x6a>
     8d6:	79 cf       	rjmp	.-270    	; 0x7ca <_ZN11iotTerminal11receiveLineEv+0x5e>
					iCurChar = 0;
				} else if(iCurChar < iotcMaxLine - 2) {
					if(c != '\r') iLine[iCurChar++] = c;
				} else iCurChar = 0;	// line overflow - thrown away.
			}
		}
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	08 95       	ret

000008e2 <_ZN8iotServo9tick10kHzEv>:
			iotcServoDeltaDegree = 10
		};

		static void
		tick10kHz() {
			if(++in10kCycles == iAngle) {
     8e2:	80 91 37 05 	lds	r24, 0x0537
     8e6:	90 91 38 05 	lds	r25, 0x0538
     8ea:	01 96       	adiw	r24, 0x01	; 1
     8ec:	90 93 38 05 	sts	0x0538, r25
     8f0:	80 93 37 05 	sts	0x0537, r24
     8f4:	20 91 3e 01 	lds	r18, 0x013E
     8f8:	30 91 3f 01 	lds	r19, 0x013F
     8fc:	82 17       	cp	r24, r18
     8fe:	93 07       	cpc	r25, r19
     900:	59 f4       	brne	.+22     	; 0x918 <_ZN8iotServo9tick10kHzEv+0x36>
				*ipPort &= ~iPinMask;
     902:	e0 91 35 05 	lds	r30, 0x0535
     906:	f0 91 36 05 	lds	r31, 0x0536
     90a:	90 81       	ld	r25, Z
     90c:	80 91 34 05 	lds	r24, 0x0534
     910:	80 95       	com	r24
     912:	89 23       	and	r24, r25
     914:	80 83       	st	Z, r24
     916:	08 95       	ret
			} else if(in10kCycles == iotcServoPeriod) {
     918:	88 3c       	cpi	r24, 0xC8	; 200
     91a:	91 05       	cpc	r25, r1
     91c:	59 f4       	brne	.+22     	; 0x934 <_ZN8iotServo9tick10kHzEv+0x52>
				*ipPort = iPinMask;
     91e:	e0 91 35 05 	lds	r30, 0x0535
     922:	f0 91 36 05 	lds	r31, 0x0536
     926:	80 91 34 05 	lds	r24, 0x0534
     92a:	80 83       	st	Z, r24
				in10kCycles = 0;
     92c:	10 92 38 05 	sts	0x0538, r1
     930:	10 92 37 05 	sts	0x0537, r1
     934:	08 95       	ret

00000936 <_ZN8iotClock6updateEv>:
		static char			iMonthDays[12];
		static bool			iCharLcdCreated;
		
		static void
		update() {
			iSeconds++;
     936:	80 91 2e 05 	lds	r24, 0x052E
     93a:	90 91 2f 05 	lds	r25, 0x052F
     93e:	a0 91 30 05 	lds	r26, 0x0530
     942:	b0 91 31 05 	lds	r27, 0x0531
     946:	01 96       	adiw	r24, 0x01	; 1
     948:	a1 1d       	adc	r26, r1
     94a:	b1 1d       	adc	r27, r1
			if(iSeconds >= 31536000L) iSeconds = 0;
     94c:	80 38       	cpi	r24, 0x80	; 128
     94e:	23 e3       	ldi	r18, 0x33	; 51
     950:	92 07       	cpc	r25, r18
     952:	21 ee       	ldi	r18, 0xE1	; 225
     954:	a2 07       	cpc	r26, r18
     956:	21 e0       	ldi	r18, 0x01	; 1
     958:	b2 07       	cpc	r27, r18
     95a:	4c f4       	brge	.+18     	; 0x96e <_ZN8iotClock6updateEv+0x38>
		static char			iMonthDays[12];
		static bool			iCharLcdCreated;
		
		static void
		update() {
			iSeconds++;
     95c:	80 93 2e 05 	sts	0x052E, r24
     960:	90 93 2f 05 	sts	0x052F, r25
     964:	a0 93 30 05 	sts	0x0530, r26
     968:	b0 93 31 05 	sts	0x0531, r27
     96c:	08 c0       	rjmp	.+16     	; 0x97e <_ZN8iotClock6updateEv+0x48>
			if(iSeconds >= 31536000L) iSeconds = 0;
     96e:	10 92 2e 05 	sts	0x052E, r1
     972:	10 92 2f 05 	sts	0x052F, r1
     976:	10 92 30 05 	sts	0x0530, r1
     97a:	10 92 31 05 	sts	0x0531, r1
			iFlush = 1;
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	80 93 2b 05 	sts	0x052B, r24
     984:	08 95       	ret

00000986 <_ZN13iotIrReceiver12stateMachineEv>:
				return(iDecoder);
			return ((iotIrDecoder *) NULL);
		}

		static void
		stateMachine() {
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
					iCallback3 = (void (*)(void)) NULL; break;
				default: break;
			}
			iId = iotcTimerNone;
		}
		iotTimerId getId()		{ return(iId); }
     98a:	e0 91 35 07 	lds	r30, 0x0735
     98e:	f0 91 36 07 	lds	r31, 0x0736
			uint8_t	 data;
			// cf.) PB5(OC1A), PE3(OC3A) are used for IrLEDs.
			if(iTimer->getId() == iotTimer::iotcTimer1) {
     992:	80 81       	ld	r24, Z
     994:	82 30       	cpi	r24, 0x02	; 2
     996:	51 f4       	brne	.+20     	; 0x9ac <_ZN13iotIrReceiver12stateMachineEv+0x26>
				data = (PINB & (1 << PB4)) != 0;
     998:	86 b3       	in	r24, 0x16	; 22
				if(data) PORTB |= 0x08;
     99a:	84 fb       	bst	r24, 4
     99c:	22 27       	eor	r18, r18
     99e:	20 f9       	bld	r18, 0
     9a0:	84 ff       	sbrs	r24, 4
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <_ZN13iotIrReceiver12stateMachineEv+0x22>
     9a4:	c3 9a       	sbi	0x18, 3	; 24
     9a6:	0b c0       	rjmp	.+22     	; 0x9be <_ZN13iotIrReceiver12stateMachineEv+0x38>
				else PORTB &= ~0x08;
     9a8:	c3 98       	cbi	0x18, 3	; 24
     9aa:	09 c0       	rjmp	.+18     	; 0x9be <_ZN13iotIrReceiver12stateMachineEv+0x38>
			} else {			// iotTimer::iotcTimer3
				data = (PINE & (1 << PE2)) != 0;
     9ac:	81 b1       	in	r24, 0x01	; 1
				if(data) PORTE |= 0x80;
     9ae:	82 fb       	bst	r24, 2
     9b0:	22 27       	eor	r18, r18
     9b2:	20 f9       	bld	r18, 0
     9b4:	82 ff       	sbrs	r24, 2
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <_ZN13iotIrReceiver12stateMachineEv+0x36>
     9b8:	1f 9a       	sbi	0x03, 7	; 3
     9ba:	01 c0       	rjmp	.+2      	; 0x9be <_ZN13iotIrReceiver12stateMachineEv+0x38>
				else PORTE &= ~0x80;
     9bc:	1f 98       	cbi	0x03, 7	; 3
			}
			iDecoder->iTimer++;
     9be:	e0 91 37 07 	lds	r30, 0x0737
     9c2:	f0 91 38 07 	lds	r31, 0x0738
     9c6:	df 01       	movw	r26, r30
     9c8:	a5 53       	subi	r26, 0x35	; 53
     9ca:	bf 4f       	sbci	r27, 0xFF	; 255
     9cc:	8d 91       	ld	r24, X+
     9ce:	9c 91       	ld	r25, X
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	01 96       	adiw	r24, 0x01	; 1
     9d4:	11 96       	adiw	r26, 0x01	; 1
     9d6:	9c 93       	st	X, r25
     9d8:	8e 93       	st	-X, r24
			if(iDecoder->inIntervals >= iotcIrMaxIntervals)
     9da:	82 81       	ldd	r24, Z+2	; 0x02
     9dc:	84 36       	cpi	r24, 0x64	; 100
     9de:	10 f0       	brcs	.+4      	; 0x9e4 <_ZN13iotIrReceiver12stateMachineEv+0x5e>
				iDecoder->iState = iotcIrStateStop;
     9e0:	83 e0       	ldi	r24, 0x03	; 3
     9e2:	81 83       	std	Z+1, r24	; 0x01
			switch(iDecoder->iState) {
     9e4:	e0 91 37 07 	lds	r30, 0x0737
     9e8:	f0 91 38 07 	lds	r31, 0x0738
     9ec:	81 81       	ldd	r24, Z+1	; 0x01
     9ee:	81 30       	cpi	r24, 0x01	; 1
     9f0:	79 f1       	breq	.+94     	; 0xa50 <_ZN13iotIrReceiver12stateMachineEv+0xca>
     9f2:	38 f0       	brcs	.+14     	; 0xa02 <_ZN13iotIrReceiver12stateMachineEv+0x7c>
     9f4:	82 30       	cpi	r24, 0x02	; 2
     9f6:	09 f4       	brne	.+2      	; 0x9fa <_ZN13iotIrReceiver12stateMachineEv+0x74>
     9f8:	45 c0       	rjmp	.+138    	; 0xa84 <_ZN13iotIrReceiver12stateMachineEv+0xfe>
     9fa:	83 30       	cpi	r24, 0x03	; 3
     9fc:	09 f4       	brne	.+2      	; 0xa00 <_ZN13iotIrReceiver12stateMachineEv+0x7a>
     9fe:	66 c0       	rjmp	.+204    	; 0xacc <_ZN13iotIrReceiver12stateMachineEv+0x146>
     a00:	6b c0       	rjmp	.+214    	; 0xad8 <_ZN13iotIrReceiver12stateMachineEv+0x152>
				case iotcIrStateIdle:	// in the middle of a gap
					if(data == iotcIrMark) {
     a02:	21 11       	cpse	r18, r1
     a04:	69 c0       	rjmp	.+210    	; 0xad8 <_ZN13iotIrReceiver12stateMachineEv+0x152>
						if(iDecoder->iTimer < iotcIrGapTicks) {
     a06:	df 01       	movw	r26, r30
     a08:	a5 53       	subi	r26, 0x35	; 53
     a0a:	bf 4f       	sbci	r27, 0xFF	; 255
     a0c:	8d 91       	ld	r24, X+
     a0e:	9c 91       	ld	r25, X
     a10:	11 97       	sbiw	r26, 0x01	; 1
     a12:	84 36       	cpi	r24, 0x64	; 100
     a14:	91 05       	cpc	r25, r1
     a16:	20 f4       	brcc	.+8      	; 0xa20 <_ZN13iotIrReceiver12stateMachineEv+0x9a>
							// not big enough to be a gap.
							iDecoder->iTimer = 0;
     a18:	fd 01       	movw	r30, r26
     a1a:	11 82       	std	Z+1, r1	; 0x01
     a1c:	10 82       	st	Z, r1
     a1e:	5c c0       	rjmp	.+184    	; 0xad8 <_ZN13iotIrReceiver12stateMachineEv+0x152>
						} else {
							// gap just ended, record duration and start
							// recording transmission
							iDecoder->inIntervals = 0;
     a20:	12 82       	std	Z+2, r1	; 0x02
							iDecoder->iInterval[iDecoder->inIntervals++]
     a22:	c2 81       	ldd	r28, Z+2	; 0x02
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	8c 0f       	add	r24, r28
     a28:	82 83       	std	Z+2, r24	; 0x02
     a2a:	d0 e0       	ldi	r29, 0x00	; 0
								= iDecoder->iTimer;
     a2c:	df 01       	movw	r26, r30
     a2e:	a5 53       	subi	r26, 0x35	; 53
     a30:	bf 4f       	sbci	r27, 0xFF	; 255
     a32:	8d 91       	ld	r24, X+
     a34:	9c 91       	ld	r25, X
     a36:	11 97       	sbiw	r26, 0x01	; 1
     a38:	cc 0f       	add	r28, r28
     a3a:	dd 1f       	adc	r29, r29
     a3c:	ce 0f       	add	r28, r30
     a3e:	df 1f       	adc	r29, r31
     a40:	9c 83       	std	Y+4, r25	; 0x04
     a42:	8b 83       	std	Y+3, r24	; 0x03
							iDecoder->iTimer = 0;
     a44:	11 96       	adiw	r26, 0x01	; 1
     a46:	1c 92       	st	X, r1
     a48:	1e 92       	st	-X, r1
							iDecoder->iState = iotcIrStateMark;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	81 83       	std	Z+1, r24	; 0x01
     a4e:	44 c0       	rjmp	.+136    	; 0xad8 <_ZN13iotIrReceiver12stateMachineEv+0x152>
						}
					}
					break;
				case iotcIrStateMark:	// timing Mark
					if(data == iotcIrSpace) {
     a50:	21 30       	cpi	r18, 0x01	; 1
     a52:	09 f0       	breq	.+2      	; 0xa56 <_ZN13iotIrReceiver12stateMachineEv+0xd0>
     a54:	41 c0       	rjmp	.+130    	; 0xad8 <_ZN13iotIrReceiver12stateMachineEv+0x152>
						iDecoder->iInterval[iDecoder->inIntervals++]
     a56:	c2 81       	ldd	r28, Z+2	; 0x02
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	8c 0f       	add	r24, r28
     a5c:	82 83       	std	Z+2, r24	; 0x02
     a5e:	d0 e0       	ldi	r29, 0x00	; 0
							= iDecoder->iTimer;
     a60:	df 01       	movw	r26, r30
     a62:	a5 53       	subi	r26, 0x35	; 53
     a64:	bf 4f       	sbci	r27, 0xFF	; 255
     a66:	8d 91       	ld	r24, X+
     a68:	9c 91       	ld	r25, X
     a6a:	11 97       	sbiw	r26, 0x01	; 1
     a6c:	cc 0f       	add	r28, r28
     a6e:	dd 1f       	adc	r29, r29
     a70:	ce 0f       	add	r28, r30
     a72:	df 1f       	adc	r29, r31
     a74:	9c 83       	std	Y+4, r25	; 0x04
     a76:	8b 83       	std	Y+3, r24	; 0x03
						iDecoder->iTimer = 0;
     a78:	11 96       	adiw	r26, 0x01	; 1
     a7a:	1c 92       	st	X, r1
     a7c:	1e 92       	st	-X, r1
						iDecoder->iState = iotcIrStateSpace;
     a7e:	82 e0       	ldi	r24, 0x02	; 2
     a80:	81 83       	std	Z+1, r24	; 0x01
     a82:	2a c0       	rjmp	.+84     	; 0xad8 <_ZN13iotIrReceiver12stateMachineEv+0x152>
					}
					break;
				case iotcIrStateSpace:	// timing Space
					if(data == iotcIrMark) {	// Space just ended
     a84:	21 11       	cpse	r18, r1
     a86:	17 c0       	rjmp	.+46     	; 0xab6 <_ZN13iotIrReceiver12stateMachineEv+0x130>
						iDecoder->iInterval[iDecoder->inIntervals++]
     a88:	c2 81       	ldd	r28, Z+2	; 0x02
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	8c 0f       	add	r24, r28
     a8e:	82 83       	std	Z+2, r24	; 0x02
     a90:	d0 e0       	ldi	r29, 0x00	; 0
							= iDecoder->iTimer;
     a92:	df 01       	movw	r26, r30
     a94:	a5 53       	subi	r26, 0x35	; 53
     a96:	bf 4f       	sbci	r27, 0xFF	; 255
     a98:	8d 91       	ld	r24, X+
     a9a:	9c 91       	ld	r25, X
     a9c:	11 97       	sbiw	r26, 0x01	; 1
     a9e:	cc 0f       	add	r28, r28
     aa0:	dd 1f       	adc	r29, r29
     aa2:	ce 0f       	add	r28, r30
     aa4:	df 1f       	adc	r29, r31
     aa6:	9c 83       	std	Y+4, r25	; 0x04
     aa8:	8b 83       	std	Y+3, r24	; 0x03
						iDecoder->iTimer = 0;
     aaa:	11 96       	adiw	r26, 0x01	; 1
     aac:	1c 92       	st	X, r1
     aae:	1e 92       	st	-X, r1
						iDecoder->iState = iotcIrStateMark;
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	81 83       	std	Z+1, r24	; 0x01
     ab4:	11 c0       	rjmp	.+34     	; 0xad8 <_ZN13iotIrReceiver12stateMachineEv+0x152>
					} else {	// Space
						if(iDecoder->iTimer > iotcIrGapTicks) {
     ab6:	df 01       	movw	r26, r30
     ab8:	a5 53       	subi	r26, 0x35	; 53
     aba:	bf 4f       	sbci	r27, 0xFF	; 255
     abc:	8d 91       	ld	r24, X+
     abe:	9c 91       	ld	r25, X
     ac0:	85 36       	cpi	r24, 0x65	; 101
     ac2:	91 05       	cpc	r25, r1
     ac4:	48 f0       	brcs	.+18     	; 0xad8 <_ZN13iotIrReceiver12stateMachineEv+0x152>
							// big Space, indicates gap between codes.
							// mark current code as ready for processing.
							// switch to Stop. don't reset iTimer;
							// keep counting space width.
							iDecoder->iState = iotcIrStateStop;
     ac6:	83 e0       	ldi	r24, 0x03	; 3
     ac8:	81 83       	std	Z+1, r24	; 0x01
     aca:	06 c0       	rjmp	.+12     	; 0xad8 <_ZN13iotIrReceiver12stateMachineEv+0x152>
						}
					}
					break;
				case iotcIrStateStop:	// waiting, measuring gap
					if(data == iotcIrMark) {	// reset gap iTimer
     acc:	21 11       	cpse	r18, r1
     ace:	04 c0       	rjmp	.+8      	; 0xad8 <_ZN13iotIrReceiver12stateMachineEv+0x152>
						iDecoder->iTimer = 0;
     ad0:	e5 53       	subi	r30, 0x35	; 53
     ad2:	ff 4f       	sbci	r31, 0xFF	; 255
     ad4:	11 82       	std	Z+1, r1	; 0x01
     ad6:	10 82       	st	Z, r1
					}
					break;
			}
		}
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	08 95       	ret

00000ade <_ZL9toggleFanv>:

// DC Fan Motor
static void
toggleFan()
{
	if(FanCount > 0)
     ade:	80 91 3e 07 	lds	r24, 0x073E
     ae2:	90 91 3f 07 	lds	r25, 0x073F
     ae6:	18 16       	cp	r1, r24
     ae8:	19 06       	cpc	r1, r25
     aea:	34 f4       	brge	.+12     	; 0xaf8 <_ZL9toggleFanv+0x1a>
	FanCount--;
     aec:	01 97       	sbiw	r24, 0x01	; 1
     aee:	90 93 3f 07 	sts	0x073F, r25
     af2:	80 93 3e 07 	sts	0x073E, r24
     af6:	08 95       	ret
	else {
		if(FanState) {
     af8:	80 91 3d 07 	lds	r24, 0x073D
     afc:	88 23       	and	r24, r24
     afe:	a1 f0       	breq	.+40     	; 0xb28 <_ZL9toggleFanv+0x4a>
			FanState = false;
     b00:	10 92 3d 07 	sts	0x073D, r1
			FanCount = cMaxFanSpeed - FanSpeed;
     b04:	20 91 3b 07 	lds	r18, 0x073B
     b08:	30 91 3c 07 	lds	r19, 0x073C
     b0c:	84 e0       	ldi	r24, 0x04	; 4
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	82 1b       	sub	r24, r18
     b12:	93 0b       	sbc	r25, r19
     b14:	90 93 3f 07 	sts	0x073F, r25
     b18:	80 93 3e 07 	sts	0x073E, r24
			// set the motor pin (PORTE pin 0) to 0.
			PORTF &= ~0x01;
     b1c:	e2 e6       	ldi	r30, 0x62	; 98
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	80 81       	ld	r24, Z
     b22:	8e 7f       	andi	r24, 0xFE	; 254
     b24:	80 83       	st	Z, r24
     b26:	08 95       	ret
			} else {
			FanState = true;
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	80 93 3d 07 	sts	0x073D, r24
			FanCount = FanSpeed;
     b2e:	80 91 3b 07 	lds	r24, 0x073B
     b32:	90 91 3c 07 	lds	r25, 0x073C
     b36:	90 93 3f 07 	sts	0x073F, r25
     b3a:	80 93 3e 07 	sts	0x073E, r24
			// set the motor pin to 1.
			PORTF |= 0x01;
     b3e:	e2 e6       	ldi	r30, 0x62	; 98
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	80 81       	ld	r24, Z
     b44:	81 60       	ori	r24, 0x01	; 1
     b46:	80 83       	st	Z, r24
     b48:	08 95       	ret

00000b4a <_ZN11iotTerminal7getCharEP6__file>:
			return(-1);
		}
		static int
		getChar(FILE *f)
		{
			if(iUart) return(iUart->getChar());
     b4a:	e0 91 15 07 	lds	r30, 0x0715
     b4e:	f0 91 16 07 	lds	r31, 0x0716
     b52:	30 97       	sbiw	r30, 0x00	; 0
     b54:	09 f4       	brne	.+2      	; 0xb58 <_ZN11iotTerminal7getCharEP6__file+0xe>
     b56:	4f c0       	rjmp	.+158    	; 0xbf6 <_ZN11iotTerminal7getCharEP6__file+0xac>
			return(-1);
		}
		int
		getChar(void) {
			char	c;
			if(iId == iotcUart0) {
     b58:	80 81       	ld	r24, Z
     b5a:	81 30       	cpi	r24, 0x01	; 1
     b5c:	09 f5       	brne	.+66     	; 0xba0 <_ZN11iotTerminal7getCharEP6__file+0x56>
				if(irx0Tail == irx0Head) {	// buffer empty
     b5e:	90 91 27 07 	lds	r25, 0x0727
     b62:	80 91 28 07 	lds	r24, 0x0728
     b66:	98 13       	cpse	r25, r24
     b68:	05 c0       	rjmp	.+10     	; 0xb74 <_ZN11iotTerminal7getCharEP6__file+0x2a>
					// wait until the data is received.
					while((UCSR0A & (1 << RXC0)) == 0) ;
     b6a:	5f 9b       	sbis	0x0b, 7	; 11
     b6c:	fe cf       	rjmp	.-4      	; 0xb6a <_ZN11iotTerminal7getCharEP6__file+0x20>
					return(UDR0);
     b6e:	8c b1       	in	r24, 0x0c	; 12
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	08 95       	ret
				}
				c = irx0Buff[irx0Tail];
     b74:	80 91 27 07 	lds	r24, 0x0727
     b78:	e0 91 23 07 	lds	r30, 0x0723
     b7c:	f0 91 24 07 	lds	r31, 0x0724
     b80:	e8 0f       	add	r30, r24
     b82:	f1 1d       	adc	r31, r1
     b84:	80 81       	ld	r24, Z
				iotmAtomic(irx0Tail = (irx0Tail + 1) % iotcUartBuffSize);
     b86:	9f b7       	in	r25, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	20 91 27 07 	lds	r18, 0x0727
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	2f 5f       	subi	r18, 0xFF	; 255
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	2f 77       	andi	r18, 0x7F	; 127
     b96:	30 78       	andi	r19, 0x80	; 128
     b98:	20 93 27 07 	sts	0x0727, r18
     b9c:	9f bf       	out	0x3f, r25	; 63
     b9e:	26 c0       	rjmp	.+76     	; 0xbec <_ZN11iotTerminal7getCharEP6__file+0xa2>
			} else if(iId == iotcUart1) {
     ba0:	82 30       	cpi	r24, 0x02	; 2
     ba2:	31 f5       	brne	.+76     	; 0xbf0 <_ZN11iotTerminal7getCharEP6__file+0xa6>
				if(irx1Tail == irx1Head) {	// buffer empty
     ba4:	90 91 1f 07 	lds	r25, 0x071F
     ba8:	80 91 20 07 	lds	r24, 0x0720
     bac:	98 13       	cpse	r25, r24
     bae:	09 c0       	rjmp	.+18     	; 0xbc2 <_ZN11iotTerminal7getCharEP6__file+0x78>
					// wait until the data is received.
					while((UCSR1A & (1 << RXC1)) == 0) ;
     bb0:	eb e9       	ldi	r30, 0x9B	; 155
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	88 23       	and	r24, r24
     bb8:	ec f7       	brge	.-6      	; 0xbb4 <_ZN11iotTerminal7getCharEP6__file+0x6a>
					return(UDR1);
     bba:	80 91 9c 00 	lds	r24, 0x009C
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	08 95       	ret
				}
				c = irx1Buff[irx1Tail];
     bc2:	80 91 1f 07 	lds	r24, 0x071F
     bc6:	e0 91 1b 07 	lds	r30, 0x071B
     bca:	f0 91 1c 07 	lds	r31, 0x071C
     bce:	e8 0f       	add	r30, r24
     bd0:	f1 1d       	adc	r31, r1
     bd2:	80 81       	ld	r24, Z
				iotmAtomic(irx1Tail = (irx1Tail + 1) % iotcUartBuffSize);
     bd4:	9f b7       	in	r25, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	20 91 1f 07 	lds	r18, 0x071F
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	2f 5f       	subi	r18, 0xFF	; 255
     be0:	3f 4f       	sbci	r19, 0xFF	; 255
     be2:	2f 77       	andi	r18, 0x7F	; 127
     be4:	30 78       	andi	r19, 0x80	; 128
     be6:	20 93 1f 07 	sts	0x071F, r18
     bea:	9f bf       	out	0x3f, r25	; 63
			} else return(-1);
			return(c);
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	08 95       	ret
					while((UCSR1A & (1 << RXC1)) == 0) ;
					return(UDR1);
				}
				c = irx1Buff[irx1Tail];
				iotmAtomic(irx1Tail = (irx1Tail + 1) % iotcUartBuffSize);
			} else return(-1);
     bf0:	8f ef       	ldi	r24, 0xFF	; 255
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
			return(-1);
		}
		static int
		getChar(FILE *f)
		{
			if(iUart) return(iUart->getChar());
     bf4:	08 95       	ret
			return(-1);
     bf6:	8f ef       	ldi	r24, 0xFF	; 255
     bf8:	9f ef       	ldi	r25, 0xFF	; 255
		}
     bfa:	08 95       	ret

00000bfc <_ZN10iotCharLcdC1Ev>:
			public:
				unsigned char	x, y;
				char			c;
		};

		iotCharLcd() {
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	c0 58       	subi	r28, 0x80	; 128
     c06:	d1 09       	sbc	r29, r1
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	f8 94       	cli
     c0c:	de bf       	out	0x3e, r29	; 62
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	cd bf       	out	0x3d, r28	; 61
			iHead = iTail = iX = iY = 0;
     c12:	fc 01       	movw	r30, r24
     c14:	e1 5d       	subi	r30, 0xD1	; 209
     c16:	fe 4f       	sbci	r31, 0xFE	; 254
     c18:	10 82       	st	Z, r1
     c1a:	31 97       	sbiw	r30, 0x01	; 1
     c1c:	10 82       	st	Z, r1
     c1e:	31 97       	sbiw	r30, 0x01	; 1
     c20:	10 82       	st	Z, r1
     c22:	31 97       	sbiw	r30, 0x01	; 1
     c24:	10 82       	st	Z, r1
			
			// DDRs to output
			*(&iotcCharLcdControl - 1) = 0x1c;
     c26:	2c e1       	ldi	r18, 0x1C	; 28
     c28:	20 93 64 00 	sts	0x0064, r18
			*(&iotcCharLcdData - 1) = 0xff;
     c2c:	2f ef       	ldi	r18, 0xFF	; 255
     c2e:	2a bb       	out	0x1a, r18	; 26
				writeControl(0xc0 + aX - 1); iotTimer::delay(1);
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
     c30:	34 96       	adiw	r30, 0x04	; 4
     c32:	20 81       	ld	r18, Z
     c34:	2f 70       	andi	r18, 0x0F	; 15
     c36:	20 83       	st	Z, r18
     c38:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     c3c:	c1 58       	subi	r28, 0x81	; 129
     c3e:	df 4f       	sbci	r29, 0xFF	; 255
     c40:	19 82       	std	Y+1, r1	; 0x01
     c42:	18 82       	st	Y, r1
     c44:	cf 57       	subi	r28, 0x7F	; 127
     c46:	d0 40       	sbci	r29, 0x00	; 0
     c48:	c1 58       	subi	r28, 0x81	; 129
     c4a:	df 4f       	sbci	r29, 0xFF	; 255
     c4c:	28 81       	ld	r18, Y
     c4e:	39 81       	ldd	r19, Y+1	; 0x01
     c50:	cf 57       	subi	r28, 0x7F	; 127
     c52:	d0 40       	sbci	r29, 0x00	; 0
     c54:	12 16       	cp	r1, r18
     c56:	13 06       	cpc	r1, r19
     c58:	9c f1       	brlt	.+102    	; 0xcc0 <_ZN10iotCharLcdC1Ev+0xc4>
				for(volatile int j = 0; j < 6; j++) ;
     c5a:	ef 96       	adiw	r28, 0x3f	; 63
     c5c:	1f ae       	std	Y+63, r1	; 0x3f
     c5e:	1e ae       	std	Y+62, r1	; 0x3e
     c60:	ef 97       	sbiw	r28, 0x3f	; 63
     c62:	ef 96       	adiw	r28, 0x3f	; 63
     c64:	2e ad       	ldd	r18, Y+62	; 0x3e
     c66:	3f ad       	ldd	r19, Y+63	; 0x3f
     c68:	ef 97       	sbiw	r28, 0x3f	; 63
     c6a:	26 30       	cpi	r18, 0x06	; 6
     c6c:	31 05       	cpc	r19, r1
     c6e:	8c f4       	brge	.+34     	; 0xc92 <_ZN10iotCharLcdC1Ev+0x96>
     c70:	ef 96       	adiw	r28, 0x3f	; 63
     c72:	2e ad       	ldd	r18, Y+62	; 0x3e
     c74:	3f ad       	ldd	r19, Y+63	; 0x3f
     c76:	ef 97       	sbiw	r28, 0x3f	; 63
     c78:	2f 5f       	subi	r18, 0xFF	; 255
     c7a:	3f 4f       	sbci	r19, 0xFF	; 255
     c7c:	ef 96       	adiw	r28, 0x3f	; 63
     c7e:	3f af       	std	Y+63, r19	; 0x3f
     c80:	2e af       	std	Y+62, r18	; 0x3e
     c82:	ef 97       	sbiw	r28, 0x3f	; 63
     c84:	ef 96       	adiw	r28, 0x3f	; 63
     c86:	2e ad       	ldd	r18, Y+62	; 0x3e
     c88:	3f ad       	ldd	r19, Y+63	; 0x3f
     c8a:	ef 97       	sbiw	r28, 0x3f	; 63
     c8c:	26 30       	cpi	r18, 0x06	; 6
     c8e:	31 05       	cpc	r19, r1
     c90:	7c f3       	brlt	.-34     	; 0xc70 <_ZN10iotCharLcdC1Ev+0x74>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     c92:	c1 58       	subi	r28, 0x81	; 129
     c94:	df 4f       	sbci	r29, 0xFF	; 255
     c96:	28 81       	ld	r18, Y
     c98:	39 81       	ldd	r19, Y+1	; 0x01
     c9a:	cf 57       	subi	r28, 0x7F	; 127
     c9c:	d0 40       	sbci	r29, 0x00	; 0
     c9e:	2f 5f       	subi	r18, 0xFF	; 255
     ca0:	3f 4f       	sbci	r19, 0xFF	; 255
     ca2:	c1 58       	subi	r28, 0x81	; 129
     ca4:	df 4f       	sbci	r29, 0xFF	; 255
     ca6:	39 83       	std	Y+1, r19	; 0x01
     ca8:	28 83       	st	Y, r18
     caa:	cf 57       	subi	r28, 0x7F	; 127
     cac:	d0 40       	sbci	r29, 0x00	; 0
     cae:	c1 58       	subi	r28, 0x81	; 129
     cb0:	df 4f       	sbci	r29, 0xFF	; 255
     cb2:	28 81       	ld	r18, Y
     cb4:	39 81       	ldd	r19, Y+1	; 0x01
     cb6:	cf 57       	subi	r28, 0x7F	; 127
     cb8:	d0 40       	sbci	r29, 0x00	; 0
     cba:	12 16       	cp	r1, r18
     cbc:	13 06       	cpc	r1, r19
     cbe:	6c f6       	brge	.-102    	; 0xc5a <_ZN10iotCharLcdC1Ev+0x5e>
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
     cc0:	fc 01       	movw	r30, r24
     cc2:	e0 5d       	subi	r30, 0xD0	; 208
     cc4:	fe 4f       	sbci	r31, 0xFE	; 254
     cc6:	20 81       	ld	r18, Z
     cc8:	2b 71       	andi	r18, 0x1B	; 27
     cca:	20 83       	st	Z, r18
     ccc:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     cd0:	ed 96       	adiw	r28, 0x3d	; 61
     cd2:	1f ae       	std	Y+63, r1	; 0x3f
     cd4:	1e ae       	std	Y+62, r1	; 0x3e
     cd6:	ed 97       	sbiw	r28, 0x3d	; 61
     cd8:	ed 96       	adiw	r28, 0x3d	; 61
     cda:	2e ad       	ldd	r18, Y+62	; 0x3e
     cdc:	3f ad       	ldd	r19, Y+63	; 0x3f
     cde:	ed 97       	sbiw	r28, 0x3d	; 61
     ce0:	12 16       	cp	r1, r18
     ce2:	13 06       	cpc	r1, r19
     ce4:	6c f1       	brlt	.+90     	; 0xd40 <_ZN10iotCharLcdC1Ev+0x144>
				for(volatile int j = 0; j < 6; j++) ;
     ce6:	eb 96       	adiw	r28, 0x3b	; 59
     ce8:	1f ae       	std	Y+63, r1	; 0x3f
     cea:	1e ae       	std	Y+62, r1	; 0x3e
     cec:	eb 97       	sbiw	r28, 0x3b	; 59
     cee:	eb 96       	adiw	r28, 0x3b	; 59
     cf0:	2e ad       	ldd	r18, Y+62	; 0x3e
     cf2:	3f ad       	ldd	r19, Y+63	; 0x3f
     cf4:	eb 97       	sbiw	r28, 0x3b	; 59
     cf6:	26 30       	cpi	r18, 0x06	; 6
     cf8:	31 05       	cpc	r19, r1
     cfa:	8c f4       	brge	.+34     	; 0xd1e <_ZN10iotCharLcdC1Ev+0x122>
     cfc:	eb 96       	adiw	r28, 0x3b	; 59
     cfe:	2e ad       	ldd	r18, Y+62	; 0x3e
     d00:	3f ad       	ldd	r19, Y+63	; 0x3f
     d02:	eb 97       	sbiw	r28, 0x3b	; 59
     d04:	2f 5f       	subi	r18, 0xFF	; 255
     d06:	3f 4f       	sbci	r19, 0xFF	; 255
     d08:	eb 96       	adiw	r28, 0x3b	; 59
     d0a:	3f af       	std	Y+63, r19	; 0x3f
     d0c:	2e af       	std	Y+62, r18	; 0x3e
     d0e:	eb 97       	sbiw	r28, 0x3b	; 59
     d10:	eb 96       	adiw	r28, 0x3b	; 59
     d12:	2e ad       	ldd	r18, Y+62	; 0x3e
     d14:	3f ad       	ldd	r19, Y+63	; 0x3f
     d16:	eb 97       	sbiw	r28, 0x3b	; 59
     d18:	26 30       	cpi	r18, 0x06	; 6
     d1a:	31 05       	cpc	r19, r1
     d1c:	7c f3       	brlt	.-34     	; 0xcfc <_ZN10iotCharLcdC1Ev+0x100>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     d1e:	ed 96       	adiw	r28, 0x3d	; 61
     d20:	2e ad       	ldd	r18, Y+62	; 0x3e
     d22:	3f ad       	ldd	r19, Y+63	; 0x3f
     d24:	ed 97       	sbiw	r28, 0x3d	; 61
     d26:	2f 5f       	subi	r18, 0xFF	; 255
     d28:	3f 4f       	sbci	r19, 0xFF	; 255
     d2a:	ed 96       	adiw	r28, 0x3d	; 61
     d2c:	3f af       	std	Y+63, r19	; 0x3f
     d2e:	2e af       	std	Y+62, r18	; 0x3e
     d30:	ed 97       	sbiw	r28, 0x3d	; 61
     d32:	ed 96       	adiw	r28, 0x3d	; 61
     d34:	2e ad       	ldd	r18, Y+62	; 0x3e
     d36:	3f ad       	ldd	r19, Y+63	; 0x3f
     d38:	ed 97       	sbiw	r28, 0x3d	; 61
     d3a:	12 16       	cp	r1, r18
     d3c:	13 06       	cpc	r1, r19
     d3e:	9c f6       	brge	.-90     	; 0xce6 <_ZN10iotCharLcdC1Ev+0xea>
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
     d40:	fc 01       	movw	r30, r24
     d42:	e0 5d       	subi	r30, 0xD0	; 208
     d44:	fe 4f       	sbci	r31, 0xFE	; 254
     d46:	20 81       	ld	r18, Z
     d48:	27 71       	andi	r18, 0x17	; 23
     d4a:	20 83       	st	Z, r18
     d4c:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     d50:	e9 96       	adiw	r28, 0x39	; 57
     d52:	1f ae       	std	Y+63, r1	; 0x3f
     d54:	1e ae       	std	Y+62, r1	; 0x3e
     d56:	e9 97       	sbiw	r28, 0x39	; 57
     d58:	e9 96       	adiw	r28, 0x39	; 57
     d5a:	2e ad       	ldd	r18, Y+62	; 0x3e
     d5c:	3f ad       	ldd	r19, Y+63	; 0x3f
     d5e:	e9 97       	sbiw	r28, 0x39	; 57
     d60:	12 16       	cp	r1, r18
     d62:	13 06       	cpc	r1, r19
     d64:	6c f1       	brlt	.+90     	; 0xdc0 <_ZN10iotCharLcdC1Ev+0x1c4>
				for(volatile int j = 0; j < 6; j++) ;
     d66:	e7 96       	adiw	r28, 0x37	; 55
     d68:	1f ae       	std	Y+63, r1	; 0x3f
     d6a:	1e ae       	std	Y+62, r1	; 0x3e
     d6c:	e7 97       	sbiw	r28, 0x37	; 55
     d6e:	e7 96       	adiw	r28, 0x37	; 55
     d70:	2e ad       	ldd	r18, Y+62	; 0x3e
     d72:	3f ad       	ldd	r19, Y+63	; 0x3f
     d74:	e7 97       	sbiw	r28, 0x37	; 55
     d76:	26 30       	cpi	r18, 0x06	; 6
     d78:	31 05       	cpc	r19, r1
     d7a:	8c f4       	brge	.+34     	; 0xd9e <_ZN10iotCharLcdC1Ev+0x1a2>
     d7c:	e7 96       	adiw	r28, 0x37	; 55
     d7e:	2e ad       	ldd	r18, Y+62	; 0x3e
     d80:	3f ad       	ldd	r19, Y+63	; 0x3f
     d82:	e7 97       	sbiw	r28, 0x37	; 55
     d84:	2f 5f       	subi	r18, 0xFF	; 255
     d86:	3f 4f       	sbci	r19, 0xFF	; 255
     d88:	e7 96       	adiw	r28, 0x37	; 55
     d8a:	3f af       	std	Y+63, r19	; 0x3f
     d8c:	2e af       	std	Y+62, r18	; 0x3e
     d8e:	e7 97       	sbiw	r28, 0x37	; 55
     d90:	e7 96       	adiw	r28, 0x37	; 55
     d92:	2e ad       	ldd	r18, Y+62	; 0x3e
     d94:	3f ad       	ldd	r19, Y+63	; 0x3f
     d96:	e7 97       	sbiw	r28, 0x37	; 55
     d98:	26 30       	cpi	r18, 0x06	; 6
     d9a:	31 05       	cpc	r19, r1
     d9c:	7c f3       	brlt	.-34     	; 0xd7c <_ZN10iotCharLcdC1Ev+0x180>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     d9e:	e9 96       	adiw	r28, 0x39	; 57
     da0:	2e ad       	ldd	r18, Y+62	; 0x3e
     da2:	3f ad       	ldd	r19, Y+63	; 0x3f
     da4:	e9 97       	sbiw	r28, 0x39	; 57
     da6:	2f 5f       	subi	r18, 0xFF	; 255
     da8:	3f 4f       	sbci	r19, 0xFF	; 255
     daa:	e9 96       	adiw	r28, 0x39	; 57
     dac:	3f af       	std	Y+63, r19	; 0x3f
     dae:	2e af       	std	Y+62, r18	; 0x3e
     db0:	e9 97       	sbiw	r28, 0x39	; 57
     db2:	e9 96       	adiw	r28, 0x39	; 57
     db4:	2e ad       	ldd	r18, Y+62	; 0x3e
     db6:	3f ad       	ldd	r19, Y+63	; 0x3f
     db8:	e9 97       	sbiw	r28, 0x39	; 57
     dba:	12 16       	cp	r1, r18
     dbc:	13 06       	cpc	r1, r19
     dbe:	9c f6       	brge	.-90     	; 0xd66 <_ZN10iotCharLcdC1Ev+0x16a>
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
     dc0:	fc 01       	movw	r30, r24
     dc2:	e0 5d       	subi	r30, 0xD0	; 208
     dc4:	fe 4f       	sbci	r31, 0xFE	; 254
     dc6:	20 81       	ld	r18, Z
     dc8:	20 61       	ori	r18, 0x10	; 16
     dca:	20 83       	st	Z, r18
     dcc:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     dd0:	e5 96       	adiw	r28, 0x35	; 53
     dd2:	1f ae       	std	Y+63, r1	; 0x3f
     dd4:	1e ae       	std	Y+62, r1	; 0x3e
     dd6:	e5 97       	sbiw	r28, 0x35	; 53
     dd8:	e5 96       	adiw	r28, 0x35	; 53
     dda:	2e ad       	ldd	r18, Y+62	; 0x3e
     ddc:	3f ad       	ldd	r19, Y+63	; 0x3f
     dde:	e5 97       	sbiw	r28, 0x35	; 53
     de0:	12 16       	cp	r1, r18
     de2:	13 06       	cpc	r1, r19
     de4:	6c f1       	brlt	.+90     	; 0xe40 <_ZN10iotCharLcdC1Ev+0x244>
				for(volatile int j = 0; j < 6; j++) ;
     de6:	e3 96       	adiw	r28, 0x33	; 51
     de8:	1f ae       	std	Y+63, r1	; 0x3f
     dea:	1e ae       	std	Y+62, r1	; 0x3e
     dec:	e3 97       	sbiw	r28, 0x33	; 51
     dee:	e3 96       	adiw	r28, 0x33	; 51
     df0:	2e ad       	ldd	r18, Y+62	; 0x3e
     df2:	3f ad       	ldd	r19, Y+63	; 0x3f
     df4:	e3 97       	sbiw	r28, 0x33	; 51
     df6:	26 30       	cpi	r18, 0x06	; 6
     df8:	31 05       	cpc	r19, r1
     dfa:	8c f4       	brge	.+34     	; 0xe1e <_ZN10iotCharLcdC1Ev+0x222>
     dfc:	e3 96       	adiw	r28, 0x33	; 51
     dfe:	2e ad       	ldd	r18, Y+62	; 0x3e
     e00:	3f ad       	ldd	r19, Y+63	; 0x3f
     e02:	e3 97       	sbiw	r28, 0x33	; 51
     e04:	2f 5f       	subi	r18, 0xFF	; 255
     e06:	3f 4f       	sbci	r19, 0xFF	; 255
     e08:	e3 96       	adiw	r28, 0x33	; 51
     e0a:	3f af       	std	Y+63, r19	; 0x3f
     e0c:	2e af       	std	Y+62, r18	; 0x3e
     e0e:	e3 97       	sbiw	r28, 0x33	; 51
     e10:	e3 96       	adiw	r28, 0x33	; 51
     e12:	2e ad       	ldd	r18, Y+62	; 0x3e
     e14:	3f ad       	ldd	r19, Y+63	; 0x3f
     e16:	e3 97       	sbiw	r28, 0x33	; 51
     e18:	26 30       	cpi	r18, 0x06	; 6
     e1a:	31 05       	cpc	r19, r1
     e1c:	7c f3       	brlt	.-34     	; 0xdfc <_ZN10iotCharLcdC1Ev+0x200>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     e1e:	e5 96       	adiw	r28, 0x35	; 53
     e20:	2e ad       	ldd	r18, Y+62	; 0x3e
     e22:	3f ad       	ldd	r19, Y+63	; 0x3f
     e24:	e5 97       	sbiw	r28, 0x35	; 53
     e26:	2f 5f       	subi	r18, 0xFF	; 255
     e28:	3f 4f       	sbci	r19, 0xFF	; 255
     e2a:	e5 96       	adiw	r28, 0x35	; 53
     e2c:	3f af       	std	Y+63, r19	; 0x3f
     e2e:	2e af       	std	Y+62, r18	; 0x3e
     e30:	e5 97       	sbiw	r28, 0x35	; 53
     e32:	e5 96       	adiw	r28, 0x35	; 53
     e34:	2e ad       	ldd	r18, Y+62	; 0x3e
     e36:	3f ad       	ldd	r19, Y+63	; 0x3f
     e38:	e5 97       	sbiw	r28, 0x35	; 53
     e3a:	12 16       	cp	r1, r18
     e3c:	13 06       	cpc	r1, r19
     e3e:	9c f6       	brge	.-90     	; 0xde6 <_ZN10iotCharLcdC1Ev+0x1ea>
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
     e40:	28 e3       	ldi	r18, 0x38	; 56
     e42:	2b bb       	out	0x1b, r18	; 27
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     e44:	e1 96       	adiw	r28, 0x31	; 49
     e46:	1f ae       	std	Y+63, r1	; 0x3f
     e48:	1e ae       	std	Y+62, r1	; 0x3e
     e4a:	e1 97       	sbiw	r28, 0x31	; 49
     e4c:	e1 96       	adiw	r28, 0x31	; 49
     e4e:	2e ad       	ldd	r18, Y+62	; 0x3e
     e50:	3f ad       	ldd	r19, Y+63	; 0x3f
     e52:	e1 97       	sbiw	r28, 0x31	; 49
     e54:	12 16       	cp	r1, r18
     e56:	13 06       	cpc	r1, r19
     e58:	6c f1       	brlt	.+90     	; 0xeb4 <_ZN10iotCharLcdC1Ev+0x2b8>
				for(volatile int j = 0; j < 6; j++) ;
     e5a:	af 96       	adiw	r28, 0x2f	; 47
     e5c:	1f ae       	std	Y+63, r1	; 0x3f
     e5e:	1e ae       	std	Y+62, r1	; 0x3e
     e60:	af 97       	sbiw	r28, 0x2f	; 47
     e62:	af 96       	adiw	r28, 0x2f	; 47
     e64:	2e ad       	ldd	r18, Y+62	; 0x3e
     e66:	3f ad       	ldd	r19, Y+63	; 0x3f
     e68:	af 97       	sbiw	r28, 0x2f	; 47
     e6a:	26 30       	cpi	r18, 0x06	; 6
     e6c:	31 05       	cpc	r19, r1
     e6e:	8c f4       	brge	.+34     	; 0xe92 <_ZN10iotCharLcdC1Ev+0x296>
     e70:	af 96       	adiw	r28, 0x2f	; 47
     e72:	2e ad       	ldd	r18, Y+62	; 0x3e
     e74:	3f ad       	ldd	r19, Y+63	; 0x3f
     e76:	af 97       	sbiw	r28, 0x2f	; 47
     e78:	2f 5f       	subi	r18, 0xFF	; 255
     e7a:	3f 4f       	sbci	r19, 0xFF	; 255
     e7c:	af 96       	adiw	r28, 0x2f	; 47
     e7e:	3f af       	std	Y+63, r19	; 0x3f
     e80:	2e af       	std	Y+62, r18	; 0x3e
     e82:	af 97       	sbiw	r28, 0x2f	; 47
     e84:	af 96       	adiw	r28, 0x2f	; 47
     e86:	2e ad       	ldd	r18, Y+62	; 0x3e
     e88:	3f ad       	ldd	r19, Y+63	; 0x3f
     e8a:	af 97       	sbiw	r28, 0x2f	; 47
     e8c:	26 30       	cpi	r18, 0x06	; 6
     e8e:	31 05       	cpc	r19, r1
     e90:	7c f3       	brlt	.-34     	; 0xe70 <_ZN10iotCharLcdC1Ev+0x274>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     e92:	e1 96       	adiw	r28, 0x31	; 49
     e94:	2e ad       	ldd	r18, Y+62	; 0x3e
     e96:	3f ad       	ldd	r19, Y+63	; 0x3f
     e98:	e1 97       	sbiw	r28, 0x31	; 49
     e9a:	2f 5f       	subi	r18, 0xFF	; 255
     e9c:	3f 4f       	sbci	r19, 0xFF	; 255
     e9e:	e1 96       	adiw	r28, 0x31	; 49
     ea0:	3f af       	std	Y+63, r19	; 0x3f
     ea2:	2e af       	std	Y+62, r18	; 0x3e
     ea4:	e1 97       	sbiw	r28, 0x31	; 49
     ea6:	e1 96       	adiw	r28, 0x31	; 49
     ea8:	2e ad       	ldd	r18, Y+62	; 0x3e
     eaa:	3f ad       	ldd	r19, Y+63	; 0x3f
     eac:	e1 97       	sbiw	r28, 0x31	; 49
     eae:	12 16       	cp	r1, r18
     eb0:	13 06       	cpc	r1, r19
     eb2:	9c f6       	brge	.-90     	; 0xe5a <_ZN10iotCharLcdC1Ev+0x25e>
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
			iotmCharLcdEnOff; iotTimer::delay(1);
     eb4:	fc 01       	movw	r30, r24
     eb6:	e0 5d       	subi	r30, 0xD0	; 208
     eb8:	fe 4f       	sbci	r31, 0xFE	; 254
     eba:	20 81       	ld	r18, Z
     ebc:	2f 70       	andi	r18, 0x0F	; 15
     ebe:	20 83       	st	Z, r18
     ec0:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     ec4:	ad 96       	adiw	r28, 0x2d	; 45
     ec6:	1f ae       	std	Y+63, r1	; 0x3f
     ec8:	1e ae       	std	Y+62, r1	; 0x3e
     eca:	ad 97       	sbiw	r28, 0x2d	; 45
     ecc:	ad 96       	adiw	r28, 0x2d	; 45
     ece:	2e ad       	ldd	r18, Y+62	; 0x3e
     ed0:	3f ad       	ldd	r19, Y+63	; 0x3f
     ed2:	ad 97       	sbiw	r28, 0x2d	; 45
     ed4:	12 16       	cp	r1, r18
     ed6:	13 06       	cpc	r1, r19
     ed8:	6c f1       	brlt	.+90     	; 0xf34 <_ZN10iotCharLcdC1Ev+0x338>
				for(volatile int j = 0; j < 6; j++) ;
     eda:	ab 96       	adiw	r28, 0x2b	; 43
     edc:	1f ae       	std	Y+63, r1	; 0x3f
     ede:	1e ae       	std	Y+62, r1	; 0x3e
     ee0:	ab 97       	sbiw	r28, 0x2b	; 43
     ee2:	ab 96       	adiw	r28, 0x2b	; 43
     ee4:	2e ad       	ldd	r18, Y+62	; 0x3e
     ee6:	3f ad       	ldd	r19, Y+63	; 0x3f
     ee8:	ab 97       	sbiw	r28, 0x2b	; 43
     eea:	26 30       	cpi	r18, 0x06	; 6
     eec:	31 05       	cpc	r19, r1
     eee:	8c f4       	brge	.+34     	; 0xf12 <_ZN10iotCharLcdC1Ev+0x316>
     ef0:	ab 96       	adiw	r28, 0x2b	; 43
     ef2:	2e ad       	ldd	r18, Y+62	; 0x3e
     ef4:	3f ad       	ldd	r19, Y+63	; 0x3f
     ef6:	ab 97       	sbiw	r28, 0x2b	; 43
     ef8:	2f 5f       	subi	r18, 0xFF	; 255
     efa:	3f 4f       	sbci	r19, 0xFF	; 255
     efc:	ab 96       	adiw	r28, 0x2b	; 43
     efe:	3f af       	std	Y+63, r19	; 0x3f
     f00:	2e af       	std	Y+62, r18	; 0x3e
     f02:	ab 97       	sbiw	r28, 0x2b	; 43
     f04:	ab 96       	adiw	r28, 0x2b	; 43
     f06:	2e ad       	ldd	r18, Y+62	; 0x3e
     f08:	3f ad       	ldd	r19, Y+63	; 0x3f
     f0a:	ab 97       	sbiw	r28, 0x2b	; 43
     f0c:	26 30       	cpi	r18, 0x06	; 6
     f0e:	31 05       	cpc	r19, r1
     f10:	7c f3       	brlt	.-34     	; 0xef0 <_ZN10iotCharLcdC1Ev+0x2f4>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     f12:	ad 96       	adiw	r28, 0x2d	; 45
     f14:	2e ad       	ldd	r18, Y+62	; 0x3e
     f16:	3f ad       	ldd	r19, Y+63	; 0x3f
     f18:	ad 97       	sbiw	r28, 0x2d	; 45
     f1a:	2f 5f       	subi	r18, 0xFF	; 255
     f1c:	3f 4f       	sbci	r19, 0xFF	; 255
     f1e:	ad 96       	adiw	r28, 0x2d	; 45
     f20:	3f af       	std	Y+63, r19	; 0x3f
     f22:	2e af       	std	Y+62, r18	; 0x3e
     f24:	ad 97       	sbiw	r28, 0x2d	; 45
     f26:	ad 96       	adiw	r28, 0x2d	; 45
     f28:	2e ad       	ldd	r18, Y+62	; 0x3e
     f2a:	3f ad       	ldd	r19, Y+63	; 0x3f
     f2c:	ad 97       	sbiw	r28, 0x2d	; 45
     f2e:	12 16       	cp	r1, r18
     f30:	13 06       	cpc	r1, r19
     f32:	9c f6       	brge	.-90     	; 0xeda <_ZN10iotCharLcdC1Ev+0x2de>
				writeControl(0xc0 + aX - 1); iotTimer::delay(1);
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
     f34:	fc 01       	movw	r30, r24
     f36:	e0 5d       	subi	r30, 0xD0	; 208
     f38:	fe 4f       	sbci	r31, 0xFE	; 254
     f3a:	20 81       	ld	r18, Z
     f3c:	2f 70       	andi	r18, 0x0F	; 15
     f3e:	20 83       	st	Z, r18
     f40:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     f44:	a9 96       	adiw	r28, 0x29	; 41
     f46:	1f ae       	std	Y+63, r1	; 0x3f
     f48:	1e ae       	std	Y+62, r1	; 0x3e
     f4a:	a9 97       	sbiw	r28, 0x29	; 41
     f4c:	a9 96       	adiw	r28, 0x29	; 41
     f4e:	2e ad       	ldd	r18, Y+62	; 0x3e
     f50:	3f ad       	ldd	r19, Y+63	; 0x3f
     f52:	a9 97       	sbiw	r28, 0x29	; 41
     f54:	12 16       	cp	r1, r18
     f56:	13 06       	cpc	r1, r19
     f58:	6c f1       	brlt	.+90     	; 0xfb4 <_ZN10iotCharLcdC1Ev+0x3b8>
				for(volatile int j = 0; j < 6; j++) ;
     f5a:	a7 96       	adiw	r28, 0x27	; 39
     f5c:	1f ae       	std	Y+63, r1	; 0x3f
     f5e:	1e ae       	std	Y+62, r1	; 0x3e
     f60:	a7 97       	sbiw	r28, 0x27	; 39
     f62:	a7 96       	adiw	r28, 0x27	; 39
     f64:	2e ad       	ldd	r18, Y+62	; 0x3e
     f66:	3f ad       	ldd	r19, Y+63	; 0x3f
     f68:	a7 97       	sbiw	r28, 0x27	; 39
     f6a:	26 30       	cpi	r18, 0x06	; 6
     f6c:	31 05       	cpc	r19, r1
     f6e:	8c f4       	brge	.+34     	; 0xf92 <_ZN10iotCharLcdC1Ev+0x396>
     f70:	a7 96       	adiw	r28, 0x27	; 39
     f72:	2e ad       	ldd	r18, Y+62	; 0x3e
     f74:	3f ad       	ldd	r19, Y+63	; 0x3f
     f76:	a7 97       	sbiw	r28, 0x27	; 39
     f78:	2f 5f       	subi	r18, 0xFF	; 255
     f7a:	3f 4f       	sbci	r19, 0xFF	; 255
     f7c:	a7 96       	adiw	r28, 0x27	; 39
     f7e:	3f af       	std	Y+63, r19	; 0x3f
     f80:	2e af       	std	Y+62, r18	; 0x3e
     f82:	a7 97       	sbiw	r28, 0x27	; 39
     f84:	a7 96       	adiw	r28, 0x27	; 39
     f86:	2e ad       	ldd	r18, Y+62	; 0x3e
     f88:	3f ad       	ldd	r19, Y+63	; 0x3f
     f8a:	a7 97       	sbiw	r28, 0x27	; 39
     f8c:	26 30       	cpi	r18, 0x06	; 6
     f8e:	31 05       	cpc	r19, r1
     f90:	7c f3       	brlt	.-34     	; 0xf70 <_ZN10iotCharLcdC1Ev+0x374>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     f92:	a9 96       	adiw	r28, 0x29	; 41
     f94:	2e ad       	ldd	r18, Y+62	; 0x3e
     f96:	3f ad       	ldd	r19, Y+63	; 0x3f
     f98:	a9 97       	sbiw	r28, 0x29	; 41
     f9a:	2f 5f       	subi	r18, 0xFF	; 255
     f9c:	3f 4f       	sbci	r19, 0xFF	; 255
     f9e:	a9 96       	adiw	r28, 0x29	; 41
     fa0:	3f af       	std	Y+63, r19	; 0x3f
     fa2:	2e af       	std	Y+62, r18	; 0x3e
     fa4:	a9 97       	sbiw	r28, 0x29	; 41
     fa6:	a9 96       	adiw	r28, 0x29	; 41
     fa8:	2e ad       	ldd	r18, Y+62	; 0x3e
     faa:	3f ad       	ldd	r19, Y+63	; 0x3f
     fac:	a9 97       	sbiw	r28, 0x29	; 41
     fae:	12 16       	cp	r1, r18
     fb0:	13 06       	cpc	r1, r19
     fb2:	9c f6       	brge	.-90     	; 0xf5a <_ZN10iotCharLcdC1Ev+0x35e>
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
     fb4:	fc 01       	movw	r30, r24
     fb6:	e0 5d       	subi	r30, 0xD0	; 208
     fb8:	fe 4f       	sbci	r31, 0xFE	; 254
     fba:	20 81       	ld	r18, Z
     fbc:	2b 71       	andi	r18, 0x1B	; 27
     fbe:	20 83       	st	Z, r18
     fc0:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
     fc4:	a5 96       	adiw	r28, 0x25	; 37
     fc6:	1f ae       	std	Y+63, r1	; 0x3f
     fc8:	1e ae       	std	Y+62, r1	; 0x3e
     fca:	a5 97       	sbiw	r28, 0x25	; 37
     fcc:	a5 96       	adiw	r28, 0x25	; 37
     fce:	2e ad       	ldd	r18, Y+62	; 0x3e
     fd0:	3f ad       	ldd	r19, Y+63	; 0x3f
     fd2:	a5 97       	sbiw	r28, 0x25	; 37
     fd4:	12 16       	cp	r1, r18
     fd6:	13 06       	cpc	r1, r19
     fd8:	6c f1       	brlt	.+90     	; 0x1034 <_ZN10iotCharLcdC1Ev+0x438>
				for(volatile int j = 0; j < 6; j++) ;
     fda:	a3 96       	adiw	r28, 0x23	; 35
     fdc:	1f ae       	std	Y+63, r1	; 0x3f
     fde:	1e ae       	std	Y+62, r1	; 0x3e
     fe0:	a3 97       	sbiw	r28, 0x23	; 35
     fe2:	a3 96       	adiw	r28, 0x23	; 35
     fe4:	2e ad       	ldd	r18, Y+62	; 0x3e
     fe6:	3f ad       	ldd	r19, Y+63	; 0x3f
     fe8:	a3 97       	sbiw	r28, 0x23	; 35
     fea:	26 30       	cpi	r18, 0x06	; 6
     fec:	31 05       	cpc	r19, r1
     fee:	8c f4       	brge	.+34     	; 0x1012 <_ZN10iotCharLcdC1Ev+0x416>
     ff0:	a3 96       	adiw	r28, 0x23	; 35
     ff2:	2e ad       	ldd	r18, Y+62	; 0x3e
     ff4:	3f ad       	ldd	r19, Y+63	; 0x3f
     ff6:	a3 97       	sbiw	r28, 0x23	; 35
     ff8:	2f 5f       	subi	r18, 0xFF	; 255
     ffa:	3f 4f       	sbci	r19, 0xFF	; 255
     ffc:	a3 96       	adiw	r28, 0x23	; 35
     ffe:	3f af       	std	Y+63, r19	; 0x3f
    1000:	2e af       	std	Y+62, r18	; 0x3e
    1002:	a3 97       	sbiw	r28, 0x23	; 35
    1004:	a3 96       	adiw	r28, 0x23	; 35
    1006:	2e ad       	ldd	r18, Y+62	; 0x3e
    1008:	3f ad       	ldd	r19, Y+63	; 0x3f
    100a:	a3 97       	sbiw	r28, 0x23	; 35
    100c:	26 30       	cpi	r18, 0x06	; 6
    100e:	31 05       	cpc	r19, r1
    1010:	7c f3       	brlt	.-34     	; 0xff0 <_ZN10iotCharLcdC1Ev+0x3f4>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1012:	a5 96       	adiw	r28, 0x25	; 37
    1014:	2e ad       	ldd	r18, Y+62	; 0x3e
    1016:	3f ad       	ldd	r19, Y+63	; 0x3f
    1018:	a5 97       	sbiw	r28, 0x25	; 37
    101a:	2f 5f       	subi	r18, 0xFF	; 255
    101c:	3f 4f       	sbci	r19, 0xFF	; 255
    101e:	a5 96       	adiw	r28, 0x25	; 37
    1020:	3f af       	std	Y+63, r19	; 0x3f
    1022:	2e af       	std	Y+62, r18	; 0x3e
    1024:	a5 97       	sbiw	r28, 0x25	; 37
    1026:	a5 96       	adiw	r28, 0x25	; 37
    1028:	2e ad       	ldd	r18, Y+62	; 0x3e
    102a:	3f ad       	ldd	r19, Y+63	; 0x3f
    102c:	a5 97       	sbiw	r28, 0x25	; 37
    102e:	12 16       	cp	r1, r18
    1030:	13 06       	cpc	r1, r19
    1032:	9c f6       	brge	.-90     	; 0xfda <_ZN10iotCharLcdC1Ev+0x3de>
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
    1034:	fc 01       	movw	r30, r24
    1036:	e0 5d       	subi	r30, 0xD0	; 208
    1038:	fe 4f       	sbci	r31, 0xFE	; 254
    103a:	20 81       	ld	r18, Z
    103c:	27 71       	andi	r18, 0x17	; 23
    103e:	20 83       	st	Z, r18
    1040:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1044:	a1 96       	adiw	r28, 0x21	; 33
    1046:	1f ae       	std	Y+63, r1	; 0x3f
    1048:	1e ae       	std	Y+62, r1	; 0x3e
    104a:	a1 97       	sbiw	r28, 0x21	; 33
    104c:	a1 96       	adiw	r28, 0x21	; 33
    104e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1050:	3f ad       	ldd	r19, Y+63	; 0x3f
    1052:	a1 97       	sbiw	r28, 0x21	; 33
    1054:	12 16       	cp	r1, r18
    1056:	13 06       	cpc	r1, r19
    1058:	6c f1       	brlt	.+90     	; 0x10b4 <_ZN10iotCharLcdC1Ev+0x4b8>
				for(volatile int j = 0; j < 6; j++) ;
    105a:	6f 96       	adiw	r28, 0x1f	; 31
    105c:	1f ae       	std	Y+63, r1	; 0x3f
    105e:	1e ae       	std	Y+62, r1	; 0x3e
    1060:	6f 97       	sbiw	r28, 0x1f	; 31
    1062:	6f 96       	adiw	r28, 0x1f	; 31
    1064:	2e ad       	ldd	r18, Y+62	; 0x3e
    1066:	3f ad       	ldd	r19, Y+63	; 0x3f
    1068:	6f 97       	sbiw	r28, 0x1f	; 31
    106a:	26 30       	cpi	r18, 0x06	; 6
    106c:	31 05       	cpc	r19, r1
    106e:	8c f4       	brge	.+34     	; 0x1092 <_ZN10iotCharLcdC1Ev+0x496>
    1070:	6f 96       	adiw	r28, 0x1f	; 31
    1072:	2e ad       	ldd	r18, Y+62	; 0x3e
    1074:	3f ad       	ldd	r19, Y+63	; 0x3f
    1076:	6f 97       	sbiw	r28, 0x1f	; 31
    1078:	2f 5f       	subi	r18, 0xFF	; 255
    107a:	3f 4f       	sbci	r19, 0xFF	; 255
    107c:	6f 96       	adiw	r28, 0x1f	; 31
    107e:	3f af       	std	Y+63, r19	; 0x3f
    1080:	2e af       	std	Y+62, r18	; 0x3e
    1082:	6f 97       	sbiw	r28, 0x1f	; 31
    1084:	6f 96       	adiw	r28, 0x1f	; 31
    1086:	2e ad       	ldd	r18, Y+62	; 0x3e
    1088:	3f ad       	ldd	r19, Y+63	; 0x3f
    108a:	6f 97       	sbiw	r28, 0x1f	; 31
    108c:	26 30       	cpi	r18, 0x06	; 6
    108e:	31 05       	cpc	r19, r1
    1090:	7c f3       	brlt	.-34     	; 0x1070 <_ZN10iotCharLcdC1Ev+0x474>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1092:	a1 96       	adiw	r28, 0x21	; 33
    1094:	2e ad       	ldd	r18, Y+62	; 0x3e
    1096:	3f ad       	ldd	r19, Y+63	; 0x3f
    1098:	a1 97       	sbiw	r28, 0x21	; 33
    109a:	2f 5f       	subi	r18, 0xFF	; 255
    109c:	3f 4f       	sbci	r19, 0xFF	; 255
    109e:	a1 96       	adiw	r28, 0x21	; 33
    10a0:	3f af       	std	Y+63, r19	; 0x3f
    10a2:	2e af       	std	Y+62, r18	; 0x3e
    10a4:	a1 97       	sbiw	r28, 0x21	; 33
    10a6:	a1 96       	adiw	r28, 0x21	; 33
    10a8:	2e ad       	ldd	r18, Y+62	; 0x3e
    10aa:	3f ad       	ldd	r19, Y+63	; 0x3f
    10ac:	a1 97       	sbiw	r28, 0x21	; 33
    10ae:	12 16       	cp	r1, r18
    10b0:	13 06       	cpc	r1, r19
    10b2:	9c f6       	brge	.-90     	; 0x105a <_ZN10iotCharLcdC1Ev+0x45e>
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
    10b4:	fc 01       	movw	r30, r24
    10b6:	e0 5d       	subi	r30, 0xD0	; 208
    10b8:	fe 4f       	sbci	r31, 0xFE	; 254
    10ba:	20 81       	ld	r18, Z
    10bc:	20 61       	ori	r18, 0x10	; 16
    10be:	20 83       	st	Z, r18
    10c0:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    10c4:	6d 96       	adiw	r28, 0x1d	; 29
    10c6:	1f ae       	std	Y+63, r1	; 0x3f
    10c8:	1e ae       	std	Y+62, r1	; 0x3e
    10ca:	6d 97       	sbiw	r28, 0x1d	; 29
    10cc:	6d 96       	adiw	r28, 0x1d	; 29
    10ce:	2e ad       	ldd	r18, Y+62	; 0x3e
    10d0:	3f ad       	ldd	r19, Y+63	; 0x3f
    10d2:	6d 97       	sbiw	r28, 0x1d	; 29
    10d4:	12 16       	cp	r1, r18
    10d6:	13 06       	cpc	r1, r19
    10d8:	6c f1       	brlt	.+90     	; 0x1134 <__stack+0x35>
				for(volatile int j = 0; j < 6; j++) ;
    10da:	6b 96       	adiw	r28, 0x1b	; 27
    10dc:	1f ae       	std	Y+63, r1	; 0x3f
    10de:	1e ae       	std	Y+62, r1	; 0x3e
    10e0:	6b 97       	sbiw	r28, 0x1b	; 27
    10e2:	6b 96       	adiw	r28, 0x1b	; 27
    10e4:	2e ad       	ldd	r18, Y+62	; 0x3e
    10e6:	3f ad       	ldd	r19, Y+63	; 0x3f
    10e8:	6b 97       	sbiw	r28, 0x1b	; 27
    10ea:	26 30       	cpi	r18, 0x06	; 6
    10ec:	31 05       	cpc	r19, r1
    10ee:	8c f4       	brge	.+34     	; 0x1112 <__stack+0x13>
    10f0:	6b 96       	adiw	r28, 0x1b	; 27
    10f2:	2e ad       	ldd	r18, Y+62	; 0x3e
    10f4:	3f ad       	ldd	r19, Y+63	; 0x3f
    10f6:	6b 97       	sbiw	r28, 0x1b	; 27
    10f8:	2f 5f       	subi	r18, 0xFF	; 255
    10fa:	3f 4f       	sbci	r19, 0xFF	; 255
    10fc:	6b 96       	adiw	r28, 0x1b	; 27
    10fe:	3f af       	std	Y+63, r19	; 0x3f
    1100:	2e af       	std	Y+62, r18	; 0x3e
    1102:	6b 97       	sbiw	r28, 0x1b	; 27
    1104:	6b 96       	adiw	r28, 0x1b	; 27
    1106:	2e ad       	ldd	r18, Y+62	; 0x3e
    1108:	3f ad       	ldd	r19, Y+63	; 0x3f
    110a:	6b 97       	sbiw	r28, 0x1b	; 27
    110c:	26 30       	cpi	r18, 0x06	; 6
    110e:	31 05       	cpc	r19, r1
    1110:	7c f3       	brlt	.-34     	; 0x10f0 <_ZN10iotCharLcdC1Ev+0x4f4>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1112:	6d 96       	adiw	r28, 0x1d	; 29
    1114:	2e ad       	ldd	r18, Y+62	; 0x3e
    1116:	3f ad       	ldd	r19, Y+63	; 0x3f
    1118:	6d 97       	sbiw	r28, 0x1d	; 29
    111a:	2f 5f       	subi	r18, 0xFF	; 255
    111c:	3f 4f       	sbci	r19, 0xFF	; 255
    111e:	6d 96       	adiw	r28, 0x1d	; 29
    1120:	3f af       	std	Y+63, r19	; 0x3f
    1122:	2e af       	std	Y+62, r18	; 0x3e
    1124:	6d 97       	sbiw	r28, 0x1d	; 29
    1126:	6d 96       	adiw	r28, 0x1d	; 29
    1128:	2e ad       	ldd	r18, Y+62	; 0x3e
    112a:	3f ad       	ldd	r19, Y+63	; 0x3f
    112c:	6d 97       	sbiw	r28, 0x1d	; 29
    112e:	12 16       	cp	r1, r18
    1130:	13 06       	cpc	r1, r19
    1132:	9c f6       	brge	.-90     	; 0x10da <_ZN10iotCharLcdC1Ev+0x4de>
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
    1134:	2e e0       	ldi	r18, 0x0E	; 14
    1136:	2b bb       	out	0x1b, r18	; 27
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1138:	69 96       	adiw	r28, 0x19	; 25
    113a:	1f ae       	std	Y+63, r1	; 0x3f
    113c:	1e ae       	std	Y+62, r1	; 0x3e
    113e:	69 97       	sbiw	r28, 0x19	; 25
    1140:	69 96       	adiw	r28, 0x19	; 25
    1142:	2e ad       	ldd	r18, Y+62	; 0x3e
    1144:	3f ad       	ldd	r19, Y+63	; 0x3f
    1146:	69 97       	sbiw	r28, 0x19	; 25
    1148:	12 16       	cp	r1, r18
    114a:	13 06       	cpc	r1, r19
    114c:	6c f1       	brlt	.+90     	; 0x11a8 <__stack+0xa9>
				for(volatile int j = 0; j < 6; j++) ;
    114e:	67 96       	adiw	r28, 0x17	; 23
    1150:	1f ae       	std	Y+63, r1	; 0x3f
    1152:	1e ae       	std	Y+62, r1	; 0x3e
    1154:	67 97       	sbiw	r28, 0x17	; 23
    1156:	67 96       	adiw	r28, 0x17	; 23
    1158:	2e ad       	ldd	r18, Y+62	; 0x3e
    115a:	3f ad       	ldd	r19, Y+63	; 0x3f
    115c:	67 97       	sbiw	r28, 0x17	; 23
    115e:	26 30       	cpi	r18, 0x06	; 6
    1160:	31 05       	cpc	r19, r1
    1162:	8c f4       	brge	.+34     	; 0x1186 <__stack+0x87>
    1164:	67 96       	adiw	r28, 0x17	; 23
    1166:	2e ad       	ldd	r18, Y+62	; 0x3e
    1168:	3f ad       	ldd	r19, Y+63	; 0x3f
    116a:	67 97       	sbiw	r28, 0x17	; 23
    116c:	2f 5f       	subi	r18, 0xFF	; 255
    116e:	3f 4f       	sbci	r19, 0xFF	; 255
    1170:	67 96       	adiw	r28, 0x17	; 23
    1172:	3f af       	std	Y+63, r19	; 0x3f
    1174:	2e af       	std	Y+62, r18	; 0x3e
    1176:	67 97       	sbiw	r28, 0x17	; 23
    1178:	67 96       	adiw	r28, 0x17	; 23
    117a:	2e ad       	ldd	r18, Y+62	; 0x3e
    117c:	3f ad       	ldd	r19, Y+63	; 0x3f
    117e:	67 97       	sbiw	r28, 0x17	; 23
    1180:	26 30       	cpi	r18, 0x06	; 6
    1182:	31 05       	cpc	r19, r1
    1184:	7c f3       	brlt	.-34     	; 0x1164 <__stack+0x65>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1186:	69 96       	adiw	r28, 0x19	; 25
    1188:	2e ad       	ldd	r18, Y+62	; 0x3e
    118a:	3f ad       	ldd	r19, Y+63	; 0x3f
    118c:	69 97       	sbiw	r28, 0x19	; 25
    118e:	2f 5f       	subi	r18, 0xFF	; 255
    1190:	3f 4f       	sbci	r19, 0xFF	; 255
    1192:	69 96       	adiw	r28, 0x19	; 25
    1194:	3f af       	std	Y+63, r19	; 0x3f
    1196:	2e af       	std	Y+62, r18	; 0x3e
    1198:	69 97       	sbiw	r28, 0x19	; 25
    119a:	69 96       	adiw	r28, 0x19	; 25
    119c:	2e ad       	ldd	r18, Y+62	; 0x3e
    119e:	3f ad       	ldd	r19, Y+63	; 0x3f
    11a0:	69 97       	sbiw	r28, 0x19	; 25
    11a2:	12 16       	cp	r1, r18
    11a4:	13 06       	cpc	r1, r19
    11a6:	9c f6       	brge	.-90     	; 0x114e <__stack+0x4f>
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
			iotmCharLcdEnOff; iotTimer::delay(1);
    11a8:	fc 01       	movw	r30, r24
    11aa:	e0 5d       	subi	r30, 0xD0	; 208
    11ac:	fe 4f       	sbci	r31, 0xFE	; 254
    11ae:	20 81       	ld	r18, Z
    11b0:	2f 70       	andi	r18, 0x0F	; 15
    11b2:	20 83       	st	Z, r18
    11b4:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    11b8:	65 96       	adiw	r28, 0x15	; 21
    11ba:	1f ae       	std	Y+63, r1	; 0x3f
    11bc:	1e ae       	std	Y+62, r1	; 0x3e
    11be:	65 97       	sbiw	r28, 0x15	; 21
    11c0:	65 96       	adiw	r28, 0x15	; 21
    11c2:	2e ad       	ldd	r18, Y+62	; 0x3e
    11c4:	3f ad       	ldd	r19, Y+63	; 0x3f
    11c6:	65 97       	sbiw	r28, 0x15	; 21
    11c8:	12 16       	cp	r1, r18
    11ca:	13 06       	cpc	r1, r19
    11cc:	6c f1       	brlt	.+90     	; 0x1228 <__stack+0x129>
				for(volatile int j = 0; j < 6; j++) ;
    11ce:	63 96       	adiw	r28, 0x13	; 19
    11d0:	1f ae       	std	Y+63, r1	; 0x3f
    11d2:	1e ae       	std	Y+62, r1	; 0x3e
    11d4:	63 97       	sbiw	r28, 0x13	; 19
    11d6:	63 96       	adiw	r28, 0x13	; 19
    11d8:	2e ad       	ldd	r18, Y+62	; 0x3e
    11da:	3f ad       	ldd	r19, Y+63	; 0x3f
    11dc:	63 97       	sbiw	r28, 0x13	; 19
    11de:	26 30       	cpi	r18, 0x06	; 6
    11e0:	31 05       	cpc	r19, r1
    11e2:	8c f4       	brge	.+34     	; 0x1206 <__stack+0x107>
    11e4:	63 96       	adiw	r28, 0x13	; 19
    11e6:	2e ad       	ldd	r18, Y+62	; 0x3e
    11e8:	3f ad       	ldd	r19, Y+63	; 0x3f
    11ea:	63 97       	sbiw	r28, 0x13	; 19
    11ec:	2f 5f       	subi	r18, 0xFF	; 255
    11ee:	3f 4f       	sbci	r19, 0xFF	; 255
    11f0:	63 96       	adiw	r28, 0x13	; 19
    11f2:	3f af       	std	Y+63, r19	; 0x3f
    11f4:	2e af       	std	Y+62, r18	; 0x3e
    11f6:	63 97       	sbiw	r28, 0x13	; 19
    11f8:	63 96       	adiw	r28, 0x13	; 19
    11fa:	2e ad       	ldd	r18, Y+62	; 0x3e
    11fc:	3f ad       	ldd	r19, Y+63	; 0x3f
    11fe:	63 97       	sbiw	r28, 0x13	; 19
    1200:	26 30       	cpi	r18, 0x06	; 6
    1202:	31 05       	cpc	r19, r1
    1204:	7c f3       	brlt	.-34     	; 0x11e4 <__stack+0xe5>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1206:	65 96       	adiw	r28, 0x15	; 21
    1208:	2e ad       	ldd	r18, Y+62	; 0x3e
    120a:	3f ad       	ldd	r19, Y+63	; 0x3f
    120c:	65 97       	sbiw	r28, 0x15	; 21
    120e:	2f 5f       	subi	r18, 0xFF	; 255
    1210:	3f 4f       	sbci	r19, 0xFF	; 255
    1212:	65 96       	adiw	r28, 0x15	; 21
    1214:	3f af       	std	Y+63, r19	; 0x3f
    1216:	2e af       	std	Y+62, r18	; 0x3e
    1218:	65 97       	sbiw	r28, 0x15	; 21
    121a:	65 96       	adiw	r28, 0x15	; 21
    121c:	2e ad       	ldd	r18, Y+62	; 0x3e
    121e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1220:	65 97       	sbiw	r28, 0x15	; 21
    1222:	12 16       	cp	r1, r18
    1224:	13 06       	cpc	r1, r19
    1226:	9c f6       	brge	.-90     	; 0x11ce <__stack+0xcf>
				writeControl(0xc0 + aX - 1); iotTimer::delay(1);
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
    1228:	fc 01       	movw	r30, r24
    122a:	e0 5d       	subi	r30, 0xD0	; 208
    122c:	fe 4f       	sbci	r31, 0xFE	; 254
    122e:	20 81       	ld	r18, Z
    1230:	2f 70       	andi	r18, 0x0F	; 15
    1232:	20 83       	st	Z, r18
    1234:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1238:	61 96       	adiw	r28, 0x11	; 17
    123a:	1f ae       	std	Y+63, r1	; 0x3f
    123c:	1e ae       	std	Y+62, r1	; 0x3e
    123e:	61 97       	sbiw	r28, 0x11	; 17
    1240:	61 96       	adiw	r28, 0x11	; 17
    1242:	2e ad       	ldd	r18, Y+62	; 0x3e
    1244:	3f ad       	ldd	r19, Y+63	; 0x3f
    1246:	61 97       	sbiw	r28, 0x11	; 17
    1248:	12 16       	cp	r1, r18
    124a:	13 06       	cpc	r1, r19
    124c:	6c f1       	brlt	.+90     	; 0x12a8 <__stack+0x1a9>
				for(volatile int j = 0; j < 6; j++) ;
    124e:	2f 96       	adiw	r28, 0x0f	; 15
    1250:	1f ae       	std	Y+63, r1	; 0x3f
    1252:	1e ae       	std	Y+62, r1	; 0x3e
    1254:	2f 97       	sbiw	r28, 0x0f	; 15
    1256:	2f 96       	adiw	r28, 0x0f	; 15
    1258:	2e ad       	ldd	r18, Y+62	; 0x3e
    125a:	3f ad       	ldd	r19, Y+63	; 0x3f
    125c:	2f 97       	sbiw	r28, 0x0f	; 15
    125e:	26 30       	cpi	r18, 0x06	; 6
    1260:	31 05       	cpc	r19, r1
    1262:	8c f4       	brge	.+34     	; 0x1286 <__stack+0x187>
    1264:	2f 96       	adiw	r28, 0x0f	; 15
    1266:	2e ad       	ldd	r18, Y+62	; 0x3e
    1268:	3f ad       	ldd	r19, Y+63	; 0x3f
    126a:	2f 97       	sbiw	r28, 0x0f	; 15
    126c:	2f 5f       	subi	r18, 0xFF	; 255
    126e:	3f 4f       	sbci	r19, 0xFF	; 255
    1270:	2f 96       	adiw	r28, 0x0f	; 15
    1272:	3f af       	std	Y+63, r19	; 0x3f
    1274:	2e af       	std	Y+62, r18	; 0x3e
    1276:	2f 97       	sbiw	r28, 0x0f	; 15
    1278:	2f 96       	adiw	r28, 0x0f	; 15
    127a:	2e ad       	ldd	r18, Y+62	; 0x3e
    127c:	3f ad       	ldd	r19, Y+63	; 0x3f
    127e:	2f 97       	sbiw	r28, 0x0f	; 15
    1280:	26 30       	cpi	r18, 0x06	; 6
    1282:	31 05       	cpc	r19, r1
    1284:	7c f3       	brlt	.-34     	; 0x1264 <__stack+0x165>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1286:	61 96       	adiw	r28, 0x11	; 17
    1288:	2e ad       	ldd	r18, Y+62	; 0x3e
    128a:	3f ad       	ldd	r19, Y+63	; 0x3f
    128c:	61 97       	sbiw	r28, 0x11	; 17
    128e:	2f 5f       	subi	r18, 0xFF	; 255
    1290:	3f 4f       	sbci	r19, 0xFF	; 255
    1292:	61 96       	adiw	r28, 0x11	; 17
    1294:	3f af       	std	Y+63, r19	; 0x3f
    1296:	2e af       	std	Y+62, r18	; 0x3e
    1298:	61 97       	sbiw	r28, 0x11	; 17
    129a:	61 96       	adiw	r28, 0x11	; 17
    129c:	2e ad       	ldd	r18, Y+62	; 0x3e
    129e:	3f ad       	ldd	r19, Y+63	; 0x3f
    12a0:	61 97       	sbiw	r28, 0x11	; 17
    12a2:	12 16       	cp	r1, r18
    12a4:	13 06       	cpc	r1, r19
    12a6:	9c f6       	brge	.-90     	; 0x124e <__stack+0x14f>
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
    12a8:	fc 01       	movw	r30, r24
    12aa:	e0 5d       	subi	r30, 0xD0	; 208
    12ac:	fe 4f       	sbci	r31, 0xFE	; 254
    12ae:	20 81       	ld	r18, Z
    12b0:	2b 71       	andi	r18, 0x1B	; 27
    12b2:	20 83       	st	Z, r18
    12b4:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    12b8:	2d 96       	adiw	r28, 0x0d	; 13
    12ba:	1f ae       	std	Y+63, r1	; 0x3f
    12bc:	1e ae       	std	Y+62, r1	; 0x3e
    12be:	2d 97       	sbiw	r28, 0x0d	; 13
    12c0:	2d 96       	adiw	r28, 0x0d	; 13
    12c2:	2e ad       	ldd	r18, Y+62	; 0x3e
    12c4:	3f ad       	ldd	r19, Y+63	; 0x3f
    12c6:	2d 97       	sbiw	r28, 0x0d	; 13
    12c8:	12 16       	cp	r1, r18
    12ca:	13 06       	cpc	r1, r19
    12cc:	6c f1       	brlt	.+90     	; 0x1328 <__stack+0x229>
				for(volatile int j = 0; j < 6; j++) ;
    12ce:	2b 96       	adiw	r28, 0x0b	; 11
    12d0:	1f ae       	std	Y+63, r1	; 0x3f
    12d2:	1e ae       	std	Y+62, r1	; 0x3e
    12d4:	2b 97       	sbiw	r28, 0x0b	; 11
    12d6:	2b 96       	adiw	r28, 0x0b	; 11
    12d8:	2e ad       	ldd	r18, Y+62	; 0x3e
    12da:	3f ad       	ldd	r19, Y+63	; 0x3f
    12dc:	2b 97       	sbiw	r28, 0x0b	; 11
    12de:	26 30       	cpi	r18, 0x06	; 6
    12e0:	31 05       	cpc	r19, r1
    12e2:	8c f4       	brge	.+34     	; 0x1306 <__stack+0x207>
    12e4:	2b 96       	adiw	r28, 0x0b	; 11
    12e6:	2e ad       	ldd	r18, Y+62	; 0x3e
    12e8:	3f ad       	ldd	r19, Y+63	; 0x3f
    12ea:	2b 97       	sbiw	r28, 0x0b	; 11
    12ec:	2f 5f       	subi	r18, 0xFF	; 255
    12ee:	3f 4f       	sbci	r19, 0xFF	; 255
    12f0:	2b 96       	adiw	r28, 0x0b	; 11
    12f2:	3f af       	std	Y+63, r19	; 0x3f
    12f4:	2e af       	std	Y+62, r18	; 0x3e
    12f6:	2b 97       	sbiw	r28, 0x0b	; 11
    12f8:	2b 96       	adiw	r28, 0x0b	; 11
    12fa:	2e ad       	ldd	r18, Y+62	; 0x3e
    12fc:	3f ad       	ldd	r19, Y+63	; 0x3f
    12fe:	2b 97       	sbiw	r28, 0x0b	; 11
    1300:	26 30       	cpi	r18, 0x06	; 6
    1302:	31 05       	cpc	r19, r1
    1304:	7c f3       	brlt	.-34     	; 0x12e4 <__stack+0x1e5>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1306:	2d 96       	adiw	r28, 0x0d	; 13
    1308:	2e ad       	ldd	r18, Y+62	; 0x3e
    130a:	3f ad       	ldd	r19, Y+63	; 0x3f
    130c:	2d 97       	sbiw	r28, 0x0d	; 13
    130e:	2f 5f       	subi	r18, 0xFF	; 255
    1310:	3f 4f       	sbci	r19, 0xFF	; 255
    1312:	2d 96       	adiw	r28, 0x0d	; 13
    1314:	3f af       	std	Y+63, r19	; 0x3f
    1316:	2e af       	std	Y+62, r18	; 0x3e
    1318:	2d 97       	sbiw	r28, 0x0d	; 13
    131a:	2d 96       	adiw	r28, 0x0d	; 13
    131c:	2e ad       	ldd	r18, Y+62	; 0x3e
    131e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1320:	2d 97       	sbiw	r28, 0x0d	; 13
    1322:	12 16       	cp	r1, r18
    1324:	13 06       	cpc	r1, r19
    1326:	9c f6       	brge	.-90     	; 0x12ce <__stack+0x1cf>
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
    1328:	fc 01       	movw	r30, r24
    132a:	e0 5d       	subi	r30, 0xD0	; 208
    132c:	fe 4f       	sbci	r31, 0xFE	; 254
    132e:	20 81       	ld	r18, Z
    1330:	27 71       	andi	r18, 0x17	; 23
    1332:	20 83       	st	Z, r18
    1334:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1338:	29 96       	adiw	r28, 0x09	; 9
    133a:	1f ae       	std	Y+63, r1	; 0x3f
    133c:	1e ae       	std	Y+62, r1	; 0x3e
    133e:	29 97       	sbiw	r28, 0x09	; 9
    1340:	29 96       	adiw	r28, 0x09	; 9
    1342:	2e ad       	ldd	r18, Y+62	; 0x3e
    1344:	3f ad       	ldd	r19, Y+63	; 0x3f
    1346:	29 97       	sbiw	r28, 0x09	; 9
    1348:	12 16       	cp	r1, r18
    134a:	13 06       	cpc	r1, r19
    134c:	6c f1       	brlt	.+90     	; 0x13a8 <__stack+0x2a9>
				for(volatile int j = 0; j < 6; j++) ;
    134e:	27 96       	adiw	r28, 0x07	; 7
    1350:	1f ae       	std	Y+63, r1	; 0x3f
    1352:	1e ae       	std	Y+62, r1	; 0x3e
    1354:	27 97       	sbiw	r28, 0x07	; 7
    1356:	27 96       	adiw	r28, 0x07	; 7
    1358:	2e ad       	ldd	r18, Y+62	; 0x3e
    135a:	3f ad       	ldd	r19, Y+63	; 0x3f
    135c:	27 97       	sbiw	r28, 0x07	; 7
    135e:	26 30       	cpi	r18, 0x06	; 6
    1360:	31 05       	cpc	r19, r1
    1362:	8c f4       	brge	.+34     	; 0x1386 <__stack+0x287>
    1364:	27 96       	adiw	r28, 0x07	; 7
    1366:	2e ad       	ldd	r18, Y+62	; 0x3e
    1368:	3f ad       	ldd	r19, Y+63	; 0x3f
    136a:	27 97       	sbiw	r28, 0x07	; 7
    136c:	2f 5f       	subi	r18, 0xFF	; 255
    136e:	3f 4f       	sbci	r19, 0xFF	; 255
    1370:	27 96       	adiw	r28, 0x07	; 7
    1372:	3f af       	std	Y+63, r19	; 0x3f
    1374:	2e af       	std	Y+62, r18	; 0x3e
    1376:	27 97       	sbiw	r28, 0x07	; 7
    1378:	27 96       	adiw	r28, 0x07	; 7
    137a:	2e ad       	ldd	r18, Y+62	; 0x3e
    137c:	3f ad       	ldd	r19, Y+63	; 0x3f
    137e:	27 97       	sbiw	r28, 0x07	; 7
    1380:	26 30       	cpi	r18, 0x06	; 6
    1382:	31 05       	cpc	r19, r1
    1384:	7c f3       	brlt	.-34     	; 0x1364 <__stack+0x265>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1386:	29 96       	adiw	r28, 0x09	; 9
    1388:	2e ad       	ldd	r18, Y+62	; 0x3e
    138a:	3f ad       	ldd	r19, Y+63	; 0x3f
    138c:	29 97       	sbiw	r28, 0x09	; 9
    138e:	2f 5f       	subi	r18, 0xFF	; 255
    1390:	3f 4f       	sbci	r19, 0xFF	; 255
    1392:	29 96       	adiw	r28, 0x09	; 9
    1394:	3f af       	std	Y+63, r19	; 0x3f
    1396:	2e af       	std	Y+62, r18	; 0x3e
    1398:	29 97       	sbiw	r28, 0x09	; 9
    139a:	29 96       	adiw	r28, 0x09	; 9
    139c:	2e ad       	ldd	r18, Y+62	; 0x3e
    139e:	3f ad       	ldd	r19, Y+63	; 0x3f
    13a0:	29 97       	sbiw	r28, 0x09	; 9
    13a2:	12 16       	cp	r1, r18
    13a4:	13 06       	cpc	r1, r19
    13a6:	9c f6       	brge	.-90     	; 0x134e <__stack+0x24f>
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
    13a8:	fc 01       	movw	r30, r24
    13aa:	e0 5d       	subi	r30, 0xD0	; 208
    13ac:	fe 4f       	sbci	r31, 0xFE	; 254
    13ae:	20 81       	ld	r18, Z
    13b0:	20 61       	ori	r18, 0x10	; 16
    13b2:	20 83       	st	Z, r18
    13b4:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    13b8:	25 96       	adiw	r28, 0x05	; 5
    13ba:	1f ae       	std	Y+63, r1	; 0x3f
    13bc:	1e ae       	std	Y+62, r1	; 0x3e
    13be:	25 97       	sbiw	r28, 0x05	; 5
    13c0:	25 96       	adiw	r28, 0x05	; 5
    13c2:	2e ad       	ldd	r18, Y+62	; 0x3e
    13c4:	3f ad       	ldd	r19, Y+63	; 0x3f
    13c6:	25 97       	sbiw	r28, 0x05	; 5
    13c8:	12 16       	cp	r1, r18
    13ca:	13 06       	cpc	r1, r19
    13cc:	6c f1       	brlt	.+90     	; 0x1428 <__stack+0x329>
				for(volatile int j = 0; j < 6; j++) ;
    13ce:	23 96       	adiw	r28, 0x03	; 3
    13d0:	1f ae       	std	Y+63, r1	; 0x3f
    13d2:	1e ae       	std	Y+62, r1	; 0x3e
    13d4:	23 97       	sbiw	r28, 0x03	; 3
    13d6:	23 96       	adiw	r28, 0x03	; 3
    13d8:	2e ad       	ldd	r18, Y+62	; 0x3e
    13da:	3f ad       	ldd	r19, Y+63	; 0x3f
    13dc:	23 97       	sbiw	r28, 0x03	; 3
    13de:	26 30       	cpi	r18, 0x06	; 6
    13e0:	31 05       	cpc	r19, r1
    13e2:	8c f4       	brge	.+34     	; 0x1406 <__stack+0x307>
    13e4:	23 96       	adiw	r28, 0x03	; 3
    13e6:	2e ad       	ldd	r18, Y+62	; 0x3e
    13e8:	3f ad       	ldd	r19, Y+63	; 0x3f
    13ea:	23 97       	sbiw	r28, 0x03	; 3
    13ec:	2f 5f       	subi	r18, 0xFF	; 255
    13ee:	3f 4f       	sbci	r19, 0xFF	; 255
    13f0:	23 96       	adiw	r28, 0x03	; 3
    13f2:	3f af       	std	Y+63, r19	; 0x3f
    13f4:	2e af       	std	Y+62, r18	; 0x3e
    13f6:	23 97       	sbiw	r28, 0x03	; 3
    13f8:	23 96       	adiw	r28, 0x03	; 3
    13fa:	2e ad       	ldd	r18, Y+62	; 0x3e
    13fc:	3f ad       	ldd	r19, Y+63	; 0x3f
    13fe:	23 97       	sbiw	r28, 0x03	; 3
    1400:	26 30       	cpi	r18, 0x06	; 6
    1402:	31 05       	cpc	r19, r1
    1404:	7c f3       	brlt	.-34     	; 0x13e4 <__stack+0x2e5>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1406:	25 96       	adiw	r28, 0x05	; 5
    1408:	2e ad       	ldd	r18, Y+62	; 0x3e
    140a:	3f ad       	ldd	r19, Y+63	; 0x3f
    140c:	25 97       	sbiw	r28, 0x05	; 5
    140e:	2f 5f       	subi	r18, 0xFF	; 255
    1410:	3f 4f       	sbci	r19, 0xFF	; 255
    1412:	25 96       	adiw	r28, 0x05	; 5
    1414:	3f af       	std	Y+63, r19	; 0x3f
    1416:	2e af       	std	Y+62, r18	; 0x3e
    1418:	25 97       	sbiw	r28, 0x05	; 5
    141a:	25 96       	adiw	r28, 0x05	; 5
    141c:	2e ad       	ldd	r18, Y+62	; 0x3e
    141e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1420:	25 97       	sbiw	r28, 0x05	; 5
    1422:	12 16       	cp	r1, r18
    1424:	13 06       	cpc	r1, r19
    1426:	9c f6       	brge	.-90     	; 0x13ce <__stack+0x2cf>
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
    1428:	26 e0       	ldi	r18, 0x06	; 6
    142a:	2b bb       	out	0x1b, r18	; 27
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    142c:	21 96       	adiw	r28, 0x01	; 1
    142e:	1f ae       	std	Y+63, r1	; 0x3f
    1430:	1e ae       	std	Y+62, r1	; 0x3e
    1432:	21 97       	sbiw	r28, 0x01	; 1
    1434:	21 96       	adiw	r28, 0x01	; 1
    1436:	2e ad       	ldd	r18, Y+62	; 0x3e
    1438:	3f ad       	ldd	r19, Y+63	; 0x3f
    143a:	21 97       	sbiw	r28, 0x01	; 1
    143c:	12 16       	cp	r1, r18
    143e:	13 06       	cpc	r1, r19
    1440:	1c f1       	brlt	.+70     	; 0x1488 <__stack+0x389>
				for(volatile int j = 0; j < 6; j++) ;
    1442:	1e ae       	std	Y+62, r1	; 0x3e
    1444:	1d ae       	std	Y+61, r1	; 0x3d
    1446:	2d ad       	ldd	r18, Y+61	; 0x3d
    1448:	3e ad       	ldd	r19, Y+62	; 0x3e
    144a:	26 30       	cpi	r18, 0x06	; 6
    144c:	31 05       	cpc	r19, r1
    144e:	5c f4       	brge	.+22     	; 0x1466 <__stack+0x367>
    1450:	2d ad       	ldd	r18, Y+61	; 0x3d
    1452:	3e ad       	ldd	r19, Y+62	; 0x3e
    1454:	2f 5f       	subi	r18, 0xFF	; 255
    1456:	3f 4f       	sbci	r19, 0xFF	; 255
    1458:	3e af       	std	Y+62, r19	; 0x3e
    145a:	2d af       	std	Y+61, r18	; 0x3d
    145c:	2d ad       	ldd	r18, Y+61	; 0x3d
    145e:	3e ad       	ldd	r19, Y+62	; 0x3e
    1460:	26 30       	cpi	r18, 0x06	; 6
    1462:	31 05       	cpc	r19, r1
    1464:	ac f3       	brlt	.-22     	; 0x1450 <__stack+0x351>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1466:	21 96       	adiw	r28, 0x01	; 1
    1468:	2e ad       	ldd	r18, Y+62	; 0x3e
    146a:	3f ad       	ldd	r19, Y+63	; 0x3f
    146c:	21 97       	sbiw	r28, 0x01	; 1
    146e:	2f 5f       	subi	r18, 0xFF	; 255
    1470:	3f 4f       	sbci	r19, 0xFF	; 255
    1472:	21 96       	adiw	r28, 0x01	; 1
    1474:	3f af       	std	Y+63, r19	; 0x3f
    1476:	2e af       	std	Y+62, r18	; 0x3e
    1478:	21 97       	sbiw	r28, 0x01	; 1
    147a:	21 96       	adiw	r28, 0x01	; 1
    147c:	2e ad       	ldd	r18, Y+62	; 0x3e
    147e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1480:	21 97       	sbiw	r28, 0x01	; 1
    1482:	12 16       	cp	r1, r18
    1484:	13 06       	cpc	r1, r19
    1486:	ec f6       	brge	.-70     	; 0x1442 <__stack+0x343>
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
			iotmCharLcdEnOff; iotTimer::delay(1);
    1488:	fc 01       	movw	r30, r24
    148a:	e0 5d       	subi	r30, 0xD0	; 208
    148c:	fe 4f       	sbci	r31, 0xFE	; 254
    148e:	20 81       	ld	r18, Z
    1490:	2f 70       	andi	r18, 0x0F	; 15
    1492:	20 83       	st	Z, r18
    1494:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1498:	1c ae       	std	Y+60, r1	; 0x3c
    149a:	1b ae       	std	Y+59, r1	; 0x3b
    149c:	2b ad       	ldd	r18, Y+59	; 0x3b
    149e:	3c ad       	ldd	r19, Y+60	; 0x3c
    14a0:	12 16       	cp	r1, r18
    14a2:	13 06       	cpc	r1, r19
    14a4:	ec f0       	brlt	.+58     	; 0x14e0 <__stack+0x3e1>
				for(volatile int j = 0; j < 6; j++) ;
    14a6:	1a ae       	std	Y+58, r1	; 0x3a
    14a8:	19 ae       	std	Y+57, r1	; 0x39
    14aa:	29 ad       	ldd	r18, Y+57	; 0x39
    14ac:	3a ad       	ldd	r19, Y+58	; 0x3a
    14ae:	26 30       	cpi	r18, 0x06	; 6
    14b0:	31 05       	cpc	r19, r1
    14b2:	5c f4       	brge	.+22     	; 0x14ca <__stack+0x3cb>
    14b4:	29 ad       	ldd	r18, Y+57	; 0x39
    14b6:	3a ad       	ldd	r19, Y+58	; 0x3a
    14b8:	2f 5f       	subi	r18, 0xFF	; 255
    14ba:	3f 4f       	sbci	r19, 0xFF	; 255
    14bc:	3a af       	std	Y+58, r19	; 0x3a
    14be:	29 af       	std	Y+57, r18	; 0x39
    14c0:	29 ad       	ldd	r18, Y+57	; 0x39
    14c2:	3a ad       	ldd	r19, Y+58	; 0x3a
    14c4:	26 30       	cpi	r18, 0x06	; 6
    14c6:	31 05       	cpc	r19, r1
    14c8:	ac f3       	brlt	.-22     	; 0x14b4 <__stack+0x3b5>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    14ca:	2b ad       	ldd	r18, Y+59	; 0x3b
    14cc:	3c ad       	ldd	r19, Y+60	; 0x3c
    14ce:	2f 5f       	subi	r18, 0xFF	; 255
    14d0:	3f 4f       	sbci	r19, 0xFF	; 255
    14d2:	3c af       	std	Y+60, r19	; 0x3c
    14d4:	2b af       	std	Y+59, r18	; 0x3b
    14d6:	2b ad       	ldd	r18, Y+59	; 0x3b
    14d8:	3c ad       	ldd	r19, Y+60	; 0x3c
    14da:	12 16       	cp	r1, r18
    14dc:	13 06       	cpc	r1, r19
    14de:	1c f7       	brge	.-58     	; 0x14a6 <__stack+0x3a7>
				writeControl(0xc0 + aX - 1); iotTimer::delay(1);
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
    14e0:	fc 01       	movw	r30, r24
    14e2:	e0 5d       	subi	r30, 0xD0	; 208
    14e4:	fe 4f       	sbci	r31, 0xFE	; 254
    14e6:	20 81       	ld	r18, Z
    14e8:	2f 70       	andi	r18, 0x0F	; 15
    14ea:	20 83       	st	Z, r18
    14ec:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    14f0:	18 ae       	std	Y+56, r1	; 0x38
    14f2:	1f aa       	std	Y+55, r1	; 0x37
    14f4:	2f a9       	ldd	r18, Y+55	; 0x37
    14f6:	38 ad       	ldd	r19, Y+56	; 0x38
    14f8:	12 16       	cp	r1, r18
    14fa:	13 06       	cpc	r1, r19
    14fc:	ec f0       	brlt	.+58     	; 0x1538 <__stack+0x439>
				for(volatile int j = 0; j < 6; j++) ;
    14fe:	1e aa       	std	Y+54, r1	; 0x36
    1500:	1d aa       	std	Y+53, r1	; 0x35
    1502:	2d a9       	ldd	r18, Y+53	; 0x35
    1504:	3e a9       	ldd	r19, Y+54	; 0x36
    1506:	26 30       	cpi	r18, 0x06	; 6
    1508:	31 05       	cpc	r19, r1
    150a:	5c f4       	brge	.+22     	; 0x1522 <__stack+0x423>
    150c:	2d a9       	ldd	r18, Y+53	; 0x35
    150e:	3e a9       	ldd	r19, Y+54	; 0x36
    1510:	2f 5f       	subi	r18, 0xFF	; 255
    1512:	3f 4f       	sbci	r19, 0xFF	; 255
    1514:	3e ab       	std	Y+54, r19	; 0x36
    1516:	2d ab       	std	Y+53, r18	; 0x35
    1518:	2d a9       	ldd	r18, Y+53	; 0x35
    151a:	3e a9       	ldd	r19, Y+54	; 0x36
    151c:	26 30       	cpi	r18, 0x06	; 6
    151e:	31 05       	cpc	r19, r1
    1520:	ac f3       	brlt	.-22     	; 0x150c <__stack+0x40d>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1522:	2f a9       	ldd	r18, Y+55	; 0x37
    1524:	38 ad       	ldd	r19, Y+56	; 0x38
    1526:	2f 5f       	subi	r18, 0xFF	; 255
    1528:	3f 4f       	sbci	r19, 0xFF	; 255
    152a:	38 af       	std	Y+56, r19	; 0x38
    152c:	2f ab       	std	Y+55, r18	; 0x37
    152e:	2f a9       	ldd	r18, Y+55	; 0x37
    1530:	38 ad       	ldd	r19, Y+56	; 0x38
    1532:	12 16       	cp	r1, r18
    1534:	13 06       	cpc	r1, r19
    1536:	1c f7       	brge	.-58     	; 0x14fe <__stack+0x3ff>
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
    1538:	fc 01       	movw	r30, r24
    153a:	e0 5d       	subi	r30, 0xD0	; 208
    153c:	fe 4f       	sbci	r31, 0xFE	; 254
    153e:	20 81       	ld	r18, Z
    1540:	2b 71       	andi	r18, 0x1B	; 27
    1542:	20 83       	st	Z, r18
    1544:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1548:	1c aa       	std	Y+52, r1	; 0x34
    154a:	1b aa       	std	Y+51, r1	; 0x33
    154c:	2b a9       	ldd	r18, Y+51	; 0x33
    154e:	3c a9       	ldd	r19, Y+52	; 0x34
    1550:	12 16       	cp	r1, r18
    1552:	13 06       	cpc	r1, r19
    1554:	ec f0       	brlt	.+58     	; 0x1590 <__stack+0x491>
				for(volatile int j = 0; j < 6; j++) ;
    1556:	1a aa       	std	Y+50, r1	; 0x32
    1558:	19 aa       	std	Y+49, r1	; 0x31
    155a:	29 a9       	ldd	r18, Y+49	; 0x31
    155c:	3a a9       	ldd	r19, Y+50	; 0x32
    155e:	26 30       	cpi	r18, 0x06	; 6
    1560:	31 05       	cpc	r19, r1
    1562:	5c f4       	brge	.+22     	; 0x157a <__stack+0x47b>
    1564:	29 a9       	ldd	r18, Y+49	; 0x31
    1566:	3a a9       	ldd	r19, Y+50	; 0x32
    1568:	2f 5f       	subi	r18, 0xFF	; 255
    156a:	3f 4f       	sbci	r19, 0xFF	; 255
    156c:	3a ab       	std	Y+50, r19	; 0x32
    156e:	29 ab       	std	Y+49, r18	; 0x31
    1570:	29 a9       	ldd	r18, Y+49	; 0x31
    1572:	3a a9       	ldd	r19, Y+50	; 0x32
    1574:	26 30       	cpi	r18, 0x06	; 6
    1576:	31 05       	cpc	r19, r1
    1578:	ac f3       	brlt	.-22     	; 0x1564 <__stack+0x465>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    157a:	2b a9       	ldd	r18, Y+51	; 0x33
    157c:	3c a9       	ldd	r19, Y+52	; 0x34
    157e:	2f 5f       	subi	r18, 0xFF	; 255
    1580:	3f 4f       	sbci	r19, 0xFF	; 255
    1582:	3c ab       	std	Y+52, r19	; 0x34
    1584:	2b ab       	std	Y+51, r18	; 0x33
    1586:	2b a9       	ldd	r18, Y+51	; 0x33
    1588:	3c a9       	ldd	r19, Y+52	; 0x34
    158a:	12 16       	cp	r1, r18
    158c:	13 06       	cpc	r1, r19
    158e:	1c f7       	brge	.-58     	; 0x1556 <__stack+0x457>
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
    1590:	fc 01       	movw	r30, r24
    1592:	e0 5d       	subi	r30, 0xD0	; 208
    1594:	fe 4f       	sbci	r31, 0xFE	; 254
    1596:	20 81       	ld	r18, Z
    1598:	27 71       	andi	r18, 0x17	; 23
    159a:	20 83       	st	Z, r18
    159c:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    15a0:	18 aa       	std	Y+48, r1	; 0x30
    15a2:	1f a6       	std	Y+47, r1	; 0x2f
    15a4:	2f a5       	ldd	r18, Y+47	; 0x2f
    15a6:	38 a9       	ldd	r19, Y+48	; 0x30
    15a8:	12 16       	cp	r1, r18
    15aa:	13 06       	cpc	r1, r19
    15ac:	ec f0       	brlt	.+58     	; 0x15e8 <__stack+0x4e9>
				for(volatile int j = 0; j < 6; j++) ;
    15ae:	1e a6       	std	Y+46, r1	; 0x2e
    15b0:	1d a6       	std	Y+45, r1	; 0x2d
    15b2:	2d a5       	ldd	r18, Y+45	; 0x2d
    15b4:	3e a5       	ldd	r19, Y+46	; 0x2e
    15b6:	26 30       	cpi	r18, 0x06	; 6
    15b8:	31 05       	cpc	r19, r1
    15ba:	5c f4       	brge	.+22     	; 0x15d2 <__stack+0x4d3>
    15bc:	2d a5       	ldd	r18, Y+45	; 0x2d
    15be:	3e a5       	ldd	r19, Y+46	; 0x2e
    15c0:	2f 5f       	subi	r18, 0xFF	; 255
    15c2:	3f 4f       	sbci	r19, 0xFF	; 255
    15c4:	3e a7       	std	Y+46, r19	; 0x2e
    15c6:	2d a7       	std	Y+45, r18	; 0x2d
    15c8:	2d a5       	ldd	r18, Y+45	; 0x2d
    15ca:	3e a5       	ldd	r19, Y+46	; 0x2e
    15cc:	26 30       	cpi	r18, 0x06	; 6
    15ce:	31 05       	cpc	r19, r1
    15d0:	ac f3       	brlt	.-22     	; 0x15bc <__stack+0x4bd>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    15d2:	2f a5       	ldd	r18, Y+47	; 0x2f
    15d4:	38 a9       	ldd	r19, Y+48	; 0x30
    15d6:	2f 5f       	subi	r18, 0xFF	; 255
    15d8:	3f 4f       	sbci	r19, 0xFF	; 255
    15da:	38 ab       	std	Y+48, r19	; 0x30
    15dc:	2f a7       	std	Y+47, r18	; 0x2f
    15de:	2f a5       	ldd	r18, Y+47	; 0x2f
    15e0:	38 a9       	ldd	r19, Y+48	; 0x30
    15e2:	12 16       	cp	r1, r18
    15e4:	13 06       	cpc	r1, r19
    15e6:	1c f7       	brge	.-58     	; 0x15ae <__stack+0x4af>
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
    15e8:	fc 01       	movw	r30, r24
    15ea:	e0 5d       	subi	r30, 0xD0	; 208
    15ec:	fe 4f       	sbci	r31, 0xFE	; 254
    15ee:	20 81       	ld	r18, Z
    15f0:	20 61       	ori	r18, 0x10	; 16
    15f2:	20 83       	st	Z, r18
    15f4:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    15f8:	1c a6       	std	Y+44, r1	; 0x2c
    15fa:	1b a6       	std	Y+43, r1	; 0x2b
    15fc:	2b a5       	ldd	r18, Y+43	; 0x2b
    15fe:	3c a5       	ldd	r19, Y+44	; 0x2c
    1600:	12 16       	cp	r1, r18
    1602:	13 06       	cpc	r1, r19
    1604:	ec f0       	brlt	.+58     	; 0x1640 <__stack+0x541>
				for(volatile int j = 0; j < 6; j++) ;
    1606:	1a a6       	std	Y+42, r1	; 0x2a
    1608:	19 a6       	std	Y+41, r1	; 0x29
    160a:	29 a5       	ldd	r18, Y+41	; 0x29
    160c:	3a a5       	ldd	r19, Y+42	; 0x2a
    160e:	26 30       	cpi	r18, 0x06	; 6
    1610:	31 05       	cpc	r19, r1
    1612:	5c f4       	brge	.+22     	; 0x162a <__stack+0x52b>
    1614:	29 a5       	ldd	r18, Y+41	; 0x29
    1616:	3a a5       	ldd	r19, Y+42	; 0x2a
    1618:	2f 5f       	subi	r18, 0xFF	; 255
    161a:	3f 4f       	sbci	r19, 0xFF	; 255
    161c:	3a a7       	std	Y+42, r19	; 0x2a
    161e:	29 a7       	std	Y+41, r18	; 0x29
    1620:	29 a5       	ldd	r18, Y+41	; 0x29
    1622:	3a a5       	ldd	r19, Y+42	; 0x2a
    1624:	26 30       	cpi	r18, 0x06	; 6
    1626:	31 05       	cpc	r19, r1
    1628:	ac f3       	brlt	.-22     	; 0x1614 <__stack+0x515>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    162a:	2b a5       	ldd	r18, Y+43	; 0x2b
    162c:	3c a5       	ldd	r19, Y+44	; 0x2c
    162e:	2f 5f       	subi	r18, 0xFF	; 255
    1630:	3f 4f       	sbci	r19, 0xFF	; 255
    1632:	3c a7       	std	Y+44, r19	; 0x2c
    1634:	2b a7       	std	Y+43, r18	; 0x2b
    1636:	2b a5       	ldd	r18, Y+43	; 0x2b
    1638:	3c a5       	ldd	r19, Y+44	; 0x2c
    163a:	12 16       	cp	r1, r18
    163c:	13 06       	cpc	r1, r19
    163e:	1c f7       	brge	.-58     	; 0x1606 <__stack+0x507>
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
    1640:	21 e0       	ldi	r18, 0x01	; 1
    1642:	2b bb       	out	0x1b, r18	; 27
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1644:	18 a6       	std	Y+40, r1	; 0x28
    1646:	1f a2       	std	Y+39, r1	; 0x27
    1648:	2f a1       	ldd	r18, Y+39	; 0x27
    164a:	38 a5       	ldd	r19, Y+40	; 0x28
    164c:	12 16       	cp	r1, r18
    164e:	13 06       	cpc	r1, r19
    1650:	ec f0       	brlt	.+58     	; 0x168c <__stack+0x58d>
				for(volatile int j = 0; j < 6; j++) ;
    1652:	1e a2       	std	Y+38, r1	; 0x26
    1654:	1d a2       	std	Y+37, r1	; 0x25
    1656:	2d a1       	ldd	r18, Y+37	; 0x25
    1658:	3e a1       	ldd	r19, Y+38	; 0x26
    165a:	26 30       	cpi	r18, 0x06	; 6
    165c:	31 05       	cpc	r19, r1
    165e:	5c f4       	brge	.+22     	; 0x1676 <__stack+0x577>
    1660:	2d a1       	ldd	r18, Y+37	; 0x25
    1662:	3e a1       	ldd	r19, Y+38	; 0x26
    1664:	2f 5f       	subi	r18, 0xFF	; 255
    1666:	3f 4f       	sbci	r19, 0xFF	; 255
    1668:	3e a3       	std	Y+38, r19	; 0x26
    166a:	2d a3       	std	Y+37, r18	; 0x25
    166c:	2d a1       	ldd	r18, Y+37	; 0x25
    166e:	3e a1       	ldd	r19, Y+38	; 0x26
    1670:	26 30       	cpi	r18, 0x06	; 6
    1672:	31 05       	cpc	r19, r1
    1674:	ac f3       	brlt	.-22     	; 0x1660 <__stack+0x561>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1676:	2f a1       	ldd	r18, Y+39	; 0x27
    1678:	38 a5       	ldd	r19, Y+40	; 0x28
    167a:	2f 5f       	subi	r18, 0xFF	; 255
    167c:	3f 4f       	sbci	r19, 0xFF	; 255
    167e:	38 a7       	std	Y+40, r19	; 0x28
    1680:	2f a3       	std	Y+39, r18	; 0x27
    1682:	2f a1       	ldd	r18, Y+39	; 0x27
    1684:	38 a5       	ldd	r19, Y+40	; 0x28
    1686:	12 16       	cp	r1, r18
    1688:	13 06       	cpc	r1, r19
    168a:	1c f7       	brge	.-58     	; 0x1652 <__stack+0x553>
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
			iotmCharLcdEnOff; iotTimer::delay(1);
    168c:	fc 01       	movw	r30, r24
    168e:	e0 5d       	subi	r30, 0xD0	; 208
    1690:	fe 4f       	sbci	r31, 0xFE	; 254
    1692:	20 81       	ld	r18, Z
    1694:	2f 70       	andi	r18, 0x0F	; 15
    1696:	20 83       	st	Z, r18
    1698:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    169c:	1c a2       	std	Y+36, r1	; 0x24
    169e:	1b a2       	std	Y+35, r1	; 0x23
    16a0:	2b a1       	ldd	r18, Y+35	; 0x23
    16a2:	3c a1       	ldd	r19, Y+36	; 0x24
    16a4:	12 16       	cp	r1, r18
    16a6:	13 06       	cpc	r1, r19
    16a8:	ec f0       	brlt	.+58     	; 0x16e4 <__stack+0x5e5>
				for(volatile int j = 0; j < 6; j++) ;
    16aa:	1a a2       	std	Y+34, r1	; 0x22
    16ac:	19 a2       	std	Y+33, r1	; 0x21
    16ae:	29 a1       	ldd	r18, Y+33	; 0x21
    16b0:	3a a1       	ldd	r19, Y+34	; 0x22
    16b2:	26 30       	cpi	r18, 0x06	; 6
    16b4:	31 05       	cpc	r19, r1
    16b6:	5c f4       	brge	.+22     	; 0x16ce <__stack+0x5cf>
    16b8:	29 a1       	ldd	r18, Y+33	; 0x21
    16ba:	3a a1       	ldd	r19, Y+34	; 0x22
    16bc:	2f 5f       	subi	r18, 0xFF	; 255
    16be:	3f 4f       	sbci	r19, 0xFF	; 255
    16c0:	3a a3       	std	Y+34, r19	; 0x22
    16c2:	29 a3       	std	Y+33, r18	; 0x21
    16c4:	29 a1       	ldd	r18, Y+33	; 0x21
    16c6:	3a a1       	ldd	r19, Y+34	; 0x22
    16c8:	26 30       	cpi	r18, 0x06	; 6
    16ca:	31 05       	cpc	r19, r1
    16cc:	ac f3       	brlt	.-22     	; 0x16b8 <__stack+0x5b9>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    16ce:	2b a1       	ldd	r18, Y+35	; 0x23
    16d0:	3c a1       	ldd	r19, Y+36	; 0x24
    16d2:	2f 5f       	subi	r18, 0xFF	; 255
    16d4:	3f 4f       	sbci	r19, 0xFF	; 255
    16d6:	3c a3       	std	Y+36, r19	; 0x24
    16d8:	2b a3       	std	Y+35, r18	; 0x23
    16da:	2b a1       	ldd	r18, Y+35	; 0x23
    16dc:	3c a1       	ldd	r19, Y+36	; 0x24
    16de:	12 16       	cp	r1, r18
    16e0:	13 06       	cpc	r1, r19
    16e2:	1c f7       	brge	.-58     	; 0x16aa <__stack+0x5ab>
    16e4:	18 a2       	std	Y+32, r1	; 0x20
    16e6:	1f 8e       	std	Y+31, r1	; 0x1f
    16e8:	2f 8d       	ldd	r18, Y+31	; 0x1f
    16ea:	38 a1       	ldd	r19, Y+32	; 0x20
    16ec:	24 36       	cpi	r18, 0x64	; 100
    16ee:	31 05       	cpc	r19, r1
    16f0:	ec f4       	brge	.+58     	; 0x172c <__stack+0x62d>
				for(volatile int j = 0; j < 6; j++) ;
    16f2:	1e 8e       	std	Y+30, r1	; 0x1e
    16f4:	1d 8e       	std	Y+29, r1	; 0x1d
    16f6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    16f8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    16fa:	26 30       	cpi	r18, 0x06	; 6
    16fc:	31 05       	cpc	r19, r1
    16fe:	5c f4       	brge	.+22     	; 0x1716 <__stack+0x617>
    1700:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1702:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1704:	2f 5f       	subi	r18, 0xFF	; 255
    1706:	3f 4f       	sbci	r19, 0xFF	; 255
    1708:	3e 8f       	std	Y+30, r19	; 0x1e
    170a:	2d 8f       	std	Y+29, r18	; 0x1d
    170c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    170e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1710:	26 30       	cpi	r18, 0x06	; 6
    1712:	31 05       	cpc	r19, r1
    1714:	ac f3       	brlt	.-22     	; 0x1700 <__stack+0x601>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1716:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1718:	38 a1       	ldd	r19, Y+32	; 0x20
    171a:	2f 5f       	subi	r18, 0xFF	; 255
    171c:	3f 4f       	sbci	r19, 0xFF	; 255
    171e:	38 a3       	std	Y+32, r19	; 0x20
    1720:	2f 8f       	std	Y+31, r18	; 0x1f
    1722:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1724:	38 a1       	ldd	r19, Y+32	; 0x20
    1726:	24 36       	cpi	r18, 0x64	; 100
    1728:	31 05       	cpc	r19, r1
    172a:	1c f3       	brlt	.-58     	; 0x16f2 <__stack+0x5f3>
				writeControl(0xc0 + aX - 1); iotTimer::delay(1);
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
    172c:	fc 01       	movw	r30, r24
    172e:	e0 5d       	subi	r30, 0xD0	; 208
    1730:	fe 4f       	sbci	r31, 0xFE	; 254
    1732:	20 81       	ld	r18, Z
    1734:	2f 70       	andi	r18, 0x0F	; 15
    1736:	20 83       	st	Z, r18
    1738:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    173c:	1c 8e       	std	Y+28, r1	; 0x1c
    173e:	1b 8e       	std	Y+27, r1	; 0x1b
    1740:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1742:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1744:	12 16       	cp	r1, r18
    1746:	13 06       	cpc	r1, r19
    1748:	ec f0       	brlt	.+58     	; 0x1784 <__stack+0x685>
				for(volatile int j = 0; j < 6; j++) ;
    174a:	1a 8e       	std	Y+26, r1	; 0x1a
    174c:	19 8e       	std	Y+25, r1	; 0x19
    174e:	29 8d       	ldd	r18, Y+25	; 0x19
    1750:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1752:	26 30       	cpi	r18, 0x06	; 6
    1754:	31 05       	cpc	r19, r1
    1756:	5c f4       	brge	.+22     	; 0x176e <__stack+0x66f>
    1758:	29 8d       	ldd	r18, Y+25	; 0x19
    175a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    175c:	2f 5f       	subi	r18, 0xFF	; 255
    175e:	3f 4f       	sbci	r19, 0xFF	; 255
    1760:	3a 8f       	std	Y+26, r19	; 0x1a
    1762:	29 8f       	std	Y+25, r18	; 0x19
    1764:	29 8d       	ldd	r18, Y+25	; 0x19
    1766:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1768:	26 30       	cpi	r18, 0x06	; 6
    176a:	31 05       	cpc	r19, r1
    176c:	ac f3       	brlt	.-22     	; 0x1758 <__stack+0x659>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    176e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1770:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1772:	2f 5f       	subi	r18, 0xFF	; 255
    1774:	3f 4f       	sbci	r19, 0xFF	; 255
    1776:	3c 8f       	std	Y+28, r19	; 0x1c
    1778:	2b 8f       	std	Y+27, r18	; 0x1b
    177a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    177c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    177e:	12 16       	cp	r1, r18
    1780:	13 06       	cpc	r1, r19
    1782:	1c f7       	brge	.-58     	; 0x174a <__stack+0x64b>
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
    1784:	fc 01       	movw	r30, r24
    1786:	e0 5d       	subi	r30, 0xD0	; 208
    1788:	fe 4f       	sbci	r31, 0xFE	; 254
    178a:	20 81       	ld	r18, Z
    178c:	2b 71       	andi	r18, 0x1B	; 27
    178e:	20 83       	st	Z, r18
    1790:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1794:	18 8e       	std	Y+24, r1	; 0x18
    1796:	1f 8a       	std	Y+23, r1	; 0x17
    1798:	2f 89       	ldd	r18, Y+23	; 0x17
    179a:	38 8d       	ldd	r19, Y+24	; 0x18
    179c:	12 16       	cp	r1, r18
    179e:	13 06       	cpc	r1, r19
    17a0:	ec f0       	brlt	.+58     	; 0x17dc <__stack+0x6dd>
				for(volatile int j = 0; j < 6; j++) ;
    17a2:	1e 8a       	std	Y+22, r1	; 0x16
    17a4:	1d 8a       	std	Y+21, r1	; 0x15
    17a6:	2d 89       	ldd	r18, Y+21	; 0x15
    17a8:	3e 89       	ldd	r19, Y+22	; 0x16
    17aa:	26 30       	cpi	r18, 0x06	; 6
    17ac:	31 05       	cpc	r19, r1
    17ae:	5c f4       	brge	.+22     	; 0x17c6 <__stack+0x6c7>
    17b0:	2d 89       	ldd	r18, Y+21	; 0x15
    17b2:	3e 89       	ldd	r19, Y+22	; 0x16
    17b4:	2f 5f       	subi	r18, 0xFF	; 255
    17b6:	3f 4f       	sbci	r19, 0xFF	; 255
    17b8:	3e 8b       	std	Y+22, r19	; 0x16
    17ba:	2d 8b       	std	Y+21, r18	; 0x15
    17bc:	2d 89       	ldd	r18, Y+21	; 0x15
    17be:	3e 89       	ldd	r19, Y+22	; 0x16
    17c0:	26 30       	cpi	r18, 0x06	; 6
    17c2:	31 05       	cpc	r19, r1
    17c4:	ac f3       	brlt	.-22     	; 0x17b0 <__stack+0x6b1>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    17c6:	2f 89       	ldd	r18, Y+23	; 0x17
    17c8:	38 8d       	ldd	r19, Y+24	; 0x18
    17ca:	2f 5f       	subi	r18, 0xFF	; 255
    17cc:	3f 4f       	sbci	r19, 0xFF	; 255
    17ce:	38 8f       	std	Y+24, r19	; 0x18
    17d0:	2f 8b       	std	Y+23, r18	; 0x17
    17d2:	2f 89       	ldd	r18, Y+23	; 0x17
    17d4:	38 8d       	ldd	r19, Y+24	; 0x18
    17d6:	12 16       	cp	r1, r18
    17d8:	13 06       	cpc	r1, r19
    17da:	1c f7       	brge	.-58     	; 0x17a2 <__stack+0x6a3>
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
    17dc:	fc 01       	movw	r30, r24
    17de:	e0 5d       	subi	r30, 0xD0	; 208
    17e0:	fe 4f       	sbci	r31, 0xFE	; 254
    17e2:	20 81       	ld	r18, Z
    17e4:	27 71       	andi	r18, 0x17	; 23
    17e6:	20 83       	st	Z, r18
    17e8:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    17ec:	1c 8a       	std	Y+20, r1	; 0x14
    17ee:	1b 8a       	std	Y+19, r1	; 0x13
    17f0:	2b 89       	ldd	r18, Y+19	; 0x13
    17f2:	3c 89       	ldd	r19, Y+20	; 0x14
    17f4:	12 16       	cp	r1, r18
    17f6:	13 06       	cpc	r1, r19
    17f8:	ec f0       	brlt	.+58     	; 0x1834 <__stack+0x735>
				for(volatile int j = 0; j < 6; j++) ;
    17fa:	1a 8a       	std	Y+18, r1	; 0x12
    17fc:	19 8a       	std	Y+17, r1	; 0x11
    17fe:	29 89       	ldd	r18, Y+17	; 0x11
    1800:	3a 89       	ldd	r19, Y+18	; 0x12
    1802:	26 30       	cpi	r18, 0x06	; 6
    1804:	31 05       	cpc	r19, r1
    1806:	5c f4       	brge	.+22     	; 0x181e <__stack+0x71f>
    1808:	29 89       	ldd	r18, Y+17	; 0x11
    180a:	3a 89       	ldd	r19, Y+18	; 0x12
    180c:	2f 5f       	subi	r18, 0xFF	; 255
    180e:	3f 4f       	sbci	r19, 0xFF	; 255
    1810:	3a 8b       	std	Y+18, r19	; 0x12
    1812:	29 8b       	std	Y+17, r18	; 0x11
    1814:	29 89       	ldd	r18, Y+17	; 0x11
    1816:	3a 89       	ldd	r19, Y+18	; 0x12
    1818:	26 30       	cpi	r18, 0x06	; 6
    181a:	31 05       	cpc	r19, r1
    181c:	ac f3       	brlt	.-22     	; 0x1808 <__stack+0x709>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    181e:	2b 89       	ldd	r18, Y+19	; 0x13
    1820:	3c 89       	ldd	r19, Y+20	; 0x14
    1822:	2f 5f       	subi	r18, 0xFF	; 255
    1824:	3f 4f       	sbci	r19, 0xFF	; 255
    1826:	3c 8b       	std	Y+20, r19	; 0x14
    1828:	2b 8b       	std	Y+19, r18	; 0x13
    182a:	2b 89       	ldd	r18, Y+19	; 0x13
    182c:	3c 89       	ldd	r19, Y+20	; 0x14
    182e:	12 16       	cp	r1, r18
    1830:	13 06       	cpc	r1, r19
    1832:	1c f7       	brge	.-58     	; 0x17fa <__stack+0x6fb>
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
    1834:	fc 01       	movw	r30, r24
    1836:	e0 5d       	subi	r30, 0xD0	; 208
    1838:	fe 4f       	sbci	r31, 0xFE	; 254
    183a:	20 81       	ld	r18, Z
    183c:	20 61       	ori	r18, 0x10	; 16
    183e:	20 83       	st	Z, r18
    1840:	20 93 65 00 	sts	0x0065, r18
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1844:	18 8a       	std	Y+16, r1	; 0x10
    1846:	1f 86       	std	Y+15, r1	; 0x0f
    1848:	2f 85       	ldd	r18, Y+15	; 0x0f
    184a:	38 89       	ldd	r19, Y+16	; 0x10
    184c:	12 16       	cp	r1, r18
    184e:	13 06       	cpc	r1, r19
    1850:	ec f0       	brlt	.+58     	; 0x188c <__stack+0x78d>
				for(volatile int j = 0; j < 6; j++) ;
    1852:	1e 86       	std	Y+14, r1	; 0x0e
    1854:	1d 86       	std	Y+13, r1	; 0x0d
    1856:	2d 85       	ldd	r18, Y+13	; 0x0d
    1858:	3e 85       	ldd	r19, Y+14	; 0x0e
    185a:	26 30       	cpi	r18, 0x06	; 6
    185c:	31 05       	cpc	r19, r1
    185e:	5c f4       	brge	.+22     	; 0x1876 <__stack+0x777>
    1860:	2d 85       	ldd	r18, Y+13	; 0x0d
    1862:	3e 85       	ldd	r19, Y+14	; 0x0e
    1864:	2f 5f       	subi	r18, 0xFF	; 255
    1866:	3f 4f       	sbci	r19, 0xFF	; 255
    1868:	3e 87       	std	Y+14, r19	; 0x0e
    186a:	2d 87       	std	Y+13, r18	; 0x0d
    186c:	2d 85       	ldd	r18, Y+13	; 0x0d
    186e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1870:	26 30       	cpi	r18, 0x06	; 6
    1872:	31 05       	cpc	r19, r1
    1874:	ac f3       	brlt	.-22     	; 0x1860 <__stack+0x761>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1876:	2f 85       	ldd	r18, Y+15	; 0x0f
    1878:	38 89       	ldd	r19, Y+16	; 0x10
    187a:	2f 5f       	subi	r18, 0xFF	; 255
    187c:	3f 4f       	sbci	r19, 0xFF	; 255
    187e:	38 8b       	std	Y+16, r19	; 0x10
    1880:	2f 87       	std	Y+15, r18	; 0x0f
    1882:	2f 85       	ldd	r18, Y+15	; 0x0f
    1884:	38 89       	ldd	r19, Y+16	; 0x10
    1886:	12 16       	cp	r1, r18
    1888:	13 06       	cpc	r1, r19
    188a:	1c f7       	brge	.-58     	; 0x1852 <__stack+0x753>
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
    188c:	22 e0       	ldi	r18, 0x02	; 2
    188e:	2b bb       	out	0x1b, r18	; 27
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1890:	1c 86       	std	Y+12, r1	; 0x0c
    1892:	1b 86       	std	Y+11, r1	; 0x0b
    1894:	2b 85       	ldd	r18, Y+11	; 0x0b
    1896:	3c 85       	ldd	r19, Y+12	; 0x0c
    1898:	12 16       	cp	r1, r18
    189a:	13 06       	cpc	r1, r19
    189c:	ec f0       	brlt	.+58     	; 0x18d8 <__stack+0x7d9>
				for(volatile int j = 0; j < 6; j++) ;
    189e:	1a 86       	std	Y+10, r1	; 0x0a
    18a0:	19 86       	std	Y+9, r1	; 0x09
    18a2:	29 85       	ldd	r18, Y+9	; 0x09
    18a4:	3a 85       	ldd	r19, Y+10	; 0x0a
    18a6:	26 30       	cpi	r18, 0x06	; 6
    18a8:	31 05       	cpc	r19, r1
    18aa:	5c f4       	brge	.+22     	; 0x18c2 <__stack+0x7c3>
    18ac:	29 85       	ldd	r18, Y+9	; 0x09
    18ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    18b0:	2f 5f       	subi	r18, 0xFF	; 255
    18b2:	3f 4f       	sbci	r19, 0xFF	; 255
    18b4:	3a 87       	std	Y+10, r19	; 0x0a
    18b6:	29 87       	std	Y+9, r18	; 0x09
    18b8:	29 85       	ldd	r18, Y+9	; 0x09
    18ba:	3a 85       	ldd	r19, Y+10	; 0x0a
    18bc:	26 30       	cpi	r18, 0x06	; 6
    18be:	31 05       	cpc	r19, r1
    18c0:	ac f3       	brlt	.-22     	; 0x18ac <__stack+0x7ad>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    18c2:	2b 85       	ldd	r18, Y+11	; 0x0b
    18c4:	3c 85       	ldd	r19, Y+12	; 0x0c
    18c6:	2f 5f       	subi	r18, 0xFF	; 255
    18c8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ca:	3c 87       	std	Y+12, r19	; 0x0c
    18cc:	2b 87       	std	Y+11, r18	; 0x0b
    18ce:	2b 85       	ldd	r18, Y+11	; 0x0b
    18d0:	3c 85       	ldd	r19, Y+12	; 0x0c
    18d2:	12 16       	cp	r1, r18
    18d4:	13 06       	cpc	r1, r19
    18d6:	1c f7       	brge	.-58     	; 0x189e <__stack+0x79f>
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
			iotmCharLcdEnOff; iotTimer::delay(1);
    18d8:	fc 01       	movw	r30, r24
    18da:	e0 5d       	subi	r30, 0xD0	; 208
    18dc:	fe 4f       	sbci	r31, 0xFE	; 254
    18de:	80 81       	ld	r24, Z
    18e0:	8f 70       	andi	r24, 0x0F	; 15
    18e2:	80 83       	st	Z, r24
    18e4:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    18e8:	18 86       	std	Y+8, r1	; 0x08
    18ea:	1f 82       	std	Y+7, r1	; 0x07
    18ec:	8f 81       	ldd	r24, Y+7	; 0x07
    18ee:	98 85       	ldd	r25, Y+8	; 0x08
    18f0:	18 16       	cp	r1, r24
    18f2:	19 06       	cpc	r1, r25
    18f4:	cc f0       	brlt	.+50     	; 0x1928 <__stack+0x829>
				for(volatile int j = 0; j < 6; j++) ;
    18f6:	1e 82       	std	Y+6, r1	; 0x06
    18f8:	1d 82       	std	Y+5, r1	; 0x05
    18fa:	8d 81       	ldd	r24, Y+5	; 0x05
    18fc:	9e 81       	ldd	r25, Y+6	; 0x06
    18fe:	06 97       	sbiw	r24, 0x06	; 6
    1900:	4c f4       	brge	.+18     	; 0x1914 <__stack+0x815>
    1902:	8d 81       	ldd	r24, Y+5	; 0x05
    1904:	9e 81       	ldd	r25, Y+6	; 0x06
    1906:	01 96       	adiw	r24, 0x01	; 1
    1908:	9e 83       	std	Y+6, r25	; 0x06
    190a:	8d 83       	std	Y+5, r24	; 0x05
    190c:	8d 81       	ldd	r24, Y+5	; 0x05
    190e:	9e 81       	ldd	r25, Y+6	; 0x06
    1910:	06 97       	sbiw	r24, 0x06	; 6
    1912:	bc f3       	brlt	.-18     	; 0x1902 <__stack+0x803>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1914:	8f 81       	ldd	r24, Y+7	; 0x07
    1916:	98 85       	ldd	r25, Y+8	; 0x08
    1918:	01 96       	adiw	r24, 0x01	; 1
    191a:	98 87       	std	Y+8, r25	; 0x08
    191c:	8f 83       	std	Y+7, r24	; 0x07
    191e:	8f 81       	ldd	r24, Y+7	; 0x07
    1920:	98 85       	ldd	r25, Y+8	; 0x08
    1922:	18 16       	cp	r1, r24
    1924:	19 06       	cpc	r1, r25
    1926:	3c f7       	brge	.-50     	; 0x18f6 <__stack+0x7f7>
    1928:	1c 82       	std	Y+4, r1	; 0x04
    192a:	1b 82       	std	Y+3, r1	; 0x03
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	9c 81       	ldd	r25, Y+4	; 0x04
    1930:	84 36       	cpi	r24, 0x64	; 100
    1932:	91 05       	cpc	r25, r1
    1934:	cc f4       	brge	.+50     	; 0x1968 <__stack+0x869>
				for(volatile int j = 0; j < 6; j++) ;
    1936:	1a 82       	std	Y+2, r1	; 0x02
    1938:	19 82       	std	Y+1, r1	; 0x01
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	9a 81       	ldd	r25, Y+2	; 0x02
    193e:	06 97       	sbiw	r24, 0x06	; 6
    1940:	4c f4       	brge	.+18     	; 0x1954 <__stack+0x855>
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	9a 81       	ldd	r25, Y+2	; 0x02
    1946:	01 96       	adiw	r24, 0x01	; 1
    1948:	9a 83       	std	Y+2, r25	; 0x02
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	9a 81       	ldd	r25, Y+2	; 0x02
    1950:	06 97       	sbiw	r24, 0x06	; 6
    1952:	bc f3       	brlt	.-18     	; 0x1942 <__stack+0x843>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	9c 81       	ldd	r25, Y+4	; 0x04
    1958:	01 96       	adiw	r24, 0x01	; 1
    195a:	9c 83       	std	Y+4, r25	; 0x04
    195c:	8b 83       	std	Y+3, r24	; 0x03
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	9c 81       	ldd	r25, Y+4	; 0x04
    1962:	84 36       	cpi	r24, 0x64	; 100
    1964:	91 05       	cpc	r25, r1
    1966:	3c f3       	brlt	.-50     	; 0x1936 <__stack+0x837>
			writeControl(0x06);	// increment address for the next data.
			writeControl(0x01);	// cursor clear.
			iotTimer::delay(100);
			writeControl(0x02);	// cursor home.
			iotTimer::delay(100);
		}
    1968:	c0 58       	subi	r28, 0x80	; 128
    196a:	df 4f       	sbci	r29, 0xFF	; 255
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	08 95       	ret

0000197c <_ZN8iotServo4initEN6iotPin8iotPinIdE>:
				*ipPort = iPinMask;
				in10kCycles = 0;
			}
		}
		static void
		init(iotPin::iotPinId pin) {
    197c:	cf 93       	push	r28
    197e:	c8 2f       	mov	r28, r24
			ipPort = iotPin::getpPort(pin);
    1980:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZN6iotPin8getpPortENS_8iotPinIdE>
    1984:	90 93 36 05 	sts	0x0536, r25
    1988:	80 93 35 05 	sts	0x0535, r24
		}
		static inline bool		isValid(iotPinId id) {
			return (id >= 0 && id < iotcNumPins);
		}
		static inline uint8_t	getPinMask(iotPinId pin) {
			return 1 << (pin % iotcNumPinsPerPorts);		//iotcNumPinsPerPorts = 8;0~7
    198c:	8c 2f       	mov	r24, r28
    198e:	87 70       	andi	r24, 0x07	; 7
    1990:	21 e0       	ldi	r18, 0x01	; 1
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	02 c0       	rjmp	.+4      	; 0x199a <_ZN8iotServo4initEN6iotPin8iotPinIdE+0x1e>
    1996:	22 0f       	add	r18, r18
    1998:	33 1f       	adc	r19, r19
    199a:	8a 95       	dec	r24
    199c:	e2 f7       	brpl	.-8      	; 0x1996 <_ZN8iotServo4initEN6iotPin8iotPinIdE+0x1a>
    199e:	20 93 34 05 	sts	0x0534, r18
		}
		static void
		init(iotPin::iotPinId pin) {
			ipPort = iotPin::getpPort(pin);
			iPinMask = iotPin::getPinMask(pin);
			*iotPin::getpDDR(pin) |= iPinMask;
    19a2:	8c 2f       	mov	r24, r28
    19a4:	0e 94 08 01 	call	0x210	; 0x210 <_ZN6iotPin7getpDDRENS_8iotPinIdE>
    19a8:	fc 01       	movw	r30, r24
    19aa:	30 81       	ld	r19, Z
    19ac:	20 91 34 05 	lds	r18, 0x0534
    19b0:	23 2b       	or	r18, r19
    19b2:	20 83       	st	Z, r18

			iTimer
				= new iotTimer(iotTimer::iotcTimer0, iotTimer::iotcPsd64, 25);
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Znwj>
		typedef enum {		// 32 & 128 only for 8-bit counters 0 & 2.
			iotcPsdNo, iotcPsd1, iotcPsd8, iotcPsd32, iotcPsd64, iotcPsd128,
			iotcPsd256, iotcPsd1024
		} iotTimerPsd;
		iotTimer(iotTimerId aId, iotTimerPsd aPsd, unsigned int aCount) {
			iId = iotcTimerNone;
    19bc:	fc 01       	movw	r30, r24
    19be:	10 82       	st	Z, r1
					default: return;
				}
			}
			switch(aId) {
				case iotcTimer0:
					if((TCCR0 & 0x07) != 0) return;
    19c0:	23 b7       	in	r18, 0x33	; 51
    19c2:	27 70       	andi	r18, 0x07	; 7
    19c4:	49 f4       	brne	.+18     	; 0x19d8 <_ZN8iotServo4initEN6iotPin8iotPinIdE+0x5c>
					TCNT0 = 0; OCR0 = aCount & 0xff; 
    19c6:	12 be       	out	0x32, r1	; 50
    19c8:	29 e1       	ldi	r18, 0x19	; 25
    19ca:	21 bf       	out	0x31, r18	; 49
					TCCR0 = (TCCR0 & ~(0x07)) | (1 << WGM01) | psd;
    19cc:	23 b7       	in	r18, 0x33	; 51
    19ce:	20 7f       	andi	r18, 0xF0	; 240
    19d0:	2c 60       	ori	r18, 0x0C	; 12
    19d2:	23 bf       	out	0x33, r18	; 51
					TCNT3 = 0; OCR3A = aCount; TCCR3A = 0;
					TCCR3B = (TCCR3B & ~(0x07)) | (1 << WGM32) | psd;
					break;
				default: return;
			}
			iId = aId;
    19d4:	21 e0       	ldi	r18, 0x01	; 1
    19d6:	20 83       	st	Z, r18
			ipPort = iotPin::getpPort(pin);
			iPinMask = iotPin::getPinMask(pin);
			*iotPin::getpDDR(pin) |= iPinMask;

			iTimer
				= new iotTimer(iotTimer::iotcTimer0, iotTimer::iotcPsd64, 25);
    19d8:	90 93 3a 05 	sts	0x053A, r25
    19dc:	80 93 39 05 	sts	0x0539, r24
			in10kCycles = 0;
    19e0:	10 92 38 05 	sts	0x0538, r1
    19e4:	10 92 37 05 	sts	0x0537, r1
			*ipPort |= iPinMask;
    19e8:	e0 91 35 05 	lds	r30, 0x0535
    19ec:	f0 91 36 05 	lds	r31, 0x0536
    19f0:	90 81       	ld	r25, Z
    19f2:	80 91 34 05 	lds	r24, 0x0534
    19f6:	89 2b       	or	r24, r25
    19f8:	80 83       	st	Z, r24
				default: return;
			}
		}
		void
		enableInterrupt(void (* aCallback) (void)) {
			switch(iId) {
    19fa:	e0 91 39 05 	lds	r30, 0x0539
    19fe:	f0 91 3a 05 	lds	r31, 0x053A
    1a02:	80 81       	ld	r24, Z
    1a04:	82 30       	cpi	r24, 0x02	; 2
    1a06:	99 f0       	breq	.+38     	; 0x1a2e <_ZN8iotServo4initEN6iotPin8iotPinIdE+0xb2>
    1a08:	18 f4       	brcc	.+6      	; 0x1a10 <_ZN8iotServo4initEN6iotPin8iotPinIdE+0x94>
    1a0a:	81 30       	cpi	r24, 0x01	; 1
    1a0c:	31 f0       	breq	.+12     	; 0x1a1a <_ZN8iotServo4initEN6iotPin8iotPinIdE+0x9e>
    1a0e:	2e c0       	rjmp	.+92     	; 0x1a6c <_ZN8iotServo4initEN6iotPin8iotPinIdE+0xf0>
    1a10:	83 30       	cpi	r24, 0x03	; 3
    1a12:	b9 f0       	breq	.+46     	; 0x1a42 <_ZN8iotServo4initEN6iotPin8iotPinIdE+0xc6>
    1a14:	84 30       	cpi	r24, 0x04	; 4
    1a16:	f9 f0       	breq	.+62     	; 0x1a56 <_ZN8iotServo4initEN6iotPin8iotPinIdE+0xda>
    1a18:	29 c0       	rjmp	.+82     	; 0x1a6c <_ZN8iotServo4initEN6iotPin8iotPinIdE+0xf0>
				case iotcTimer0:
					iCallback0 = aCallback; TIMSK |= (1 << OCIE0); break;
    1a1a:	81 e7       	ldi	r24, 0x71	; 113
    1a1c:	94 e0       	ldi	r25, 0x04	; 4
    1a1e:	90 93 32 07 	sts	0x0732, r25
    1a22:	80 93 31 07 	sts	0x0731, r24
    1a26:	87 b7       	in	r24, 0x37	; 55
    1a28:	82 60       	ori	r24, 0x02	; 2
    1a2a:	87 bf       	out	0x37, r24	; 55
    1a2c:	1f c0       	rjmp	.+62     	; 0x1a6c <_ZN8iotServo4initEN6iotPin8iotPinIdE+0xf0>
				case iotcTimer1:
					iCallback1 = aCallback; TIMSK |= (1 << OCIE1A); break;
    1a2e:	81 e7       	ldi	r24, 0x71	; 113
    1a30:	94 e0       	ldi	r25, 0x04	; 4
    1a32:	90 93 30 07 	sts	0x0730, r25
    1a36:	80 93 2f 07 	sts	0x072F, r24
    1a3a:	87 b7       	in	r24, 0x37	; 55
    1a3c:	80 61       	ori	r24, 0x10	; 16
    1a3e:	87 bf       	out	0x37, r24	; 55
    1a40:	15 c0       	rjmp	.+42     	; 0x1a6c <_ZN8iotServo4initEN6iotPin8iotPinIdE+0xf0>
				case iotcTimer2:
					iCallback2 = aCallback; TIMSK |= (1 << OCIE2); break;
    1a42:	81 e7       	ldi	r24, 0x71	; 113
    1a44:	94 e0       	ldi	r25, 0x04	; 4
    1a46:	90 93 2e 07 	sts	0x072E, r25
    1a4a:	80 93 2d 07 	sts	0x072D, r24
    1a4e:	87 b7       	in	r24, 0x37	; 55
    1a50:	80 68       	ori	r24, 0x80	; 128
    1a52:	87 bf       	out	0x37, r24	; 55
    1a54:	0b c0       	rjmp	.+22     	; 0x1a6c <_ZN8iotServo4initEN6iotPin8iotPinIdE+0xf0>
				case iotcTimer3:
					iCallback3 = aCallback; ETIMSK |= (1 << OCIE3A); break;
    1a56:	81 e7       	ldi	r24, 0x71	; 113
    1a58:	94 e0       	ldi	r25, 0x04	; 4
    1a5a:	90 93 2c 07 	sts	0x072C, r25
    1a5e:	80 93 2b 07 	sts	0x072B, r24
    1a62:	ed e7       	ldi	r30, 0x7D	; 125
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	80 61       	ori	r24, 0x10	; 16
    1a6a:	80 83       	st	Z, r24
			iTimer
				= new iotTimer(iotTimer::iotcTimer0, iotTimer::iotcPsd64, 25);
			in10kCycles = 0;
			*ipPort |= iPinMask;
			iTimer->enableInterrupt(tick10kHz);
		}
    1a6c:	cf 91       	pop	r28
    1a6e:	08 95       	ret

00001a70 <_ZN8iotClock9parseLineEPc>:
				*ps = s;
			}
			return secs;
		}
		static bool
		parseLine(char *s) {
    1a70:	5f 92       	push	r5
    1a72:	6f 92       	push	r6
    1a74:	7f 92       	push	r7
    1a76:	8f 92       	push	r8
    1a78:	9f 92       	push	r9
    1a7a:	af 92       	push	r10
    1a7c:	bf 92       	push	r11
    1a7e:	cf 92       	push	r12
    1a80:	df 92       	push	r13
    1a82:	ef 92       	push	r14
    1a84:	ff 92       	push	r15
    1a86:	0f 93       	push	r16
    1a88:	1f 93       	push	r17
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	ec 01       	movw	r28, r24
			long	secs;
			if(strncmp(s, "time", 4) == 0) {
    1a90:	44 e0       	ldi	r20, 0x04	; 4
    1a92:	50 e0       	ldi	r21, 0x00	; 0
    1a94:	6c e9       	ldi	r22, 0x9C	; 156
    1a96:	71 e0       	ldi	r23, 0x01	; 1
    1a98:	0e 94 20 34 	call	0x6840	; 0x6840 <strncmp>
    1a9c:	89 2b       	or	r24, r25
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <_ZN8iotClock9parseLineEPc+0x32>
    1aa0:	95 c1       	rjmp	.+810    	; 0x1dcc <_ZN8iotClock9parseLineEPc+0x35c>
				s += 4; while(isspace(*s)) s++;
    1aa2:	24 96       	adiw	r28, 0x04	; 4
    1aa4:	8e 01       	movw	r16, r28
    1aa6:	d9 90       	ld	r13, Y+
    1aa8:	ed 2c       	mov	r14, r13
    1aaa:	f1 2c       	mov	r15, r1
    1aac:	c7 01       	movw	r24, r14
    1aae:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <isspace>
    1ab2:	89 2b       	or	r24, r25
    1ab4:	b9 f7       	brne	.-18     	; 0x1aa4 <_ZN8iotClock9parseLineEPc+0x34>
    1ab6:	e8 01       	movw	r28, r16
		toSeconds(char **ps) {
			long	secs;
			char	*s;

			s = *ps;
			if(isalpha(*s)) {
    1ab8:	c7 01       	movw	r24, r14
    1aba:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <isalpha>
    1abe:	89 2b       	or	r24, r25
    1ac0:	09 f4       	brne	.+2      	; 0x1ac4 <_ZN8iotClock9parseLineEPc+0x54>
    1ac2:	5e c0       	rjmp	.+188    	; 0x1b80 <_ZN8iotClock9parseLineEPc+0x110>
    1ac4:	0f 2e       	mov	r0, r31
    1ac6:	f3 e1       	ldi	r31, 0x13	; 19
    1ac8:	cf 2e       	mov	r12, r31
    1aca:	f1 e0       	ldi	r31, 0x01	; 1
    1acc:	df 2e       	mov	r13, r31
    1ace:	f0 2d       	mov	r31, r0
    1ad0:	0f 2e       	mov	r0, r31
    1ad2:	f7 e0       	ldi	r31, 0x07	; 7
    1ad4:	af 2e       	mov	r10, r31
    1ad6:	f1 e0       	ldi	r31, 0x01	; 1
    1ad8:	bf 2e       	mov	r11, r31
    1ada:	f0 2d       	mov	r31, r0
    1adc:	e1 2c       	mov	r14, r1
    1ade:	f1 2c       	mov	r15, r1
    1ae0:	00 e0       	ldi	r16, 0x00	; 0
    1ae2:	10 e0       	ldi	r17, 0x00	; 0
				int		m, days = 0;
				for(m = 0; m < 12; m++) {
					if(strncasecmp(s, iMonth[m], 3) == 0) break;
    1ae4:	d6 01       	movw	r26, r12
    1ae6:	6d 91       	ld	r22, X+
    1ae8:	7d 91       	ld	r23, X+
    1aea:	6d 01       	movw	r12, r26
    1aec:	43 e0       	ldi	r20, 0x03	; 3
    1aee:	50 e0       	ldi	r21, 0x00	; 0
    1af0:	ce 01       	movw	r24, r28
    1af2:	0e 94 08 34 	call	0x6810	; 0x6810 <strncasecmp>
    1af6:	89 2b       	or	r24, r25
    1af8:	59 f0       	breq	.+22     	; 0x1b10 <_ZN8iotClock9parseLineEPc+0xa0>
					days += iMonthDays[m];
    1afa:	f5 01       	movw	r30, r10
    1afc:	81 91       	ld	r24, Z+
    1afe:	5f 01       	movw	r10, r30
    1b00:	e8 0e       	add	r14, r24
    1b02:	f1 1c       	adc	r15, r1
			char	*s;

			s = *ps;
			if(isalpha(*s)) {
				int		m, days = 0;
				for(m = 0; m < 12; m++) {
    1b04:	0f 5f       	subi	r16, 0xFF	; 255
    1b06:	1f 4f       	sbci	r17, 0xFF	; 255
    1b08:	0c 30       	cpi	r16, 0x0C	; 12
    1b0a:	11 05       	cpc	r17, r1
    1b0c:	59 f7       	brne	.-42     	; 0x1ae4 <_ZN8iotClock9parseLineEPc+0x74>
    1b0e:	44 c1       	rjmp	.+648    	; 0x1d98 <_ZN8iotClock9parseLineEPc+0x328>
					if(strncasecmp(s, iMonth[m], 3) == 0) break;
					days += iMonthDays[m];
				}
				if((m == 12) || s[3] != '-' || !isdigit(s[4]) || !isdigit(s[5]))
    1b10:	0c 30       	cpi	r16, 0x0C	; 12
    1b12:	11 05       	cpc	r17, r1
    1b14:	09 f4       	brne	.+2      	; 0x1b18 <_ZN8iotClock9parseLineEPc+0xa8>
    1b16:	40 c1       	rjmp	.+640    	; 0x1d98 <_ZN8iotClock9parseLineEPc+0x328>
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	8d 32       	cpi	r24, 0x2D	; 45
    1b1c:	09 f0       	breq	.+2      	; 0x1b20 <_ZN8iotClock9parseLineEPc+0xb0>
    1b1e:	3c c1       	rjmp	.+632    	; 0x1d98 <_ZN8iotClock9parseLineEPc+0x328>
    1b20:	8c 81       	ldd	r24, Y+4	; 0x04
    1b22:	28 2f       	mov	r18, r24
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	20 53       	subi	r18, 0x30	; 48
    1b28:	31 09       	sbc	r19, r1
    1b2a:	2a 30       	cpi	r18, 0x0A	; 10
    1b2c:	31 05       	cpc	r19, r1
    1b2e:	08 f0       	brcs	.+2      	; 0x1b32 <_ZN8iotClock9parseLineEPc+0xc2>
    1b30:	33 c1       	rjmp	.+614    	; 0x1d98 <_ZN8iotClock9parseLineEPc+0x328>
    1b32:	4d 81       	ldd	r20, Y+5	; 0x05
    1b34:	24 2f       	mov	r18, r20
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	20 53       	subi	r18, 0x30	; 48
    1b3a:	31 09       	sbc	r19, r1
    1b3c:	2a 30       	cpi	r18, 0x0A	; 10
    1b3e:	31 05       	cpc	r19, r1
    1b40:	08 f0       	brcs	.+2      	; 0x1b44 <_ZN8iotClock9parseLineEPc+0xd4>
    1b42:	2a c1       	rjmp	.+596    	; 0x1d98 <_ZN8iotClock9parseLineEPc+0x328>
					return -1;
				secs = 86400L * (days + 10 * (s[4] - '0') + s[5] - '0' - 1);
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	c0 97       	sbiw	r24, 0x30	; 48
    1b48:	dc 01       	movw	r26, r24
    1b4a:	aa 0f       	add	r26, r26
    1b4c:	bb 1f       	adc	r27, r27
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	88 0f       	add	r24, r24
    1b58:	99 1f       	adc	r25, r25
    1b5a:	a8 0f       	add	r26, r24
    1b5c:	b9 1f       	adc	r27, r25
    1b5e:	ae 0d       	add	r26, r14
    1b60:	bf 1d       	adc	r27, r15
    1b62:	a4 0f       	add	r26, r20
    1b64:	b1 1d       	adc	r27, r1
    1b66:	d1 97       	sbiw	r26, 0x31	; 49
    1b68:	20 e8       	ldi	r18, 0x80	; 128
    1b6a:	31 e5       	ldi	r19, 0x51	; 81
    1b6c:	41 e0       	ldi	r20, 0x01	; 1
    1b6e:	50 e0       	ldi	r21, 0x00	; 0
    1b70:	0e 94 1e 31 	call	0x623c	; 0x623c <__mulshisi3>
    1b74:	6b 01       	movw	r12, r22
    1b76:	7c 01       	movw	r14, r24
				s += 7;
    1b78:	8e 01       	movw	r16, r28
    1b7a:	09 5f       	subi	r16, 0xF9	; 249
    1b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7e:	2b c0       	rjmp	.+86     	; 0x1bd6 <_ZN8iotClock9parseLineEPc+0x166>
			} else if(*s == '+') {
    1b80:	fb e2       	ldi	r31, 0x2B	; 43
    1b82:	df 12       	cpse	r13, r31
    1b84:	0b c0       	rjmp	.+22     	; 0x1b9c <_ZN8iotClock9parseLineEPc+0x12c>
				secs = iSeconds; s++;
    1b86:	c0 90 2e 05 	lds	r12, 0x052E
    1b8a:	d0 90 2f 05 	lds	r13, 0x052F
    1b8e:	e0 90 30 05 	lds	r14, 0x0530
    1b92:	f0 90 31 05 	lds	r15, 0x0531
    1b96:	0f 5f       	subi	r16, 0xFF	; 255
    1b98:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9a:	1d c0       	rjmp	.+58     	; 0x1bd6 <_ZN8iotClock9parseLineEPc+0x166>
			} else if(*s == '-') {
    1b9c:	2d e2       	ldi	r18, 0x2D	; 45
    1b9e:	d2 12       	cpse	r13, r18
    1ba0:	17 c0       	rjmp	.+46     	; 0x1bd0 <_ZN8iotClock9parseLineEPc+0x160>
				secs = iSeconds - iSeconds % 86400L; s++;
    1ba2:	c0 90 2e 05 	lds	r12, 0x052E
    1ba6:	d0 90 2f 05 	lds	r13, 0x052F
    1baa:	e0 90 30 05 	lds	r14, 0x0530
    1bae:	f0 90 31 05 	lds	r15, 0x0531
    1bb2:	c7 01       	movw	r24, r14
    1bb4:	b6 01       	movw	r22, r12
    1bb6:	20 e8       	ldi	r18, 0x80	; 128
    1bb8:	31 e5       	ldi	r19, 0x51	; 81
    1bba:	41 e0       	ldi	r20, 0x01	; 1
    1bbc:	50 e0       	ldi	r21, 0x00	; 0
    1bbe:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <__divmodsi4>
    1bc2:	c6 1a       	sub	r12, r22
    1bc4:	d7 0a       	sbc	r13, r23
    1bc6:	e8 0a       	sbc	r14, r24
    1bc8:	f9 0a       	sbc	r15, r25
    1bca:	0f 5f       	subi	r16, 0xFF	; 255
    1bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bce:	03 c0       	rjmp	.+6      	; 0x1bd6 <_ZN8iotClock9parseLineEPc+0x166>
			} else secs = 0;
    1bd0:	c1 2c       	mov	r12, r1
    1bd2:	d1 2c       	mov	r13, r1
    1bd4:	76 01       	movw	r14, r12
			
			if(!isdigit(s[0])) return -1;
    1bd6:	d8 01       	movw	r26, r16
    1bd8:	2c 91       	ld	r18, X
    1bda:	82 2f       	mov	r24, r18
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	c0 97       	sbiw	r24, 0x30	; 48
    1be0:	0a 97       	sbiw	r24, 0x0a	; 10
    1be2:	08 f0       	brcs	.+2      	; 0x1be6 <_ZN8iotClock9parseLineEPc+0x176>
    1be4:	d9 c0       	rjmp	.+434    	; 0x1d98 <_ZN8iotClock9parseLineEPc+0x328>
			if(isdigit(s[1]) && s[2] == ':') {
    1be6:	11 96       	adiw	r26, 0x01	; 1
    1be8:	4c 91       	ld	r20, X
    1bea:	11 97       	sbiw	r26, 0x01	; 1
    1bec:	84 2f       	mov	r24, r20
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	c0 97       	sbiw	r24, 0x30	; 48
    1bf2:	0a 97       	sbiw	r24, 0x0a	; 10
    1bf4:	08 f0       	brcs	.+2      	; 0x1bf8 <_ZN8iotClock9parseLineEPc+0x188>
    1bf6:	9c c0       	rjmp	.+312    	; 0x1d30 <_ZN8iotClock9parseLineEPc+0x2c0>
    1bf8:	12 96       	adiw	r26, 0x02	; 2
    1bfa:	8c 91       	ld	r24, X
    1bfc:	12 97       	sbiw	r26, 0x02	; 2
    1bfe:	8a 33       	cpi	r24, 0x3A	; 58
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <_ZN8iotClock9parseLineEPc+0x194>
    1c02:	96 c0       	rjmp	.+300    	; 0x1d30 <_ZN8iotClock9parseLineEPc+0x2c0>
				if( !isdigit(s[3]) || !isdigit(s[4]) || (s[5] != ':') ||
    1c04:	13 96       	adiw	r26, 0x03	; 3
    1c06:	cc 91       	ld	r28, X
    1c08:	13 97       	sbiw	r26, 0x03	; 3
    1c0a:	8c 2f       	mov	r24, r28
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	c0 97       	sbiw	r24, 0x30	; 48
    1c10:	0a 97       	sbiw	r24, 0x0a	; 10
    1c12:	08 f0       	brcs	.+2      	; 0x1c16 <_ZN8iotClock9parseLineEPc+0x1a6>
    1c14:	c1 c0       	rjmp	.+386    	; 0x1d98 <_ZN8iotClock9parseLineEPc+0x328>
    1c16:	14 96       	adiw	r26, 0x04	; 4
    1c18:	ec 91       	ld	r30, X
    1c1a:	14 97       	sbiw	r26, 0x04	; 4
    1c1c:	8e 2f       	mov	r24, r30
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	c0 97       	sbiw	r24, 0x30	; 48
    1c22:	0a 97       	sbiw	r24, 0x0a	; 10
    1c24:	08 f0       	brcs	.+2      	; 0x1c28 <_ZN8iotClock9parseLineEPc+0x1b8>
    1c26:	b8 c0       	rjmp	.+368    	; 0x1d98 <_ZN8iotClock9parseLineEPc+0x328>
    1c28:	15 96       	adiw	r26, 0x05	; 5
    1c2a:	8c 91       	ld	r24, X
    1c2c:	15 97       	sbiw	r26, 0x05	; 5
    1c2e:	8a 33       	cpi	r24, 0x3A	; 58
    1c30:	09 f0       	breq	.+2      	; 0x1c34 <_ZN8iotClock9parseLineEPc+0x1c4>
    1c32:	b2 c0       	rjmp	.+356    	; 0x1d98 <_ZN8iotClock9parseLineEPc+0x328>
					!isdigit(s[6]) || !isdigit(s[7]) ) return -1;
    1c34:	16 96       	adiw	r26, 0x06	; 6
    1c36:	fc 91       	ld	r31, X
    1c38:	16 97       	sbiw	r26, 0x06	; 6
    1c3a:	8f 2f       	mov	r24, r31
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	c0 97       	sbiw	r24, 0x30	; 48
				secs = iSeconds - iSeconds % 86400L; s++;
			} else secs = 0;
			
			if(!isdigit(s[0])) return -1;
			if(isdigit(s[1]) && s[2] == ':') {
				if( !isdigit(s[3]) || !isdigit(s[4]) || (s[5] != ':') ||
    1c40:	0a 97       	sbiw	r24, 0x0a	; 10
    1c42:	08 f0       	brcs	.+2      	; 0x1c46 <_ZN8iotClock9parseLineEPc+0x1d6>
    1c44:	a9 c0       	rjmp	.+338    	; 0x1d98 <_ZN8iotClock9parseLineEPc+0x328>
					!isdigit(s[6]) || !isdigit(s[7]) ) return -1;
    1c46:	17 96       	adiw	r26, 0x07	; 7
    1c48:	dc 91       	ld	r29, X
    1c4a:	8d 2f       	mov	r24, r29
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	c0 97       	sbiw	r24, 0x30	; 48
    1c50:	0a 97       	sbiw	r24, 0x0a	; 10
    1c52:	08 f0       	brcs	.+2      	; 0x1c56 <_ZN8iotClock9parseLineEPc+0x1e6>
    1c54:	a1 c0       	rjmp	.+322    	; 0x1d98 <_ZN8iotClock9parseLineEPc+0x328>
				secs += 36000L * (s[0] - '0');
    1c56:	a2 2f       	mov	r26, r18
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	d0 97       	sbiw	r26, 0x30	; 48
    1c5c:	20 ea       	ldi	r18, 0xA0	; 160
    1c5e:	3c e8       	ldi	r19, 0x8C	; 140
    1c60:	0e 94 18 31 	call	0x6230	; 0x6230 <__usmulhisi3>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	8c 0d       	add	r24, r12
    1c6a:	9d 1d       	adc	r25, r13
    1c6c:	ae 1d       	adc	r26, r14
    1c6e:	bf 1d       	adc	r27, r15
				secs += 3600 * (s[1] - '0');
    1c70:	64 2f       	mov	r22, r20
    1c72:	70 e0       	ldi	r23, 0x00	; 0
    1c74:	60 53       	subi	r22, 0x30	; 48
    1c76:	71 09       	sbc	r23, r1
    1c78:	20 e1       	ldi	r18, 0x10	; 16
    1c7a:	3e e0       	ldi	r19, 0x0E	; 14
    1c7c:	62 9f       	mul	r22, r18
    1c7e:	a0 01       	movw	r20, r0
    1c80:	63 9f       	mul	r22, r19
    1c82:	50 0d       	add	r21, r0
    1c84:	72 9f       	mul	r23, r18
    1c86:	50 0d       	add	r21, r0
    1c88:	11 24       	eor	r1, r1
    1c8a:	66 27       	eor	r22, r22
    1c8c:	57 fd       	sbrc	r21, 7
    1c8e:	60 95       	com	r22
    1c90:	76 2f       	mov	r23, r22
    1c92:	84 0f       	add	r24, r20
    1c94:	95 1f       	adc	r25, r21
    1c96:	a6 1f       	adc	r26, r22
    1c98:	b7 1f       	adc	r27, r23
				secs += 600 * (s[3] - '0');
    1c9a:	6c 2f       	mov	r22, r28
    1c9c:	70 e0       	ldi	r23, 0x00	; 0
    1c9e:	60 53       	subi	r22, 0x30	; 48
    1ca0:	71 09       	sbc	r23, r1
    1ca2:	28 e5       	ldi	r18, 0x58	; 88
    1ca4:	32 e0       	ldi	r19, 0x02	; 2
    1ca6:	62 9f       	mul	r22, r18
    1ca8:	a0 01       	movw	r20, r0
    1caa:	63 9f       	mul	r22, r19
    1cac:	50 0d       	add	r21, r0
    1cae:	72 9f       	mul	r23, r18
    1cb0:	50 0d       	add	r21, r0
    1cb2:	11 24       	eor	r1, r1
    1cb4:	66 27       	eor	r22, r22
    1cb6:	57 fd       	sbrc	r21, 7
    1cb8:	60 95       	com	r22
    1cba:	76 2f       	mov	r23, r22
    1cbc:	84 0f       	add	r24, r20
    1cbe:	95 1f       	adc	r25, r21
    1cc0:	a6 1f       	adc	r26, r22
    1cc2:	b7 1f       	adc	r27, r23
				secs += 60 * (s[4] - '0');
    1cc4:	2e 2f       	mov	r18, r30
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	20 53       	subi	r18, 0x30	; 48
    1cca:	31 09       	sbc	r19, r1
    1ccc:	6c e3       	ldi	r22, 0x3C	; 60
    1cce:	62 9f       	mul	r22, r18
    1cd0:	a0 01       	movw	r20, r0
    1cd2:	63 9f       	mul	r22, r19
    1cd4:	50 0d       	add	r21, r0
    1cd6:	11 24       	eor	r1, r1
    1cd8:	66 27       	eor	r22, r22
    1cda:	57 fd       	sbrc	r21, 7
    1cdc:	60 95       	com	r22
    1cde:	76 2f       	mov	r23, r22
    1ce0:	84 0f       	add	r24, r20
    1ce2:	95 1f       	adc	r25, r21
    1ce4:	a6 1f       	adc	r26, r22
    1ce6:	b7 1f       	adc	r27, r23
				secs += 10 * (s[6] - '0');
    1ce8:	2f 2f       	mov	r18, r31
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	20 53       	subi	r18, 0x30	; 48
    1cee:	31 09       	sbc	r19, r1
    1cf0:	a9 01       	movw	r20, r18
    1cf2:	44 0f       	add	r20, r20
    1cf4:	55 1f       	adc	r21, r21
    1cf6:	22 0f       	add	r18, r18
    1cf8:	33 1f       	adc	r19, r19
    1cfa:	22 0f       	add	r18, r18
    1cfc:	33 1f       	adc	r19, r19
    1cfe:	22 0f       	add	r18, r18
    1d00:	33 1f       	adc	r19, r19
    1d02:	42 0f       	add	r20, r18
    1d04:	53 1f       	adc	r21, r19
    1d06:	66 27       	eor	r22, r22
    1d08:	57 fd       	sbrc	r21, 7
    1d0a:	60 95       	com	r22
    1d0c:	76 2f       	mov	r23, r22
    1d0e:	84 0f       	add	r24, r20
    1d10:	95 1f       	adc	r25, r21
    1d12:	a6 1f       	adc	r26, r22
    1d14:	b7 1f       	adc	r27, r23
				secs += (s[7] - '0');
    1d16:	4d 2f       	mov	r20, r29
    1d18:	50 e0       	ldi	r21, 0x00	; 0
    1d1a:	40 53       	subi	r20, 0x30	; 48
    1d1c:	51 09       	sbc	r21, r1
    1d1e:	66 27       	eor	r22, r22
    1d20:	57 fd       	sbrc	r21, 7
    1d22:	60 95       	com	r22
    1d24:	76 2f       	mov	r23, r22
    1d26:	84 0f       	add	r24, r20
    1d28:	95 1f       	adc	r25, r21
    1d2a:	a6 1f       	adc	r26, r22
    1d2c:	b7 1f       	adc	r27, r23
    1d2e:	2a c0       	rjmp	.+84     	; 0x1d84 <_ZN8iotClock9parseLineEPc+0x314>
    1d30:	f8 01       	movw	r30, r16
    1d32:	31 96       	adiw	r30, 0x01	; 1
				s += 7;
			} else if(*s == '+') {
				secs = iSeconds; s++;
			} else if(*s == '-') {
				secs = iSeconds - iSeconds % 86400L; s++;
			} else secs = 0;
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	dc 01       	movw	r26, r24
				secs += 10 * (s[6] - '0');
				secs += (s[7] - '0');
				*ps = s + 8;
			} else {
				long	n = 0;
				while(isdigit(*s)) n = 10 * n + *s++ - '0';
    1d3a:	88 0f       	add	r24, r24
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	aa 1f       	adc	r26, r26
    1d40:	bb 1f       	adc	r27, r27
    1d42:	ac 01       	movw	r20, r24
    1d44:	bd 01       	movw	r22, r26
    1d46:	44 0f       	add	r20, r20
    1d48:	55 1f       	adc	r21, r21
    1d4a:	66 1f       	adc	r22, r22
    1d4c:	77 1f       	adc	r23, r23
    1d4e:	44 0f       	add	r20, r20
    1d50:	55 1f       	adc	r21, r21
    1d52:	66 1f       	adc	r22, r22
    1d54:	77 1f       	adc	r23, r23
    1d56:	84 0f       	add	r24, r20
    1d58:	95 1f       	adc	r25, r21
    1d5a:	a6 1f       	adc	r26, r22
    1d5c:	b7 1f       	adc	r27, r23
    1d5e:	82 0f       	add	r24, r18
    1d60:	91 1d       	adc	r25, r1
    1d62:	a1 1d       	adc	r26, r1
    1d64:	b1 1d       	adc	r27, r1
    1d66:	c0 97       	sbiw	r24, 0x30	; 48
    1d68:	a1 09       	sbc	r26, r1
    1d6a:	b1 09       	sbc	r27, r1
    1d6c:	21 91       	ld	r18, Z+
    1d6e:	42 2f       	mov	r20, r18
    1d70:	50 e0       	ldi	r21, 0x00	; 0
    1d72:	40 53       	subi	r20, 0x30	; 48
    1d74:	51 09       	sbc	r21, r1
    1d76:	4a 30       	cpi	r20, 0x0A	; 10
    1d78:	51 05       	cpc	r21, r1
    1d7a:	f8 f2       	brcs	.-66     	; 0x1d3a <_ZN8iotClock9parseLineEPc+0x2ca>
				secs += n;
    1d7c:	8c 0d       	add	r24, r12
    1d7e:	9d 1d       	adc	r25, r13
    1d80:	ae 1d       	adc	r26, r14
    1d82:	bf 1d       	adc	r27, r15
		static bool
		parseLine(char *s) {
			long	secs;
			if(strncmp(s, "time", 4) == 0) {
				s += 4; while(isspace(*s)) s++;
				if((secs = toSeconds(&s)) >= 0) iSeconds = secs;
    1d84:	bb 23       	and	r27, r27
    1d86:	44 f0       	brlt	.+16     	; 0x1d98 <_ZN8iotClock9parseLineEPc+0x328>
    1d88:	80 93 2e 05 	sts	0x052E, r24
    1d8c:	90 93 2f 05 	sts	0x052F, r25
    1d90:	a0 93 30 05 	sts	0x0530, r26
    1d94:	b0 93 31 05 	sts	0x0531, r27
				printf("time %ld\n", iSeconds);
    1d98:	80 91 31 05 	lds	r24, 0x0531
    1d9c:	8f 93       	push	r24
    1d9e:	80 91 30 05 	lds	r24, 0x0530
    1da2:	8f 93       	push	r24
    1da4:	80 91 2f 05 	lds	r24, 0x052F
    1da8:	8f 93       	push	r24
    1daa:	80 91 2e 05 	lds	r24, 0x052E
    1dae:	8f 93       	push	r24
    1db0:	81 ea       	ldi	r24, 0xA1	; 161
    1db2:	91 e0       	ldi	r25, 0x01	; 1
    1db4:	9f 93       	push	r25
    1db6:	8f 93       	push	r24
    1db8:	0e 94 80 34 	call	0x6900	; 0x6900 <printf>
				return true;
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	0f 90       	pop	r0
    1dc2:	0f 90       	pop	r0
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	aa c3       	rjmp	.+1876   	; 0x2520 <_ZN8iotClock9parseLineEPc+0xab0>
			} else if(strncmp(s, "at", 2) == 0) {
    1dcc:	42 e0       	ldi	r20, 0x02	; 2
    1dce:	50 e0       	ldi	r21, 0x00	; 0
    1dd0:	6b ea       	ldi	r22, 0xAB	; 171
    1dd2:	71 e0       	ldi	r23, 0x01	; 1
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	0e 94 20 34 	call	0x6840	; 0x6840 <strncmp>
    1dda:	89 2b       	or	r24, r25
    1ddc:	09 f0       	breq	.+2      	; 0x1de0 <_ZN8iotClock9parseLineEPc+0x370>
    1dde:	63 c3       	rjmp	.+1734   	; 0x24a6 <_ZN8iotClock9parseLineEPc+0xa36>
				int8_t	n;
				s += 2; while(isspace(*s)) s++;
    1de0:	22 96       	adiw	r28, 0x02	; 2
    1de2:	8e 01       	movw	r16, r28
    1de4:	d9 90       	ld	r13, Y+
    1de6:	ed 2c       	mov	r14, r13
    1de8:	f1 2c       	mov	r15, r1
    1dea:	c7 01       	movw	r24, r14
    1dec:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <isspace>
    1df0:	89 2b       	or	r24, r25
    1df2:	b9 f7       	brne	.-18     	; 0x1de2 <_ZN8iotClock9parseLineEPc+0x372>
    1df4:	e8 01       	movw	r28, r16
		toSeconds(char **ps) {
			long	secs;
			char	*s;

			s = *ps;
			if(isalpha(*s)) {
    1df6:	c7 01       	movw	r24, r14
    1df8:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <isalpha>
    1dfc:	89 2b       	or	r24, r25
    1dfe:	09 f4       	brne	.+2      	; 0x1e02 <_ZN8iotClock9parseLineEPc+0x392>
    1e00:	5e c0       	rjmp	.+188    	; 0x1ebe <_ZN8iotClock9parseLineEPc+0x44e>
    1e02:	0f 2e       	mov	r0, r31
    1e04:	f3 e1       	ldi	r31, 0x13	; 19
    1e06:	cf 2e       	mov	r12, r31
    1e08:	f1 e0       	ldi	r31, 0x01	; 1
    1e0a:	df 2e       	mov	r13, r31
    1e0c:	f0 2d       	mov	r31, r0
    1e0e:	0f 2e       	mov	r0, r31
    1e10:	f7 e0       	ldi	r31, 0x07	; 7
    1e12:	af 2e       	mov	r10, r31
    1e14:	f1 e0       	ldi	r31, 0x01	; 1
    1e16:	bf 2e       	mov	r11, r31
    1e18:	f0 2d       	mov	r31, r0
    1e1a:	e1 2c       	mov	r14, r1
    1e1c:	f1 2c       	mov	r15, r1
    1e1e:	00 e0       	ldi	r16, 0x00	; 0
    1e20:	10 e0       	ldi	r17, 0x00	; 0
				int		m, days = 0;
				for(m = 0; m < 12; m++) {
					if(strncasecmp(s, iMonth[m], 3) == 0) break;
    1e22:	f6 01       	movw	r30, r12
    1e24:	61 91       	ld	r22, Z+
    1e26:	71 91       	ld	r23, Z+
    1e28:	6f 01       	movw	r12, r30
    1e2a:	43 e0       	ldi	r20, 0x03	; 3
    1e2c:	50 e0       	ldi	r21, 0x00	; 0
    1e2e:	ce 01       	movw	r24, r28
    1e30:	0e 94 08 34 	call	0x6810	; 0x6810 <strncasecmp>
    1e34:	89 2b       	or	r24, r25
    1e36:	59 f0       	breq	.+22     	; 0x1e4e <_ZN8iotClock9parseLineEPc+0x3de>
					days += iMonthDays[m];
    1e38:	d5 01       	movw	r26, r10
    1e3a:	8d 91       	ld	r24, X+
    1e3c:	5d 01       	movw	r10, r26
    1e3e:	e8 0e       	add	r14, r24
    1e40:	f1 1c       	adc	r15, r1
			char	*s;

			s = *ps;
			if(isalpha(*s)) {
				int		m, days = 0;
				for(m = 0; m < 12; m++) {
    1e42:	0f 5f       	subi	r16, 0xFF	; 255
    1e44:	1f 4f       	sbci	r17, 0xFF	; 255
    1e46:	0c 30       	cpi	r16, 0x0C	; 12
    1e48:	11 05       	cpc	r17, r1
    1e4a:	59 f7       	brne	.-42     	; 0x1e22 <_ZN8iotClock9parseLineEPc+0x3b2>
    1e4c:	26 c3       	rjmp	.+1612   	; 0x249a <_ZN8iotClock9parseLineEPc+0xa2a>
					if(strncasecmp(s, iMonth[m], 3) == 0) break;
					days += iMonthDays[m];
				}
				if((m == 12) || s[3] != '-' || !isdigit(s[4]) || !isdigit(s[5]))
    1e4e:	0c 30       	cpi	r16, 0x0C	; 12
    1e50:	11 05       	cpc	r17, r1
    1e52:	09 f4       	brne	.+2      	; 0x1e56 <_ZN8iotClock9parseLineEPc+0x3e6>
    1e54:	22 c3       	rjmp	.+1604   	; 0x249a <_ZN8iotClock9parseLineEPc+0xa2a>
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	8d 32       	cpi	r24, 0x2D	; 45
    1e5a:	09 f0       	breq	.+2      	; 0x1e5e <_ZN8iotClock9parseLineEPc+0x3ee>
    1e5c:	1e c3       	rjmp	.+1596   	; 0x249a <_ZN8iotClock9parseLineEPc+0xa2a>
    1e5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	20 53       	subi	r18, 0x30	; 48
    1e66:	31 09       	sbc	r19, r1
    1e68:	2a 30       	cpi	r18, 0x0A	; 10
    1e6a:	31 05       	cpc	r19, r1
    1e6c:	08 f0       	brcs	.+2      	; 0x1e70 <_ZN8iotClock9parseLineEPc+0x400>
    1e6e:	15 c3       	rjmp	.+1578   	; 0x249a <_ZN8iotClock9parseLineEPc+0xa2a>
    1e70:	4d 81       	ldd	r20, Y+5	; 0x05
    1e72:	24 2f       	mov	r18, r20
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	20 53       	subi	r18, 0x30	; 48
    1e78:	31 09       	sbc	r19, r1
    1e7a:	2a 30       	cpi	r18, 0x0A	; 10
    1e7c:	31 05       	cpc	r19, r1
    1e7e:	08 f0       	brcs	.+2      	; 0x1e82 <_ZN8iotClock9parseLineEPc+0x412>
    1e80:	0c c3       	rjmp	.+1560   	; 0x249a <_ZN8iotClock9parseLineEPc+0xa2a>
					return -1;
				secs = 86400L * (days + 10 * (s[4] - '0') + s[5] - '0' - 1);
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	c0 97       	sbiw	r24, 0x30	; 48
    1e86:	dc 01       	movw	r26, r24
    1e88:	aa 0f       	add	r26, r26
    1e8a:	bb 1f       	adc	r27, r27
    1e8c:	88 0f       	add	r24, r24
    1e8e:	99 1f       	adc	r25, r25
    1e90:	88 0f       	add	r24, r24
    1e92:	99 1f       	adc	r25, r25
    1e94:	88 0f       	add	r24, r24
    1e96:	99 1f       	adc	r25, r25
    1e98:	a8 0f       	add	r26, r24
    1e9a:	b9 1f       	adc	r27, r25
    1e9c:	ae 0d       	add	r26, r14
    1e9e:	bf 1d       	adc	r27, r15
    1ea0:	a4 0f       	add	r26, r20
    1ea2:	b1 1d       	adc	r27, r1
    1ea4:	d1 97       	sbiw	r26, 0x31	; 49
    1ea6:	20 e8       	ldi	r18, 0x80	; 128
    1ea8:	31 e5       	ldi	r19, 0x51	; 81
    1eaa:	41 e0       	ldi	r20, 0x01	; 1
    1eac:	50 e0       	ldi	r21, 0x00	; 0
    1eae:	0e 94 1e 31 	call	0x623c	; 0x623c <__mulshisi3>
    1eb2:	6b 01       	movw	r12, r22
    1eb4:	7c 01       	movw	r14, r24
				s += 7;
    1eb6:	8e 01       	movw	r16, r28
    1eb8:	09 5f       	subi	r16, 0xF9	; 249
    1eba:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebc:	2b c0       	rjmp	.+86     	; 0x1f14 <_ZN8iotClock9parseLineEPc+0x4a4>
			} else if(*s == '+') {
    1ebe:	bb e2       	ldi	r27, 0x2B	; 43
    1ec0:	db 12       	cpse	r13, r27
    1ec2:	0b c0       	rjmp	.+22     	; 0x1eda <_ZN8iotClock9parseLineEPc+0x46a>
				secs = iSeconds; s++;
    1ec4:	c0 90 2e 05 	lds	r12, 0x052E
    1ec8:	d0 90 2f 05 	lds	r13, 0x052F
    1ecc:	e0 90 30 05 	lds	r14, 0x0530
    1ed0:	f0 90 31 05 	lds	r15, 0x0531
    1ed4:	0f 5f       	subi	r16, 0xFF	; 255
    1ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed8:	1d c0       	rjmp	.+58     	; 0x1f14 <_ZN8iotClock9parseLineEPc+0x4a4>
			} else if(*s == '-') {
    1eda:	ed e2       	ldi	r30, 0x2D	; 45
    1edc:	de 12       	cpse	r13, r30
    1ede:	17 c0       	rjmp	.+46     	; 0x1f0e <_ZN8iotClock9parseLineEPc+0x49e>
				secs = iSeconds - iSeconds % 86400L; s++;
    1ee0:	c0 90 2e 05 	lds	r12, 0x052E
    1ee4:	d0 90 2f 05 	lds	r13, 0x052F
    1ee8:	e0 90 30 05 	lds	r14, 0x0530
    1eec:	f0 90 31 05 	lds	r15, 0x0531
    1ef0:	c7 01       	movw	r24, r14
    1ef2:	b6 01       	movw	r22, r12
    1ef4:	20 e8       	ldi	r18, 0x80	; 128
    1ef6:	31 e5       	ldi	r19, 0x51	; 81
    1ef8:	41 e0       	ldi	r20, 0x01	; 1
    1efa:	50 e0       	ldi	r21, 0x00	; 0
    1efc:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <__divmodsi4>
    1f00:	c6 1a       	sub	r12, r22
    1f02:	d7 0a       	sbc	r13, r23
    1f04:	e8 0a       	sbc	r14, r24
    1f06:	f9 0a       	sbc	r15, r25
    1f08:	0f 5f       	subi	r16, 0xFF	; 255
    1f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f0c:	03 c0       	rjmp	.+6      	; 0x1f14 <_ZN8iotClock9parseLineEPc+0x4a4>
			} else secs = 0;
    1f0e:	c1 2c       	mov	r12, r1
    1f10:	d1 2c       	mov	r13, r1
    1f12:	76 01       	movw	r14, r12
			
			if(!isdigit(s[0])) return -1;
    1f14:	d8 01       	movw	r26, r16
    1f16:	dc 91       	ld	r29, X
    1f18:	8d 2f       	mov	r24, r29
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	c0 97       	sbiw	r24, 0x30	; 48
    1f1e:	0a 97       	sbiw	r24, 0x0a	; 10
    1f20:	08 f0       	brcs	.+2      	; 0x1f24 <_ZN8iotClock9parseLineEPc+0x4b4>
    1f22:	bb c2       	rjmp	.+1398   	; 0x249a <_ZN8iotClock9parseLineEPc+0xa2a>
			if(isdigit(s[1]) && s[2] == ':') {
    1f24:	11 96       	adiw	r26, 0x01	; 1
    1f26:	4c 91       	ld	r20, X
    1f28:	11 97       	sbiw	r26, 0x01	; 1
    1f2a:	84 2f       	mov	r24, r20
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	c0 97       	sbiw	r24, 0x30	; 48
    1f30:	0a 97       	sbiw	r24, 0x0a	; 10
    1f32:	08 f0       	brcs	.+2      	; 0x1f36 <_ZN8iotClock9parseLineEPc+0x4c6>
    1f34:	9b c0       	rjmp	.+310    	; 0x206c <_ZN8iotClock9parseLineEPc+0x5fc>
    1f36:	12 96       	adiw	r26, 0x02	; 2
    1f38:	8c 91       	ld	r24, X
    1f3a:	12 97       	sbiw	r26, 0x02	; 2
    1f3c:	8a 33       	cpi	r24, 0x3A	; 58
    1f3e:	09 f0       	breq	.+2      	; 0x1f42 <_ZN8iotClock9parseLineEPc+0x4d2>
    1f40:	95 c0       	rjmp	.+298    	; 0x206c <_ZN8iotClock9parseLineEPc+0x5fc>
				if( !isdigit(s[3]) || !isdigit(s[4]) || (s[5] != ':') ||
    1f42:	13 96       	adiw	r26, 0x03	; 3
    1f44:	bc 90       	ld	r11, X
    1f46:	13 97       	sbiw	r26, 0x03	; 3
    1f48:	8b 2d       	mov	r24, r11
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	c0 97       	sbiw	r24, 0x30	; 48
    1f4e:	0a 97       	sbiw	r24, 0x0a	; 10
    1f50:	08 f0       	brcs	.+2      	; 0x1f54 <_ZN8iotClock9parseLineEPc+0x4e4>
    1f52:	a3 c2       	rjmp	.+1350   	; 0x249a <_ZN8iotClock9parseLineEPc+0xa2a>
    1f54:	14 96       	adiw	r26, 0x04	; 4
    1f56:	cc 91       	ld	r28, X
    1f58:	14 97       	sbiw	r26, 0x04	; 4
    1f5a:	8c 2f       	mov	r24, r28
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	c0 97       	sbiw	r24, 0x30	; 48
    1f60:	0a 97       	sbiw	r24, 0x0a	; 10
    1f62:	08 f0       	brcs	.+2      	; 0x1f66 <_ZN8iotClock9parseLineEPc+0x4f6>
    1f64:	9a c2       	rjmp	.+1332   	; 0x249a <_ZN8iotClock9parseLineEPc+0xa2a>
    1f66:	15 96       	adiw	r26, 0x05	; 5
    1f68:	8c 91       	ld	r24, X
    1f6a:	15 97       	sbiw	r26, 0x05	; 5
    1f6c:	8a 33       	cpi	r24, 0x3A	; 58
    1f6e:	09 f0       	breq	.+2      	; 0x1f72 <_ZN8iotClock9parseLineEPc+0x502>
    1f70:	94 c2       	rjmp	.+1320   	; 0x249a <_ZN8iotClock9parseLineEPc+0xa2a>
					!isdigit(s[6]) || !isdigit(s[7]) ) return -1;
    1f72:	16 96       	adiw	r26, 0x06	; 6
    1f74:	fc 91       	ld	r31, X
    1f76:	16 97       	sbiw	r26, 0x06	; 6
    1f78:	8f 2f       	mov	r24, r31
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	c0 97       	sbiw	r24, 0x30	; 48
				secs = iSeconds - iSeconds % 86400L; s++;
			} else secs = 0;
			
			if(!isdigit(s[0])) return -1;
			if(isdigit(s[1]) && s[2] == ':') {
				if( !isdigit(s[3]) || !isdigit(s[4]) || (s[5] != ':') ||
    1f7e:	0a 97       	sbiw	r24, 0x0a	; 10
    1f80:	08 f0       	brcs	.+2      	; 0x1f84 <_ZN8iotClock9parseLineEPc+0x514>
    1f82:	8b c2       	rjmp	.+1302   	; 0x249a <_ZN8iotClock9parseLineEPc+0xa2a>
					!isdigit(s[6]) || !isdigit(s[7]) ) return -1;
    1f84:	17 96       	adiw	r26, 0x07	; 7
    1f86:	ec 91       	ld	r30, X
    1f88:	8e 2f       	mov	r24, r30
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	c0 97       	sbiw	r24, 0x30	; 48
    1f8e:	0a 97       	sbiw	r24, 0x0a	; 10
    1f90:	08 f0       	brcs	.+2      	; 0x1f94 <_ZN8iotClock9parseLineEPc+0x524>
    1f92:	83 c2       	rjmp	.+1286   	; 0x249a <_ZN8iotClock9parseLineEPc+0xa2a>
				secs += 36000L * (s[0] - '0');
    1f94:	ad 2f       	mov	r26, r29
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	d0 97       	sbiw	r26, 0x30	; 48
    1f9a:	20 ea       	ldi	r18, 0xA0	; 160
    1f9c:	3c e8       	ldi	r19, 0x8C	; 140
    1f9e:	0e 94 18 31 	call	0x6230	; 0x6230 <__usmulhisi3>
    1fa2:	c6 0e       	add	r12, r22
    1fa4:	d7 1e       	adc	r13, r23
    1fa6:	e8 1e       	adc	r14, r24
    1fa8:	f9 1e       	adc	r15, r25
				secs += 3600 * (s[1] - '0');
    1faa:	24 2f       	mov	r18, r20
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	20 53       	subi	r18, 0x30	; 48
    1fb0:	31 09       	sbc	r19, r1
    1fb2:	80 e1       	ldi	r24, 0x10	; 16
    1fb4:	9e e0       	ldi	r25, 0x0E	; 14
    1fb6:	28 9f       	mul	r18, r24
    1fb8:	a0 01       	movw	r20, r0
    1fba:	29 9f       	mul	r18, r25
    1fbc:	50 0d       	add	r21, r0
    1fbe:	38 9f       	mul	r19, r24
    1fc0:	50 0d       	add	r21, r0
    1fc2:	11 24       	eor	r1, r1
    1fc4:	66 27       	eor	r22, r22
    1fc6:	57 fd       	sbrc	r21, 7
    1fc8:	60 95       	com	r22
    1fca:	76 2f       	mov	r23, r22
    1fcc:	c4 0e       	add	r12, r20
    1fce:	d5 1e       	adc	r13, r21
    1fd0:	e6 1e       	adc	r14, r22
    1fd2:	f7 1e       	adc	r15, r23
				secs += 600 * (s[3] - '0');
    1fd4:	2b 2d       	mov	r18, r11
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	20 53       	subi	r18, 0x30	; 48
    1fda:	31 09       	sbc	r19, r1
    1fdc:	88 e5       	ldi	r24, 0x58	; 88
    1fde:	92 e0       	ldi	r25, 0x02	; 2
    1fe0:	28 9f       	mul	r18, r24
    1fe2:	a0 01       	movw	r20, r0
    1fe4:	29 9f       	mul	r18, r25
    1fe6:	50 0d       	add	r21, r0
    1fe8:	38 9f       	mul	r19, r24
    1fea:	50 0d       	add	r21, r0
    1fec:	11 24       	eor	r1, r1
    1fee:	66 27       	eor	r22, r22
    1ff0:	57 fd       	sbrc	r21, 7
    1ff2:	60 95       	com	r22
    1ff4:	76 2f       	mov	r23, r22
    1ff6:	c4 0e       	add	r12, r20
    1ff8:	d5 1e       	adc	r13, r21
    1ffa:	e6 1e       	adc	r14, r22
    1ffc:	f7 1e       	adc	r15, r23
				secs += 60 * (s[4] - '0');
    1ffe:	d0 e0       	ldi	r29, 0x00	; 0
    2000:	e0 97       	sbiw	r28, 0x30	; 48
    2002:	8c e3       	ldi	r24, 0x3C	; 60
    2004:	8c 9f       	mul	r24, r28
    2006:	a0 01       	movw	r20, r0
    2008:	8d 9f       	mul	r24, r29
    200a:	50 0d       	add	r21, r0
    200c:	11 24       	eor	r1, r1
    200e:	66 27       	eor	r22, r22
    2010:	57 fd       	sbrc	r21, 7
    2012:	60 95       	com	r22
    2014:	76 2f       	mov	r23, r22
    2016:	c4 0e       	add	r12, r20
    2018:	d5 1e       	adc	r13, r21
    201a:	e6 1e       	adc	r14, r22
    201c:	f7 1e       	adc	r15, r23
				secs += 10 * (s[6] - '0');
    201e:	2f 2f       	mov	r18, r31
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	20 53       	subi	r18, 0x30	; 48
    2024:	31 09       	sbc	r19, r1
    2026:	a9 01       	movw	r20, r18
    2028:	44 0f       	add	r20, r20
    202a:	55 1f       	adc	r21, r21
    202c:	22 0f       	add	r18, r18
    202e:	33 1f       	adc	r19, r19
    2030:	22 0f       	add	r18, r18
    2032:	33 1f       	adc	r19, r19
    2034:	22 0f       	add	r18, r18
    2036:	33 1f       	adc	r19, r19
    2038:	42 0f       	add	r20, r18
    203a:	53 1f       	adc	r21, r19
    203c:	66 27       	eor	r22, r22
    203e:	57 fd       	sbrc	r21, 7
    2040:	60 95       	com	r22
    2042:	76 2f       	mov	r23, r22
    2044:	c4 0e       	add	r12, r20
    2046:	d5 1e       	adc	r13, r21
    2048:	e6 1e       	adc	r14, r22
    204a:	f7 1e       	adc	r15, r23
				secs += (s[7] - '0');
    204c:	4e 2f       	mov	r20, r30
    204e:	50 e0       	ldi	r21, 0x00	; 0
    2050:	40 53       	subi	r20, 0x30	; 48
    2052:	51 09       	sbc	r21, r1
    2054:	66 27       	eor	r22, r22
    2056:	57 fd       	sbrc	r21, 7
    2058:	60 95       	com	r22
    205a:	76 2f       	mov	r23, r22
				*ps = s + 8;
    205c:	98 01       	movw	r18, r16
    205e:	28 5f       	subi	r18, 0xF8	; 248
    2060:	3f 4f       	sbci	r19, 0xFF	; 255
				secs += 36000L * (s[0] - '0');
				secs += 3600 * (s[1] - '0');
				secs += 600 * (s[3] - '0');
				secs += 60 * (s[4] - '0');
				secs += 10 * (s[6] - '0');
				secs += (s[7] - '0');
    2062:	c4 0e       	add	r12, r20
    2064:	d5 1e       	adc	r13, r21
    2066:	e6 1e       	adc	r14, r22
    2068:	f7 1e       	adc	r15, r23
    206a:	2b c0       	rjmp	.+86     	; 0x20c2 <_ZN8iotClock9parseLineEPc+0x652>
    206c:	f8 01       	movw	r30, r16
    206e:	31 96       	adiw	r30, 0x01	; 1
				s += 7;
			} else if(*s == '+') {
				secs = iSeconds; s++;
			} else if(*s == '-') {
				secs = iSeconds - iSeconds % 86400L; s++;
			} else secs = 0;
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	dc 01       	movw	r26, r24
				secs += 10 * (s[6] - '0');
				secs += (s[7] - '0');
				*ps = s + 8;
			} else {
				long	n = 0;
				while(isdigit(*s)) n = 10 * n + *s++ - '0';
    2076:	9f 01       	movw	r18, r30
    2078:	88 0f       	add	r24, r24
    207a:	99 1f       	adc	r25, r25
    207c:	aa 1f       	adc	r26, r26
    207e:	bb 1f       	adc	r27, r27
    2080:	ac 01       	movw	r20, r24
    2082:	bd 01       	movw	r22, r26
    2084:	44 0f       	add	r20, r20
    2086:	55 1f       	adc	r21, r21
    2088:	66 1f       	adc	r22, r22
    208a:	77 1f       	adc	r23, r23
    208c:	44 0f       	add	r20, r20
    208e:	55 1f       	adc	r21, r21
    2090:	66 1f       	adc	r22, r22
    2092:	77 1f       	adc	r23, r23
    2094:	84 0f       	add	r24, r20
    2096:	95 1f       	adc	r25, r21
    2098:	a6 1f       	adc	r26, r22
    209a:	b7 1f       	adc	r27, r23
    209c:	8d 0f       	add	r24, r29
    209e:	91 1d       	adc	r25, r1
    20a0:	a1 1d       	adc	r26, r1
    20a2:	b1 1d       	adc	r27, r1
    20a4:	c0 97       	sbiw	r24, 0x30	; 48
    20a6:	a1 09       	sbc	r26, r1
    20a8:	b1 09       	sbc	r27, r1
    20aa:	d1 91       	ld	r29, Z+
    20ac:	4d 2f       	mov	r20, r29
    20ae:	50 e0       	ldi	r21, 0x00	; 0
    20b0:	40 53       	subi	r20, 0x30	; 48
    20b2:	51 09       	sbc	r21, r1
    20b4:	4a 30       	cpi	r20, 0x0A	; 10
    20b6:	51 05       	cpc	r21, r1
    20b8:	f0 f2       	brcs	.-68     	; 0x2076 <_ZN8iotClock9parseLineEPc+0x606>
				secs += n;
    20ba:	c8 0e       	add	r12, r24
    20bc:	d9 1e       	adc	r13, r25
    20be:	ea 1e       	adc	r14, r26
    20c0:	fb 1e       	adc	r15, r27
				printf("time %ld\n", iSeconds);
				return true;
			} else if(strncmp(s, "at", 2) == 0) {
				int8_t	n;
				s += 2; while(isspace(*s)) s++;
				if( ((secs = toSeconds(&s)) >= 0) &&
    20c2:	ff 20       	and	r15, r15
    20c4:	0c f4       	brge	.+2      	; 0x20c8 <_ZN8iotClock9parseLineEPc+0x658>
    20c6:	e9 c1       	rjmp	.+978    	; 0x249a <_ZN8iotClock9parseLineEPc+0xa2a>
		
		static int8_t
		allocSchedule() {
			int8_t	i;
			for(i = 0; i < iotcMaxSchedules; i++) {
				if(iSchedule[i].iTime == 0) return i;
    20c8:	80 91 08 04 	lds	r24, 0x0408
    20cc:	90 91 09 04 	lds	r25, 0x0409
    20d0:	a0 91 0a 04 	lds	r26, 0x040A
    20d4:	b0 91 0b 04 	lds	r27, 0x040B
    20d8:	89 2b       	or	r24, r25
    20da:	8a 2b       	or	r24, r26
    20dc:	8b 2b       	or	r24, r27
    20de:	a9 f0       	breq	.+42     	; 0x210a <_ZN8iotClock9parseLineEPc+0x69a>
    20e0:	e2 e4       	ldi	r30, 0x42	; 66
    20e2:	f4 e0       	ldi	r31, 0x04	; 4
		static iotSchedule	iSchedule[iotcMaxSchedules];
		
		static int8_t
		allocSchedule() {
			int8_t	i;
			for(i = 0; i < iotcMaxSchedules; i++) {
    20e4:	55 24       	eor	r5, r5
    20e6:	53 94       	inc	r5
				if(iSchedule[i].iTime == 0) return i;
    20e8:	80 81       	ld	r24, Z
    20ea:	91 81       	ldd	r25, Z+1	; 0x01
    20ec:	a2 81       	ldd	r26, Z+2	; 0x02
    20ee:	b3 81       	ldd	r27, Z+3	; 0x03
    20f0:	89 2b       	or	r24, r25
    20f2:	8a 2b       	or	r24, r26
    20f4:	8b 2b       	or	r24, r27
    20f6:	31 f0       	breq	.+12     	; 0x2104 <_ZN8iotClock9parseLineEPc+0x694>
		static iotSchedule	iSchedule[iotcMaxSchedules];
		
		static int8_t
		allocSchedule() {
			int8_t	i;
			for(i = 0; i < iotcMaxSchedules; i++) {
    20f8:	53 94       	inc	r5
    20fa:	fa 96       	adiw	r30, 0x3a	; 58
    20fc:	b5 e0       	ldi	r27, 0x05	; 5
    20fe:	5b 12       	cpse	r5, r27
    2100:	f3 cf       	rjmp	.-26     	; 0x20e8 <_ZN8iotClock9parseLineEPc+0x678>
    2102:	cb c1       	rjmp	.+918    	; 0x249a <_ZN8iotClock9parseLineEPc+0xa2a>
				printf("time %ld\n", iSeconds);
				return true;
			} else if(strncmp(s, "at", 2) == 0) {
				int8_t	n;
				s += 2; while(isspace(*s)) s++;
				if( ((secs = toSeconds(&s)) >= 0) &&
    2104:	55 20       	and	r5, r5
    2106:	14 f4       	brge	.+4      	; 0x210c <_ZN8iotClock9parseLineEPc+0x69c>
    2108:	c8 c1       	rjmp	.+912    	; 0x249a <_ZN8iotClock9parseLineEPc+0xa2a>
		
		static int8_t
		allocSchedule() {
			int8_t	i;
			for(i = 0; i < iotcMaxSchedules; i++) {
				if(iSchedule[i].iTime == 0) return i;
    210a:	51 2c       	mov	r5, r1
    210c:	89 01       	movw	r16, r18
    210e:	e8 01       	movw	r28, r16
    2110:	0f 5f       	subi	r16, 0xFF	; 255
    2112:	1f 4f       	sbci	r17, 0xFF	; 255
			} else if(strncmp(s, "at", 2) == 0) {
				int8_t	n;
				s += 2; while(isspace(*s)) s++;
				if( ((secs = toSeconds(&s)) >= 0) &&
					((n = allocSchedule()) >= 0) ) {
					while(isspace(*s)) s++;
    2114:	88 81       	ld	r24, Y
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <isspace>
    211c:	89 2b       	or	r24, r25
    211e:	b9 f7       	brne	.-18     	; 0x210e <_ZN8iotClock9parseLineEPc+0x69e>
    2120:	3e 01       	movw	r6, r28
					iotSchedule	*sch = iSchedule + n;
    2122:	e5 2d       	mov	r30, r5
    2124:	fa e3       	ldi	r31, 0x3A	; 58
    2126:	ef 02       	muls	r30, r31
    2128:	80 01       	movw	r16, r0
    212a:	11 24       	eor	r1, r1
    212c:	08 5f       	subi	r16, 0xF8	; 248
    212e:	1b 4f       	sbci	r17, 0xFB	; 251
					sch->iTime = secs;
    2130:	d8 01       	movw	r26, r16
    2132:	cd 92       	st	X+, r12
    2134:	dd 92       	st	X+, r13
    2136:	ed 92       	st	X+, r14
    2138:	fc 92       	st	X, r15
    213a:	13 97       	sbiw	r26, 0x03	; 3
		toSeconds(char **ps) {
			long	secs;
			char	*s;

			s = *ps;
			if(isalpha(*s)) {
    213c:	f8 80       	ld	r15, Y
    213e:	8f 2d       	mov	r24, r15
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <isalpha>
    2146:	89 2b       	or	r24, r25
    2148:	09 f4       	brne	.+2      	; 0x214c <_ZN8iotClock9parseLineEPc+0x6dc>
    214a:	63 c0       	rjmp	.+198    	; 0x2212 <_ZN8iotClock9parseLineEPc+0x7a2>
    214c:	0f 2e       	mov	r0, r31
    214e:	f3 e1       	ldi	r31, 0x13	; 19
    2150:	cf 2e       	mov	r12, r31
    2152:	f1 e0       	ldi	r31, 0x01	; 1
    2154:	df 2e       	mov	r13, r31
    2156:	f0 2d       	mov	r31, r0
    2158:	0f 2e       	mov	r0, r31
    215a:	f7 e0       	ldi	r31, 0x07	; 7
    215c:	af 2e       	mov	r10, r31
    215e:	f1 e0       	ldi	r31, 0x01	; 1
    2160:	bf 2e       	mov	r11, r31
    2162:	f0 2d       	mov	r31, r0
    2164:	e1 2c       	mov	r14, r1
    2166:	f1 2c       	mov	r15, r1
    2168:	81 2c       	mov	r8, r1
    216a:	91 2c       	mov	r9, r1
				int		m, days = 0;
				for(m = 0; m < 12; m++) {
					if(strncasecmp(s, iMonth[m], 3) == 0) break;
    216c:	f6 01       	movw	r30, r12
    216e:	61 91       	ld	r22, Z+
    2170:	71 91       	ld	r23, Z+
    2172:	6f 01       	movw	r12, r30
    2174:	43 e0       	ldi	r20, 0x03	; 3
    2176:	50 e0       	ldi	r21, 0x00	; 0
    2178:	c3 01       	movw	r24, r6
    217a:	0e 94 08 34 	call	0x6810	; 0x6810 <strncasecmp>
    217e:	89 2b       	or	r24, r25
    2180:	69 f0       	breq	.+26     	; 0x219c <_ZN8iotClock9parseLineEPc+0x72c>
					days += iMonthDays[m];
    2182:	d5 01       	movw	r26, r10
    2184:	8d 91       	ld	r24, X+
    2186:	5d 01       	movw	r10, r26
    2188:	e8 0e       	add	r14, r24
    218a:	f1 1c       	adc	r15, r1
			char	*s;

			s = *ps;
			if(isalpha(*s)) {
				int		m, days = 0;
				for(m = 0; m < 12; m++) {
    218c:	bf ef       	ldi	r27, 0xFF	; 255
    218e:	8b 1a       	sub	r8, r27
    2190:	9b 0a       	sbc	r9, r27
    2192:	ec e0       	ldi	r30, 0x0C	; 12
    2194:	8e 16       	cp	r8, r30
    2196:	91 04       	cpc	r9, r1
    2198:	49 f7       	brne	.-46     	; 0x216c <_ZN8iotClock9parseLineEPc+0x6fc>
    219a:	47 c1       	rjmp	.+654    	; 0x242a <_ZN8iotClock9parseLineEPc+0x9ba>
					if(strncasecmp(s, iMonth[m], 3) == 0) break;
					days += iMonthDays[m];
				}
				if((m == 12) || s[3] != '-' || !isdigit(s[4]) || !isdigit(s[5]))
    219c:	fc e0       	ldi	r31, 0x0C	; 12
    219e:	8f 16       	cp	r8, r31
    21a0:	91 04       	cpc	r9, r1
    21a2:	09 f4       	brne	.+2      	; 0x21a6 <_ZN8iotClock9parseLineEPc+0x736>
    21a4:	42 c1       	rjmp	.+644    	; 0x242a <_ZN8iotClock9parseLineEPc+0x9ba>
    21a6:	d3 01       	movw	r26, r6
    21a8:	13 96       	adiw	r26, 0x03	; 3
    21aa:	8c 91       	ld	r24, X
    21ac:	13 97       	sbiw	r26, 0x03	; 3
    21ae:	8d 32       	cpi	r24, 0x2D	; 45
    21b0:	09 f0       	breq	.+2      	; 0x21b4 <_ZN8iotClock9parseLineEPc+0x744>
    21b2:	3b c1       	rjmp	.+630    	; 0x242a <_ZN8iotClock9parseLineEPc+0x9ba>
    21b4:	14 96       	adiw	r26, 0x04	; 4
    21b6:	3c 91       	ld	r19, X
    21b8:	14 97       	sbiw	r26, 0x04	; 4
    21ba:	83 2f       	mov	r24, r19
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	c0 97       	sbiw	r24, 0x30	; 48
    21c0:	0a 97       	sbiw	r24, 0x0a	; 10
    21c2:	08 f0       	brcs	.+2      	; 0x21c6 <_ZN8iotClock9parseLineEPc+0x756>
    21c4:	32 c1       	rjmp	.+612    	; 0x242a <_ZN8iotClock9parseLineEPc+0x9ba>
    21c6:	15 96       	adiw	r26, 0x05	; 5
    21c8:	2c 91       	ld	r18, X
    21ca:	82 2f       	mov	r24, r18
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	c0 97       	sbiw	r24, 0x30	; 48
    21d0:	0a 97       	sbiw	r24, 0x0a	; 10
    21d2:	08 f0       	brcs	.+2      	; 0x21d6 <_ZN8iotClock9parseLineEPc+0x766>
    21d4:	2a c1       	rjmp	.+596    	; 0x242a <_ZN8iotClock9parseLineEPc+0x9ba>
					return -1;
				secs = 86400L * (days + 10 * (s[4] - '0') + s[5] - '0' - 1);
    21d6:	83 2f       	mov	r24, r19
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	c0 97       	sbiw	r24, 0x30	; 48
    21dc:	dc 01       	movw	r26, r24
    21de:	aa 0f       	add	r26, r26
    21e0:	bb 1f       	adc	r27, r27
    21e2:	88 0f       	add	r24, r24
    21e4:	99 1f       	adc	r25, r25
    21e6:	88 0f       	add	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	a8 0f       	add	r26, r24
    21f0:	b9 1f       	adc	r27, r25
    21f2:	ae 0d       	add	r26, r14
    21f4:	bf 1d       	adc	r27, r15
    21f6:	a2 0f       	add	r26, r18
    21f8:	b1 1d       	adc	r27, r1
    21fa:	d1 97       	sbiw	r26, 0x31	; 49
    21fc:	20 e8       	ldi	r18, 0x80	; 128
    21fe:	31 e5       	ldi	r19, 0x51	; 81
    2200:	41 e0       	ldi	r20, 0x01	; 1
    2202:	50 e0       	ldi	r21, 0x00	; 0
    2204:	0e 94 1e 31 	call	0x623c	; 0x623c <__mulshisi3>
    2208:	6b 01       	movw	r12, r22
    220a:	7c 01       	movw	r14, r24
				s += 7;
    220c:	f3 01       	movw	r30, r6
    220e:	37 96       	adiw	r30, 0x07	; 7
    2210:	2c c0       	rjmp	.+88     	; 0x226a <_ZN8iotClock9parseLineEPc+0x7fa>
			} else if(*s == '+') {
    2212:	bb e2       	ldi	r27, 0x2B	; 43
    2214:	fb 12       	cpse	r15, r27
    2216:	0b c0       	rjmp	.+22     	; 0x222e <_ZN8iotClock9parseLineEPc+0x7be>
				secs = iSeconds; s++;
    2218:	c0 90 2e 05 	lds	r12, 0x052E
    221c:	d0 90 2f 05 	lds	r13, 0x052F
    2220:	e0 90 30 05 	lds	r14, 0x0530
    2224:	f0 90 31 05 	lds	r15, 0x0531
    2228:	fe 01       	movw	r30, r28
    222a:	31 96       	adiw	r30, 0x01	; 1
    222c:	1e c0       	rjmp	.+60     	; 0x226a <_ZN8iotClock9parseLineEPc+0x7fa>
			} else if(*s == '-') {
    222e:	ed e2       	ldi	r30, 0x2D	; 45
    2230:	fe 12       	cpse	r15, r30
    2232:	17 c0       	rjmp	.+46     	; 0x2262 <_ZN8iotClock9parseLineEPc+0x7f2>
				secs = iSeconds - iSeconds % 86400L; s++;
    2234:	c0 90 2e 05 	lds	r12, 0x052E
    2238:	d0 90 2f 05 	lds	r13, 0x052F
    223c:	e0 90 30 05 	lds	r14, 0x0530
    2240:	f0 90 31 05 	lds	r15, 0x0531
    2244:	c7 01       	movw	r24, r14
    2246:	b6 01       	movw	r22, r12
    2248:	20 e8       	ldi	r18, 0x80	; 128
    224a:	31 e5       	ldi	r19, 0x51	; 81
    224c:	41 e0       	ldi	r20, 0x01	; 1
    224e:	50 e0       	ldi	r21, 0x00	; 0
    2250:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <__divmodsi4>
    2254:	c6 1a       	sub	r12, r22
    2256:	d7 0a       	sbc	r13, r23
    2258:	e8 0a       	sbc	r14, r24
    225a:	f9 0a       	sbc	r15, r25
    225c:	fe 01       	movw	r30, r28
    225e:	31 96       	adiw	r30, 0x01	; 1
    2260:	04 c0       	rjmp	.+8      	; 0x226a <_ZN8iotClock9parseLineEPc+0x7fa>
					return -1;
				secs = 86400L * (days + 10 * (s[4] - '0') + s[5] - '0' - 1);
				s += 7;
			} else if(*s == '+') {
				secs = iSeconds; s++;
			} else if(*s == '-') {
    2262:	fe 01       	movw	r30, r28
				secs = iSeconds - iSeconds % 86400L; s++;
			} else secs = 0;
    2264:	c1 2c       	mov	r12, r1
    2266:	d1 2c       	mov	r13, r1
    2268:	76 01       	movw	r14, r12
			
			if(!isdigit(s[0])) return -1;
    226a:	60 81       	ld	r22, Z
    226c:	86 2f       	mov	r24, r22
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	c0 97       	sbiw	r24, 0x30	; 48
    2272:	0a 97       	sbiw	r24, 0x0a	; 10
    2274:	08 f0       	brcs	.+2      	; 0x2278 <_ZN8iotClock9parseLineEPc+0x808>
    2276:	d9 c0       	rjmp	.+434    	; 0x242a <_ZN8iotClock9parseLineEPc+0x9ba>
			if(isdigit(s[1]) && s[2] == ':') {
    2278:	41 81       	ldd	r20, Z+1	; 0x01
    227a:	84 2f       	mov	r24, r20
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	c0 97       	sbiw	r24, 0x30	; 48
    2280:	0a 97       	sbiw	r24, 0x0a	; 10
    2282:	08 f0       	brcs	.+2      	; 0x2286 <_ZN8iotClock9parseLineEPc+0x816>
    2284:	95 c0       	rjmp	.+298    	; 0x23b0 <_ZN8iotClock9parseLineEPc+0x940>
    2286:	82 81       	ldd	r24, Z+2	; 0x02
    2288:	8a 33       	cpi	r24, 0x3A	; 58
    228a:	09 f0       	breq	.+2      	; 0x228e <_ZN8iotClock9parseLineEPc+0x81e>
    228c:	91 c0       	rjmp	.+290    	; 0x23b0 <_ZN8iotClock9parseLineEPc+0x940>
				if( !isdigit(s[3]) || !isdigit(s[4]) || (s[5] != ':') ||
    228e:	b3 80       	ldd	r11, Z+3	; 0x03
    2290:	8b 2d       	mov	r24, r11
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	c0 97       	sbiw	r24, 0x30	; 48
    2296:	0a 97       	sbiw	r24, 0x0a	; 10
    2298:	08 f0       	brcs	.+2      	; 0x229c <_ZN8iotClock9parseLineEPc+0x82c>
    229a:	c7 c0       	rjmp	.+398    	; 0x242a <_ZN8iotClock9parseLineEPc+0x9ba>
    229c:	54 81       	ldd	r21, Z+4	; 0x04
    229e:	85 2f       	mov	r24, r21
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	c0 97       	sbiw	r24, 0x30	; 48
    22a4:	0a 97       	sbiw	r24, 0x0a	; 10
    22a6:	08 f0       	brcs	.+2      	; 0x22aa <_ZN8iotClock9parseLineEPc+0x83a>
    22a8:	c0 c0       	rjmp	.+384    	; 0x242a <_ZN8iotClock9parseLineEPc+0x9ba>
    22aa:	85 81       	ldd	r24, Z+5	; 0x05
    22ac:	8a 33       	cpi	r24, 0x3A	; 58
    22ae:	09 f0       	breq	.+2      	; 0x22b2 <_ZN8iotClock9parseLineEPc+0x842>
    22b0:	bc c0       	rjmp	.+376    	; 0x242a <_ZN8iotClock9parseLineEPc+0x9ba>
					!isdigit(s[6]) || !isdigit(s[7]) ) return -1;
    22b2:	a6 80       	ldd	r10, Z+6	; 0x06
    22b4:	2a 2d       	mov	r18, r10
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	20 53       	subi	r18, 0x30	; 48
    22ba:	31 09       	sbc	r19, r1
				secs = iSeconds - iSeconds % 86400L; s++;
			} else secs = 0;
			
			if(!isdigit(s[0])) return -1;
			if(isdigit(s[1]) && s[2] == ':') {
				if( !isdigit(s[3]) || !isdigit(s[4]) || (s[5] != ':') ||
    22bc:	2a 30       	cpi	r18, 0x0A	; 10
    22be:	31 05       	cpc	r19, r1
    22c0:	08 f0       	brcs	.+2      	; 0x22c4 <_ZN8iotClock9parseLineEPc+0x854>
    22c2:	b3 c0       	rjmp	.+358    	; 0x242a <_ZN8iotClock9parseLineEPc+0x9ba>
					!isdigit(s[6]) || !isdigit(s[7]) ) return -1;
    22c4:	97 80       	ldd	r9, Z+7	; 0x07
    22c6:	29 2d       	mov	r18, r9
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	20 53       	subi	r18, 0x30	; 48
    22cc:	31 09       	sbc	r19, r1
    22ce:	2a 30       	cpi	r18, 0x0A	; 10
    22d0:	31 05       	cpc	r19, r1
    22d2:	08 f0       	brcs	.+2      	; 0x22d6 <_ZN8iotClock9parseLineEPc+0x866>
    22d4:	aa c0       	rjmp	.+340    	; 0x242a <_ZN8iotClock9parseLineEPc+0x9ba>
				secs += 36000L * (s[0] - '0');
    22d6:	a6 2f       	mov	r26, r22
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	d0 97       	sbiw	r26, 0x30	; 48
    22dc:	20 ea       	ldi	r18, 0xA0	; 160
    22de:	3c e8       	ldi	r19, 0x8C	; 140
    22e0:	0e 94 18 31 	call	0x6230	; 0x6230 <__usmulhisi3>
    22e4:	c6 0e       	add	r12, r22
    22e6:	d7 1e       	adc	r13, r23
    22e8:	e8 1e       	adc	r14, r24
    22ea:	f9 1e       	adc	r15, r25
				secs += 3600 * (s[1] - '0');
    22ec:	c4 2f       	mov	r28, r20
    22ee:	d0 e0       	ldi	r29, 0x00	; 0
    22f0:	e0 97       	sbiw	r28, 0x30	; 48
    22f2:	a0 e1       	ldi	r26, 0x10	; 16
    22f4:	be e0       	ldi	r27, 0x0E	; 14
    22f6:	ca 9f       	mul	r28, r26
    22f8:	90 01       	movw	r18, r0
    22fa:	cb 9f       	mul	r28, r27
    22fc:	30 0d       	add	r19, r0
    22fe:	da 9f       	mul	r29, r26
    2300:	30 0d       	add	r19, r0
    2302:	11 24       	eor	r1, r1
    2304:	c9 01       	movw	r24, r18
    2306:	aa 27       	eor	r26, r26
    2308:	97 fd       	sbrc	r25, 7
    230a:	a0 95       	com	r26
    230c:	ba 2f       	mov	r27, r26
    230e:	8c 0d       	add	r24, r12
    2310:	9d 1d       	adc	r25, r13
    2312:	ae 1d       	adc	r26, r14
    2314:	bf 1d       	adc	r27, r15
				secs += 600 * (s[3] - '0');
    2316:	6b 2d       	mov	r22, r11
    2318:	70 e0       	ldi	r23, 0x00	; 0
    231a:	60 53       	subi	r22, 0x30	; 48
    231c:	71 09       	sbc	r23, r1
    231e:	28 e5       	ldi	r18, 0x58	; 88
    2320:	32 e0       	ldi	r19, 0x02	; 2
    2322:	62 9f       	mul	r22, r18
    2324:	60 01       	movw	r12, r0
    2326:	63 9f       	mul	r22, r19
    2328:	d0 0c       	add	r13, r0
    232a:	72 9f       	mul	r23, r18
    232c:	d0 0c       	add	r13, r0
    232e:	11 24       	eor	r1, r1
    2330:	ee 24       	eor	r14, r14
    2332:	d7 fc       	sbrc	r13, 7
    2334:	e0 94       	com	r14
    2336:	fe 2c       	mov	r15, r14
    2338:	8c 0d       	add	r24, r12
    233a:	9d 1d       	adc	r25, r13
    233c:	ae 1d       	adc	r26, r14
    233e:	bf 1d       	adc	r27, r15
				secs += 60 * (s[4] - '0');
    2340:	25 2f       	mov	r18, r21
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	20 53       	subi	r18, 0x30	; 48
    2346:	31 09       	sbc	r19, r1
    2348:	6c e3       	ldi	r22, 0x3C	; 60
    234a:	62 9f       	mul	r22, r18
    234c:	a0 01       	movw	r20, r0
    234e:	63 9f       	mul	r22, r19
    2350:	50 0d       	add	r21, r0
    2352:	11 24       	eor	r1, r1
    2354:	66 27       	eor	r22, r22
    2356:	57 fd       	sbrc	r21, 7
    2358:	60 95       	com	r22
    235a:	76 2f       	mov	r23, r22
    235c:	84 0f       	add	r24, r20
    235e:	95 1f       	adc	r25, r21
    2360:	a6 1f       	adc	r26, r22
    2362:	b7 1f       	adc	r27, r23
				secs += 10 * (s[6] - '0');
    2364:	b1 2c       	mov	r11, r1
    2366:	20 e3       	ldi	r18, 0x30	; 48
    2368:	a2 1a       	sub	r10, r18
    236a:	b1 08       	sbc	r11, r1
    236c:	a5 01       	movw	r20, r10
    236e:	44 0f       	add	r20, r20
    2370:	55 1f       	adc	r21, r21
    2372:	aa 0c       	add	r10, r10
    2374:	bb 1c       	adc	r11, r11
    2376:	aa 0c       	add	r10, r10
    2378:	bb 1c       	adc	r11, r11
    237a:	aa 0c       	add	r10, r10
    237c:	bb 1c       	adc	r11, r11
    237e:	4a 0d       	add	r20, r10
    2380:	5b 1d       	adc	r21, r11
    2382:	66 27       	eor	r22, r22
    2384:	57 fd       	sbrc	r21, 7
    2386:	60 95       	com	r22
    2388:	76 2f       	mov	r23, r22
    238a:	84 0f       	add	r24, r20
    238c:	95 1f       	adc	r25, r21
    238e:	a6 1f       	adc	r26, r22
    2390:	b7 1f       	adc	r27, r23
				secs += (s[7] - '0');
    2392:	49 2d       	mov	r20, r9
    2394:	50 e0       	ldi	r21, 0x00	; 0
    2396:	40 53       	subi	r20, 0x30	; 48
    2398:	51 09       	sbc	r21, r1
    239a:	66 27       	eor	r22, r22
    239c:	57 fd       	sbrc	r21, 7
    239e:	60 95       	com	r22
    23a0:	76 2f       	mov	r23, r22
				*ps = s + 8;
    23a2:	ef 01       	movw	r28, r30
    23a4:	28 96       	adiw	r28, 0x08	; 8
				secs += 36000L * (s[0] - '0');
				secs += 3600 * (s[1] - '0');
				secs += 600 * (s[3] - '0');
				secs += 60 * (s[4] - '0');
				secs += 10 * (s[6] - '0');
				secs += (s[7] - '0');
    23a6:	84 0f       	add	r24, r20
    23a8:	95 1f       	adc	r25, r21
    23aa:	a6 1f       	adc	r26, r22
    23ac:	b7 1f       	adc	r27, r23
    23ae:	2a c0       	rjmp	.+84     	; 0x2404 <_ZN8iotClock9parseLineEPc+0x994>
    23b0:	31 96       	adiw	r30, 0x01	; 1
				s += 7;
			} else if(*s == '+') {
				secs = iSeconds; s++;
			} else if(*s == '-') {
				secs = iSeconds - iSeconds % 86400L; s++;
			} else secs = 0;
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	dc 01       	movw	r26, r24
				secs += 10 * (s[6] - '0');
				secs += (s[7] - '0');
				*ps = s + 8;
			} else {
				long	n = 0;
				while(isdigit(*s)) n = 10 * n + *s++ - '0';
    23b8:	ef 01       	movw	r28, r30
    23ba:	88 0f       	add	r24, r24
    23bc:	99 1f       	adc	r25, r25
    23be:	aa 1f       	adc	r26, r26
    23c0:	bb 1f       	adc	r27, r27
    23c2:	4c 01       	movw	r8, r24
    23c4:	5d 01       	movw	r10, r26
    23c6:	88 0c       	add	r8, r8
    23c8:	99 1c       	adc	r9, r9
    23ca:	aa 1c       	adc	r10, r10
    23cc:	bb 1c       	adc	r11, r11
    23ce:	88 0c       	add	r8, r8
    23d0:	99 1c       	adc	r9, r9
    23d2:	aa 1c       	adc	r10, r10
    23d4:	bb 1c       	adc	r11, r11
    23d6:	88 0d       	add	r24, r8
    23d8:	99 1d       	adc	r25, r9
    23da:	aa 1d       	adc	r26, r10
    23dc:	bb 1d       	adc	r27, r11
    23de:	86 0f       	add	r24, r22
    23e0:	91 1d       	adc	r25, r1
    23e2:	a1 1d       	adc	r26, r1
    23e4:	b1 1d       	adc	r27, r1
    23e6:	c0 97       	sbiw	r24, 0x30	; 48
    23e8:	a1 09       	sbc	r26, r1
    23ea:	b1 09       	sbc	r27, r1
    23ec:	61 91       	ld	r22, Z+
    23ee:	26 2f       	mov	r18, r22
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	20 53       	subi	r18, 0x30	; 48
    23f4:	31 09       	sbc	r19, r1
    23f6:	2a 30       	cpi	r18, 0x0A	; 10
    23f8:	31 05       	cpc	r19, r1
    23fa:	f0 f2       	brcs	.-68     	; 0x23b8 <_ZN8iotClock9parseLineEPc+0x948>
				secs += n;
    23fc:	8c 0d       	add	r24, r12
    23fe:	9d 1d       	adc	r25, r13
    2400:	ae 1d       	adc	r26, r14
    2402:	bf 1d       	adc	r27, r15
				if( ((secs = toSeconds(&s)) >= 0) &&
					((n = allocSchedule()) >= 0) ) {
					while(isspace(*s)) s++;
					iotSchedule	*sch = iSchedule + n;
					sch->iTime = secs;
					if((secs = toSeconds(&s)) >= 0) {
    2404:	bb 23       	and	r27, r27
    2406:	8c f0       	brlt	.+34     	; 0x242a <_ZN8iotClock9parseLineEPc+0x9ba>
						sch->iPeriod = secs;
    2408:	f8 01       	movw	r30, r16
    240a:	84 83       	std	Z+4, r24	; 0x04
    240c:	95 83       	std	Z+5, r25	; 0x05
    240e:	a6 83       	std	Z+6, r26	; 0x06
    2410:	b7 83       	std	Z+7, r27	; 0x07
    2412:	7e 01       	movw	r14, r28
    2414:	e7 01       	movw	r28, r14
    2416:	ff ef       	ldi	r31, 0xFF	; 255
    2418:	ef 1a       	sub	r14, r31
    241a:	ff 0a       	sbc	r15, r31
						while(isspace(*s)) s++;
    241c:	88 81       	ld	r24, Y
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <isspace>
    2424:	89 2b       	or	r24, r25
    2426:	b1 f7       	brne	.-20     	; 0x2414 <_ZN8iotClock9parseLineEPc+0x9a4>
    2428:	07 c0       	rjmp	.+14     	; 0x2438 <_ZN8iotClock9parseLineEPc+0x9c8>
					} else sch->iPeriod = 0;
    242a:	d8 01       	movw	r26, r16
    242c:	14 96       	adiw	r26, 0x04	; 4
    242e:	1d 92       	st	X+, r1
    2430:	1d 92       	st	X+, r1
    2432:	1d 92       	st	X+, r1
    2434:	1c 92       	st	X, r1
    2436:	17 97       	sbiw	r26, 0x07	; 7
					strcpy(sch->iLine, s);
    2438:	78 01       	movw	r14, r16
    243a:	b8 e0       	ldi	r27, 0x08	; 8
    243c:	eb 0e       	add	r14, r27
    243e:	f1 1c       	adc	r15, r1
    2440:	be 01       	movw	r22, r28
    2442:	c7 01       	movw	r24, r14
    2444:	0e 94 01 34 	call	0x6802	; 0x6802 <strcpy>
					printf("schedule %d: %ld %ld %s\n",
						n, sch->iTime, sch->iPeriod, sch->iLine);
    2448:	ff 92       	push	r15
    244a:	ef 92       	push	r14
    244c:	f8 01       	movw	r30, r16
    244e:	87 81       	ldd	r24, Z+7	; 0x07
    2450:	8f 93       	push	r24
    2452:	86 81       	ldd	r24, Z+6	; 0x06
    2454:	8f 93       	push	r24
    2456:	85 81       	ldd	r24, Z+5	; 0x05
    2458:	8f 93       	push	r24
    245a:	84 81       	ldd	r24, Z+4	; 0x04
    245c:	8f 93       	push	r24
    245e:	83 81       	ldd	r24, Z+3	; 0x03
    2460:	8f 93       	push	r24
    2462:	82 81       	ldd	r24, Z+2	; 0x02
    2464:	8f 93       	push	r24
    2466:	81 81       	ldd	r24, Z+1	; 0x01
    2468:	8f 93       	push	r24
    246a:	80 81       	ld	r24, Z
    246c:	8f 93       	push	r24
    246e:	85 2d       	mov	r24, r5
    2470:	99 27       	eor	r25, r25
    2472:	87 fd       	sbrc	r24, 7
    2474:	90 95       	com	r25
    2476:	9f 93       	push	r25
    2478:	5f 92       	push	r5
    247a:	8e ea       	ldi	r24, 0xAE	; 174
    247c:	91 e0       	ldi	r25, 0x01	; 1
    247e:	9f 93       	push	r25
    2480:	8f 93       	push	r24
    2482:	0e 94 80 34 	call	0x6900	; 0x6900 <printf>
    2486:	8d b7       	in	r24, 0x3d	; 61
    2488:	9e b7       	in	r25, 0x3e	; 62
    248a:	0e 96       	adiw	r24, 0x0e	; 14
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	f8 94       	cli
    2490:	9e bf       	out	0x3e, r25	; 62
    2492:	0f be       	out	0x3f, r0	; 63
    2494:	8d bf       	out	0x3d, r24	; 61
				} else printf("at: error\n");
				return true;
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	43 c0       	rjmp	.+134    	; 0x2520 <_ZN8iotClock9parseLineEPc+0xab0>
						while(isspace(*s)) s++;
					} else sch->iPeriod = 0;
					strcpy(sch->iLine, s);
					printf("schedule %d: %ld %ld %s\n",
						n, sch->iTime, sch->iPeriod, sch->iLine);
				} else printf("at: error\n");
    249a:	87 ec       	ldi	r24, 0xC7	; 199
    249c:	91 e0       	ldi	r25, 0x01	; 1
    249e:	0e 94 91 34 	call	0x6922	; 0x6922 <puts>
				return true;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	3d c0       	rjmp	.+122    	; 0x2520 <_ZN8iotClock9parseLineEPc+0xab0>
			} else if(strncmp(s, "cancel", 6) == 0) {
    24a6:	46 e0       	ldi	r20, 0x06	; 6
    24a8:	50 e0       	ldi	r21, 0x00	; 0
    24aa:	61 ed       	ldi	r22, 0xD1	; 209
    24ac:	71 e0       	ldi	r23, 0x01	; 1
    24ae:	ce 01       	movw	r24, r28
    24b0:	0e 94 20 34 	call	0x6840	; 0x6840 <strncmp>
    24b4:	89 2b       	or	r24, r25
    24b6:	99 f5       	brne	.+102    	; 0x251e <_ZN8iotClock9parseLineEPc+0xaae>
				int8_t	n;
				s += 6; while(isspace(*s)) s++;
    24b8:	26 96       	adiw	r28, 0x06	; 6
    24ba:	8e 01       	movw	r16, r28
    24bc:	21 96       	adiw	r28, 0x01	; 1
    24be:	d8 01       	movw	r26, r16
    24c0:	8c 91       	ld	r24, X
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <isspace>
    24c8:	89 2b       	or	r24, r25
    24ca:	b9 f7       	brne	.-18     	; 0x24ba <_ZN8iotClock9parseLineEPc+0xa4a>
				n = atoi(s);
    24cc:	c8 01       	movw	r24, r16
    24ce:	0e 94 cb 33 	call	0x6796	; 0x6796 <atoi>
				else s->iTime = 0;
			}
		}
		static int
		cancelSchedule(int8_t n) {
			if((n < 0) || (n >= iotcMaxSchedules)) return -1;
    24d2:	85 30       	cpi	r24, 0x05	; 5
    24d4:	f0 f4       	brcc	.+60     	; 0x2512 <_ZN8iotClock9parseLineEPc+0xaa2>
			iSchedule[n].iTime = 0;
    24d6:	28 2f       	mov	r18, r24
    24d8:	33 27       	eor	r19, r19
    24da:	27 fd       	sbrc	r18, 7
    24dc:	30 95       	com	r19
    24de:	ba e3       	ldi	r27, 0x3A	; 58
    24e0:	8b 02       	muls	r24, r27
    24e2:	f0 01       	movw	r30, r0
    24e4:	11 24       	eor	r1, r1
    24e6:	e8 5f       	subi	r30, 0xF8	; 248
    24e8:	fb 4f       	sbci	r31, 0xFB	; 251
    24ea:	10 82       	st	Z, r1
    24ec:	11 82       	std	Z+1, r1	; 0x01
    24ee:	12 82       	std	Z+2, r1	; 0x02
    24f0:	13 82       	std	Z+3, r1	; 0x03
				return true;
			} else if(strncmp(s, "cancel", 6) == 0) {
				int8_t	n;
				s += 6; while(isspace(*s)) s++;
				n = atoi(s);
				if((n = cancelSchedule(n)) >= 0) printf("cancel %d\n", n);
    24f2:	88 23       	and	r24, r24
    24f4:	74 f0       	brlt	.+28     	; 0x2512 <_ZN8iotClock9parseLineEPc+0xaa2>
    24f6:	3f 93       	push	r19
    24f8:	8f 93       	push	r24
    24fa:	88 ed       	ldi	r24, 0xD8	; 216
    24fc:	91 e0       	ldi	r25, 0x01	; 1
    24fe:	9f 93       	push	r25
    2500:	8f 93       	push	r24
    2502:	0e 94 80 34 	call	0x6900	; 0x6900 <printf>
    2506:	0f 90       	pop	r0
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
				else printf("cancel: error\n");
				return true;
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	07 c0       	rjmp	.+14     	; 0x2520 <_ZN8iotClock9parseLineEPc+0xab0>
			} else if(strncmp(s, "cancel", 6) == 0) {
				int8_t	n;
				s += 6; while(isspace(*s)) s++;
				n = atoi(s);
				if((n = cancelSchedule(n)) >= 0) printf("cancel %d\n", n);
				else printf("cancel: error\n");
    2512:	83 ee       	ldi	r24, 0xE3	; 227
    2514:	91 e0       	ldi	r25, 0x01	; 1
    2516:	0e 94 91 34 	call	0x6922	; 0x6922 <puts>
				return true;
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	01 c0       	rjmp	.+2      	; 0x2520 <_ZN8iotClock9parseLineEPc+0xab0>
			}
			return false;
    251e:	80 e0       	ldi	r24, 0x00	; 0
		}
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	1f 91       	pop	r17
    2526:	0f 91       	pop	r16
    2528:	ff 90       	pop	r15
    252a:	ef 90       	pop	r14
    252c:	df 90       	pop	r13
    252e:	cf 90       	pop	r12
    2530:	bf 90       	pop	r11
    2532:	af 90       	pop	r10
    2534:	9f 90       	pop	r9
    2536:	8f 90       	pop	r8
    2538:	7f 90       	pop	r7
    253a:	6f 90       	pop	r6
    253c:	5f 90       	pop	r5
    253e:	08 95       	ret

00002540 <_ZL9parseLinePc>:

//-----------------------------------------------------------------------------
//	parser
//-----------------------------------------------------------------------------
static void
parseLine(char *s) {
    2540:	2f 92       	push	r2
    2542:	3f 92       	push	r3
    2544:	4f 92       	push	r4
    2546:	5f 92       	push	r5
    2548:	6f 92       	push	r6
    254a:	7f 92       	push	r7
    254c:	8f 92       	push	r8
    254e:	9f 92       	push	r9
    2550:	af 92       	push	r10
    2552:	bf 92       	push	r11
    2554:	cf 92       	push	r12
    2556:	df 92       	push	r13
    2558:	ef 92       	push	r14
    255a:	ff 92       	push	r15
    255c:	0f 93       	push	r16
    255e:	1f 93       	push	r17
    2560:	cf 93       	push	r28
    2562:	df 93       	push	r29
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
    2568:	60 97       	sbiw	r28, 0x10	; 16
    256a:	0f b6       	in	r0, 0x3f	; 63
    256c:	f8 94       	cli
    256e:	de bf       	out	0x3e, r29	; 62
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	cd bf       	out	0x3d, r28	; 61
    2574:	3c 01       	movw	r6, r24
	CharLcd->print(2, 1, s);
    2576:	c0 90 4a 07 	lds	r12, 0x074A
    257a:	d0 90 4b 07 	lds	r13, 0x074B
    257e:	9c 01       	movw	r18, r24
    2580:	aa 24       	eor	r10, r10
    2582:	a3 94       	inc	r10
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    2584:	f6 01       	movw	r30, r12
    2586:	e4 5d       	subi	r30, 0xD4	; 212
    2588:	fe 4f       	sbci	r31, 0xFE	; 254
    258a:	76 01       	movw	r14, r12
    258c:	43 ed       	ldi	r20, 0xD3	; 211
    258e:	e4 1a       	sub	r14, r20
    2590:	4e ef       	ldi	r20, 0xFE	; 254
    2592:	f4 0a       	sbc	r15, r20
    2594:	04 e6       	ldi	r16, 0x64	; 100
    2596:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    2598:	68 94       	set
    259a:	88 24       	eor	r8, r8
    259c:	81 f8       	bld	r8, 1
    259e:	2a c0       	rjmp	.+84     	; 0x25f4 <_ZL9parseLinePc+0xb4>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    25a0:	99 24       	eor	r9, r9
    25a2:	93 94       	inc	r9
    25a4:	9a 0c       	add	r9, r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    25a6:	80 81       	ld	r24, Z
    25a8:	d7 01       	movw	r26, r14
    25aa:	4c 91       	ld	r20, X
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	01 96       	adiw	r24, 0x01	; 1
    25b0:	b8 01       	movw	r22, r16
    25b2:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    25b6:	50 e0       	ldi	r21, 0x00	; 0
    25b8:	84 17       	cp	r24, r20
    25ba:	95 07       	cpc	r25, r21
    25bc:	d1 f0       	breq	.+52     	; 0x25f2 <_ZL9parseLinePc+0xb2>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    25be:	80 81       	ld	r24, Z
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	ac 01       	movw	r20, r24
    25c4:	44 0f       	add	r20, r20
    25c6:	55 1f       	adc	r21, r21
    25c8:	84 0f       	add	r24, r20
    25ca:	95 1f       	adc	r25, r21
    25cc:	d6 01       	movw	r26, r12
    25ce:	a8 0f       	add	r26, r24
    25d0:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    25d2:	ac 92       	st	X, r10
    25d4:	11 96       	adiw	r26, 0x01	; 1
    25d6:	8c 92       	st	X, r8
    25d8:	11 97       	sbiw	r26, 0x01	; 1
    25da:	12 96       	adiw	r26, 0x02	; 2
    25dc:	bc 92       	st	X, r11

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    25de:	4f b7       	in	r20, 0x3f	; 63
    25e0:	f8 94       	cli
    25e2:	80 81       	ld	r24, Z
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	01 96       	adiw	r24, 0x01	; 1
    25e8:	b8 01       	movw	r22, r16
    25ea:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    25ee:	80 83       	st	Z, r24
    25f0:	4f bf       	out	0x3f, r20	; 63

//-----------------------------------------------------------------------------
//	parser
//-----------------------------------------------------------------------------
static void
parseLine(char *s) {
    25f2:	a9 2c       	mov	r10, r9
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    25f4:	d9 01       	movw	r26, r18
    25f6:	bd 90       	ld	r11, X+
    25f8:	9d 01       	movw	r18, r26
    25fa:	b1 10       	cpse	r11, r1
    25fc:	d1 cf       	rjmp	.-94     	; 0x25a0 <_ZL9parseLinePc+0x60>
	CharLcd->print(2, 1, s);
	//if(iotFpSensor::parseLine(s)) return;
	if(Dht->parseLine(s)) return;
    25fe:	e0 90 48 07 	lds	r14, 0x0748
    2602:	f0 90 49 07 	lds	r15, 0x0749
			iotcDhtLessThan, iotcDhtGreaterThan
		} iotDhtTriggerCondition;

		bool
		parseLine(char *s) {
			if(strncmp(s, "dht", 3) == 0) {
    2606:	43 e0       	ldi	r20, 0x03	; 3
    2608:	50 e0       	ldi	r21, 0x00	; 0
    260a:	6b ef       	ldi	r22, 0xFB	; 251
    260c:	71 e0       	ldi	r23, 0x01	; 1
    260e:	c3 01       	movw	r24, r6
    2610:	0e 94 20 34 	call	0x6840	; 0x6840 <strncmp>
    2614:	89 2b       	or	r24, r25
    2616:	09 f0       	breq	.+2      	; 0x261a <_ZL9parseLinePc+0xda>
    2618:	99 c7       	rjmp	.+3890   	; 0x354c <_ZL9parseLinePc+0x100c>
				
				int		n;
				bool	err;
				double	val;
				
				s += 3; while(isspace(*s)) s++;
    261a:	b3 e0       	ldi	r27, 0x03	; 3
    261c:	6b 0e       	add	r6, r27
    261e:	71 1c       	adc	r7, r1
    2620:	83 01       	movw	r16, r6
    2622:	ef ef       	ldi	r30, 0xFF	; 255
    2624:	6e 1a       	sub	r6, r30
    2626:	7e 0a       	sbc	r7, r30
    2628:	d8 01       	movw	r26, r16
    262a:	cc 90       	ld	r12, X
    262c:	d1 2c       	mov	r13, r1
    262e:	c6 01       	movw	r24, r12
    2630:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <isspace>
    2634:	89 2b       	or	r24, r25
    2636:	a1 f7       	brne	.-24     	; 0x2620 <_ZL9parseLinePc+0xe0>
				if(strncmp(s, "get", 3) == 0) {
    2638:	43 e0       	ldi	r20, 0x03	; 3
    263a:	50 e0       	ldi	r21, 0x00	; 0
    263c:	6f ef       	ldi	r22, 0xFF	; 255
    263e:	71 e0       	ldi	r23, 0x01	; 1
    2640:	c8 01       	movw	r24, r16
    2642:	0e 94 20 34 	call	0x6840	; 0x6840 <strncmp>
    2646:	89 2b       	or	r24, r25
    2648:	09 f0       	breq	.+2      	; 0x264c <_ZL9parseLinePc+0x10c>
    264a:	d3 c1       	rjmp	.+934    	; 0x29f2 <_ZL9parseLinePc+0x4b2>
			uint16_t delta = 0;

			leadingZeroBits = 40 - leadingZeroBits; // reverse counting...

			// REQUEST SAMPLE
			*ipDDR |= iPinMask;		// OUTPUT
    264c:	d7 01       	movw	r26, r14
    264e:	1c 96       	adiw	r26, 0x0c	; 12
    2650:	ed 91       	ld	r30, X+
    2652:	fc 91       	ld	r31, X
    2654:	1d 97       	sbiw	r26, 0x0d	; 13
    2656:	90 81       	ld	r25, Z
    2658:	1e 96       	adiw	r26, 0x0e	; 14
    265a:	8c 91       	ld	r24, X
    265c:	1e 97       	sbiw	r26, 0x0e	; 14
    265e:	89 2b       	or	r24, r25
    2660:	80 83       	st	Z, r24
			*ipPort &= ~iPinMask;	// T-be: LOW
    2662:	1a 96       	adiw	r26, 0x0a	; 10
    2664:	ed 91       	ld	r30, X+
    2666:	fc 91       	ld	r31, X
    2668:	1b 97       	sbiw	r26, 0x0b	; 11
    266a:	90 81       	ld	r25, Z
    266c:	1e 96       	adiw	r26, 0x0e	; 14
    266e:	8c 91       	ld	r24, X
    2670:	80 95       	com	r24
    2672:	89 23       	and	r24, r25
    2674:	80 83       	st	Z, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    2676:	1e 86       	std	Y+14, r1	; 0x0e
    2678:	1d 86       	std	Y+13, r1	; 0x0d
    267a:	8d 85       	ldd	r24, Y+13	; 0x0d
    267c:	9e 85       	ldd	r25, Y+14	; 0x0e
    267e:	83 34       	cpi	r24, 0x43	; 67
    2680:	91 05       	cpc	r25, r1
    2682:	cc f4       	brge	.+50     	; 0x26b6 <_ZL9parseLinePc+0x176>
				for(volatile int j = 0; j < 6; j++) ;
    2684:	1c 86       	std	Y+12, r1	; 0x0c
    2686:	1b 86       	std	Y+11, r1	; 0x0b
    2688:	8b 85       	ldd	r24, Y+11	; 0x0b
    268a:	9c 85       	ldd	r25, Y+12	; 0x0c
    268c:	06 97       	sbiw	r24, 0x06	; 6
    268e:	4c f4       	brge	.+18     	; 0x26a2 <_ZL9parseLinePc+0x162>
    2690:	8b 85       	ldd	r24, Y+11	; 0x0b
    2692:	9c 85       	ldd	r25, Y+12	; 0x0c
    2694:	01 96       	adiw	r24, 0x01	; 1
    2696:	9c 87       	std	Y+12, r25	; 0x0c
    2698:	8b 87       	std	Y+11, r24	; 0x0b
    269a:	8b 85       	ldd	r24, Y+11	; 0x0b
    269c:	9c 85       	ldd	r25, Y+12	; 0x0c
    269e:	06 97       	sbiw	r24, 0x06	; 6
    26a0:	bc f3       	brlt	.-18     	; 0x2690 <_ZL9parseLinePc+0x150>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    26a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a6:	01 96       	adiw	r24, 0x01	; 1
    26a8:	9e 87       	std	Y+14, r25	; 0x0e
    26aa:	8d 87       	std	Y+13, r24	; 0x0d
    26ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    26b0:	83 34       	cpi	r24, 0x43	; 67
    26b2:	91 05       	cpc	r25, r1
    26b4:	3c f3       	brlt	.-50     	; 0x2684 <_ZL9parseLinePc+0x144>

			// REQUEST SAMPLE
			*ipDDR |= iPinMask;		// OUTPUT
			*ipPort &= ~iPinMask;	// T-be: LOW
			iotTimer::delay(wakeupDelay);
			*ipPort |= iPinMask;	// T-go: HIGH
    26b6:	d7 01       	movw	r26, r14
    26b8:	1a 96       	adiw	r26, 0x0a	; 10
    26ba:	ed 91       	ld	r30, X+
    26bc:	fc 91       	ld	r31, X
    26be:	1b 97       	sbiw	r26, 0x0b	; 11
    26c0:	90 81       	ld	r25, Z
    26c2:	1e 96       	adiw	r26, 0x0e	; 14
    26c4:	8c 91       	ld	r24, X
    26c6:	1e 97       	sbiw	r26, 0x0e	; 14
    26c8:	89 2b       	or	r24, r25
    26ca:	80 83       	st	Z, r24
			*ipDDR &= ~iPinMask;	// INPUT
    26cc:	1c 96       	adiw	r26, 0x0c	; 12
    26ce:	ed 91       	ld	r30, X+
    26d0:	fc 91       	ld	r31, X
    26d2:	1d 97       	sbiw	r26, 0x0d	; 13
    26d4:	90 81       	ld	r25, Z
    26d6:	1e 96       	adiw	r26, 0x0e	; 14
    26d8:	8c 91       	ld	r24, X
    26da:	1e 97       	sbiw	r26, 0x0e	; 14
    26dc:	80 95       	com	r24
    26de:	89 23       	and	r24, r25
    26e0:	80 83       	st	Z, r24

			uint16_t loopCount = iotcDhtTimeOut * 2;  // 200uSec max
			while ((*ipPin & iPinMask) != 0 ) {
    26e2:	18 96       	adiw	r26, 0x08	; 8
    26e4:	ed 91       	ld	r30, X+
    26e6:	fc 91       	ld	r31, X
    26e8:	19 97       	sbiw	r26, 0x09	; 9
    26ea:	1e 96       	adiw	r26, 0x0e	; 14
    26ec:	dc 90       	ld	r13, X
    26ee:	80 e2       	ldi	r24, 0x20	; 32
    26f0:	93 e0       	ldi	r25, 0x03	; 3
    26f2:	04 c0       	rjmp	.+8      	; 0x26fc <_ZL9parseLinePc+0x1bc>
    26f4:	01 97       	sbiw	r24, 0x01	; 1
				if (--loopCount == 0) return iotcDhtErrorConnect;
    26f6:	00 97       	sbiw	r24, 0x00	; 0
    26f8:	09 f4       	brne	.+2      	; 0x26fc <_ZL9parseLinePc+0x1bc>
    26fa:	74 c0       	rjmp	.+232    	; 0x27e4 <_ZL9parseLinePc+0x2a4>
			iotTimer::delay(wakeupDelay);
			*ipPort |= iPinMask;	// T-go: HIGH
			*ipDDR &= ~iPinMask;	// INPUT

			uint16_t loopCount = iotcDhtTimeOut * 2;  // 200uSec max
			while ((*ipPin & iPinMask) != 0 ) {
    26fc:	20 81       	ld	r18, Z
    26fe:	2d 21       	and	r18, r13
    2700:	c9 f7       	brne	.-14     	; 0x26f4 <_ZL9parseLinePc+0x1b4>
    2702:	80 e9       	ldi	r24, 0x90	; 144
    2704:	91 e0       	ldi	r25, 0x01	; 1
    2706:	04 c0       	rjmp	.+8      	; 0x2710 <_ZL9parseLinePc+0x1d0>
    2708:	01 97       	sbiw	r24, 0x01	; 1
				if (--loopCount == 0) return iotcDhtErrorConnect;
			}
			// GET ACKNOWLEDGE or TIMEOUT
			loopCount = iotcDhtTimeOut;
			while ((*ipPin & iPinMask) == 0 ) {	// T-rel
				if (--loopCount == 0) return iotcDhtErrorAckL;
    270a:	00 97       	sbiw	r24, 0x00	; 0
    270c:	09 f4       	brne	.+2      	; 0x2710 <_ZL9parseLinePc+0x1d0>
    270e:	6f c0       	rjmp	.+222    	; 0x27ee <_ZL9parseLinePc+0x2ae>
			while ((*ipPin & iPinMask) != 0 ) {
				if (--loopCount == 0) return iotcDhtErrorConnect;
			}
			// GET ACKNOWLEDGE or TIMEOUT
			loopCount = iotcDhtTimeOut;
			while ((*ipPin & iPinMask) == 0 ) {	// T-rel
    2710:	20 81       	ld	r18, Z
    2712:	2d 21       	and	r18, r13
    2714:	c9 f3       	breq	.-14     	; 0x2708 <_ZL9parseLinePc+0x1c8>
    2716:	80 e9       	ldi	r24, 0x90	; 144
    2718:	91 e0       	ldi	r25, 0x01	; 1
    271a:	04 c0       	rjmp	.+8      	; 0x2724 <_ZL9parseLinePc+0x1e4>
    271c:	01 97       	sbiw	r24, 0x01	; 1
				if (--loopCount == 0) return iotcDhtErrorAckL;
			}
			loopCount = iotcDhtTimeOut;
			while ((*ipPin & iPinMask) != 0 ) {	// T-reh
				if (--loopCount == 0) return iotcDhtErrorAckH;
    271e:	00 97       	sbiw	r24, 0x00	; 0
    2720:	09 f4       	brne	.+2      	; 0x2724 <_ZL9parseLinePc+0x1e4>
    2722:	6a c0       	rjmp	.+212    	; 0x27f8 <_ZL9parseLinePc+0x2b8>
			loopCount = iotcDhtTimeOut;
			while ((*ipPin & iPinMask) == 0 ) {	// T-rel
				if (--loopCount == 0) return iotcDhtErrorAckL;
			}
			loopCount = iotcDhtTimeOut;
			while ((*ipPin & iPinMask) != 0 ) {	// T-reh
    2724:	20 81       	ld	r18, Z
    2726:	2d 21       	and	r18, r13
    2728:	c9 f7       	brne	.-14     	; 0x271c <_ZL9parseLinePc+0x1dc>
    272a:	91 2c       	mov	r9, r1
    272c:	a0 e8       	ldi	r26, 0x80	; 128
    272e:	a1 2c       	mov	r10, r1
    2730:	40 e0       	ldi	r20, 0x00	; 0
    2732:	50 e0       	ldi	r21, 0x00	; 0
    2734:	80 e9       	ldi	r24, 0x90	; 144
    2736:	91 e0       	ldi	r25, 0x01	; 1
    2738:	20 e9       	ldi	r18, 0x90	; 144
    273a:	31 e0       	ldi	r19, 0x01	; 1
    273c:	0f 2e       	mov	r0, r31
    273e:	f8 e2       	ldi	r31, 0x28	; 40
    2740:	bf 2e       	mov	r11, r31
    2742:	f0 2d       	mov	r31, r0
    2744:	60 e0       	ldi	r22, 0x00	; 0
					// reset timeout flag
					loopCount = iotcDhtTimeOut;
				}
				pstate = state;
				// Check timeout
				if (--loopCount == 0) return iotcDhtErrorTimeOut;
    2746:	0f 2e       	mov	r0, r31
    2748:	ff e8       	ldi	r31, 0x8F	; 143
    274a:	7f 2e       	mov	r7, r31
    274c:	f0 2d       	mov	r31, r0
    274e:	88 24       	eor	r8, r8
    2750:	83 94       	inc	r8
					} else if(loopCount <= (zeroLoop - delta)) // long -> one
						data |= mask;
					mask >>= 1;
					if (mask == 0) {	// next byte
						mask = 0x80;
						iBytes[idx] = data; idx++; data = 0;
    2752:	51 2c       	mov	r5, r1
						delta = (iotcDhtTimeOut - zeroLoop) / 4;
					} else if(loopCount <= (zeroLoop - delta)) // long -> one
						data |= mask;
					mask >>= 1;
					if (mask == 0) {	// next byte
						mask = 0x80;
    2754:	68 94       	set
    2756:	66 24       	eor	r6, r6
    2758:	67 f8       	bld	r6, 7
				state = (*ipPin & iPinMask);
				if (state == 0 && pstate != 0) {
					if (i > leadingZeroBits) {
						// DHT22 first 6 bits are all zero !! DHT11 only 1
						zeroLoop = min(zeroLoop, loopCount);
						delta = (iotcDhtTimeOut - zeroLoop) / 4;
    275a:	00 e9       	ldi	r16, 0x90	; 144
    275c:	11 e0       	ldi	r17, 0x01	; 1
			}
			loopCount = iotcDhtTimeOut;
			// READ THE OUTPUT - 40 BITS => 5 BYTES
			for (uint8_t i = 40; i != 0; ) {
				// WAIT FOR FALLING EDGE
				state = (*ipPin & iPinMask);
    275e:	c0 80       	ld	r12, Z
    2760:	cd 20       	and	r12, r13
				if (state == 0 && pstate != 0) {
    2762:	31 f5       	brne	.+76     	; 0x27b0 <_ZL9parseLinePc+0x270>
    2764:	66 23       	and	r22, r22
    2766:	21 f1       	breq	.+72     	; 0x27b0 <_ZL9parseLinePc+0x270>
					if (i > leadingZeroBits) {
    2768:	b2 e2       	ldi	r27, 0x22	; 34
    276a:	bb 15       	cp	r27, r11
    276c:	60 f4       	brcc	.+24     	; 0x2786 <_ZL9parseLinePc+0x246>
    276e:	82 17       	cp	r24, r18
    2770:	93 07       	cpc	r25, r19
    2772:	08 f4       	brcc	.+2      	; 0x2776 <_ZL9parseLinePc+0x236>
    2774:	9c 01       	movw	r18, r24
						// DHT22 first 6 bits are all zero !! DHT11 only 1
						zeroLoop = min(zeroLoop, loopCount);
						delta = (iotcDhtTimeOut - zeroLoop) / 4;
    2776:	a8 01       	movw	r20, r16
    2778:	42 1b       	sub	r20, r18
    277a:	53 0b       	sbc	r21, r19
    277c:	56 95       	lsr	r21
    277e:	47 95       	ror	r20
    2780:	56 95       	lsr	r21
    2782:	47 95       	ror	r20
    2784:	07 c0       	rjmp	.+14     	; 0x2794 <_ZL9parseLinePc+0x254>
					} else if(loopCount <= (zeroLoop - delta)) // long -> one
    2786:	b9 01       	movw	r22, r18
    2788:	64 1b       	sub	r22, r20
    278a:	75 0b       	sbc	r23, r21
    278c:	68 17       	cp	r22, r24
    278e:	79 07       	cpc	r23, r25
    2790:	08 f0       	brcs	.+2      	; 0x2794 <_ZL9parseLinePc+0x254>
						data |= mask;
    2792:	aa 2a       	or	r10, r26
					mask >>= 1;
    2794:	a6 95       	lsr	r26
					if (mask == 0) {	// next byte
    2796:	41 f4       	brne	.+16     	; 0x27a8 <_ZL9parseLinePc+0x268>
						mask = 0x80;
						iBytes[idx] = data; idx++; data = 0;
    2798:	d7 01       	movw	r26, r14
    279a:	a9 0d       	add	r26, r9
    279c:	b1 1d       	adc	r27, r1
    279e:	1f 96       	adiw	r26, 0x0f	; 15
    27a0:	ac 92       	st	X, r10
    27a2:	93 94       	inc	r9
    27a4:	a5 2c       	mov	r10, r5
						delta = (iotcDhtTimeOut - zeroLoop) / 4;
					} else if(loopCount <= (zeroLoop - delta)) // long -> one
						data |= mask;
					mask >>= 1;
					if (mask == 0) {	// next byte
						mask = 0x80;
    27a6:	a6 2d       	mov	r26, r6
						iBytes[idx] = data; idx++; data = 0;
					}
					// next bit
					--i;
    27a8:	ba 94       	dec	r11
					// reset timeout flag
					loopCount = iotcDhtTimeOut;
				}
				pstate = state;
				// Check timeout
				if (--loopCount == 0) return iotcDhtErrorTimeOut;
    27aa:	87 2d       	mov	r24, r7
    27ac:	98 2d       	mov	r25, r8
    27ae:	03 c0       	rjmp	.+6      	; 0x27b6 <_ZL9parseLinePc+0x276>
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	00 97       	sbiw	r24, 0x00	; 0
    27b4:	31 f1       	breq	.+76     	; 0x2802 <_ZL9parseLinePc+0x2c2>
			while ((*ipPin & iPinMask) != 0 ) {	// T-reh
				if (--loopCount == 0) return iotcDhtErrorAckH;
			}
			loopCount = iotcDhtTimeOut;
			// READ THE OUTPUT - 40 BITS => 5 BYTES
			for (uint8_t i = 40; i != 0; ) {
    27b6:	bb 20       	and	r11, r11
    27b8:	11 f0       	breq	.+4      	; 0x27be <_ZL9parseLinePc+0x27e>
					--i;

					// reset timeout flag
					loopCount = iotcDhtTimeOut;
				}
				pstate = state;
    27ba:	6c 2d       	mov	r22, r12
    27bc:	d0 cf       	rjmp	.-96     	; 0x275e <_ZL9parseLinePc+0x21e>
				// Check timeout
				if (--loopCount == 0) return iotcDhtErrorTimeOut;
			}
			*ipDDR |= iPinMask;		// OUTPUT
    27be:	d7 01       	movw	r26, r14
    27c0:	1c 96       	adiw	r26, 0x0c	; 12
    27c2:	ed 91       	ld	r30, X+
    27c4:	fc 91       	ld	r31, X
    27c6:	1d 97       	sbiw	r26, 0x0d	; 13
    27c8:	80 81       	ld	r24, Z
    27ca:	d8 2a       	or	r13, r24
    27cc:	d0 82       	st	Z, r13
			*ipPort |= iPinMask;	// HIGH
    27ce:	1a 96       	adiw	r26, 0x0a	; 10
    27d0:	ed 91       	ld	r30, X+
    27d2:	fc 91       	ld	r31, X
    27d4:	1b 97       	sbiw	r26, 0x0b	; 11
    27d6:	90 81       	ld	r25, Z
    27d8:	1e 96       	adiw	r26, 0x0e	; 14
    27da:	8c 91       	ld	r24, X
    27dc:	89 2b       	or	r24, r25
    27de:	80 83       	st	Z, r24

			return iotcDhtOk;
    27e0:	c1 2c       	mov	r12, r1
    27e2:	13 c0       	rjmp	.+38     	; 0x280a <_ZL9parseLinePc+0x2ca>
			*ipPort |= iPinMask;	// T-go: HIGH
			*ipDDR &= ~iPinMask;	// INPUT

			uint16_t loopCount = iotcDhtTimeOut * 2;  // 200uSec max
			while ((*ipPin & iPinMask) != 0 ) {
				if (--loopCount == 0) return iotcDhtErrorConnect;
    27e4:	0f 2e       	mov	r0, r31
    27e6:	fd ef       	ldi	r31, 0xFD	; 253
    27e8:	cf 2e       	mov	r12, r31
    27ea:	f0 2d       	mov	r31, r0
    27ec:	0e c0       	rjmp	.+28     	; 0x280a <_ZL9parseLinePc+0x2ca>
			}
			// GET ACKNOWLEDGE or TIMEOUT
			loopCount = iotcDhtTimeOut;
			while ((*ipPin & iPinMask) == 0 ) {	// T-rel
				if (--loopCount == 0) return iotcDhtErrorAckL;
    27ee:	0f 2e       	mov	r0, r31
    27f0:	fc ef       	ldi	r31, 0xFC	; 252
    27f2:	cf 2e       	mov	r12, r31
    27f4:	f0 2d       	mov	r31, r0
    27f6:	09 c0       	rjmp	.+18     	; 0x280a <_ZL9parseLinePc+0x2ca>
			}
			loopCount = iotcDhtTimeOut;
			while ((*ipPin & iPinMask) != 0 ) {	// T-reh
				if (--loopCount == 0) return iotcDhtErrorAckH;
    27f8:	0f 2e       	mov	r0, r31
    27fa:	fb ef       	ldi	r31, 0xFB	; 251
    27fc:	cf 2e       	mov	r12, r31
    27fe:	f0 2d       	mov	r31, r0
    2800:	04 c0       	rjmp	.+8      	; 0x280a <_ZL9parseLinePc+0x2ca>
					// reset timeout flag
					loopCount = iotcDhtTimeOut;
				}
				pstate = state;
				// Check timeout
				if (--loopCount == 0) return iotcDhtErrorTimeOut;
    2802:	0f 2e       	mov	r0, r31
    2804:	fe ef       	ldi	r31, 0xFE	; 254
    2806:	cf 2e       	mov	r12, r31
    2808:	f0 2d       	mov	r31, r0
			// READ VALUES
			int8_t result = readSensor(
				iotcDhtDhtWakeUp, iotcDhtDhtLeadingZeros);

			// these bits are always zero, masking them reduces errors.
			iBytes[0] &= 0x03;
    280a:	f7 01       	movw	r30, r14
    280c:	07 85       	ldd	r16, Z+15	; 0x0f
    280e:	03 70       	andi	r16, 0x03	; 3
    2810:	07 87       	std	Z+15, r16	; 0x0f
			iBytes[2] &= 0x83;
    2812:	a1 88       	ldd	r10, Z+17	; 0x11
    2814:	1a 2d       	mov	r17, r10
    2816:	13 78       	andi	r17, 0x83	; 131
    2818:	11 8b       	std	Z+17, r17	; 0x11

			// CONVERT AND STORE
			iHumidity = word(iBytes[0], iBytes[1]) * 0.1;
    281a:	d0 88       	ldd	r13, Z+16	; 0x10
		inline int8_t read22() { return read(); };
		inline int8_t read33() { return read(); };
		inline int8_t read44() { return read(); };

		static inline uint16_t	word(uint8_t h, uint8_t l) {
			return (h << 8) | l;
    281c:	6d 2d       	mov	r22, r13
    281e:	70 e0       	ldi	r23, 0x00	; 0
    2820:	70 2b       	or	r23, r16
			// these bits are always zero, masking them reduces errors.
			iBytes[0] &= 0x03;
			iBytes[2] &= 0x83;

			// CONVERT AND STORE
			iHumidity = word(iBytes[0], iBytes[1]) * 0.1;
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <__floatunsisf>
    282a:	2d ec       	ldi	r18, 0xCD	; 205
    282c:	3c ec       	ldi	r19, 0xCC	; 204
    282e:	4c ec       	ldi	r20, 0xCC	; 204
    2830:	5d e3       	ldi	r21, 0x3D	; 61
    2832:	0e 94 62 30 	call	0x60c4	; 0x60c4 <__mulsf3>
    2836:	d7 01       	movw	r26, r14
    2838:	6d 93       	st	X+, r22
    283a:	7d 93       	st	X+, r23
    283c:	8d 93       	st	X+, r24
    283e:	9c 93       	st	X, r25
    2840:	13 97       	sbiw	r26, 0x03	; 3
			iTemperature = word(iBytes[2] & 0x7F, iBytes[3]) * 0.1;
    2842:	52 96       	adiw	r26, 0x12	; 18
    2844:	bc 90       	ld	r11, X
    2846:	8a 2d       	mov	r24, r10
    2848:	83 70       	andi	r24, 0x03	; 3
		inline int8_t read22() { return read(); };
		inline int8_t read33() { return read(); };
		inline int8_t read44() { return read(); };

		static inline uint16_t	word(uint8_t h, uint8_t l) {
			return (h << 8) | l;
    284a:	6b 2d       	mov	r22, r11
    284c:	70 e0       	ldi	r23, 0x00	; 0
    284e:	78 2b       	or	r23, r24
			iBytes[0] &= 0x03;
			iBytes[2] &= 0x83;

			// CONVERT AND STORE
			iHumidity = word(iBytes[0], iBytes[1]) * 0.1;
			iTemperature = word(iBytes[2] & 0x7F, iBytes[3]) * 0.1;
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <__floatunsisf>
    2858:	2d ec       	ldi	r18, 0xCD	; 205
    285a:	3c ec       	ldi	r19, 0xCC	; 204
    285c:	4c ec       	ldi	r20, 0xCC	; 204
    285e:	5d e3       	ldi	r21, 0x3D	; 61
    2860:	0e 94 62 30 	call	0x60c4	; 0x60c4 <__mulsf3>
			if (iBytes[2] & 0x80)	// negative temperature
    2864:	11 23       	and	r17, r17
    2866:	34 f0       	brlt	.+12     	; 0x2874 <_ZL9parseLinePc+0x334>
			iBytes[0] &= 0x03;
			iBytes[2] &= 0x83;

			// CONVERT AND STORE
			iHumidity = word(iBytes[0], iBytes[1]) * 0.1;
			iTemperature = word(iBytes[2] & 0x7F, iBytes[3]) * 0.1;
    2868:	f7 01       	movw	r30, r14
    286a:	64 83       	std	Z+4, r22	; 0x04
    286c:	75 83       	std	Z+5, r23	; 0x05
    286e:	86 83       	std	Z+6, r24	; 0x06
    2870:	97 83       	std	Z+7, r25	; 0x07
    2872:	08 c0       	rjmp	.+16     	; 0x2884 <_ZL9parseLinePc+0x344>
			if (iBytes[2] & 0x80)	// negative temperature
				iTemperature = -iTemperature;
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	b0 58       	subi	r27, 0x80	; 128
    287a:	f7 01       	movw	r30, r14
    287c:	84 83       	std	Z+4, r24	; 0x04
    287e:	95 83       	std	Z+5, r25	; 0x05
    2880:	a6 83       	std	Z+6, r26	; 0x06
    2882:	b7 83       	std	Z+7, r27	; 0x07
			// TEST CHECKSUM
			uint8_t sum = iBytes[0] + iBytes[1] + iBytes[2] + iBytes[3];
    2884:	db 0c       	add	r13, r11
    2886:	0d 0d       	add	r16, r13
    2888:	10 0f       	add	r17, r16
			if (iBytes[4] != sum) return iotcDhtErrorCheckSum;
    288a:	d7 01       	movw	r26, r14
    288c:	53 96       	adiw	r26, 0x13	; 19
    288e:	8c 91       	ld	r24, X
    2890:	18 13       	cpse	r17, r24
    2892:	a0 c0       	rjmp	.+320    	; 0x29d4 <_ZL9parseLinePc+0x494>
				bool	err;
				double	val;
				
				s += 3; while(isspace(*s)) s++;
				if(strncmp(s, "get", 3) == 0) {
					if((n = read()) == iotcDhtOk) {
    2894:	8c 2d       	mov	r24, r12
    2896:	99 27       	eor	r25, r25
    2898:	87 fd       	sbrc	r24, 7
    289a:	90 95       	com	r25
    289c:	00 97       	sbiw	r24, 0x00	; 0
    289e:	09 f0       	breq	.+2      	; 0x28a2 <_ZL9parseLinePc+0x362>
    28a0:	9b c0       	rjmp	.+310    	; 0x29d8 <_ZL9parseLinePc+0x498>
    28a2:	0f 2e       	mov	r0, r31
    28a4:	f1 e4       	ldi	r31, 0x41	; 65
    28a6:	cf 2e       	mov	r12, r31
    28a8:	f5 e0       	ldi	r31, 0x05	; 5
    28aa:	df 2e       	mov	r13, r31
    28ac:	f0 2d       	mov	r31, r0
    28ae:	0b e3       	ldi	r16, 0x3B	; 59
    28b0:	15 e0       	ldi	r17, 0x05	; 5
			return s;
		}
		static bool
		enqueueLine(char *s) {
			if((iHead + 1) % iotcCmdQueueSize == iTail) return false;	// full
			strcpy(iQueue[iHead], s);
    28b2:	0f 2e       	mov	r0, r31
    28b4:	f2 e3       	ldi	r31, 0x32	; 50
    28b6:	9f 2e       	mov	r9, r31
    28b8:	f0 2d       	mov	r31, r0
		void
		pullTriggers() {
			iotDhtTrigger	*t;
			double			val;
			for(t = iTrigger; t < iTrigger + iotcDhtMaxTrigger; t++) {
				if(t->iType == iotcDhtNone) continue;
    28ba:	f8 01       	movw	r30, r16
    28bc:	80 81       	ld	r24, Z
    28be:	88 23       	and	r24, r24
    28c0:	09 f4       	brne	.+2      	; 0x28c4 <_ZL9parseLinePc+0x384>
    28c2:	50 c0       	rjmp	.+160    	; 0x2964 <_ZL9parseLinePc+0x424>
				if(t->iType == iotcDhtTemperature) val = iTemperature;
    28c4:	81 30       	cpi	r24, 0x01	; 1
    28c6:	41 f4       	brne	.+16     	; 0x28d8 <_ZL9parseLinePc+0x398>
    28c8:	d7 01       	movw	r26, r14
    28ca:	14 96       	adiw	r26, 0x04	; 4
    28cc:	6d 91       	ld	r22, X+
    28ce:	7d 91       	ld	r23, X+
    28d0:	8d 91       	ld	r24, X+
    28d2:	9c 91       	ld	r25, X
    28d4:	17 97       	sbiw	r26, 0x07	; 7
    28d6:	08 c0       	rjmp	.+16     	; 0x28e8 <_ZL9parseLinePc+0x3a8>
				else if(t->iType == iotcDhtHumidity) val = iHumidity;
    28d8:	82 30       	cpi	r24, 0x02	; 2
    28da:	09 f0       	breq	.+2      	; 0x28de <_ZL9parseLinePc+0x39e>
    28dc:	43 c0       	rjmp	.+134    	; 0x2964 <_ZL9parseLinePc+0x424>
    28de:	f7 01       	movw	r30, r14
    28e0:	60 81       	ld	r22, Z
    28e2:	71 81       	ldd	r23, Z+1	; 0x01
    28e4:	82 81       	ldd	r24, Z+2	; 0x02
    28e6:	93 81       	ldd	r25, Z+3	; 0x03
    28e8:	7c 2c       	mov	r7, r12
    28ea:	8d 2c       	mov	r8, r13
    28ec:	f6 01       	movw	r30, r12
    28ee:	35 97       	sbiw	r30, 0x05	; 5
				else continue;
				if(((t->iCondition == iotcDhtLessThan) && (val < t->iValue)) ||
    28f0:	20 81       	ld	r18, Z
    28f2:	21 11       	cpse	r18, r1
    28f4:	0e c0       	rjmp	.+28     	; 0x2912 <_ZL9parseLinePc+0x3d2>
    28f6:	9b 01       	movw	r18, r22
    28f8:	ac 01       	movw	r20, r24
    28fa:	d8 01       	movw	r26, r16
    28fc:	12 96       	adiw	r26, 0x02	; 2
    28fe:	6d 91       	ld	r22, X+
    2900:	7d 91       	ld	r23, X+
    2902:	8d 91       	ld	r24, X+
    2904:	9c 91       	ld	r25, X
    2906:	15 97       	sbiw	r26, 0x05	; 5
    2908:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__gesf2>
    290c:	18 16       	cp	r1, r24
    290e:	64 f0       	brlt	.+24     	; 0x2928 <_ZL9parseLinePc+0x3e8>
    2910:	29 c0       	rjmp	.+82     	; 0x2964 <_ZL9parseLinePc+0x424>
    2912:	21 30       	cpi	r18, 0x01	; 1
    2914:	39 f5       	brne	.+78     	; 0x2964 <_ZL9parseLinePc+0x424>
				   ((t->iCondition == iotcDhtGreaterThan) && (val > t->iValue)))
    2916:	f8 01       	movw	r30, r16
    2918:	22 81       	ldd	r18, Z+2	; 0x02
    291a:	33 81       	ldd	r19, Z+3	; 0x03
    291c:	44 81       	ldd	r20, Z+4	; 0x04
    291e:	55 81       	ldd	r21, Z+5	; 0x05
    2920:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__gesf2>
    2924:	18 16       	cp	r1, r24
    2926:	f4 f4       	brge	.+60     	; 0x2964 <_ZL9parseLinePc+0x424>
			} else if((s = iLineToParse)) iLineToParse = (char *) NULL;
			return s;
		}
		static bool
		enqueueLine(char *s) {
			if((iHead + 1) % iotcCmdQueueSize == iTail) return false;	// full
    2928:	20 91 ac 06 	lds	r18, 0x06AC
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	59 01       	movw	r10, r18
    2930:	ff ef       	ldi	r31, 0xFF	; 255
    2932:	af 1a       	sub	r10, r31
    2934:	bf 0a       	sbc	r11, r31
    2936:	43 e0       	ldi	r20, 0x03	; 3
    2938:	a4 22       	and	r10, r20
    293a:	40 e8       	ldi	r20, 0x80	; 128
    293c:	b4 22       	and	r11, r20
    293e:	80 91 ab 06 	lds	r24, 0x06AB
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	a8 16       	cp	r10, r24
    2946:	b9 06       	cpc	r11, r25
    2948:	b9 f0       	breq	.+46     	; 0x2978 <_ZL9parseLinePc+0x438>
			strcpy(iQueue[iHead], s);
    294a:	92 9e       	mul	r9, r18
    294c:	c0 01       	movw	r24, r0
    294e:	93 9e       	mul	r9, r19
    2950:	90 0d       	add	r25, r0
    2952:	11 24       	eor	r1, r1
    2954:	67 2d       	mov	r22, r7
    2956:	78 2d       	mov	r23, r8
    2958:	8d 51       	subi	r24, 0x1D	; 29
    295a:	9a 4f       	sbci	r25, 0xFA	; 250
    295c:	0e 94 01 34 	call	0x6802	; 0x6802 <strcpy>
			iHead = (iHead + 1) % iotcCmdQueueSize;
    2960:	a0 92 ac 06 	sts	0x06AC, r10
		}
		void
		pullTriggers() {
			iotDhtTrigger	*t;
			double			val;
			for(t = iTrigger; t < iTrigger + iotcDhtMaxTrigger; t++) {
    2964:	08 5c       	subi	r16, 0xC8	; 200
    2966:	1f 4f       	sbci	r17, 0xFF	; 255
    2968:	58 e3       	ldi	r21, 0x38	; 56
    296a:	c5 0e       	add	r12, r21
    296c:	d1 1c       	adc	r13, r1
    296e:	65 e0       	ldi	r22, 0x05	; 5
    2970:	03 3e       	cpi	r16, 0xE3	; 227
    2972:	16 07       	cpc	r17, r22
    2974:	08 f4       	brcc	.+2      	; 0x2978 <_ZL9parseLinePc+0x438>
    2976:	a1 cf       	rjmp	.-190    	; 0x28ba <_ZL9parseLinePc+0x37a>
				s += 3; while(isspace(*s)) s++;
				if(strncmp(s, "get", 3) == 0) {
					if((n = read()) == iotcDhtOk) {
						pullTriggers();
						char	str[10];
						dtostrf(iTemperature, 5, 1, str);
    2978:	d7 01       	movw	r26, r14
    297a:	14 96       	adiw	r26, 0x04	; 4
    297c:	6d 91       	ld	r22, X+
    297e:	7d 91       	ld	r23, X+
    2980:	8d 91       	ld	r24, X+
    2982:	9c 91       	ld	r25, X
    2984:	17 97       	sbiw	r26, 0x07	; 7
    2986:	fe 01       	movw	r30, r28
    2988:	31 96       	adiw	r30, 0x01	; 1
    298a:	6f 01       	movw	r12, r30
    298c:	8f 01       	movw	r16, r30
    298e:	21 e0       	ldi	r18, 0x01	; 1
    2990:	45 e0       	ldi	r20, 0x05	; 5
    2992:	0e 94 73 31 	call	0x62e6	; 0x62e6 <dtostrf>
						printf("dht %s", str);
    2996:	df 92       	push	r13
    2998:	cf 92       	push	r12
    299a:	83 e0       	ldi	r24, 0x03	; 3
    299c:	92 e0       	ldi	r25, 0x02	; 2
    299e:	9f 93       	push	r25
    29a0:	8f 93       	push	r24
    29a2:	0e 94 80 34 	call	0x6900	; 0x6900 <printf>
						dtostrf(iHumidity, 5, 1, str);
    29a6:	d7 01       	movw	r26, r14
    29a8:	6d 91       	ld	r22, X+
    29aa:	7d 91       	ld	r23, X+
    29ac:	8d 91       	ld	r24, X+
    29ae:	9c 91       	ld	r25, X
    29b0:	21 e0       	ldi	r18, 0x01	; 1
    29b2:	45 e0       	ldi	r20, 0x05	; 5
    29b4:	0e 94 73 31 	call	0x62e6	; 0x62e6 <dtostrf>
						printf(" %s\n", str);
    29b8:	df 92       	push	r13
    29ba:	cf 92       	push	r12
    29bc:	82 ec       	ldi	r24, 0xC2	; 194
    29be:	91 e0       	ldi	r25, 0x01	; 1
    29c0:	9f 93       	push	r25
    29c2:	8f 93       	push	r24
    29c4:	0e 94 80 34 	call	0x6900	; 0x6900 <printf>
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	cd bf       	out	0x3d, r28	; 61
    29d2:	f2 c5       	rjmp	.+3044   	; 0x35b8 <_ZL9parseLinePc+0x1078>
				bool	err;
				double	val;
				
				s += 3; while(isspace(*s)) s++;
				if(strncmp(s, "get", 3) == 0) {
					if((n = read()) == iotcDhtOk) {
    29d4:	8f ef       	ldi	r24, 0xFF	; 255
    29d6:	9f ef       	ldi	r25, 0xFF	; 255
						char	str[10];
						dtostrf(iTemperature, 5, 1, str);
						printf("dht %s", str);
						dtostrf(iHumidity, 5, 1, str);
						printf(" %s\n", str);
					} else printf("dht error %d\n", n);
    29d8:	9f 93       	push	r25
    29da:	8f 93       	push	r24
    29dc:	8a e0       	ldi	r24, 0x0A	; 10
    29de:	92 e0       	ldi	r25, 0x02	; 2
    29e0:	9f 93       	push	r25
    29e2:	8f 93       	push	r24
    29e4:	0e 94 80 34 	call	0x6900	; 0x6900 <printf>
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	0f 90       	pop	r0
    29ee:	0f 90       	pop	r0
    29f0:	e3 c5       	rjmp	.+3014   	; 0x35b8 <_ZL9parseLinePc+0x1078>
					return true;
				} else if(strncmp(s, "free", 4) == 0) {
    29f2:	44 e0       	ldi	r20, 0x04	; 4
    29f4:	50 e0       	ldi	r21, 0x00	; 0
    29f6:	68 e1       	ldi	r22, 0x18	; 24
    29f8:	72 e0       	ldi	r23, 0x02	; 2
    29fa:	c8 01       	movw	r24, r16
    29fc:	0e 94 20 34 	call	0x6840	; 0x6840 <strncmp>
    2a00:	89 2b       	or	r24, r25
    2a02:	81 f5       	brne	.+96     	; 0x2a64 <_ZL9parseLinePc+0x524>
					s += 4; while(isspace(*s)) s++;
    2a04:	0c 5f       	subi	r16, 0xFC	; 252
    2a06:	1f 4f       	sbci	r17, 0xFF	; 255
    2a08:	78 01       	movw	r14, r16
    2a0a:	0f 5f       	subi	r16, 0xFF	; 255
    2a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a0e:	d7 01       	movw	r26, r14
    2a10:	8c 91       	ld	r24, X
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <isspace>
    2a18:	89 2b       	or	r24, r25
    2a1a:	b1 f7       	brne	.-20     	; 0x2a08 <_ZL9parseLinePc+0x4c8>
					n = atoi(s);
    2a1c:	c7 01       	movw	r24, r14
    2a1e:	0e 94 cb 33 	call	0x6796	; 0x6796 <atoi>
					if(!iotTerminal::enqueueLine(t->iLine)) break;	// full
			}
		}
		static int
		freeTrigger(int8_t n) {
			if((n < 0) || (n >= iotcDhtMaxTrigger)) return -1;
    2a22:	83 30       	cpi	r24, 0x03	; 3
    2a24:	68 f4       	brcc	.+26     	; 0x2a40 <_ZL9parseLinePc+0x500>
			iTrigger[n].iType = iotcDhtNone;
    2a26:	28 2f       	mov	r18, r24
    2a28:	33 27       	eor	r19, r19
    2a2a:	27 fd       	sbrc	r18, 7
    2a2c:	30 95       	com	r19
    2a2e:	b8 e3       	ldi	r27, 0x38	; 56
    2a30:	8b 02       	muls	r24, r27
    2a32:	f0 01       	movw	r30, r0
    2a34:	11 24       	eor	r1, r1
    2a36:	e5 5c       	subi	r30, 0xC5	; 197
    2a38:	fa 4f       	sbci	r31, 0xFA	; 250
    2a3a:	10 82       	st	Z, r1
					} else printf("dht error %d\n", n);
					return true;
				} else if(strncmp(s, "free", 4) == 0) {
					s += 4; while(isspace(*s)) s++;
					n = atoi(s);
					if((n = freeTrigger(n)) < 0) printf("dht free: error\n");
    2a3c:	33 23       	and	r19, r19
    2a3e:	2c f4       	brge	.+10     	; 0x2a4a <_ZL9parseLinePc+0x50a>
    2a40:	8d e1       	ldi	r24, 0x1D	; 29
    2a42:	92 e0       	ldi	r25, 0x02	; 2
    2a44:	0e 94 91 34 	call	0x6922	; 0x6922 <puts>
    2a48:	b7 c5       	rjmp	.+2926   	; 0x35b8 <_ZL9parseLinePc+0x1078>
					else printf("dht free %d\n", n);
    2a4a:	3f 93       	push	r19
    2a4c:	8f 93       	push	r24
    2a4e:	8d e2       	ldi	r24, 0x2D	; 45
    2a50:	92 e0       	ldi	r25, 0x02	; 2
    2a52:	9f 93       	push	r25
    2a54:	8f 93       	push	r24
    2a56:	0e 94 80 34 	call	0x6900	; 0x6900 <printf>
    2a5a:	0f 90       	pop	r0
    2a5c:	0f 90       	pop	r0
    2a5e:	0f 90       	pop	r0
    2a60:	0f 90       	pop	r0
    2a62:	aa c5       	rjmp	.+2900   	; 0x35b8 <_ZL9parseLinePc+0x1078>
					return true;
				}
				if(tolower(*s) == 't') type = iotcDhtTemperature;
    2a64:	c6 01       	movw	r24, r12
    2a66:	0e 94 f9 33 	call	0x67f2	; 0x67f2 <tolower>
    2a6a:	84 37       	cpi	r24, 0x74	; 116
    2a6c:	91 05       	cpc	r25, r1
    2a6e:	39 f0       	breq	.+14     	; 0x2a7e <_ZL9parseLinePc+0x53e>
				else if(tolower(*s) == 'h') type = iotcDhtHumidity;
    2a70:	88 36       	cpi	r24, 0x68	; 104
    2a72:	91 05       	cpc	r25, r1
    2a74:	09 f0       	breq	.+2      	; 0x2a78 <_ZL9parseLinePc+0x538>
    2a76:	a0 c5       	rjmp	.+2880   	; 0x35b8 <_ZL9parseLinePc+0x1078>
    2a78:	e2 e0       	ldi	r30, 0x02	; 2
    2a7a:	ef 87       	std	Y+15, r30	; 0x0f
    2a7c:	02 c0       	rjmp	.+4      	; 0x2a82 <_ZL9parseLinePc+0x542>
					n = atoi(s);
					if((n = freeTrigger(n)) < 0) printf("dht free: error\n");
					else printf("dht free %d\n", n);
					return true;
				}
				if(tolower(*s) == 't') type = iotcDhtTemperature;
    2a7e:	f1 e0       	ldi	r31, 0x01	; 1
    2a80:	ff 87       	std	Y+15, r31	; 0x0f
				else if(tolower(*s) == 'h') type = iotcDhtHumidity;
				else return true;							// error
				s++; while(isspace(*s)) s++;
    2a82:	0f 5f       	subi	r16, 0xFF	; 255
    2a84:	1f 4f       	sbci	r17, 0xFF	; 255
    2a86:	d0 2e       	mov	r13, r16
    2a88:	e1 2e       	mov	r14, r17
    2a8a:	d8 01       	movw	r26, r16
    2a8c:	fd 90       	ld	r15, X+
    2a8e:	8d 01       	movw	r16, r26
    2a90:	8f 2d       	mov	r24, r15
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <isspace>
    2a98:	89 2b       	or	r24, r25
    2a9a:	a9 f7       	brne	.-22     	; 0x2a86 <_ZL9parseLinePc+0x546>
				if(*s == '<') rel = iotcDhtLessThan;
    2a9c:	bc e3       	ldi	r27, 0x3C	; 60
    2a9e:	fb 16       	cp	r15, r27
    2aa0:	31 f0       	breq	.+12     	; 0x2aae <_ZL9parseLinePc+0x56e>
				else if(*s == '>') rel = iotcDhtGreaterThan;
    2aa2:	ee e3       	ldi	r30, 0x3E	; 62
    2aa4:	fe 12       	cpse	r15, r30
    2aa6:	07 c1       	rjmp	.+526    	; 0x2cb6 <_ZL9parseLinePc+0x776>
    2aa8:	33 24       	eor	r3, r3
    2aaa:	33 94       	inc	r3
    2aac:	01 c0       	rjmp	.+2      	; 0x2ab0 <_ZL9parseLinePc+0x570>
				}
				if(tolower(*s) == 't') type = iotcDhtTemperature;
				else if(tolower(*s) == 'h') type = iotcDhtHumidity;
				else return true;							// error
				s++; while(isspace(*s)) s++;
				if(*s == '<') rel = iotcDhtLessThan;
    2aae:	31 2c       	mov	r3, r1
    2ab0:	0d 2d       	mov	r16, r13
    2ab2:	1e 2d       	mov	r17, r14
    2ab4:	78 01       	movw	r14, r16
		getFloat(char **pS, bool *err) {
			int8_t	sign = 1;
			double	val;
			char	*s = *pS;

			while(isspace(*s)) s++;
    2ab6:	d8 01       	movw	r26, r16
    2ab8:	dd 90       	ld	r13, X+
    2aba:	8d 01       	movw	r16, r26
    2abc:	8d 2d       	mov	r24, r13
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <isspace>
    2ac4:	89 2b       	or	r24, r25
    2ac6:	b1 f7       	brne	.-20     	; 0x2ab4 <_ZL9parseLinePc+0x574>
			if(*s == '-') { sign = -1; s++; }
    2ac8:	bd e2       	ldi	r27, 0x2D	; 45
    2aca:	db 12       	cpse	r13, r27
    2acc:	04 c0       	rjmp	.+8      	; 0x2ad6 <_ZL9parseLinePc+0x596>
    2ace:	78 01       	movw	r14, r16
    2ad0:	ff ef       	ldi	r31, 0xFF	; 255
    2ad2:	f8 8b       	std	Y+16, r31	; 0x10
    2ad4:	0b c0       	rjmp	.+22     	; 0x2aec <_ZL9parseLinePc+0x5ac>
			else if(*s == '+') s++;
    2ad6:	2b e2       	ldi	r18, 0x2B	; 43
    2ad8:	d2 12       	cpse	r13, r18
    2ada:	06 c0       	rjmp	.+12     	; 0x2ae8 <_ZL9parseLinePc+0x5a8>
    2adc:	3f ef       	ldi	r19, 0xFF	; 255
    2ade:	e3 1a       	sub	r14, r19
    2ae0:	f3 0a       	sbc	r15, r19

			return iotcDhtOk;
		}
		static double
		getFloat(char **pS, bool *err) {
			int8_t	sign = 1;
    2ae2:	41 e0       	ldi	r20, 0x01	; 1
    2ae4:	48 8b       	std	Y+16, r20	; 0x10
    2ae6:	02 c0       	rjmp	.+4      	; 0x2aec <_ZL9parseLinePc+0x5ac>
    2ae8:	51 e0       	ldi	r21, 0x01	; 1
    2aea:	58 8b       	std	Y+16, r21	; 0x10
    2aec:	87 01       	movw	r16, r14
			char	*s = *pS;

			while(isspace(*s)) s++;
			if(*s == '-') { sign = -1; s++; }
			else if(*s == '+') s++;
			while(isspace(*s)) s++;
    2aee:	d7 01       	movw	r26, r14
    2af0:	bd 90       	ld	r11, X+
    2af2:	7d 01       	movw	r14, r26
    2af4:	cb 2c       	mov	r12, r11
    2af6:	d1 2c       	mov	r13, r1
    2af8:	c6 01       	movw	r24, r12
    2afa:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <isspace>
    2afe:	89 2b       	or	r24, r25
    2b00:	a9 f7       	brne	.-22     	; 0x2aec <_ZL9parseLinePc+0x5ac>
			if(!isdigit(*s)) { *err = true; return 0.0; }
    2b02:	c6 01       	movw	r24, r12
    2b04:	c0 97       	sbiw	r24, 0x30	; 48
    2b06:	8a 30       	cpi	r24, 0x0A	; 10
    2b08:	91 05       	cpc	r25, r1
    2b0a:	08 f0       	brcs	.+2      	; 0x2b0e <_ZL9parseLinePc+0x5ce>
    2b0c:	d4 c0       	rjmp	.+424    	; 0x2cb6 <_ZL9parseLinePc+0x776>
			val = *s++ - '0';
    2b0e:	78 01       	movw	r14, r16
    2b10:	bf ef       	ldi	r27, 0xFF	; 255
    2b12:	eb 1a       	sub	r14, r27
    2b14:	fb 0a       	sbc	r15, r27
    2b16:	bc 01       	movw	r22, r24
    2b18:	88 27       	eor	r24, r24
    2b1a:	77 fd       	sbrc	r23, 7
    2b1c:	80 95       	com	r24
    2b1e:	98 2f       	mov	r25, r24
    2b20:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <__floatsisf>
    2b24:	2b 01       	movw	r4, r22
    2b26:	3c 01       	movw	r6, r24
			while(isdigit(*s)) val = 10.0 * val + *s++ - '0';
    2b28:	f8 01       	movw	r30, r16
    2b2a:	d1 80       	ldd	r13, Z+1	; 0x01
    2b2c:	8d 2d       	mov	r24, r13
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	c0 97       	sbiw	r24, 0x30	; 48
    2b32:	0a 97       	sbiw	r24, 0x0a	; 10
    2b34:	48 f5       	brcc	.+82     	; 0x2b88 <_ZL9parseLinePc+0x648>
    2b36:	0e 5f       	subi	r16, 0xFE	; 254
    2b38:	1f 4f       	sbci	r17, 0xFF	; 255
    2b3a:	78 01       	movw	r14, r16
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	40 e2       	ldi	r20, 0x20	; 32
    2b42:	51 e4       	ldi	r21, 0x41	; 65
    2b44:	c3 01       	movw	r24, r6
    2b46:	b2 01       	movw	r22, r4
    2b48:	0e 94 62 30 	call	0x60c4	; 0x60c4 <__mulsf3>
    2b4c:	2b 01       	movw	r4, r22
    2b4e:	3c 01       	movw	r6, r24
    2b50:	6d 2d       	mov	r22, r13
    2b52:	70 e0       	ldi	r23, 0x00	; 0
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <__floatsisf>
    2b5c:	9b 01       	movw	r18, r22
    2b5e:	ac 01       	movw	r20, r24
    2b60:	c3 01       	movw	r24, r6
    2b62:	b2 01       	movw	r22, r4
    2b64:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <__addsf3>
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	40 e4       	ldi	r20, 0x40	; 64
    2b6e:	52 e4       	ldi	r21, 0x42	; 66
    2b70:	0e 94 03 2f 	call	0x5e06	; 0x5e06 <__subsf3>
    2b74:	2b 01       	movw	r4, r22
    2b76:	3c 01       	movw	r6, r24
    2b78:	d8 01       	movw	r26, r16
    2b7a:	dd 90       	ld	r13, X+
    2b7c:	8d 01       	movw	r16, r26
    2b7e:	8d 2d       	mov	r24, r13
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	c0 97       	sbiw	r24, 0x30	; 48
    2b84:	0a 97       	sbiw	r24, 0x0a	; 10
    2b86:	c8 f2       	brcs	.-78     	; 0x2b3a <_ZL9parseLinePc+0x5fa>
			if(*s == '.') {
    2b88:	be e2       	ldi	r27, 0x2E	; 46
    2b8a:	db 12       	cpse	r13, r27
    2b8c:	43 c0       	rjmp	.+134    	; 0x2c14 <_ZL9parseLinePc+0x6d4>
				double scale = 1.0;
				s++;
    2b8e:	c7 01       	movw	r24, r14
    2b90:	01 96       	adiw	r24, 0x01	; 1
				while(isdigit(*s)) {
    2b92:	f7 01       	movw	r30, r14
    2b94:	21 80       	ldd	r2, Z+1	; 0x01
    2b96:	22 2d       	mov	r18, r2
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	20 53       	subi	r18, 0x30	; 48
    2b9c:	31 09       	sbc	r19, r1
    2b9e:	2a 30       	cpi	r18, 0x0A	; 10
    2ba0:	31 05       	cpc	r19, r1
    2ba2:	b8 f5       	brcc	.+110    	; 0x2c12 <_ZL9parseLinePc+0x6d2>
    2ba4:	87 01       	movw	r16, r14
    2ba6:	0e 5f       	subi	r16, 0xFE	; 254
    2ba8:	1f 4f       	sbci	r17, 0xFF	; 255
			while(isspace(*s)) s++;
			if(!isdigit(*s)) { *err = true; return 0.0; }
			val = *s++ - '0';
			while(isdigit(*s)) val = 10.0 * val + *s++ - '0';
			if(*s == '.') {
				double scale = 1.0;
    2baa:	0f 2e       	mov	r0, r31
    2bac:	81 2c       	mov	r8, r1
    2bae:	91 2c       	mov	r9, r1
    2bb0:	f0 e8       	ldi	r31, 0x80	; 128
    2bb2:	af 2e       	mov	r10, r31
    2bb4:	ff e3       	ldi	r31, 0x3F	; 63
    2bb6:	bf 2e       	mov	r11, r31
    2bb8:	f0 2d       	mov	r31, r0
				s++;
				while(isdigit(*s)) {
					scale /= 10.0;
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	40 e2       	ldi	r20, 0x20	; 32
    2bc0:	51 e4       	ldi	r21, 0x41	; 65
    2bc2:	c5 01       	movw	r24, r10
    2bc4:	b4 01       	movw	r22, r8
    2bc6:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <__divsf3>
    2bca:	4b 01       	movw	r8, r22
    2bcc:	5c 01       	movw	r10, r24
					val += (*s++ - '0') * scale;
    2bce:	78 01       	movw	r14, r16
    2bd0:	62 2d       	mov	r22, r2
    2bd2:	70 e0       	ldi	r23, 0x00	; 0
    2bd4:	60 53       	subi	r22, 0x30	; 48
    2bd6:	71 09       	sbc	r23, r1
    2bd8:	88 27       	eor	r24, r24
    2bda:	77 fd       	sbrc	r23, 7
    2bdc:	80 95       	com	r24
    2bde:	98 2f       	mov	r25, r24
    2be0:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <__floatsisf>
    2be4:	9b 01       	movw	r18, r22
    2be6:	ac 01       	movw	r20, r24
    2be8:	c5 01       	movw	r24, r10
    2bea:	b4 01       	movw	r22, r8
    2bec:	0e 94 62 30 	call	0x60c4	; 0x60c4 <__mulsf3>
    2bf0:	9b 01       	movw	r18, r22
    2bf2:	ac 01       	movw	r20, r24
    2bf4:	c3 01       	movw	r24, r6
    2bf6:	b2 01       	movw	r22, r4
    2bf8:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <__addsf3>
    2bfc:	2b 01       	movw	r4, r22
    2bfe:	3c 01       	movw	r6, r24
			val = *s++ - '0';
			while(isdigit(*s)) val = 10.0 * val + *s++ - '0';
			if(*s == '.') {
				double scale = 1.0;
				s++;
				while(isdigit(*s)) {
    2c00:	d8 01       	movw	r26, r16
    2c02:	2d 90       	ld	r2, X+
    2c04:	8d 01       	movw	r16, r26
    2c06:	82 2d       	mov	r24, r2
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	c0 97       	sbiw	r24, 0x30	; 48
    2c0c:	0a 97       	sbiw	r24, 0x0a	; 10
    2c0e:	a8 f2       	brcs	.-86     	; 0x2bba <_ZL9parseLinePc+0x67a>
    2c10:	01 c0       	rjmp	.+2      	; 0x2c14 <_ZL9parseLinePc+0x6d4>
			if(!isdigit(*s)) { *err = true; return 0.0; }
			val = *s++ - '0';
			while(isdigit(*s)) val = 10.0 * val + *s++ - '0';
			if(*s == '.') {
				double scale = 1.0;
				s++;
    2c12:	7c 01       	movw	r14, r24
    2c14:	87 01       	movw	r16, r14
    2c16:	bf ef       	ldi	r27, 0xFF	; 255
    2c18:	eb 1a       	sub	r14, r27
    2c1a:	fb 0a       	sbc	r15, r27
				if(*s == '<') rel = iotcDhtLessThan;
				else if(*s == '>') rel = iotcDhtGreaterThan;
				else goto syntaxError;
				val = getFloat(&s, &err);
				if(err) goto syntaxError;
				while(isspace(*s)) s++;
    2c1c:	f8 01       	movw	r30, r16
    2c1e:	80 81       	ld	r24, Z
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <isspace>
    2c26:	89 2b       	or	r24, r25
    2c28:	a9 f7       	brne	.-22     	; 0x2c14 <_ZL9parseLinePc+0x6d4>
		
		static int8_t
		allocTrigger() {
			int8_t	i;
			for(i = 0; i < iotcDhtMaxTrigger; i++) {
				if(iTrigger[i].iType == iotcDhtNone) return i;
    2c2a:	80 91 3b 05 	lds	r24, 0x053B
    2c2e:	88 23       	and	r24, r24
    2c30:	51 f0       	breq	.+20     	; 0x2c46 <_ZL9parseLinePc+0x706>
    2c32:	80 91 73 05 	lds	r24, 0x0573
    2c36:	88 23       	and	r24, r24
    2c38:	09 f4       	brne	.+2      	; 0x2c3c <_ZL9parseLinePc+0x6fc>
    2c3a:	b6 c4       	rjmp	.+2412   	; 0x35a8 <_ZL9parseLinePc+0x1068>
    2c3c:	80 91 ab 05 	lds	r24, 0x05AB
    2c40:	81 11       	cpse	r24, r1
    2c42:	39 c0       	rjmp	.+114    	; 0x2cb6 <_ZL9parseLinePc+0x776>
    2c44:	b3 c4       	rjmp	.+2406   	; 0x35ac <_ZL9parseLinePc+0x106c>
				else if(*s == '>') rel = iotcDhtGreaterThan;
				else goto syntaxError;
				val = getFloat(&s, &err);
				if(err) goto syntaxError;
				while(isspace(*s)) s++;
				if((n = allocTrigger()) < 0) goto syntaxError;
    2c46:	e1 2c       	mov	r14, r1
    2c48:	f1 2c       	mov	r15, r1
				iTrigger[n].iType = type;
    2c4a:	88 e3       	ldi	r24, 0x38	; 56
    2c4c:	8e 9d       	mul	r24, r14
    2c4e:	50 01       	movw	r10, r0
    2c50:	8f 9d       	mul	r24, r15
    2c52:	b0 0c       	add	r11, r0
    2c54:	11 24       	eor	r1, r1
    2c56:	95 01       	movw	r18, r10
    2c58:	25 5c       	subi	r18, 0xC5	; 197
    2c5a:	3a 4f       	sbci	r19, 0xFA	; 250
    2c5c:	69 01       	movw	r12, r18
    2c5e:	ef 85       	ldd	r30, Y+15	; 0x0f
    2c60:	d9 01       	movw	r26, r18
    2c62:	ec 93       	st	X, r30
				iTrigger[n].iCondition = rel;
    2c64:	11 96       	adiw	r26, 0x01	; 1
    2c66:	3c 92       	st	X, r3
					scale /= 10.0;
					val += (*s++ - '0') * scale;
				}
			}
			*pS = s; *err = false;
			return sign * val;
    2c68:	f8 89       	ldd	r31, Y+16	; 0x10
    2c6a:	6f 2f       	mov	r22, r31
    2c6c:	77 27       	eor	r23, r23
    2c6e:	67 fd       	sbrc	r22, 7
    2c70:	70 95       	com	r23
    2c72:	87 2f       	mov	r24, r23
    2c74:	97 2f       	mov	r25, r23
    2c76:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <__floatsisf>
    2c7a:	a3 01       	movw	r20, r6
    2c7c:	92 01       	movw	r18, r4
    2c7e:	0e 94 62 30 	call	0x60c4	; 0x60c4 <__mulsf3>
				if(err) goto syntaxError;
				while(isspace(*s)) s++;
				if((n = allocTrigger()) < 0) goto syntaxError;
				iTrigger[n].iType = type;
				iTrigger[n].iCondition = rel;
				iTrigger[n].iValue = val;
    2c82:	d6 01       	movw	r26, r12
    2c84:	12 96       	adiw	r26, 0x02	; 2
    2c86:	6d 93       	st	X+, r22
    2c88:	7d 93       	st	X+, r23
    2c8a:	8d 93       	st	X+, r24
    2c8c:	9c 93       	st	X, r25
    2c8e:	15 97       	sbiw	r26, 0x05	; 5
				strcpy(iTrigger[n].iLine, s);
    2c90:	b8 01       	movw	r22, r16
    2c92:	c5 01       	movw	r24, r10
    2c94:	8f 5b       	subi	r24, 0xBF	; 191
    2c96:	9a 4f       	sbci	r25, 0xFA	; 250
    2c98:	0e 94 01 34 	call	0x6802	; 0x6802 <strcpy>
				printf("dht trigger %d\n", n);
    2c9c:	ff 92       	push	r15
    2c9e:	ef 92       	push	r14
    2ca0:	8a e3       	ldi	r24, 0x3A	; 58
    2ca2:	92 e0       	ldi	r25, 0x02	; 2
    2ca4:	9f 93       	push	r25
    2ca6:	8f 93       	push	r24
    2ca8:	0e 94 80 34 	call	0x6900	; 0x6900 <printf>
    2cac:	0f 90       	pop	r0
    2cae:	0f 90       	pop	r0
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	81 c4       	rjmp	.+2306   	; 0x35b8 <_ZL9parseLinePc+0x1078>
				return true;
			syntaxError:
				printf("dht: syntax error\n");
    2cb6:	8a e4       	ldi	r24, 0x4A	; 74
    2cb8:	92 e0       	ldi	r25, 0x02	; 2
    2cba:	0e 94 91 34 	call	0x6922	; 0x6922 <puts>
    2cbe:	7c c4       	rjmp	.+2296   	; 0x35b8 <_ZL9parseLinePc+0x1078>
			return (iAngle - iotcServoTicksAtZero) * iotcServoDeltaDegree;
		}
		static bool
		parseLine(char *s) {
			if(strncmp(s, "servo", 5) == 0) {
				s += 5; while(isspace(*s)) s++;
    2cc0:	b5 e0       	ldi	r27, 0x05	; 5
    2cc2:	6b 0e       	add	r6, r27
    2cc4:	71 1c       	adc	r7, r1
    2cc6:	83 01       	movw	r16, r6
    2cc8:	ef ef       	ldi	r30, 0xFF	; 255
    2cca:	6e 1a       	sub	r6, r30
    2ccc:	7e 0a       	sbc	r7, r30
    2cce:	d8 01       	movw	r26, r16
    2cd0:	8c 91       	ld	r24, X
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <isspace>
    2cd8:	89 2b       	or	r24, r25
    2cda:	a9 f7       	brne	.-22     	; 0x2cc6 <_ZL9parseLinePc+0x786>
				if(strncmp(s, "get", 3) != 0) {
    2cdc:	43 e0       	ldi	r20, 0x03	; 3
    2cde:	50 e0       	ldi	r21, 0x00	; 0
    2ce0:	6f ef       	ldi	r22, 0xFF	; 255
    2ce2:	71 e0       	ldi	r23, 0x01	; 1
    2ce4:	c8 01       	movw	r24, r16
    2ce6:	0e 94 20 34 	call	0x6840	; 0x6840 <strncmp>
    2cea:	89 2b       	or	r24, r25
    2cec:	69 f1       	breq	.+90     	; 0x2d48 <_ZL9parseLinePc+0x808>
					int		val = atoi(s);
    2cee:	c8 01       	movw	r24, r16
    2cf0:	0e 94 cb 33 	call	0x6796	; 0x6796 <atoi>
		static void
		setAngle(int angle) {	// in degree
			int		delta;
			int		sign;
		
			if(angle < 0) {
    2cf4:	99 23       	and	r25, r25
    2cf6:	6c f4       	brge	.+26     	; 0x2d12 <_ZL9parseLinePc+0x7d2>
				delta = (-angle + iotcServoDeltaDegree / 2)
    2cf8:	25 e0       	ldi	r18, 0x05	; 5
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	f9 01       	movw	r30, r18
    2cfe:	e8 1b       	sub	r30, r24
    2d00:	f9 0b       	sbc	r31, r25
    2d02:	cf 01       	movw	r24, r30
					/ iotcServoDeltaDegree;
    2d04:	6a e0       	ldi	r22, 0x0A	; 10
    2d06:	70 e0       	ldi	r23, 0x00	; 0
    2d08:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
				sign = -1;
    2d0c:	4f ef       	ldi	r20, 0xFF	; 255
    2d0e:	5f ef       	ldi	r21, 0xFF	; 255
    2d10:	07 c0       	rjmp	.+14     	; 0x2d20 <_ZL9parseLinePc+0x7e0>
			} else {
				delta = (angle + iotcServoDeltaDegree / 2)
    2d12:	05 96       	adiw	r24, 0x05	; 5
					/ iotcServoDeltaDegree;
    2d14:	6a e0       	ldi	r22, 0x0A	; 10
    2d16:	70 e0       	ldi	r23, 0x00	; 0
    2d18:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
				sign = 1;
    2d1c:	41 e0       	ldi	r20, 0x01	; 1
    2d1e:	50 e0       	ldi	r21, 0x00	; 0
    2d20:	86 2f       	mov	r24, r22
    2d22:	97 2f       	mov	r25, r23
    2d24:	8a 30       	cpi	r24, 0x0A	; 10
    2d26:	91 05       	cpc	r25, r1
    2d28:	14 f0       	brlt	.+4      	; 0x2d2e <_ZL9parseLinePc+0x7ee>
    2d2a:	89 e0       	ldi	r24, 0x09	; 9
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
			}
			if(delta > 9) delta = 9;

			iAngle = iotcServoTicksAtZero + sign * delta;
    2d2e:	84 9f       	mul	r24, r20
    2d30:	90 01       	movw	r18, r0
    2d32:	85 9f       	mul	r24, r21
    2d34:	30 0d       	add	r19, r0
    2d36:	94 9f       	mul	r25, r20
    2d38:	30 0d       	add	r19, r0
    2d3a:	11 24       	eor	r1, r1
    2d3c:	c9 01       	movw	r24, r18
    2d3e:	0e 96       	adiw	r24, 0x0e	; 14
    2d40:	90 93 3f 01 	sts	0x013F, r25
    2d44:	80 93 3e 01 	sts	0x013E, r24
		}
		static int
		getAngle(void) {	// in degree
			return (iAngle - iotcServoTicksAtZero) * iotcServoDeltaDegree;
    2d48:	20 91 3e 01 	lds	r18, 0x013E
    2d4c:	30 91 3f 01 	lds	r19, 0x013F
    2d50:	2e 50       	subi	r18, 0x0E	; 14
    2d52:	31 09       	sbc	r19, r1
    2d54:	c9 01       	movw	r24, r18
    2d56:	88 0f       	add	r24, r24
    2d58:	99 1f       	adc	r25, r25
    2d5a:	22 0f       	add	r18, r18
    2d5c:	33 1f       	adc	r19, r19
    2d5e:	22 0f       	add	r18, r18
    2d60:	33 1f       	adc	r19, r19
    2d62:	22 0f       	add	r18, r18
    2d64:	33 1f       	adc	r19, r19
    2d66:	82 0f       	add	r24, r18
    2d68:	93 1f       	adc	r25, r19
				s += 5; while(isspace(*s)) s++;
				if(strncmp(s, "get", 3) != 0) {
					int		val = atoi(s);
					setAngle(val);
				}
				printf("servo %d\n", getAngle());
    2d6a:	9f 93       	push	r25
    2d6c:	8f 93       	push	r24
    2d6e:	8c e5       	ldi	r24, 0x5C	; 92
    2d70:	92 e0       	ldi	r25, 0x02	; 2
    2d72:	9f 93       	push	r25
    2d74:	8f 93       	push	r24
    2d76:	0e 94 80 34 	call	0x6900	; 0x6900 <printf>
    2d7a:	0f 90       	pop	r0
    2d7c:	0f 90       	pop	r0
    2d7e:	0f 90       	pop	r0
    2d80:	0f 90       	pop	r0
    2d82:	1a c4       	rjmp	.+2100   	; 0x35b8 <_ZL9parseLinePc+0x1078>
		*ipPort |= ~iPinMask;
	}
	static bool
	parseLine(char *s) {
		if(strncmp(s, "led", 3) == 0) {
			s += 3; while(isspace(*s)) s++;
    2d84:	f3 e0       	ldi	r31, 0x03	; 3
    2d86:	6f 0e       	add	r6, r31
    2d88:	71 1c       	adc	r7, r1
    2d8a:	83 01       	movw	r16, r6
    2d8c:	2f ef       	ldi	r18, 0xFF	; 255
    2d8e:	62 1a       	sub	r6, r18
    2d90:	72 0a       	sbc	r7, r18
    2d92:	d8 01       	movw	r26, r16
    2d94:	8c 91       	ld	r24, X
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <isspace>
    2d9c:	89 2b       	or	r24, r25
    2d9e:	a9 f7       	brne	.-22     	; 0x2d8a <_ZL9parseLinePc+0x84a>
			if(strncmp(s, "on", 2) == 0) {
    2da0:	42 e0       	ldi	r20, 0x02	; 2
    2da2:	50 e0       	ldi	r21, 0x00	; 0
    2da4:	66 e6       	ldi	r22, 0x66	; 102
    2da6:	72 e0       	ldi	r23, 0x02	; 2
    2da8:	c8 01       	movw	r24, r16
    2daa:	0e 94 20 34 	call	0x6840	; 0x6840 <strncmp>
    2dae:	89 2b       	or	r24, r25
    2db0:	51 f4       	brne	.+20     	; 0x2dc6 <_ZL9parseLinePc+0x886>
				*ipPort |= iPinMask;
    2db2:	e0 91 06 04 	lds	r30, 0x0406
    2db6:	f0 91 07 04 	lds	r31, 0x0407
    2dba:	90 81       	ld	r25, Z
    2dbc:	80 91 05 04 	lds	r24, 0x0405
    2dc0:	89 2b       	or	r24, r25
    2dc2:	80 83       	st	Z, r24
    2dc4:	f9 c3       	rjmp	.+2034   	; 0x35b8 <_ZL9parseLinePc+0x1078>
				//printf("led on \n");
			}
			else if(strncmp(s, "off", 3) == 0) {
    2dc6:	43 e0       	ldi	r20, 0x03	; 3
    2dc8:	50 e0       	ldi	r21, 0x00	; 0
    2dca:	69 e6       	ldi	r22, 0x69	; 105
    2dcc:	72 e0       	ldi	r23, 0x02	; 2
    2dce:	c8 01       	movw	r24, r16
    2dd0:	0e 94 20 34 	call	0x6840	; 0x6840 <strncmp>
    2dd4:	89 2b       	or	r24, r25
    2dd6:	09 f0       	breq	.+2      	; 0x2dda <_ZL9parseLinePc+0x89a>
    2dd8:	ef c3       	rjmp	.+2014   	; 0x35b8 <_ZL9parseLinePc+0x1078>
				*ipPort &= ~iPinMask; // off
    2dda:	e0 91 06 04 	lds	r30, 0x0406
    2dde:	f0 91 07 04 	lds	r31, 0x0407
    2de2:	80 81       	ld	r24, Z
    2de4:	90 91 05 04 	lds	r25, 0x0405
    2de8:	90 95       	com	r25
    2dea:	89 23       	and	r24, r25
    2dec:	80 83       	st	Z, r24
    2dee:	e4 c3       	rjmp	.+1992   	; 0x35b8 <_ZL9parseLinePc+0x1078>
	*ipPort |= ~iPinMask;
}
static bool
parseLine(char *s) {
	if(strncmp(s, "subled", 6) == 0) {
		s += 6; while(isspace(*s)) s++;
    2df0:	b6 e0       	ldi	r27, 0x06	; 6
    2df2:	6b 0e       	add	r6, r27
    2df4:	71 1c       	adc	r7, r1
    2df6:	83 01       	movw	r16, r6
    2df8:	ef ef       	ldi	r30, 0xFF	; 255
    2dfa:	6e 1a       	sub	r6, r30
    2dfc:	7e 0a       	sbc	r7, r30
    2dfe:	d8 01       	movw	r26, r16
    2e00:	8c 91       	ld	r24, X
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <isspace>
    2e08:	89 2b       	or	r24, r25
    2e0a:	a9 f7       	brne	.-22     	; 0x2df6 <_ZL9parseLinePc+0x8b6>
		if(strncmp(s, "on", 2) == 0) {
    2e0c:	42 e0       	ldi	r20, 0x02	; 2
    2e0e:	50 e0       	ldi	r21, 0x00	; 0
    2e10:	66 e6       	ldi	r22, 0x66	; 102
    2e12:	72 e0       	ldi	r23, 0x02	; 2
    2e14:	c8 01       	movw	r24, r16
    2e16:	0e 94 20 34 	call	0x6840	; 0x6840 <strncmp>
    2e1a:	89 2b       	or	r24, r25
    2e1c:	51 f4       	brne	.+20     	; 0x2e32 <_ZL9parseLinePc+0x8f2>
			*ipPort |= iPinMask;
    2e1e:	e0 91 03 04 	lds	r30, 0x0403
    2e22:	f0 91 04 04 	lds	r31, 0x0404
    2e26:	90 81       	ld	r25, Z
    2e28:	80 91 02 04 	lds	r24, 0x0402
    2e2c:	89 2b       	or	r24, r25
    2e2e:	80 83       	st	Z, r24
    2e30:	c3 c3       	rjmp	.+1926   	; 0x35b8 <_ZL9parseLinePc+0x1078>
			//printf("subled on \n");
		}
		else if(strncmp(s, "off", 3) == 0) {
    2e32:	43 e0       	ldi	r20, 0x03	; 3
    2e34:	50 e0       	ldi	r21, 0x00	; 0
    2e36:	69 e6       	ldi	r22, 0x69	; 105
    2e38:	72 e0       	ldi	r23, 0x02	; 2
    2e3a:	c8 01       	movw	r24, r16
    2e3c:	0e 94 20 34 	call	0x6840	; 0x6840 <strncmp>
    2e40:	89 2b       	or	r24, r25
    2e42:	09 f0       	breq	.+2      	; 0x2e46 <_ZL9parseLinePc+0x906>
    2e44:	b9 c3       	rjmp	.+1906   	; 0x35b8 <_ZL9parseLinePc+0x1078>
			*ipPort &= ~iPinMask; // off
    2e46:	e0 91 03 04 	lds	r30, 0x0403
    2e4a:	f0 91 04 04 	lds	r31, 0x0404
    2e4e:	80 81       	ld	r24, Z
    2e50:	90 91 02 04 	lds	r25, 0x0402
    2e54:	90 95       	com	r25
    2e56:	89 23       	and	r24, r25
    2e58:	80 83       	st	Z, r24
    2e5a:	ae c3       	rjmp	.+1884   	; 0x35b8 <_ZL9parseLinePc+0x1078>

// DC Fan Motor
static bool
parseFan(char *s)
{
	if(strncmp(s, "fan", 3) == 0) {
    2e5c:	43 e0       	ldi	r20, 0x03	; 3
    2e5e:	50 e0       	ldi	r21, 0x00	; 0
    2e60:	6d e6       	ldi	r22, 0x6D	; 109
    2e62:	72 e0       	ldi	r23, 0x02	; 2
    2e64:	c3 01       	movw	r24, r6
    2e66:	0e 94 20 34 	call	0x6840	; 0x6840 <strncmp>
    2e6a:	89 2b       	or	r24, r25
    2e6c:	09 f0       	breq	.+2      	; 0x2e70 <_ZL9parseLinePc+0x930>
    2e6e:	92 c3       	rjmp	.+1828   	; 0x3594 <_ZL9parseLinePc+0x1054>
		int      n;
		s += 3; while(isspace(*s)) s++;
    2e70:	b3 e0       	ldi	r27, 0x03	; 3
    2e72:	6b 0e       	add	r6, r27
    2e74:	71 1c       	adc	r7, r1
    2e76:	83 01       	movw	r16, r6
    2e78:	ef ef       	ldi	r30, 0xFF	; 255
    2e7a:	6e 1a       	sub	r6, r30
    2e7c:	7e 0a       	sbc	r7, r30
    2e7e:	d8 01       	movw	r26, r16
    2e80:	8c 91       	ld	r24, X
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <isspace>
    2e88:	89 2b       	or	r24, r25
    2e8a:	a9 f7       	brne	.-22     	; 0x2e76 <_ZL9parseLinePc+0x936>
		n = atoi(s);
    2e8c:	c8 01       	movw	r24, r16
    2e8e:	0e 94 cb 33 	call	0x6796	; 0x6796 <atoi>
    2e92:	85 30       	cpi	r24, 0x05	; 5
    2e94:	91 05       	cpc	r25, r1
    2e96:	14 f0       	brlt	.+4      	; 0x2e9c <_ZL9parseLinePc+0x95c>
    2e98:	84 e0       	ldi	r24, 0x04	; 4
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	99 23       	and	r25, r25
    2e9e:	14 f4       	brge	.+4      	; 0x2ea4 <_ZL9parseLinePc+0x964>
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
		if (n < 0) n = 0;
		else if (n > cMaxFanSpeed) n = cMaxFanSpeed;
		if(FanSpeed == 0) {
    2ea4:	20 91 3b 07 	lds	r18, 0x073B
    2ea8:	30 91 3c 07 	lds	r19, 0x073C
    2eac:	23 2b       	or	r18, r19
    2eae:	09 f0       	breq	.+2      	; 0x2eb2 <_ZL9parseLinePc+0x972>
    2eb0:	7b c0       	rjmp	.+246    	; 0x2fa8 <_ZL9parseLinePc+0xa68>
			if(n > 0) {
    2eb2:	18 16       	cp	r1, r24
    2eb4:	19 06       	cpc	r1, r25
    2eb6:	0c f0       	brlt	.+2      	; 0x2eba <_ZL9parseLinePc+0x97a>
    2eb8:	d3 c0       	rjmp	.+422    	; 0x3060 <_ZL9parseLinePc+0xb20>
			}
		}
		void
		configure(iotTimerPsd aPsd, unsigned int aCount) {
			unsigned char	psd = 0;
			if(iId == iotcTimer0) {
    2eba:	e0 91 40 07 	lds	r30, 0x0740
    2ebe:	f0 91 41 07 	lds	r31, 0x0741
    2ec2:	20 81       	ld	r18, Z
    2ec4:	21 30       	cpi	r18, 0x01	; 1
    2ec6:	59 f0       	breq	.+22     	; 0x2ede <_ZL9parseLinePc+0x99e>
					case iotcPsd256: psd = 4; break;
					case iotcPsd1024: psd = 5; break;
					default: return;
				}
			}
			switch(iId) {
    2ec8:	22 30       	cpi	r18, 0x02	; 2
    2eca:	91 f0       	breq	.+36     	; 0x2ef0 <_ZL9parseLinePc+0x9b0>
    2ecc:	18 f4       	brcc	.+6      	; 0x2ed4 <_ZL9parseLinePc+0x994>
    2ece:	21 30       	cpi	r18, 0x01	; 1
    2ed0:	41 f0       	breq	.+16     	; 0x2ee2 <_ZL9parseLinePc+0x9a2>
    2ed2:	30 c0       	rjmp	.+96     	; 0x2f34 <_ZL9parseLinePc+0x9f4>
    2ed4:	23 30       	cpi	r18, 0x03	; 3
    2ed6:	b9 f0       	breq	.+46     	; 0x2f06 <_ZL9parseLinePc+0x9c6>
    2ed8:	24 30       	cpi	r18, 0x04	; 4
    2eda:	d9 f0       	breq	.+54     	; 0x2f12 <_ZL9parseLinePc+0x9d2>
    2edc:	2b c0       	rjmp	.+86     	; 0x2f34 <_ZL9parseLinePc+0x9f4>
				switch(aPsd) {
					case iotcPsdNo: psd = 0; break;
					case iotcPsd1: psd = 1; break;
					case iotcPsd8: psd = 2; break;
					case iotcPsd32: psd = 3; break;
					case iotcPsd64: psd = 4; break;
    2ede:	24 e0       	ldi	r18, 0x04	; 4
    2ee0:	01 c0       	rjmp	.+2      	; 0x2ee4 <_ZL9parseLinePc+0x9a4>
			} else { // iotcTimer1, 2, | 3
				switch(aPsd) {
					case iotcPsdNo: psd = 0; break;
					case iotcPsd1: psd = 1; break;
					case iotcPsd8: psd = 2; break;
					case iotcPsd64: psd = 3; break;
    2ee2:	23 e0       	ldi	r18, 0x03	; 3
					default: return;
				}
			}
			switch(iId) {
				case iotcTimer0:
					TCNT0 = 0; OCR0 = aCount & 0xff;
    2ee4:	12 be       	out	0x32, r1	; 50
    2ee6:	3a ef       	ldi	r19, 0xFA	; 250
    2ee8:	31 bf       	out	0x31, r19	; 49
					TCCR0 = (1 << WGM01) | psd;
    2eea:	28 60       	ori	r18, 0x08	; 8
    2eec:	23 bf       	out	0x33, r18	; 51
    2eee:	22 c0       	rjmp	.+68     	; 0x2f34 <_ZL9parseLinePc+0x9f4>
					break;
				case iotcTimer1:
					TCCR1A = 0; TCCR1B = 0; TCNT1 = 0; OCR1A = aCount;
    2ef0:	1f bc       	out	0x2f, r1	; 47
    2ef2:	1e bc       	out	0x2e, r1	; 46
    2ef4:	1d bc       	out	0x2d, r1	; 45
    2ef6:	1c bc       	out	0x2c, r1	; 44
    2ef8:	2a ef       	ldi	r18, 0xFA	; 250
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	3b bd       	out	0x2b, r19	; 43
    2efe:	2a bd       	out	0x2a, r18	; 42
					TCCR1B = (1 << WGM12) | psd;
    2f00:	2b e0       	ldi	r18, 0x0B	; 11
    2f02:	2e bd       	out	0x2e, r18	; 46
    2f04:	17 c0       	rjmp	.+46     	; 0x2f34 <_ZL9parseLinePc+0x9f4>
					break;
				case iotcTimer2:
					TCNT2 = 0; OCR2 = aCount & 0xff;
    2f06:	14 bc       	out	0x24, r1	; 36
    2f08:	2a ef       	ldi	r18, 0xFA	; 250
    2f0a:	23 bd       	out	0x23, r18	; 35
					TCCR2 = (1 << WGM21) | psd;
    2f0c:	2b e0       	ldi	r18, 0x0B	; 11
    2f0e:	25 bd       	out	0x25, r18	; 37
    2f10:	11 c0       	rjmp	.+34     	; 0x2f34 <_ZL9parseLinePc+0x9f4>
					break;
				case iotcTimer3:
					TCCR3A = 0; TCCR3B = 0; TCNT3 = 0; OCR3A = aCount;
    2f12:	10 92 8b 00 	sts	0x008B, r1
    2f16:	ea e8       	ldi	r30, 0x8A	; 138
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	10 82       	st	Z, r1
    2f1c:	10 92 89 00 	sts	0x0089, r1
    2f20:	10 92 88 00 	sts	0x0088, r1
    2f24:	2a ef       	ldi	r18, 0xFA	; 250
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	30 93 87 00 	sts	0x0087, r19
    2f2c:	20 93 86 00 	sts	0x0086, r18
					TCCR3B = (1 << WGM32) | psd;
    2f30:	2b e0       	ldi	r18, 0x0B	; 11
    2f32:	20 83       	st	Z, r18
				default: return;
			}
		}
		void
		enableInterrupt(void (* aCallback) (void)) {
			switch(iId) {
    2f34:	e0 91 40 07 	lds	r30, 0x0740
    2f38:	f0 91 41 07 	lds	r31, 0x0741
    2f3c:	20 81       	ld	r18, Z
    2f3e:	22 30       	cpi	r18, 0x02	; 2
    2f40:	99 f0       	breq	.+38     	; 0x2f68 <_ZL9parseLinePc+0xa28>
    2f42:	18 f4       	brcc	.+6      	; 0x2f4a <_ZL9parseLinePc+0xa0a>
    2f44:	21 30       	cpi	r18, 0x01	; 1
    2f46:	31 f0       	breq	.+12     	; 0x2f54 <_ZL9parseLinePc+0xa14>
    2f48:	8b c0       	rjmp	.+278    	; 0x3060 <_ZL9parseLinePc+0xb20>
    2f4a:	23 30       	cpi	r18, 0x03	; 3
    2f4c:	b9 f0       	breq	.+46     	; 0x2f7c <_ZL9parseLinePc+0xa3c>
    2f4e:	24 30       	cpi	r18, 0x04	; 4
    2f50:	f9 f0       	breq	.+62     	; 0x2f90 <_ZL9parseLinePc+0xa50>
    2f52:	86 c0       	rjmp	.+268    	; 0x3060 <_ZL9parseLinePc+0xb20>
				case iotcTimer0:
					iCallback0 = aCallback; TIMSK |= (1 << OCIE0); break;
    2f54:	2f e6       	ldi	r18, 0x6F	; 111
    2f56:	35 e0       	ldi	r19, 0x05	; 5
    2f58:	30 93 32 07 	sts	0x0732, r19
    2f5c:	20 93 31 07 	sts	0x0731, r18
    2f60:	27 b7       	in	r18, 0x37	; 55
    2f62:	22 60       	ori	r18, 0x02	; 2
    2f64:	27 bf       	out	0x37, r18	; 55
    2f66:	7c c0       	rjmp	.+248    	; 0x3060 <_ZL9parseLinePc+0xb20>
				case iotcTimer1:
					iCallback1 = aCallback; TIMSK |= (1 << OCIE1A); break;
    2f68:	2f e6       	ldi	r18, 0x6F	; 111
    2f6a:	35 e0       	ldi	r19, 0x05	; 5
    2f6c:	30 93 30 07 	sts	0x0730, r19
    2f70:	20 93 2f 07 	sts	0x072F, r18
    2f74:	27 b7       	in	r18, 0x37	; 55
    2f76:	20 61       	ori	r18, 0x10	; 16
    2f78:	27 bf       	out	0x37, r18	; 55
    2f7a:	72 c0       	rjmp	.+228    	; 0x3060 <_ZL9parseLinePc+0xb20>
				case iotcTimer2:
					iCallback2 = aCallback; TIMSK |= (1 << OCIE2); break;
    2f7c:	2f e6       	ldi	r18, 0x6F	; 111
    2f7e:	35 e0       	ldi	r19, 0x05	; 5
    2f80:	30 93 2e 07 	sts	0x072E, r19
    2f84:	20 93 2d 07 	sts	0x072D, r18
    2f88:	27 b7       	in	r18, 0x37	; 55
    2f8a:	20 68       	ori	r18, 0x80	; 128
    2f8c:	27 bf       	out	0x37, r18	; 55
    2f8e:	68 c0       	rjmp	.+208    	; 0x3060 <_ZL9parseLinePc+0xb20>
				case iotcTimer3:
					iCallback3 = aCallback; ETIMSK |= (1 << OCIE3A); break;
    2f90:	2f e6       	ldi	r18, 0x6F	; 111
    2f92:	35 e0       	ldi	r19, 0x05	; 5
    2f94:	30 93 2c 07 	sts	0x072C, r19
    2f98:	20 93 2b 07 	sts	0x072B, r18
    2f9c:	ed e7       	ldi	r30, 0x7D	; 125
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	20 81       	ld	r18, Z
    2fa2:	20 61       	ori	r18, 0x10	; 16
    2fa4:	20 83       	st	Z, r18
    2fa6:	5c c0       	rjmp	.+184    	; 0x3060 <_ZL9parseLinePc+0xb20>
				FanTimer->configure(iotTimer::iotcPsd64, 250);
				FanTimer->enableInterrupt(toggleFan);
			}
		} else {
			if(n == 0) {
    2fa8:	00 97       	sbiw	r24, 0x00	; 0
    2faa:	09 f0       	breq	.+2      	; 0x2fae <_ZL9parseLinePc+0xa6e>
    2fac:	59 c0       	rjmp	.+178    	; 0x3060 <_ZL9parseLinePc+0xb20>
			}
		}
		void
		configure(iotTimerPsd aPsd, unsigned int aCount) {
			unsigned char	psd = 0;
			if(iId == iotcTimer0) {
    2fae:	e0 91 40 07 	lds	r30, 0x0740
    2fb2:	f0 91 41 07 	lds	r31, 0x0741
					case iotcPsd256: psd = 4; break;
					case iotcPsd1024: psd = 5; break;
					default: return;
				}
			}
			switch(iId) {
    2fb6:	20 81       	ld	r18, Z
    2fb8:	22 30       	cpi	r18, 0x02	; 2
    2fba:	79 f0       	breq	.+30     	; 0x2fda <_ZL9parseLinePc+0xa9a>
    2fbc:	18 f4       	brcc	.+6      	; 0x2fc4 <_ZL9parseLinePc+0xa84>
    2fbe:	21 30       	cpi	r18, 0x01	; 1
    2fc0:	31 f0       	breq	.+12     	; 0x2fce <_ZL9parseLinePc+0xa8e>
    2fc2:	2d c0       	rjmp	.+90     	; 0x301e <_ZL9parseLinePc+0xade>
    2fc4:	23 30       	cpi	r18, 0x03	; 3
    2fc6:	a1 f0       	breq	.+40     	; 0x2ff0 <_ZL9parseLinePc+0xab0>
    2fc8:	24 30       	cpi	r18, 0x04	; 4
    2fca:	c1 f0       	breq	.+48     	; 0x2ffc <_ZL9parseLinePc+0xabc>
    2fcc:	28 c0       	rjmp	.+80     	; 0x301e <_ZL9parseLinePc+0xade>
				case iotcTimer0:
					TCNT0 = 0; OCR0 = aCount & 0xff;
    2fce:	12 be       	out	0x32, r1	; 50
    2fd0:	2a ef       	ldi	r18, 0xFA	; 250
    2fd2:	21 bf       	out	0x31, r18	; 49
					TCCR0 = (1 << WGM01) | psd;
    2fd4:	28 e0       	ldi	r18, 0x08	; 8
    2fd6:	23 bf       	out	0x33, r18	; 51
    2fd8:	22 c0       	rjmp	.+68     	; 0x301e <_ZL9parseLinePc+0xade>
					break;
				case iotcTimer1:
					TCCR1A = 0; TCCR1B = 0; TCNT1 = 0; OCR1A = aCount;
    2fda:	1f bc       	out	0x2f, r1	; 47
    2fdc:	1e bc       	out	0x2e, r1	; 46
    2fde:	1d bc       	out	0x2d, r1	; 45
    2fe0:	1c bc       	out	0x2c, r1	; 44
    2fe2:	2a ef       	ldi	r18, 0xFA	; 250
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	3b bd       	out	0x2b, r19	; 43
    2fe8:	2a bd       	out	0x2a, r18	; 42
					TCCR1B = (1 << WGM12) | psd;
    2fea:	28 e0       	ldi	r18, 0x08	; 8
    2fec:	2e bd       	out	0x2e, r18	; 46
    2fee:	17 c0       	rjmp	.+46     	; 0x301e <_ZL9parseLinePc+0xade>
					break;
				case iotcTimer2:
					TCNT2 = 0; OCR2 = aCount & 0xff;
    2ff0:	14 bc       	out	0x24, r1	; 36
    2ff2:	2a ef       	ldi	r18, 0xFA	; 250
    2ff4:	23 bd       	out	0x23, r18	; 35
					TCCR2 = (1 << WGM21) | psd;
    2ff6:	28 e0       	ldi	r18, 0x08	; 8
    2ff8:	25 bd       	out	0x25, r18	; 37
    2ffa:	11 c0       	rjmp	.+34     	; 0x301e <_ZL9parseLinePc+0xade>
					break;
				case iotcTimer3:
					TCCR3A = 0; TCCR3B = 0; TCNT3 = 0; OCR3A = aCount;
    2ffc:	10 92 8b 00 	sts	0x008B, r1
    3000:	ea e8       	ldi	r30, 0x8A	; 138
    3002:	f0 e0       	ldi	r31, 0x00	; 0
    3004:	10 82       	st	Z, r1
    3006:	10 92 89 00 	sts	0x0089, r1
    300a:	10 92 88 00 	sts	0x0088, r1
    300e:	2a ef       	ldi	r18, 0xFA	; 250
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	30 93 87 00 	sts	0x0087, r19
    3016:	20 93 86 00 	sts	0x0086, r18
					TCCR3B = (1 << WGM32) | psd;
    301a:	28 e0       	ldi	r18, 0x08	; 8
    301c:	20 83       	st	Z, r18
				default: break;
			}
		}
		void
		disableInterrupt() {
			switch(iId) {
    301e:	e0 91 40 07 	lds	r30, 0x0740
    3022:	f0 91 41 07 	lds	r31, 0x0741
    3026:	20 81       	ld	r18, Z
    3028:	22 30       	cpi	r18, 0x02	; 2
    302a:	69 f0       	breq	.+26     	; 0x3046 <_ZL9parseLinePc+0xb06>
    302c:	18 f4       	brcc	.+6      	; 0x3034 <_ZL9parseLinePc+0xaf4>
    302e:	21 30       	cpi	r18, 0x01	; 1
    3030:	31 f0       	breq	.+12     	; 0x303e <_ZL9parseLinePc+0xafe>
    3032:	16 c0       	rjmp	.+44     	; 0x3060 <_ZL9parseLinePc+0xb20>
    3034:	23 30       	cpi	r18, 0x03	; 3
    3036:	59 f0       	breq	.+22     	; 0x304e <_ZL9parseLinePc+0xb0e>
    3038:	24 30       	cpi	r18, 0x04	; 4
    303a:	69 f0       	breq	.+26     	; 0x3056 <_ZL9parseLinePc+0xb16>
    303c:	11 c0       	rjmp	.+34     	; 0x3060 <_ZL9parseLinePc+0xb20>
				case iotcTimer0: TIMSK &= ~(1 << OCIE0); break;
    303e:	27 b7       	in	r18, 0x37	; 55
    3040:	2d 7f       	andi	r18, 0xFD	; 253
    3042:	27 bf       	out	0x37, r18	; 55
    3044:	0d c0       	rjmp	.+26     	; 0x3060 <_ZL9parseLinePc+0xb20>
				case iotcTimer1: TIMSK &= ~(1 << OCIE1A); break;
    3046:	27 b7       	in	r18, 0x37	; 55
    3048:	2f 7e       	andi	r18, 0xEF	; 239
    304a:	27 bf       	out	0x37, r18	; 55
    304c:	09 c0       	rjmp	.+18     	; 0x3060 <_ZL9parseLinePc+0xb20>
				case iotcTimer2: TIMSK &= ~(1 << OCIE2); break;
    304e:	27 b7       	in	r18, 0x37	; 55
    3050:	2f 77       	andi	r18, 0x7F	; 127
    3052:	27 bf       	out	0x37, r18	; 55
    3054:	05 c0       	rjmp	.+10     	; 0x3060 <_ZL9parseLinePc+0xb20>
				case iotcTimer3: ETIMSK &= ~(1 << OCIE3A); break;
    3056:	ed e7       	ldi	r30, 0x7D	; 125
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	20 81       	ld	r18, Z
    305c:	2f 7e       	andi	r18, 0xEF	; 239
    305e:	20 83       	st	Z, r18
				FanTimer->configure(iotTimer::iotcPsdNo, 250);
				FanTimer->disableInterrupt();
			}
		}
		FanSpeed = n;
    3060:	90 93 3c 07 	sts	0x073C, r25
    3064:	80 93 3b 07 	sts	0x073B, r24
		FanCount = FanSpeed;
    3068:	90 93 3f 07 	sts	0x073F, r25
    306c:	80 93 3e 07 	sts	0x073E, r24
		FanState = false;
    3070:	10 92 3d 07 	sts	0x073D, r1
    3074:	a1 c2       	rjmp	.+1346   	; 0x35b8 <_ZL9parseLinePc+0x1078>
	//if(iotDustSensor::parseLine(s)) return;
	
	if(parseFan(s)) return;
	
	if(strncmp(s, "0x", 2) == 0) {
		cli();
    3076:	f8 94       	cli
		IrTrans->sendSamsung(strtoul(s,NULL,16), NumBits);
    3078:	40 e1       	ldi	r20, 0x10	; 16
    307a:	50 e0       	ldi	r21, 0x00	; 0
    307c:	60 e0       	ldi	r22, 0x00	; 0
    307e:	70 e0       	ldi	r23, 0x00	; 0
    3080:	c3 01       	movw	r24, r6
    3082:	0e 94 ba 32 	call	0x6574	; 0x6574 <strtoul>
				default: break;
			}
		}
		void
		disableInterrupt() {
			switch(iId) {
    3086:	e0 91 33 07 	lds	r30, 0x0733
    308a:	f0 91 34 07 	lds	r31, 0x0734
    308e:	20 81       	ld	r18, Z
    3090:	22 30       	cpi	r18, 0x02	; 2
    3092:	69 f0       	breq	.+26     	; 0x30ae <_ZL9parseLinePc+0xb6e>
    3094:	18 f4       	brcc	.+6      	; 0x309c <_ZL9parseLinePc+0xb5c>
    3096:	21 30       	cpi	r18, 0x01	; 1
    3098:	31 f0       	breq	.+12     	; 0x30a6 <_ZL9parseLinePc+0xb66>
    309a:	16 c0       	rjmp	.+44     	; 0x30c8 <_ZL9parseLinePc+0xb88>
    309c:	23 30       	cpi	r18, 0x03	; 3
    309e:	59 f0       	breq	.+22     	; 0x30b6 <_ZL9parseLinePc+0xb76>
    30a0:	24 30       	cpi	r18, 0x04	; 4
    30a2:	69 f0       	breq	.+26     	; 0x30be <_ZL9parseLinePc+0xb7e>
    30a4:	11 c0       	rjmp	.+34     	; 0x30c8 <_ZL9parseLinePc+0xb88>
				case iotcTimer0: TIMSK &= ~(1 << OCIE0); break;
    30a6:	27 b7       	in	r18, 0x37	; 55
    30a8:	2d 7f       	andi	r18, 0xFD	; 253
    30aa:	27 bf       	out	0x37, r18	; 55
    30ac:	0d c0       	rjmp	.+26     	; 0x30c8 <_ZL9parseLinePc+0xb88>
				case iotcTimer1: TIMSK &= ~(1 << OCIE1A); break;
    30ae:	27 b7       	in	r18, 0x37	; 55
    30b0:	2f 7e       	andi	r18, 0xEF	; 239
    30b2:	27 bf       	out	0x37, r18	; 55
    30b4:	09 c0       	rjmp	.+18     	; 0x30c8 <_ZL9parseLinePc+0xb88>
				case iotcTimer2: TIMSK &= ~(1 << OCIE2); break;
    30b6:	27 b7       	in	r18, 0x37	; 55
    30b8:	2f 77       	andi	r18, 0x7F	; 127
    30ba:	27 bf       	out	0x37, r18	; 55
    30bc:	05 c0       	rjmp	.+10     	; 0x30c8 <_ZL9parseLinePc+0xb88>
				case iotcTimer3: ETIMSK &= ~(1 << OCIE3A); break;
    30be:	ed e7       	ldi	r30, 0x7D	; 125
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	20 81       	ld	r18, Z
    30c4:	2f 7e       	andi	r18, 0xEF	; 239
    30c6:	20 83       	st	Z, r18
					iCallback3 = (void (*)(void)) NULL; break;
				default: break;
			}
			iId = iotcTimerNone;
		}
		iotTimerId getId()		{ return(iId); }
    30c8:	e0 91 33 07 	lds	r30, 0x0733
    30cc:	f0 91 34 07 	lds	r31, 0x0734
    30d0:	20 81       	ld	r18, Z
		}

		void
		enable(int aKHz) {
			iTimer->disableInterrupt();
			if(iTimer->getId() == iotTimer::iotcTimer1) {
    30d2:	22 30       	cpi	r18, 0x02	; 2
    30d4:	19 f4       	brne	.+6      	; 0x30dc <_ZL9parseLinePc+0xb9c>
				DDRB |= (1 << PB5);		// output
    30d6:	bd 9a       	sbi	0x17, 5	; 23
				// when not sending PWM, we want it low
				PORTB &= ~(1 << PB5);
    30d8:	c5 98       	cbi	0x18, 5	; 24
    30da:	04 c0       	rjmp	.+8      	; 0x30e4 <_ZL9parseLinePc+0xba4>
			} else if(iTimer->getId() == iotTimer::iotcTimer3) {
    30dc:	24 30       	cpi	r18, 0x04	; 4
    30de:	11 f4       	brne	.+4      	; 0x30e4 <_ZL9parseLinePc+0xba4>
				DDRE |= (1 << PE3);		// output
    30e0:	13 9a       	sbi	0x02, 3	; 2
				// when not sending PWM, we want it low
				PORTE &= ~(1 << PE3);
    30e2:	1b 98       	cbi	0x03, 3	; 3
			// the counter repeatedly counts from bottom to top, 
			// and then from top to bottom.
			// OCnA is cleared on the compare match while up counting,
			// and set on the compare match while down counting.
			// TOP = ICRn, Update OCRnA at TOP.
			switch(iId) {
    30e4:	e0 91 33 07 	lds	r30, 0x0733
    30e8:	f0 91 34 07 	lds	r31, 0x0734
    30ec:	20 81       	ld	r18, Z
    30ee:	22 30       	cpi	r18, 0x02	; 2
    30f0:	19 f0       	breq	.+6      	; 0x30f8 <_ZL9parseLinePc+0xbb8>
    30f2:	24 30       	cpi	r18, 0x04	; 4
    30f4:	71 f0       	breq	.+28     	; 0x3112 <_ZL9parseLinePc+0xbd2>
    30f6:	1f c0       	rjmp	.+62     	; 0x3136 <_ZL9parseLinePc+0xbf6>
				case iotcTimer1: {
					const uint16_t	pwmVal = F_CPU / 2000 / aKHz;
					ICR1 = pwmVal; OCR1A = pwmVal / 3;
    30f8:	22 ed       	ldi	r18, 0xD2	; 210
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	37 bd       	out	0x27, r19	; 39
    30fe:	26 bd       	out	0x26, r18	; 38
    3100:	26 e4       	ldi	r18, 0x46	; 70
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	3b bd       	out	0x2b, r19	; 43
    3106:	2a bd       	out	0x2a, r18	; 42
					TCCR1A = (1 << WGM11); TCCR1B = (1 << WGM13) | (1 << CS10);
    3108:	22 e0       	ldi	r18, 0x02	; 2
    310a:	2f bd       	out	0x2f, r18	; 47
    310c:	21 e1       	ldi	r18, 0x11	; 17
    310e:	2e bd       	out	0x2e, r18	; 46
    3110:	12 c0       	rjmp	.+36     	; 0x3136 <_ZL9parseLinePc+0xbf6>
					break;
				}
				case iotcTimer3: {
					const uint16_t	pwmVal = F_CPU / 2000 / aKHz;
					ICR3 = pwmVal; OCR3A = pwmVal / 3;
    3112:	22 ed       	ldi	r18, 0xD2	; 210
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	30 93 81 00 	sts	0x0081, r19
    311a:	20 93 80 00 	sts	0x0080, r18
    311e:	26 e4       	ldi	r18, 0x46	; 70
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	30 93 87 00 	sts	0x0087, r19
    3126:	20 93 86 00 	sts	0x0086, r18
					TCCR3A = (1 << WGM31); TCCR3B = (1 << WGM33) | (1 << CS30);
    312a:	22 e0       	ldi	r18, 0x02	; 2
    312c:	20 93 8b 00 	sts	0x008B, r18
    3130:	21 e1       	ldi	r18, 0x11	; 17
    3132:	20 93 8a 00 	sts	0x008A, r18
		void
		enablePWMOut() {
			// COMnA1:0 = 2 with WGMn3:0 = 10.
			// clear OCnA on compare match when up-counting.
			// set OCnA on compare match when down-counting.
			switch(iId) {
    3136:	e0 91 33 07 	lds	r30, 0x0733
    313a:	f0 91 34 07 	lds	r31, 0x0734
    313e:	20 81       	ld	r18, Z
    3140:	22 30       	cpi	r18, 0x02	; 2
    3142:	69 f0       	breq	.+26     	; 0x315e <_ZL9parseLinePc+0xc1e>
    3144:	18 f4       	brcc	.+6      	; 0x314c <_ZL9parseLinePc+0xc0c>
    3146:	21 30       	cpi	r18, 0x01	; 1
    3148:	31 f0       	breq	.+12     	; 0x3156 <_ZL9parseLinePc+0xc16>
    314a:	16 c0       	rjmp	.+44     	; 0x3178 <_ZL9parseLinePc+0xc38>
    314c:	23 30       	cpi	r18, 0x03	; 3
    314e:	59 f0       	breq	.+22     	; 0x3166 <_ZL9parseLinePc+0xc26>
    3150:	24 30       	cpi	r18, 0x04	; 4
    3152:	69 f0       	breq	.+26     	; 0x316e <_ZL9parseLinePc+0xc2e>
    3154:	11 c0       	rjmp	.+34     	; 0x3178 <_ZL9parseLinePc+0xc38>
				case iotcTimer0: TCCR0 |= (1 << COM01); break;
    3156:	23 b7       	in	r18, 0x33	; 51
    3158:	20 62       	ori	r18, 0x20	; 32
    315a:	23 bf       	out	0x33, r18	; 51
    315c:	0d c0       	rjmp	.+26     	; 0x3178 <_ZL9parseLinePc+0xc38>
				case iotcTimer1: TCCR1A |= (1 << COM1A1); break;
    315e:	2f b5       	in	r18, 0x2f	; 47
    3160:	20 68       	ori	r18, 0x80	; 128
    3162:	2f bd       	out	0x2f, r18	; 47
    3164:	09 c0       	rjmp	.+18     	; 0x3178 <_ZL9parseLinePc+0xc38>
				case iotcTimer2: TCCR2 |= (1 << COM21); break;
    3166:	25 b5       	in	r18, 0x25	; 37
    3168:	20 62       	ori	r18, 0x20	; 32
    316a:	25 bd       	out	0x25, r18	; 37
    316c:	05 c0       	rjmp	.+10     	; 0x3178 <_ZL9parseLinePc+0xc38>
				case iotcTimer3: TCCR3A |= (1 << COM3A1); break;
    316e:	eb e8       	ldi	r30, 0x8B	; 139
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	20 81       	ld	r18, Z
    3174:	20 68       	ori	r18, 0x80	; 128
    3176:	20 83       	st	Z, r18

			// busy wait
			__asm__ __volatile__ (
				"1: sbiw %0,1" "\n\t"					// 2 cycles
				"brne 1b" : "=w" (auSec) : "0" (auSec)	// 2 cycles
			);
    3178:	ea e1       	ldi	r30, 0x1A	; 26
    317a:	fe e4       	ldi	r31, 0x4E	; 78
    317c:	31 97       	sbiw	r30, 0x01	; 1
    317e:	f1 f7       	brne	.-4      	; 0x317c <_ZL9parseLinePc+0xc3c>
		}
		void
		disablePWMOut() {
			// COMnA1:0 = 0 with WGM3:0 = 10.
			// OCnA disconnected.
			switch(iId) {
    3180:	e0 91 33 07 	lds	r30, 0x0733
    3184:	f0 91 34 07 	lds	r31, 0x0734
    3188:	20 81       	ld	r18, Z
    318a:	22 30       	cpi	r18, 0x02	; 2
    318c:	69 f0       	breq	.+26     	; 0x31a8 <_ZL9parseLinePc+0xc68>
    318e:	18 f4       	brcc	.+6      	; 0x3196 <_ZL9parseLinePc+0xc56>
    3190:	21 30       	cpi	r18, 0x01	; 1
    3192:	31 f0       	breq	.+12     	; 0x31a0 <_ZL9parseLinePc+0xc60>
    3194:	16 c0       	rjmp	.+44     	; 0x31c2 <_ZL9parseLinePc+0xc82>
    3196:	23 30       	cpi	r18, 0x03	; 3
    3198:	59 f0       	breq	.+22     	; 0x31b0 <_ZL9parseLinePc+0xc70>
    319a:	24 30       	cpi	r18, 0x04	; 4
    319c:	69 f0       	breq	.+26     	; 0x31b8 <_ZL9parseLinePc+0xc78>
    319e:	11 c0       	rjmp	.+34     	; 0x31c2 <_ZL9parseLinePc+0xc82>
				case iotcTimer0: TCCR0 &= ~(1 << COM01); break;
    31a0:	23 b7       	in	r18, 0x33	; 51
    31a2:	2f 7d       	andi	r18, 0xDF	; 223
    31a4:	23 bf       	out	0x33, r18	; 51
    31a6:	0d c0       	rjmp	.+26     	; 0x31c2 <_ZL9parseLinePc+0xc82>
				case iotcTimer1: TCCR1A &= ~(1 << COM1A1); break;
    31a8:	2f b5       	in	r18, 0x2f	; 47
    31aa:	2f 77       	andi	r18, 0x7F	; 127
    31ac:	2f bd       	out	0x2f, r18	; 47
    31ae:	09 c0       	rjmp	.+18     	; 0x31c2 <_ZL9parseLinePc+0xc82>
				case iotcTimer2: TCCR2 &= ~(1 << COM21); break;
    31b0:	25 b5       	in	r18, 0x25	; 37
    31b2:	2f 7d       	andi	r18, 0xDF	; 223
    31b4:	25 bd       	out	0x25, r18	; 37
    31b6:	05 c0       	rjmp	.+10     	; 0x31c2 <_ZL9parseLinePc+0xc82>
				case iotcTimer3: TCCR3A &= ~(1 << COM3A1); break;
    31b8:	eb e8       	ldi	r30, 0x8B	; 139
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	20 81       	ld	r18, Z
    31be:	2f 77       	andi	r18, 0x7F	; 127
    31c0:	20 83       	st	Z, r18
    31c2:	ea e1       	ldi	r30, 0x1A	; 26
    31c4:	fe e4       	ldi	r31, 0x4E	; 78
    31c6:	31 97       	sbiw	r30, 0x01	; 1
    31c8:	f1 f7       	brne	.-4      	; 0x31c6 <_ZL9parseLinePc+0xc86>
    31ca:	40 e2       	ldi	r20, 0x20	; 32
    31cc:	50 e0       	ldi	r21, 0x00	; 0
    31ce:	2a eb       	ldi	r18, 0xBA	; 186
    31d0:	38 e0       	ldi	r19, 0x08	; 8
    31d2:	eb e8       	ldi	r30, 0x8B	; 139
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	0a ef       	ldi	r16, 0xFA	; 250
    31d8:	18 e1       	ldi	r17, 0x18	; 24
		sendSamsung(unsigned long aData, int anBits) {
			enable(38);
			mark(iotcSamsungHdrMark);
			space(iotcSamsungHdrSpace);
			for(int i = 0; i < anBits; i++) {
				if(aData & iotcTopBit) {
    31da:	99 23       	and	r25, r25
    31dc:	0c f0       	brlt	.+2      	; 0x31e0 <_ZL9parseLinePc+0xca0>
    31de:	45 c0       	rjmp	.+138    	; 0x326a <_ZL9parseLinePc+0xd2a>
		void
		enablePWMOut() {
			// COMnA1:0 = 2 with WGMn3:0 = 10.
			// clear OCnA on compare match when up-counting.
			// set OCnA on compare match when down-counting.
			switch(iId) {
    31e0:	a0 91 33 07 	lds	r26, 0x0733
    31e4:	b0 91 34 07 	lds	r27, 0x0734
    31e8:	ac 91       	ld	r26, X
    31ea:	a2 30       	cpi	r26, 0x02	; 2
    31ec:	69 f0       	breq	.+26     	; 0x3208 <_ZL9parseLinePc+0xcc8>
    31ee:	18 f4       	brcc	.+6      	; 0x31f6 <_ZL9parseLinePc+0xcb6>
    31f0:	a1 30       	cpi	r26, 0x01	; 1
    31f2:	31 f0       	breq	.+12     	; 0x3200 <_ZL9parseLinePc+0xcc0>
    31f4:	14 c0       	rjmp	.+40     	; 0x321e <_ZL9parseLinePc+0xcde>
    31f6:	a3 30       	cpi	r26, 0x03	; 3
    31f8:	59 f0       	breq	.+22     	; 0x3210 <_ZL9parseLinePc+0xcd0>
    31fa:	a4 30       	cpi	r26, 0x04	; 4
    31fc:	69 f0       	breq	.+26     	; 0x3218 <_ZL9parseLinePc+0xcd8>
    31fe:	0f c0       	rjmp	.+30     	; 0x321e <_ZL9parseLinePc+0xcde>
				case iotcTimer0: TCCR0 |= (1 << COM01); break;
    3200:	a3 b7       	in	r26, 0x33	; 51
    3202:	a0 62       	ori	r26, 0x20	; 32
    3204:	a3 bf       	out	0x33, r26	; 51
    3206:	0b c0       	rjmp	.+22     	; 0x321e <_ZL9parseLinePc+0xcde>
				case iotcTimer1: TCCR1A |= (1 << COM1A1); break;
    3208:	af b5       	in	r26, 0x2f	; 47
    320a:	a0 68       	ori	r26, 0x80	; 128
    320c:	af bd       	out	0x2f, r26	; 47
    320e:	07 c0       	rjmp	.+14     	; 0x321e <_ZL9parseLinePc+0xcde>
				case iotcTimer2: TCCR2 |= (1 << COM21); break;
    3210:	a5 b5       	in	r26, 0x25	; 37
    3212:	a0 62       	ori	r26, 0x20	; 32
    3214:	a5 bd       	out	0x25, r26	; 37
    3216:	03 c0       	rjmp	.+6      	; 0x321e <_ZL9parseLinePc+0xcde>
				case iotcTimer3: TCCR3A |= (1 << COM3A1); break;
    3218:	a0 81       	ld	r26, Z
    321a:	a0 68       	ori	r26, 0x80	; 128
    321c:	a0 83       	st	Z, r26

			// busy wait
			__asm__ __volatile__ (
				"1: sbiw %0,1" "\n\t"					// 2 cycles
				"brne 1b" : "=w" (auSec) : "0" (auSec)	// 2 cycles
			);
    321e:	d9 01       	movw	r26, r18
    3220:	11 97       	sbiw	r26, 0x01	; 1
    3222:	f1 f7       	brne	.-4      	; 0x3220 <_ZL9parseLinePc+0xce0>
		}
		void
		disablePWMOut() {
			// COMnA1:0 = 0 with WGM3:0 = 10.
			// OCnA disconnected.
			switch(iId) {
    3224:	a0 91 33 07 	lds	r26, 0x0733
    3228:	b0 91 34 07 	lds	r27, 0x0734
    322c:	ac 91       	ld	r26, X
    322e:	a2 30       	cpi	r26, 0x02	; 2
    3230:	69 f0       	breq	.+26     	; 0x324c <_ZL9parseLinePc+0xd0c>
    3232:	18 f4       	brcc	.+6      	; 0x323a <_ZL9parseLinePc+0xcfa>
    3234:	a1 30       	cpi	r26, 0x01	; 1
    3236:	31 f0       	breq	.+12     	; 0x3244 <_ZL9parseLinePc+0xd04>
    3238:	14 c0       	rjmp	.+40     	; 0x3262 <_ZL9parseLinePc+0xd22>
    323a:	a3 30       	cpi	r26, 0x03	; 3
    323c:	59 f0       	breq	.+22     	; 0x3254 <_ZL9parseLinePc+0xd14>
    323e:	a4 30       	cpi	r26, 0x04	; 4
    3240:	69 f0       	breq	.+26     	; 0x325c <_ZL9parseLinePc+0xd1c>
    3242:	0f c0       	rjmp	.+30     	; 0x3262 <_ZL9parseLinePc+0xd22>
				case iotcTimer0: TCCR0 &= ~(1 << COM01); break;
    3244:	a3 b7       	in	r26, 0x33	; 51
    3246:	af 7d       	andi	r26, 0xDF	; 223
    3248:	a3 bf       	out	0x33, r26	; 51
    324a:	0b c0       	rjmp	.+22     	; 0x3262 <_ZL9parseLinePc+0xd22>
				case iotcTimer1: TCCR1A &= ~(1 << COM1A1); break;
    324c:	af b5       	in	r26, 0x2f	; 47
    324e:	af 77       	andi	r26, 0x7F	; 127
    3250:	af bd       	out	0x2f, r26	; 47
    3252:	07 c0       	rjmp	.+14     	; 0x3262 <_ZL9parseLinePc+0xd22>
				case iotcTimer2: TCCR2 &= ~(1 << COM21); break;
    3254:	a5 b5       	in	r26, 0x25	; 37
    3256:	af 7d       	andi	r26, 0xDF	; 223
    3258:	a5 bd       	out	0x25, r26	; 37
    325a:	03 c0       	rjmp	.+6      	; 0x3262 <_ZL9parseLinePc+0xd22>
				case iotcTimer3: TCCR3A &= ~(1 << COM3A1); break;
    325c:	a0 81       	ld	r26, Z
    325e:	af 77       	andi	r26, 0x7F	; 127
    3260:	a0 83       	st	Z, r26
    3262:	d8 01       	movw	r26, r16
    3264:	11 97       	sbiw	r26, 0x01	; 1
    3266:	f1 f7       	brne	.-4      	; 0x3264 <_ZL9parseLinePc+0xd24>
    3268:	44 c0       	rjmp	.+136    	; 0x32f2 <_ZL9parseLinePc+0xdb2>
		void
		enablePWMOut() {
			// COMnA1:0 = 2 with WGMn3:0 = 10.
			// clear OCnA on compare match when up-counting.
			// set OCnA on compare match when down-counting.
			switch(iId) {
    326a:	a0 91 33 07 	lds	r26, 0x0733
    326e:	b0 91 34 07 	lds	r27, 0x0734
    3272:	ac 91       	ld	r26, X
    3274:	a2 30       	cpi	r26, 0x02	; 2
    3276:	69 f0       	breq	.+26     	; 0x3292 <_ZL9parseLinePc+0xd52>
    3278:	18 f4       	brcc	.+6      	; 0x3280 <_ZL9parseLinePc+0xd40>
    327a:	a1 30       	cpi	r26, 0x01	; 1
    327c:	31 f0       	breq	.+12     	; 0x328a <_ZL9parseLinePc+0xd4a>
    327e:	14 c0       	rjmp	.+40     	; 0x32a8 <_ZL9parseLinePc+0xd68>
    3280:	a3 30       	cpi	r26, 0x03	; 3
    3282:	59 f0       	breq	.+22     	; 0x329a <_ZL9parseLinePc+0xd5a>
    3284:	a4 30       	cpi	r26, 0x04	; 4
    3286:	69 f0       	breq	.+26     	; 0x32a2 <_ZL9parseLinePc+0xd62>
    3288:	0f c0       	rjmp	.+30     	; 0x32a8 <_ZL9parseLinePc+0xd68>
				case iotcTimer0: TCCR0 |= (1 << COM01); break;
    328a:	a3 b7       	in	r26, 0x33	; 51
    328c:	a0 62       	ori	r26, 0x20	; 32
    328e:	a3 bf       	out	0x33, r26	; 51
    3290:	0b c0       	rjmp	.+22     	; 0x32a8 <_ZL9parseLinePc+0xd68>
				case iotcTimer1: TCCR1A |= (1 << COM1A1); break;
    3292:	af b5       	in	r26, 0x2f	; 47
    3294:	a0 68       	ori	r26, 0x80	; 128
    3296:	af bd       	out	0x2f, r26	; 47
    3298:	07 c0       	rjmp	.+14     	; 0x32a8 <_ZL9parseLinePc+0xd68>
				case iotcTimer2: TCCR2 |= (1 << COM21); break;
    329a:	a5 b5       	in	r26, 0x25	; 37
    329c:	a0 62       	ori	r26, 0x20	; 32
    329e:	a5 bd       	out	0x25, r26	; 37
    32a0:	03 c0       	rjmp	.+6      	; 0x32a8 <_ZL9parseLinePc+0xd68>
				case iotcTimer3: TCCR3A |= (1 << COM3A1); break;
    32a2:	a0 81       	ld	r26, Z
    32a4:	a0 68       	ori	r26, 0x80	; 128
    32a6:	a0 83       	st	Z, r26
    32a8:	d9 01       	movw	r26, r18
    32aa:	11 97       	sbiw	r26, 0x01	; 1
    32ac:	f1 f7       	brne	.-4      	; 0x32aa <_ZL9parseLinePc+0xd6a>
		}
		void
		disablePWMOut() {
			// COMnA1:0 = 0 with WGM3:0 = 10.
			// OCnA disconnected.
			switch(iId) {
    32ae:	a0 91 33 07 	lds	r26, 0x0733
    32b2:	b0 91 34 07 	lds	r27, 0x0734
    32b6:	ac 91       	ld	r26, X
    32b8:	a2 30       	cpi	r26, 0x02	; 2
    32ba:	69 f0       	breq	.+26     	; 0x32d6 <_ZL9parseLinePc+0xd96>
    32bc:	18 f4       	brcc	.+6      	; 0x32c4 <_ZL9parseLinePc+0xd84>
    32be:	a1 30       	cpi	r26, 0x01	; 1
    32c0:	31 f0       	breq	.+12     	; 0x32ce <_ZL9parseLinePc+0xd8e>
    32c2:	14 c0       	rjmp	.+40     	; 0x32ec <_ZL9parseLinePc+0xdac>
    32c4:	a3 30       	cpi	r26, 0x03	; 3
    32c6:	59 f0       	breq	.+22     	; 0x32de <_ZL9parseLinePc+0xd9e>
    32c8:	a4 30       	cpi	r26, 0x04	; 4
    32ca:	69 f0       	breq	.+26     	; 0x32e6 <_ZL9parseLinePc+0xda6>
    32cc:	0f c0       	rjmp	.+30     	; 0x32ec <_ZL9parseLinePc+0xdac>
				case iotcTimer0: TCCR0 &= ~(1 << COM01); break;
    32ce:	a3 b7       	in	r26, 0x33	; 51
    32d0:	af 7d       	andi	r26, 0xDF	; 223
    32d2:	a3 bf       	out	0x33, r26	; 51
    32d4:	0b c0       	rjmp	.+22     	; 0x32ec <_ZL9parseLinePc+0xdac>
				case iotcTimer1: TCCR1A &= ~(1 << COM1A1); break;
    32d6:	af b5       	in	r26, 0x2f	; 47
    32d8:	af 77       	andi	r26, 0x7F	; 127
    32da:	af bd       	out	0x2f, r26	; 47
    32dc:	07 c0       	rjmp	.+14     	; 0x32ec <_ZL9parseLinePc+0xdac>
				case iotcTimer2: TCCR2 &= ~(1 << COM21); break;
    32de:	a5 b5       	in	r26, 0x25	; 37
    32e0:	af 7d       	andi	r26, 0xDF	; 223
    32e2:	a5 bd       	out	0x25, r26	; 37
    32e4:	03 c0       	rjmp	.+6      	; 0x32ec <_ZL9parseLinePc+0xdac>
				case iotcTimer3: TCCR3A &= ~(1 << COM3A1); break;
    32e6:	a0 81       	ld	r26, Z
    32e8:	af 77       	andi	r26, 0x7F	; 127
    32ea:	a0 83       	st	Z, r26
    32ec:	d9 01       	movw	r26, r18
    32ee:	11 97       	sbiw	r26, 0x01	; 1
    32f0:	f1 f7       	brne	.-4      	; 0x32ee <_ZL9parseLinePc+0xdae>
				if(aData & iotcTopBit) {
					mark(iotcSamsungBitMark); space(iotcSamsungOneSpace);
				} else {
					mark(iotcSamsungBitMark); space(iotcSamsungZeroSpace);
				}
				aData <<= 1;
    32f2:	66 0f       	add	r22, r22
    32f4:	77 1f       	adc	r23, r23
    32f6:	88 1f       	adc	r24, r24
    32f8:	99 1f       	adc	r25, r25
    32fa:	41 50       	subi	r20, 0x01	; 1
    32fc:	51 09       	sbc	r21, r1
		void
		sendSamsung(unsigned long aData, int anBits) {
			enable(38);
			mark(iotcSamsungHdrMark);
			space(iotcSamsungHdrSpace);
			for(int i = 0; i < anBits; i++) {
    32fe:	41 15       	cp	r20, r1
    3300:	51 05       	cpc	r21, r1
    3302:	09 f0       	breq	.+2      	; 0x3306 <_ZL9parseLinePc+0xdc6>
    3304:	6a cf       	rjmp	.-300    	; 0x31da <_ZL9parseLinePc+0xc9a>
		void
		enablePWMOut() {
			// COMnA1:0 = 2 with WGMn3:0 = 10.
			// clear OCnA on compare match when up-counting.
			// set OCnA on compare match when down-counting.
			switch(iId) {
    3306:	e0 91 33 07 	lds	r30, 0x0733
    330a:	f0 91 34 07 	lds	r31, 0x0734
    330e:	80 81       	ld	r24, Z
    3310:	82 30       	cpi	r24, 0x02	; 2
    3312:	69 f0       	breq	.+26     	; 0x332e <_ZL9parseLinePc+0xdee>
    3314:	18 f4       	brcc	.+6      	; 0x331c <_ZL9parseLinePc+0xddc>
    3316:	81 30       	cpi	r24, 0x01	; 1
    3318:	31 f0       	breq	.+12     	; 0x3326 <_ZL9parseLinePc+0xde6>
    331a:	16 c0       	rjmp	.+44     	; 0x3348 <_ZL9parseLinePc+0xe08>
    331c:	83 30       	cpi	r24, 0x03	; 3
    331e:	59 f0       	breq	.+22     	; 0x3336 <_ZL9parseLinePc+0xdf6>
    3320:	84 30       	cpi	r24, 0x04	; 4
    3322:	69 f0       	breq	.+26     	; 0x333e <_ZL9parseLinePc+0xdfe>
    3324:	11 c0       	rjmp	.+34     	; 0x3348 <_ZL9parseLinePc+0xe08>
				case iotcTimer0: TCCR0 |= (1 << COM01); break;
    3326:	83 b7       	in	r24, 0x33	; 51
    3328:	80 62       	ori	r24, 0x20	; 32
    332a:	83 bf       	out	0x33, r24	; 51
    332c:	0d c0       	rjmp	.+26     	; 0x3348 <_ZL9parseLinePc+0xe08>
				case iotcTimer1: TCCR1A |= (1 << COM1A1); break;
    332e:	8f b5       	in	r24, 0x2f	; 47
    3330:	80 68       	ori	r24, 0x80	; 128
    3332:	8f bd       	out	0x2f, r24	; 47
    3334:	09 c0       	rjmp	.+18     	; 0x3348 <_ZL9parseLinePc+0xe08>
				case iotcTimer2: TCCR2 |= (1 << COM21); break;
    3336:	85 b5       	in	r24, 0x25	; 37
    3338:	80 62       	ori	r24, 0x20	; 32
    333a:	85 bd       	out	0x25, r24	; 37
    333c:	05 c0       	rjmp	.+10     	; 0x3348 <_ZL9parseLinePc+0xe08>
				case iotcTimer3: TCCR3A |= (1 << COM3A1); break;
    333e:	eb e8       	ldi	r30, 0x8B	; 139
    3340:	f0 e0       	ldi	r31, 0x00	; 0
    3342:	80 81       	ld	r24, Z
    3344:	80 68       	ori	r24, 0x80	; 128
    3346:	80 83       	st	Z, r24

			// busy wait
			__asm__ __volatile__ (
				"1: sbiw %0,1" "\n\t"					// 2 cycles
				"brne 1b" : "=w" (auSec) : "0" (auSec)	// 2 cycles
			);
    3348:	8a eb       	ldi	r24, 0xBA	; 186
    334a:	98 e0       	ldi	r25, 0x08	; 8
    334c:	01 97       	sbiw	r24, 0x01	; 1
    334e:	f1 f7       	brne	.-4      	; 0x334c <_ZL9parseLinePc+0xe0c>
		}
		void
		disablePWMOut() {
			// COMnA1:0 = 0 with WGM3:0 = 10.
			// OCnA disconnected.
			switch(iId) {
    3350:	e0 91 33 07 	lds	r30, 0x0733
    3354:	f0 91 34 07 	lds	r31, 0x0734
    3358:	80 81       	ld	r24, Z
    335a:	82 30       	cpi	r24, 0x02	; 2
    335c:	69 f0       	breq	.+26     	; 0x3378 <_ZL9parseLinePc+0xe38>
    335e:	18 f4       	brcc	.+6      	; 0x3366 <_ZL9parseLinePc+0xe26>
    3360:	81 30       	cpi	r24, 0x01	; 1
    3362:	31 f0       	breq	.+12     	; 0x3370 <_ZL9parseLinePc+0xe30>
    3364:	16 c0       	rjmp	.+44     	; 0x3392 <_ZL9parseLinePc+0xe52>
    3366:	83 30       	cpi	r24, 0x03	; 3
    3368:	59 f0       	breq	.+22     	; 0x3380 <_ZL9parseLinePc+0xe40>
    336a:	84 30       	cpi	r24, 0x04	; 4
    336c:	69 f0       	breq	.+26     	; 0x3388 <_ZL9parseLinePc+0xe48>
    336e:	11 c0       	rjmp	.+34     	; 0x3392 <_ZL9parseLinePc+0xe52>
				case iotcTimer0: TCCR0 &= ~(1 << COM01); break;
    3370:	83 b7       	in	r24, 0x33	; 51
    3372:	8f 7d       	andi	r24, 0xDF	; 223
    3374:	83 bf       	out	0x33, r24	; 51
    3376:	0d c0       	rjmp	.+26     	; 0x3392 <_ZL9parseLinePc+0xe52>
				case iotcTimer1: TCCR1A &= ~(1 << COM1A1); break;
    3378:	8f b5       	in	r24, 0x2f	; 47
    337a:	8f 77       	andi	r24, 0x7F	; 127
    337c:	8f bd       	out	0x2f, r24	; 47
    337e:	09 c0       	rjmp	.+18     	; 0x3392 <_ZL9parseLinePc+0xe52>
				case iotcTimer2: TCCR2 &= ~(1 << COM21); break;
    3380:	85 b5       	in	r24, 0x25	; 37
    3382:	8f 7d       	andi	r24, 0xDF	; 223
    3384:	85 bd       	out	0x25, r24	; 37
    3386:	05 c0       	rjmp	.+10     	; 0x3392 <_ZL9parseLinePc+0xe52>
				case iotcTimer3: TCCR3A &= ~(1 << COM3A1); break;
    3388:	eb e8       	ldi	r30, 0x8B	; 139
    338a:	f0 e0       	ldi	r31, 0x00	; 0
    338c:	80 81       	ld	r24, Z
    338e:	8f 77       	andi	r24, 0x7F	; 127
    3390:	80 83       	st	Z, r24
			}
		}
		void
		configure(iotTimerPsd aPsd, unsigned int aCount) {
			unsigned char	psd = 0;
			if(iId == iotcTimer0) {
    3392:	e0 91 35 07 	lds	r30, 0x0735
    3396:	f0 91 36 07 	lds	r31, 0x0736
					case iotcPsd256: psd = 4; break;
					case iotcPsd1024: psd = 5; break;
					default: return;
				}
			}
			switch(iId) {
    339a:	80 81       	ld	r24, Z
    339c:	82 30       	cpi	r24, 0x02	; 2
    339e:	79 f0       	breq	.+30     	; 0x33be <_ZL9parseLinePc+0xe7e>
    33a0:	18 f4       	brcc	.+6      	; 0x33a8 <_ZL9parseLinePc+0xe68>
    33a2:	81 30       	cpi	r24, 0x01	; 1
    33a4:	31 f0       	breq	.+12     	; 0x33b2 <_ZL9parseLinePc+0xe72>
    33a6:	2d c0       	rjmp	.+90     	; 0x3402 <_ZL9parseLinePc+0xec2>
    33a8:	83 30       	cpi	r24, 0x03	; 3
    33aa:	a1 f0       	breq	.+40     	; 0x33d4 <_ZL9parseLinePc+0xe94>
    33ac:	84 30       	cpi	r24, 0x04	; 4
    33ae:	c1 f0       	breq	.+48     	; 0x33e0 <_ZL9parseLinePc+0xea0>
    33b0:	28 c0       	rjmp	.+80     	; 0x3402 <_ZL9parseLinePc+0xec2>
				case iotcTimer0:
					TCNT0 = 0; OCR0 = aCount & 0xff;
    33b2:	12 be       	out	0x32, r1	; 50
    33b4:	80 e2       	ldi	r24, 0x20	; 32
    33b6:	81 bf       	out	0x31, r24	; 49
					TCCR0 = (1 << WGM01) | psd;
    33b8:	89 e0       	ldi	r24, 0x09	; 9
    33ba:	83 bf       	out	0x33, r24	; 51
    33bc:	22 c0       	rjmp	.+68     	; 0x3402 <_ZL9parseLinePc+0xec2>
					break;
				case iotcTimer1:
					TCCR1A = 0; TCCR1B = 0; TCNT1 = 0; OCR1A = aCount;
    33be:	1f bc       	out	0x2f, r1	; 47
    33c0:	1e bc       	out	0x2e, r1	; 46
    33c2:	1d bc       	out	0x2d, r1	; 45
    33c4:	1c bc       	out	0x2c, r1	; 44
    33c6:	80 e2       	ldi	r24, 0x20	; 32
    33c8:	93 e0       	ldi	r25, 0x03	; 3
    33ca:	9b bd       	out	0x2b, r25	; 43
    33cc:	8a bd       	out	0x2a, r24	; 42
					TCCR1B = (1 << WGM12) | psd;
    33ce:	89 e0       	ldi	r24, 0x09	; 9
    33d0:	8e bd       	out	0x2e, r24	; 46
    33d2:	17 c0       	rjmp	.+46     	; 0x3402 <_ZL9parseLinePc+0xec2>
					break;
				case iotcTimer2:
					TCNT2 = 0; OCR2 = aCount & 0xff;
    33d4:	14 bc       	out	0x24, r1	; 36
    33d6:	80 e2       	ldi	r24, 0x20	; 32
    33d8:	83 bd       	out	0x23, r24	; 35
					TCCR2 = (1 << WGM21) | psd;
    33da:	89 e0       	ldi	r24, 0x09	; 9
    33dc:	85 bd       	out	0x25, r24	; 37
    33de:	11 c0       	rjmp	.+34     	; 0x3402 <_ZL9parseLinePc+0xec2>
					break;
				case iotcTimer3:
					TCCR3A = 0; TCCR3B = 0; TCNT3 = 0; OCR3A = aCount;
    33e0:	10 92 8b 00 	sts	0x008B, r1
    33e4:	ea e8       	ldi	r30, 0x8A	; 138
    33e6:	f0 e0       	ldi	r31, 0x00	; 0
    33e8:	10 82       	st	Z, r1
    33ea:	10 92 89 00 	sts	0x0089, r1
    33ee:	10 92 88 00 	sts	0x0088, r1
    33f2:	80 e2       	ldi	r24, 0x20	; 32
    33f4:	93 e0       	ldi	r25, 0x03	; 3
    33f6:	90 93 87 00 	sts	0x0087, r25
    33fa:	80 93 86 00 	sts	0x0086, r24
					TCCR3B = (1 << WGM32) | psd;
    33fe:	89 e0       	ldi	r24, 0x09	; 9
    3400:	80 83       	st	Z, r24
		void
		enable() {
			iTimer->configure(iotTimer::iotcPsd1,
				F_CPU * iotcIrUSecPerTick / 1000000);

			iDecoder->iVendor = iotcUnknown;
    3402:	e0 91 37 07 	lds	r30, 0x0737
    3406:	f0 91 38 07 	lds	r31, 0x0738
    340a:	10 82       	st	Z, r1
			iDecoder->iState = iotcIrStateIdle;
    340c:	e0 91 37 07 	lds	r30, 0x0737
    3410:	f0 91 38 07 	lds	r31, 0x0738
    3414:	11 82       	std	Z+1, r1	; 0x01
			iDecoder->inIntervals = 0;
    3416:	e0 91 37 07 	lds	r30, 0x0737
    341a:	f0 91 38 07 	lds	r31, 0x0738
    341e:	12 82       	std	Z+2, r1	; 0x02
			iDecoder->iTimer = 0;
    3420:	e5 53       	subi	r30, 0x35	; 53
    3422:	ff 4f       	sbci	r31, 0xFF	; 255
    3424:	11 82       	std	Z+1, r1	; 0x01
    3426:	10 82       	st	Z, r1
					iCallback3 = (void (*)(void)) NULL; break;
				default: break;
			}
			iId = iotcTimerNone;
		}
		iotTimerId getId()		{ return(iId); }
    3428:	e0 91 35 07 	lds	r30, 0x0735
    342c:	f0 91 36 07 	lds	r31, 0x0736

			// set pin direction to input.
			if(iTimer->getId() == iotTimer::iotcTimer1) DDRB &= ~(1 << PB4);
    3430:	80 81       	ld	r24, Z
    3432:	82 30       	cpi	r24, 0x02	; 2
    3434:	11 f4       	brne	.+4      	; 0x343a <_ZL9parseLinePc+0xefa>
    3436:	bc 98       	cbi	0x17, 4	; 23
    3438:	01 c0       	rjmp	.+2      	; 0x343c <_ZL9parseLinePc+0xefc>
			else DDRE &= ~(1 << PE2);	// iotTimer::iotcTimer3
    343a:	12 98       	cbi	0x02, 2	; 2
				default: return;
			}
		}
		void
		enableInterrupt(void (* aCallback) (void)) {
			switch(iId) {
    343c:	e0 91 35 07 	lds	r30, 0x0735
    3440:	f0 91 36 07 	lds	r31, 0x0736
    3444:	80 81       	ld	r24, Z
    3446:	82 30       	cpi	r24, 0x02	; 2
    3448:	99 f0       	breq	.+38     	; 0x3470 <_ZL9parseLinePc+0xf30>
    344a:	18 f4       	brcc	.+6      	; 0x3452 <_ZL9parseLinePc+0xf12>
    344c:	81 30       	cpi	r24, 0x01	; 1
    344e:	31 f0       	breq	.+12     	; 0x345c <_ZL9parseLinePc+0xf1c>
    3450:	2e c0       	rjmp	.+92     	; 0x34ae <_ZL9parseLinePc+0xf6e>
    3452:	83 30       	cpi	r24, 0x03	; 3
    3454:	b9 f0       	breq	.+46     	; 0x3484 <_ZL9parseLinePc+0xf44>
    3456:	84 30       	cpi	r24, 0x04	; 4
    3458:	f9 f0       	breq	.+62     	; 0x3498 <_ZL9parseLinePc+0xf58>
    345a:	29 c0       	rjmp	.+82     	; 0x34ae <_ZL9parseLinePc+0xf6e>
				case iotcTimer0:
					iCallback0 = aCallback; TIMSK |= (1 << OCIE0); break;
    345c:	83 ec       	ldi	r24, 0xC3	; 195
    345e:	94 e0       	ldi	r25, 0x04	; 4
    3460:	90 93 32 07 	sts	0x0732, r25
    3464:	80 93 31 07 	sts	0x0731, r24
    3468:	87 b7       	in	r24, 0x37	; 55
    346a:	82 60       	ori	r24, 0x02	; 2
    346c:	87 bf       	out	0x37, r24	; 55
    346e:	1f c0       	rjmp	.+62     	; 0x34ae <_ZL9parseLinePc+0xf6e>
				case iotcTimer1:
					iCallback1 = aCallback; TIMSK |= (1 << OCIE1A); break;
    3470:	83 ec       	ldi	r24, 0xC3	; 195
    3472:	94 e0       	ldi	r25, 0x04	; 4
    3474:	90 93 30 07 	sts	0x0730, r25
    3478:	80 93 2f 07 	sts	0x072F, r24
    347c:	87 b7       	in	r24, 0x37	; 55
    347e:	80 61       	ori	r24, 0x10	; 16
    3480:	87 bf       	out	0x37, r24	; 55
    3482:	15 c0       	rjmp	.+42     	; 0x34ae <_ZL9parseLinePc+0xf6e>
				case iotcTimer2:
					iCallback2 = aCallback; TIMSK |= (1 << OCIE2); break;
    3484:	83 ec       	ldi	r24, 0xC3	; 195
    3486:	94 e0       	ldi	r25, 0x04	; 4
    3488:	90 93 2e 07 	sts	0x072E, r25
    348c:	80 93 2d 07 	sts	0x072D, r24
    3490:	87 b7       	in	r24, 0x37	; 55
    3492:	80 68       	ori	r24, 0x80	; 128
    3494:	87 bf       	out	0x37, r24	; 55
    3496:	0b c0       	rjmp	.+22     	; 0x34ae <_ZL9parseLinePc+0xf6e>
				case iotcTimer3:
					iCallback3 = aCallback; ETIMSK |= (1 << OCIE3A); break;
    3498:	83 ec       	ldi	r24, 0xC3	; 195
    349a:	94 e0       	ldi	r25, 0x04	; 4
    349c:	90 93 2c 07 	sts	0x072C, r25
    34a0:	80 93 2b 07 	sts	0x072B, r24
    34a4:	ed e7       	ldi	r30, 0x7D	; 125
    34a6:	f0 e0       	ldi	r31, 0x00	; 0
    34a8:	80 81       	ld	r24, Z
    34aa:	80 61       	ori	r24, 0x10	; 16
    34ac:	80 83       	st	Z, r24
		IrRecv->enable();
		sei();
    34ae:	78 94       	sei
		
		//printf("number1\n");
		//switch로 나누기
		CharLcd->print(2, 1, "tx: tv   ");	// 추후에 수정
    34b0:	20 91 4a 07 	lds	r18, 0x074A
    34b4:	30 91 4b 07 	lds	r19, 0x074B
    34b8:	0f 2e       	mov	r0, r31
    34ba:	f1 ef       	ldi	r31, 0xF1	; 241
    34bc:	ef 2e       	mov	r14, r31
    34be:	f1 e0       	ldi	r31, 0x01	; 1
    34c0:	ff 2e       	mov	r15, r31
    34c2:	f0 2d       	mov	r31, r0
    34c4:	aa 24       	eor	r10, r10
    34c6:	a3 94       	inc	r10
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    34c8:	f9 01       	movw	r30, r18
    34ca:	e4 5d       	subi	r30, 0xD4	; 212
    34cc:	fe 4f       	sbci	r31, 0xFE	; 254
    34ce:	69 01       	movw	r12, r18
    34d0:	b3 ed       	ldi	r27, 0xD3	; 211
    34d2:	cb 1a       	sub	r12, r27
    34d4:	be ef       	ldi	r27, 0xFE	; 254
    34d6:	db 0a       	sbc	r13, r27
    34d8:	04 e6       	ldi	r16, 0x64	; 100
    34da:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    34dc:	42 e0       	ldi	r20, 0x02	; 2
    34de:	2b c0       	rjmp	.+86     	; 0x3536 <_ZL9parseLinePc+0xff6>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    34e0:	bb 24       	eor	r11, r11
    34e2:	b3 94       	inc	r11
    34e4:	ba 0c       	add	r11, r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    34e6:	80 81       	ld	r24, Z
    34e8:	d6 01       	movw	r26, r12
    34ea:	8c 90       	ld	r8, X
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	01 96       	adiw	r24, 0x01	; 1
    34f0:	b8 01       	movw	r22, r16
    34f2:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    34f6:	68 2d       	mov	r22, r8
    34f8:	70 e0       	ldi	r23, 0x00	; 0
    34fa:	86 17       	cp	r24, r22
    34fc:	97 07       	cpc	r25, r23
    34fe:	d1 f0       	breq	.+52     	; 0x3534 <_ZL9parseLinePc+0xff4>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    3500:	80 81       	ld	r24, Z
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	bc 01       	movw	r22, r24
    3506:	66 0f       	add	r22, r22
    3508:	77 1f       	adc	r23, r23
    350a:	86 0f       	add	r24, r22
    350c:	97 1f       	adc	r25, r23
    350e:	d9 01       	movw	r26, r18
    3510:	a8 0f       	add	r26, r24
    3512:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    3514:	ac 92       	st	X, r10
    3516:	11 96       	adiw	r26, 0x01	; 1
    3518:	4c 93       	st	X, r20
    351a:	11 97       	sbiw	r26, 0x01	; 1
    351c:	12 96       	adiw	r26, 0x02	; 2
    351e:	9c 92       	st	X, r9

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    3520:	af b6       	in	r10, 0x3f	; 63
    3522:	f8 94       	cli
    3524:	80 81       	ld	r24, Z
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	01 96       	adiw	r24, 0x01	; 1
    352a:	b8 01       	movw	r22, r16
    352c:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    3530:	80 83       	st	Z, r24
    3532:	af be       	out	0x3f, r10	; 63

			// busy wait
			__asm__ __volatile__ (
				"1: sbiw %0,1" "\n\t"					// 2 cycles
				"brne 1b" : "=w" (auSec) : "0" (auSec)	// 2 cycles
			);
    3534:	ab 2c       	mov	r10, r11
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    3536:	d7 01       	movw	r26, r14
    3538:	9d 90       	ld	r9, X+
    353a:	7d 01       	movw	r14, r26
    353c:	91 10       	cpse	r9, r1
    353e:	d0 cf       	rjmp	.-96     	; 0x34e0 <_ZL9parseLinePc+0xfa0>
    3540:	3b c0       	rjmp	.+118    	; 0x35b8 <_ZL9parseLinePc+0x1078>
		return;
	}
	
	printf("unknown\n");
    3542:	81 e7       	ldi	r24, 0x71	; 113
    3544:	92 e0       	ldi	r25, 0x02	; 2
    3546:	0e 94 91 34 	call	0x6922	; 0x6922 <puts>
    354a:	36 c0       	rjmp	.+108    	; 0x35b8 <_ZL9parseLinePc+0x1078>
		getAngle(void) {	// in degree
			return (iAngle - iotcServoTicksAtZero) * iotcServoDeltaDegree;
		}
		static bool
		parseLine(char *s) {
			if(strncmp(s, "servo", 5) == 0) {
    354c:	45 e0       	ldi	r20, 0x05	; 5
    354e:	50 e0       	ldi	r21, 0x00	; 0
    3550:	69 e7       	ldi	r22, 0x79	; 121
    3552:	72 e0       	ldi	r23, 0x02	; 2
    3554:	c3 01       	movw	r24, r6
    3556:	0e 94 20 34 	call	0x6840	; 0x6840 <strncmp>
    355a:	89 2b       	or	r24, r25
    355c:	09 f4       	brne	.+2      	; 0x3560 <_ZL9parseLinePc+0x1020>
    355e:	b0 cb       	rjmp	.-2208   	; 0x2cc0 <_ZL9parseLinePc+0x780>
		iPinMask = iotPin::getPinMask(pin);
		*ipPort |= ~iPinMask;
	}
	static bool
	parseLine(char *s) {
		if(strncmp(s, "led", 3) == 0) {
    3560:	43 e0       	ldi	r20, 0x03	; 3
    3562:	50 e0       	ldi	r21, 0x00	; 0
    3564:	62 e8       	ldi	r22, 0x82	; 130
    3566:	72 e0       	ldi	r23, 0x02	; 2
    3568:	c3 01       	movw	r24, r6
    356a:	0e 94 20 34 	call	0x6840	; 0x6840 <strncmp>
    356e:	89 2b       	or	r24, r25
    3570:	09 f4       	brne	.+2      	; 0x3574 <_ZL9parseLinePc+0x1034>
    3572:	08 cc       	rjmp	.-2032   	; 0x2d84 <_ZL9parseLinePc+0x844>
	iPinMask = iotPin::getPinMask(pin);
	*ipPort |= ~iPinMask;
}
static bool
parseLine(char *s) {
	if(strncmp(s, "subled", 6) == 0) {
    3574:	46 e0       	ldi	r20, 0x06	; 6
    3576:	50 e0       	ldi	r21, 0x00	; 0
    3578:	6f e7       	ldi	r22, 0x7F	; 127
    357a:	72 e0       	ldi	r23, 0x02	; 2
    357c:	c3 01       	movw	r24, r6
    357e:	0e 94 20 34 	call	0x6840	; 0x6840 <strncmp>
    3582:	89 2b       	or	r24, r25
    3584:	09 f4       	brne	.+2      	; 0x3588 <_ZL9parseLinePc+0x1048>
    3586:	34 cc       	rjmp	.-1944   	; 0x2df0 <_ZL9parseLinePc+0x8b0>
	if(iotServo::parseLine(s)) return;
	if(iotLed::parseLine(s)) return;
	if(iotSubLed::parseLine(s)) return;
	
	
	if(iotClock::parseLine(s)) return;
    3588:	c3 01       	movw	r24, r6
    358a:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <_ZN8iotClock9parseLineEPc>
    358e:	81 11       	cpse	r24, r1
    3590:	13 c0       	rjmp	.+38     	; 0x35b8 <_ZL9parseLinePc+0x1078>
    3592:	64 cc       	rjmp	.-1848   	; 0x2e5c <_ZL9parseLinePc+0x91c>
	//if(iotDustSensor::parseLine(s)) return;
	
	if(parseFan(s)) return;
	
	if(strncmp(s, "0x", 2) == 0) {
    3594:	42 e0       	ldi	r20, 0x02	; 2
    3596:	50 e0       	ldi	r21, 0x00	; 0
    3598:	66 e8       	ldi	r22, 0x86	; 134
    359a:	72 e0       	ldi	r23, 0x02	; 2
    359c:	c3 01       	movw	r24, r6
    359e:	0e 94 20 34 	call	0x6840	; 0x6840 <strncmp>
    35a2:	89 2b       	or	r24, r25
    35a4:	71 f6       	brne	.-100    	; 0x3542 <_ZL9parseLinePc+0x1002>
    35a6:	67 cd       	rjmp	.-1330   	; 0x3076 <_ZL9parseLinePc+0xb36>
		static iotDhtTrigger	iTrigger[iotcDhtMaxTrigger];
		
		static int8_t
		allocTrigger() {
			int8_t	i;
			for(i = 0; i < iotcDhtMaxTrigger; i++) {
    35a8:	81 e0       	ldi	r24, 0x01	; 1
    35aa:	01 c0       	rjmp	.+2      	; 0x35ae <_ZL9parseLinePc+0x106e>
    35ac:	82 e0       	ldi	r24, 0x02	; 2
				else if(*s == '>') rel = iotcDhtGreaterThan;
				else goto syntaxError;
				val = getFloat(&s, &err);
				if(err) goto syntaxError;
				while(isspace(*s)) s++;
				if((n = allocTrigger()) < 0) goto syntaxError;
    35ae:	e8 2e       	mov	r14, r24
    35b0:	ff 24       	eor	r15, r15
    35b2:	e7 fc       	sbrc	r14, 7
    35b4:	f0 94       	com	r15
    35b6:	49 cb       	rjmp	.-2414   	; 0x2c4a <_ZL9parseLinePc+0x70a>
		CharLcd->print(2, 1, "tx: tv   ");	// 추후에 수정
		return;
	}
	
	printf("unknown\n");
}
    35b8:	60 96       	adiw	r28, 0x10	; 16
    35ba:	0f b6       	in	r0, 0x3f	; 63
    35bc:	f8 94       	cli
    35be:	de bf       	out	0x3e, r29	; 62
    35c0:	0f be       	out	0x3f, r0	; 63
    35c2:	cd bf       	out	0x3d, r28	; 61
    35c4:	df 91       	pop	r29
    35c6:	cf 91       	pop	r28
    35c8:	1f 91       	pop	r17
    35ca:	0f 91       	pop	r16
    35cc:	ff 90       	pop	r15
    35ce:	ef 90       	pop	r14
    35d0:	df 90       	pop	r13
    35d2:	cf 90       	pop	r12
    35d4:	bf 90       	pop	r11
    35d6:	af 90       	pop	r10
    35d8:	9f 90       	pop	r9
    35da:	8f 90       	pop	r8
    35dc:	7f 90       	pop	r7
    35de:	6f 90       	pop	r6
    35e0:	5f 90       	pop	r5
    35e2:	4f 90       	pop	r4
    35e4:	3f 90       	pop	r3
    35e6:	2f 90       	pop	r2
    35e8:	08 95       	ret

000035ea <_ZN13iotIrReceiver6enableEv>:
			}
		}
		void
		configure(iotTimerPsd aPsd, unsigned int aCount) {
			unsigned char	psd = 0;
			if(iId == iotcTimer0) {
    35ea:	e0 91 35 07 	lds	r30, 0x0735
    35ee:	f0 91 36 07 	lds	r31, 0x0736
					case iotcPsd256: psd = 4; break;
					case iotcPsd1024: psd = 5; break;
					default: return;
				}
			}
			switch(iId) {
    35f2:	80 81       	ld	r24, Z
    35f4:	82 30       	cpi	r24, 0x02	; 2
    35f6:	79 f0       	breq	.+30     	; 0x3616 <_ZN13iotIrReceiver6enableEv+0x2c>
    35f8:	18 f4       	brcc	.+6      	; 0x3600 <_ZN13iotIrReceiver6enableEv+0x16>
    35fa:	81 30       	cpi	r24, 0x01	; 1
    35fc:	31 f0       	breq	.+12     	; 0x360a <_ZN13iotIrReceiver6enableEv+0x20>
    35fe:	2d c0       	rjmp	.+90     	; 0x365a <_ZN13iotIrReceiver6enableEv+0x70>
    3600:	83 30       	cpi	r24, 0x03	; 3
    3602:	a1 f0       	breq	.+40     	; 0x362c <_ZN13iotIrReceiver6enableEv+0x42>
    3604:	84 30       	cpi	r24, 0x04	; 4
    3606:	c1 f0       	breq	.+48     	; 0x3638 <_ZN13iotIrReceiver6enableEv+0x4e>
    3608:	28 c0       	rjmp	.+80     	; 0x365a <_ZN13iotIrReceiver6enableEv+0x70>
				case iotcTimer0:
					TCNT0 = 0; OCR0 = aCount & 0xff;
    360a:	12 be       	out	0x32, r1	; 50
    360c:	80 e2       	ldi	r24, 0x20	; 32
    360e:	81 bf       	out	0x31, r24	; 49
					TCCR0 = (1 << WGM01) | psd;
    3610:	89 e0       	ldi	r24, 0x09	; 9
    3612:	83 bf       	out	0x33, r24	; 51
    3614:	22 c0       	rjmp	.+68     	; 0x365a <_ZN13iotIrReceiver6enableEv+0x70>
					break;
				case iotcTimer1:
					TCCR1A = 0; TCCR1B = 0; TCNT1 = 0; OCR1A = aCount;
    3616:	1f bc       	out	0x2f, r1	; 47
    3618:	1e bc       	out	0x2e, r1	; 46
    361a:	1d bc       	out	0x2d, r1	; 45
    361c:	1c bc       	out	0x2c, r1	; 44
    361e:	80 e2       	ldi	r24, 0x20	; 32
    3620:	93 e0       	ldi	r25, 0x03	; 3
    3622:	9b bd       	out	0x2b, r25	; 43
    3624:	8a bd       	out	0x2a, r24	; 42
					TCCR1B = (1 << WGM12) | psd;
    3626:	89 e0       	ldi	r24, 0x09	; 9
    3628:	8e bd       	out	0x2e, r24	; 46
    362a:	17 c0       	rjmp	.+46     	; 0x365a <_ZN13iotIrReceiver6enableEv+0x70>
					break;
				case iotcTimer2:
					TCNT2 = 0; OCR2 = aCount & 0xff;
    362c:	14 bc       	out	0x24, r1	; 36
    362e:	80 e2       	ldi	r24, 0x20	; 32
    3630:	83 bd       	out	0x23, r24	; 35
					TCCR2 = (1 << WGM21) | psd;
    3632:	89 e0       	ldi	r24, 0x09	; 9
    3634:	85 bd       	out	0x25, r24	; 37
    3636:	11 c0       	rjmp	.+34     	; 0x365a <_ZN13iotIrReceiver6enableEv+0x70>
					break;
				case iotcTimer3:
					TCCR3A = 0; TCCR3B = 0; TCNT3 = 0; OCR3A = aCount;
    3638:	10 92 8b 00 	sts	0x008B, r1
    363c:	ea e8       	ldi	r30, 0x8A	; 138
    363e:	f0 e0       	ldi	r31, 0x00	; 0
    3640:	10 82       	st	Z, r1
    3642:	10 92 89 00 	sts	0x0089, r1
    3646:	10 92 88 00 	sts	0x0088, r1
    364a:	80 e2       	ldi	r24, 0x20	; 32
    364c:	93 e0       	ldi	r25, 0x03	; 3
    364e:	90 93 87 00 	sts	0x0087, r25
    3652:	80 93 86 00 	sts	0x0086, r24
					TCCR3B = (1 << WGM32) | psd;
    3656:	89 e0       	ldi	r24, 0x09	; 9
    3658:	80 83       	st	Z, r24
		void
		enable() {
			iTimer->configure(iotTimer::iotcPsd1,
				F_CPU * iotcIrUSecPerTick / 1000000);

			iDecoder->iVendor = iotcUnknown;
    365a:	e0 91 37 07 	lds	r30, 0x0737
    365e:	f0 91 38 07 	lds	r31, 0x0738
    3662:	10 82       	st	Z, r1
			iDecoder->iState = iotcIrStateIdle;
    3664:	e0 91 37 07 	lds	r30, 0x0737
    3668:	f0 91 38 07 	lds	r31, 0x0738
    366c:	11 82       	std	Z+1, r1	; 0x01
			iDecoder->inIntervals = 0;
    366e:	e0 91 37 07 	lds	r30, 0x0737
    3672:	f0 91 38 07 	lds	r31, 0x0738
    3676:	12 82       	std	Z+2, r1	; 0x02
			iDecoder->iTimer = 0;
    3678:	e5 53       	subi	r30, 0x35	; 53
    367a:	ff 4f       	sbci	r31, 0xFF	; 255
    367c:	11 82       	std	Z+1, r1	; 0x01
    367e:	10 82       	st	Z, r1
					iCallback3 = (void (*)(void)) NULL; break;
				default: break;
			}
			iId = iotcTimerNone;
		}
		iotTimerId getId()		{ return(iId); }
    3680:	e0 91 35 07 	lds	r30, 0x0735
    3684:	f0 91 36 07 	lds	r31, 0x0736

			// set pin direction to input.
			if(iTimer->getId() == iotTimer::iotcTimer1) DDRB &= ~(1 << PB4);
    3688:	80 81       	ld	r24, Z
    368a:	82 30       	cpi	r24, 0x02	; 2
    368c:	11 f4       	brne	.+4      	; 0x3692 <_ZN13iotIrReceiver6enableEv+0xa8>
    368e:	bc 98       	cbi	0x17, 4	; 23
    3690:	01 c0       	rjmp	.+2      	; 0x3694 <_ZN13iotIrReceiver6enableEv+0xaa>
			else DDRE &= ~(1 << PE2);	// iotTimer::iotcTimer3
    3692:	12 98       	cbi	0x02, 2	; 2
				default: return;
			}
		}
		void
		enableInterrupt(void (* aCallback) (void)) {
			switch(iId) {
    3694:	e0 91 35 07 	lds	r30, 0x0735
    3698:	f0 91 36 07 	lds	r31, 0x0736
    369c:	80 81       	ld	r24, Z
    369e:	82 30       	cpi	r24, 0x02	; 2
    36a0:	99 f0       	breq	.+38     	; 0x36c8 <_ZN13iotIrReceiver6enableEv+0xde>
    36a2:	18 f4       	brcc	.+6      	; 0x36aa <_ZN13iotIrReceiver6enableEv+0xc0>
    36a4:	81 30       	cpi	r24, 0x01	; 1
    36a6:	31 f0       	breq	.+12     	; 0x36b4 <_ZN13iotIrReceiver6enableEv+0xca>
    36a8:	08 95       	ret
    36aa:	83 30       	cpi	r24, 0x03	; 3
    36ac:	b9 f0       	breq	.+46     	; 0x36dc <_ZN13iotIrReceiver6enableEv+0xf2>
    36ae:	84 30       	cpi	r24, 0x04	; 4
    36b0:	f9 f0       	breq	.+62     	; 0x36f0 <_ZN13iotIrReceiver6enableEv+0x106>
    36b2:	08 95       	ret
				case iotcTimer0:
					iCallback0 = aCallback; TIMSK |= (1 << OCIE0); break;
    36b4:	83 ec       	ldi	r24, 0xC3	; 195
    36b6:	94 e0       	ldi	r25, 0x04	; 4
    36b8:	90 93 32 07 	sts	0x0732, r25
    36bc:	80 93 31 07 	sts	0x0731, r24
    36c0:	87 b7       	in	r24, 0x37	; 55
    36c2:	82 60       	ori	r24, 0x02	; 2
    36c4:	87 bf       	out	0x37, r24	; 55
    36c6:	08 95       	ret
				case iotcTimer1:
					iCallback1 = aCallback; TIMSK |= (1 << OCIE1A); break;
    36c8:	83 ec       	ldi	r24, 0xC3	; 195
    36ca:	94 e0       	ldi	r25, 0x04	; 4
    36cc:	90 93 30 07 	sts	0x0730, r25
    36d0:	80 93 2f 07 	sts	0x072F, r24
    36d4:	87 b7       	in	r24, 0x37	; 55
    36d6:	80 61       	ori	r24, 0x10	; 16
    36d8:	87 bf       	out	0x37, r24	; 55
    36da:	08 95       	ret
				case iotcTimer2:
					iCallback2 = aCallback; TIMSK |= (1 << OCIE2); break;
    36dc:	83 ec       	ldi	r24, 0xC3	; 195
    36de:	94 e0       	ldi	r25, 0x04	; 4
    36e0:	90 93 2e 07 	sts	0x072E, r25
    36e4:	80 93 2d 07 	sts	0x072D, r24
    36e8:	87 b7       	in	r24, 0x37	; 55
    36ea:	80 68       	ori	r24, 0x80	; 128
    36ec:	87 bf       	out	0x37, r24	; 55
    36ee:	08 95       	ret
				case iotcTimer3:
					iCallback3 = aCallback; ETIMSK |= (1 << OCIE3A); break;
    36f0:	83 ec       	ldi	r24, 0xC3	; 195
    36f2:	94 e0       	ldi	r25, 0x04	; 4
    36f4:	90 93 2c 07 	sts	0x072C, r25
    36f8:	80 93 2b 07 	sts	0x072B, r24
    36fc:	ed e7       	ldi	r30, 0x7D	; 125
    36fe:	f0 e0       	ldi	r31, 0x00	; 0
    3700:	80 81       	ld	r24, Z
    3702:	80 61       	ori	r24, 0x10	; 16
    3704:	80 83       	st	Z, r24
    3706:	08 95       	ret

00003708 <main>:
//-----------------------------------------------------------------------------
//	main -
//-----------------------------------------------------------------------------
int
main(void)
{
    3708:	cf 93       	push	r28
    370a:	df 93       	push	r29
    370c:	cd b7       	in	r28, 0x3d	; 61
    370e:	de b7       	in	r29, 0x3e	; 62
    3710:	c0 55       	subi	r28, 0x50	; 80
    3712:	d1 09       	sbc	r29, r1
    3714:	0f b6       	in	r0, 0x3f	; 63
    3716:	f8 94       	cli
    3718:	de bf       	out	0x3e, r29	; 62
    371a:	0f be       	out	0x3f, r0	; 63
    371c:	cd bf       	out	0x3d, r28	; 61
	cli();
    371e:	f8 94       	cli
class iotClock {
	public:
		static void
		init(iotTimer::iotTimerId tid, long sec, iotCharLcd *clcd, uint8_t row)
		{
			iSeconds = sec; iRow = row;
    3720:	80 e4       	ldi	r24, 0x40	; 64
    3722:	93 ed       	ldi	r25, 0xD3	; 211
    3724:	ac ed       	ldi	r26, 0xDC	; 220
    3726:	b0 e0       	ldi	r27, 0x00	; 0
    3728:	80 93 2e 05 	sts	0x052E, r24
    372c:	90 93 2f 05 	sts	0x052F, r25
    3730:	a0 93 30 05 	sts	0x0530, r26
    3734:	b0 93 31 05 	sts	0x0531, r27
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	80 93 2d 01 	sts	0x012D, r24
			iTimer = new iotTimer(tid, iotTimer::iotcPsd1024, 15625);
    373e:	81 e0       	ldi	r24, 0x01	; 1
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Znwj>
    3746:	fc 01       	movw	r30, r24
		typedef enum {		// 32 & 128 only for 8-bit counters 0 & 2.
			iotcPsdNo, iotcPsd1, iotcPsd8, iotcPsd32, iotcPsd64, iotcPsd128,
			iotcPsd256, iotcPsd1024
		} iotTimerPsd;
		iotTimer(iotTimerId aId, iotTimerPsd aPsd, unsigned int aCount) {
			iId = iotcTimerNone;
    3748:	10 82       	st	Z, r1
					if((TCCR2 & 0x07) != 0) return;
					TCNT2 = 0; OCR2 = aCount & 0xff;
					TCCR2 = (TCCR2 & ~(0x07)) | (1 << WGM21) | psd;
					break;
				case iotcTimer3:
					if((TCCR3B & 0x07) != 0) return;
    374a:	80 91 8a 00 	lds	r24, 0x008A
    374e:	87 70       	andi	r24, 0x07	; 7
    3750:	a1 f4       	brne	.+40     	; 0x377a <main+0x72>
					TCNT3 = 0; OCR3A = aCount; TCCR3A = 0;
    3752:	10 92 89 00 	sts	0x0089, r1
    3756:	10 92 88 00 	sts	0x0088, r1
    375a:	89 e0       	ldi	r24, 0x09	; 9
    375c:	9d e3       	ldi	r25, 0x3D	; 61
    375e:	90 93 87 00 	sts	0x0087, r25
    3762:	80 93 86 00 	sts	0x0086, r24
    3766:	10 92 8b 00 	sts	0x008B, r1
					TCCR3B = (TCCR3B & ~(0x07)) | (1 << WGM32) | psd;
    376a:	aa e8       	ldi	r26, 0x8A	; 138
    376c:	b0 e0       	ldi	r27, 0x00	; 0
    376e:	8c 91       	ld	r24, X
    3770:	80 7f       	andi	r24, 0xF0	; 240
    3772:	8d 60       	ori	r24, 0x0D	; 13
    3774:	8c 93       	st	X, r24
					break;
				default: return;
			}
			iId = aId;
    3776:	84 e0       	ldi	r24, 0x04	; 4
    3778:	80 83       	st	Z, r24
	public:
		static void
		init(iotTimer::iotTimerId tid, long sec, iotCharLcd *clcd, uint8_t row)
		{
			iSeconds = sec; iRow = row;
			iTimer = new iotTimer(tid, iotTimer::iotcPsd1024, 15625);
    377a:	f0 93 33 05 	sts	0x0533, r31
    377e:	e0 93 32 05 	sts	0x0532, r30
				default: return;
			}
		}
		void
		enableInterrupt(void (* aCallback) (void)) {
			switch(iId) {
    3782:	80 81       	ld	r24, Z
    3784:	82 30       	cpi	r24, 0x02	; 2
    3786:	99 f0       	breq	.+38     	; 0x37ae <main+0xa6>
    3788:	18 f4       	brcc	.+6      	; 0x3790 <main+0x88>
    378a:	81 30       	cpi	r24, 0x01	; 1
    378c:	31 f0       	breq	.+12     	; 0x379a <main+0x92>
    378e:	2e c0       	rjmp	.+92     	; 0x37ec <main+0xe4>
    3790:	83 30       	cpi	r24, 0x03	; 3
    3792:	b9 f0       	breq	.+46     	; 0x37c2 <main+0xba>
    3794:	84 30       	cpi	r24, 0x04	; 4
    3796:	f9 f0       	breq	.+62     	; 0x37d6 <main+0xce>
    3798:	29 c0       	rjmp	.+82     	; 0x37ec <main+0xe4>
				case iotcTimer0:
					iCallback0 = aCallback; TIMSK |= (1 << OCIE0); break;
    379a:	8b e9       	ldi	r24, 0x9B	; 155
    379c:	94 e0       	ldi	r25, 0x04	; 4
    379e:	90 93 32 07 	sts	0x0732, r25
    37a2:	80 93 31 07 	sts	0x0731, r24
    37a6:	87 b7       	in	r24, 0x37	; 55
    37a8:	82 60       	ori	r24, 0x02	; 2
    37aa:	87 bf       	out	0x37, r24	; 55
    37ac:	1f c0       	rjmp	.+62     	; 0x37ec <main+0xe4>
				case iotcTimer1:
					iCallback1 = aCallback; TIMSK |= (1 << OCIE1A); break;
    37ae:	8b e9       	ldi	r24, 0x9B	; 155
    37b0:	94 e0       	ldi	r25, 0x04	; 4
    37b2:	90 93 30 07 	sts	0x0730, r25
    37b6:	80 93 2f 07 	sts	0x072F, r24
    37ba:	87 b7       	in	r24, 0x37	; 55
    37bc:	80 61       	ori	r24, 0x10	; 16
    37be:	87 bf       	out	0x37, r24	; 55
    37c0:	15 c0       	rjmp	.+42     	; 0x37ec <main+0xe4>
				case iotcTimer2:
					iCallback2 = aCallback; TIMSK |= (1 << OCIE2); break;
    37c2:	8b e9       	ldi	r24, 0x9B	; 155
    37c4:	94 e0       	ldi	r25, 0x04	; 4
    37c6:	90 93 2e 07 	sts	0x072E, r25
    37ca:	80 93 2d 07 	sts	0x072D, r24
    37ce:	87 b7       	in	r24, 0x37	; 55
    37d0:	80 68       	ori	r24, 0x80	; 128
    37d2:	87 bf       	out	0x37, r24	; 55
    37d4:	0b c0       	rjmp	.+22     	; 0x37ec <main+0xe4>
				case iotcTimer3:
					iCallback3 = aCallback; ETIMSK |= (1 << OCIE3A); break;
    37d6:	8b e9       	ldi	r24, 0x9B	; 155
    37d8:	94 e0       	ldi	r25, 0x04	; 4
    37da:	90 93 2c 07 	sts	0x072C, r25
    37de:	80 93 2b 07 	sts	0x072B, r24
    37e2:	ed e7       	ldi	r30, 0x7D	; 125
    37e4:	f0 e0       	ldi	r31, 0x00	; 0
    37e6:	80 81       	ld	r24, Z
    37e8:	80 61       	ori	r24, 0x10	; 16
    37ea:	80 83       	st	Z, r24
		init(iotTimer::iotTimerId tid, long sec, iotCharLcd *clcd, uint8_t row)
		{
			iSeconds = sec; iRow = row;
			iTimer = new iotTimer(tid, iotTimer::iotcPsd1024, 15625);
			iTimer->enableInterrupt(update);
			if(!iCharLcd) {
    37ec:	80 91 2c 05 	lds	r24, 0x052C
    37f0:	90 91 2d 05 	lds	r25, 0x052D
    37f4:	89 2b       	or	r24, r25
    37f6:	71 f4       	brne	.+28     	; 0x3814 <main+0x10c>
				if(clcd) iCharLcd = clcd;
				else { iCharLcd = new iotCharLcd; iCharLcdCreated = true; }
    37f8:	81 e3       	ldi	r24, 0x31	; 49
    37fa:	91 e0       	ldi	r25, 0x01	; 1
    37fc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Znwj>
    3800:	8c 01       	movw	r16, r24
    3802:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_ZN10iotCharLcdC1Ev>
    3806:	10 93 2d 05 	sts	0x052D, r17
    380a:	00 93 2c 05 	sts	0x052C, r16
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	80 93 2a 05 	sts	0x052A, r24
			}
			iCharLcd->print(iRow, 1, iMonDyHrMnSc);
    3814:	80 90 2d 01 	lds	r8, 0x012D
    3818:	20 91 2c 05 	lds	r18, 0x052C
    381c:	30 91 2d 05 	lds	r19, 0x052D
    3820:	0f 2e       	mov	r0, r31
    3822:	fe e2       	ldi	r31, 0x2E	; 46
    3824:	ef 2e       	mov	r14, r31
    3826:	f1 e0       	ldi	r31, 0x01	; 1
    3828:	ff 2e       	mov	r15, r31
    382a:	f0 2d       	mov	r31, r0
    382c:	bb 24       	eor	r11, r11
    382e:	b3 94       	inc	r11
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    3830:	f9 01       	movw	r30, r18
    3832:	e4 5d       	subi	r30, 0xD4	; 212
    3834:	fe 4f       	sbci	r31, 0xFE	; 254
    3836:	69 01       	movw	r12, r18
    3838:	43 ed       	ldi	r20, 0xD3	; 211
    383a:	c4 1a       	sub	r12, r20
    383c:	4e ef       	ldi	r20, 0xFE	; 254
    383e:	d4 0a       	sbc	r13, r20
    3840:	04 e6       	ldi	r16, 0x64	; 100
    3842:	10 e0       	ldi	r17, 0x00	; 0
    3844:	2a c0       	rjmp	.+84     	; 0x389a <main+0x192>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    3846:	99 24       	eor	r9, r9
    3848:	93 94       	inc	r9
    384a:	9b 0c       	add	r9, r11
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    384c:	80 81       	ld	r24, Z
    384e:	d6 01       	movw	r26, r12
    3850:	4c 91       	ld	r20, X
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	01 96       	adiw	r24, 0x01	; 1
    3856:	b8 01       	movw	r22, r16
    3858:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    385c:	50 e0       	ldi	r21, 0x00	; 0
    385e:	84 17       	cp	r24, r20
    3860:	95 07       	cpc	r25, r21
    3862:	d1 f0       	breq	.+52     	; 0x3898 <main+0x190>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    3864:	80 81       	ld	r24, Z
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	ac 01       	movw	r20, r24
    386a:	44 0f       	add	r20, r20
    386c:	55 1f       	adc	r21, r21
    386e:	84 0f       	add	r24, r20
    3870:	95 1f       	adc	r25, r21
    3872:	d9 01       	movw	r26, r18
    3874:	a8 0f       	add	r26, r24
    3876:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    3878:	bc 92       	st	X, r11
    387a:	11 96       	adiw	r26, 0x01	; 1
    387c:	8c 92       	st	X, r8
    387e:	11 97       	sbiw	r26, 0x01	; 1
    3880:	12 96       	adiw	r26, 0x02	; 2
    3882:	ac 92       	st	X, r10

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    3884:	4f b7       	in	r20, 0x3f	; 63
    3886:	f8 94       	cli
    3888:	80 81       	ld	r24, Z
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	01 96       	adiw	r24, 0x01	; 1
    388e:	b8 01       	movw	r22, r16
    3890:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    3894:	80 83       	st	Z, r24
    3896:	4f bf       	out	0x3f, r20	; 63
//-----------------------------------------------------------------------------
//	main -
//-----------------------------------------------------------------------------
int
main(void)
{
    3898:	b9 2c       	mov	r11, r9
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    389a:	d7 01       	movw	r26, r14
    389c:	ad 90       	ld	r10, X+
    389e:	7d 01       	movw	r14, r26
    38a0:	a1 10       	cpse	r10, r1
    38a2:	d1 cf       	rjmp	.-94     	; 0x3846 <main+0x13e>
    38a4:	e8 e0       	ldi	r30, 0x08	; 8
    38a6:	f4 e0       	ldi	r31, 0x04	; 4
				if(clcd) iCharLcd = clcd;
				else { iCharLcd = new iotCharLcd; iCharLcdCreated = true; }
			}
			iCharLcd->print(iRow, 1, iMonDyHrMnSc);
			for(iotSchedule *s = iSchedule;
				s < iSchedule + iotcMaxSchedules; s++) s->iTime = 0;
    38a8:	10 82       	st	Z, r1
    38aa:	11 82       	std	Z+1, r1	; 0x01
    38ac:	12 82       	std	Z+2, r1	; 0x02
    38ae:	13 82       	std	Z+3, r1	; 0x03
			if(!iCharLcd) {
				if(clcd) iCharLcd = clcd;
				else { iCharLcd = new iotCharLcd; iCharLcdCreated = true; }
			}
			iCharLcd->print(iRow, 1, iMonDyHrMnSc);
			for(iotSchedule *s = iSchedule;
    38b0:	fa 96       	adiw	r30, 0x3a	; 58
    38b2:	b5 e0       	ldi	r27, 0x05	; 5
    38b4:	ea 32       	cpi	r30, 0x2A	; 42
    38b6:	fb 07       	cpc	r31, r27
    38b8:	b8 f3       	brcs	.-18     	; 0x38a8 <main+0x1a0>
	cli();

	// initialize the clock: Jun-17 10:00:00 at row 1 of char LCD.
	iotClock::init(CLOCK_TIMER, 14472000L, (iotCharLcd *) NULL, 1);
	CharLcd = iotClock::getCharLcd();
    38ba:	80 91 2c 05 	lds	r24, 0x052C
    38be:	90 91 2d 05 	lds	r25, 0x052D
    38c2:	90 93 4b 07 	sts	0x074B, r25
    38c6:	80 93 4a 07 	sts	0x074A, r24

class iotTerminal {
	public:
		static void
		init(iotUart::iotUartId id, long baud = 115200) {
			iUart = new iotUart(id, baud, receiveLine);
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Znwj>
    38d2:	8c 01       	movw	r16, r24
		// iotUartId: Uart0 & Uart1
		typedef enum {
			iotcUartNone, iotcUart0, iotcUart1
		} iotUartId;
		iotUart(iotUartId aId, long aBaudRate, void (* arxCallback) (void)) {
			iId = iotcUartNone;
    38d4:	fc 01       	movw	r30, r24
    38d6:	10 82       	st	Z, r1
				UBRR0H = iotmBaudRateHigh(aBaudRate);

				irx0Callback = arxCallback;
				UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
			} else if(aId == iotcUart1) {
				if(itx1Buff) return;
    38d8:	80 91 1d 07 	lds	r24, 0x071D
    38dc:	90 91 1e 07 	lds	r25, 0x071E
    38e0:	89 2b       	or	r24, r25
    38e2:	81 f5       	brne	.+96     	; 0x3944 <main+0x23c>
				itx1Head = itx1Tail = irx1Head = irx1Tail = 0;
    38e4:	10 92 1f 07 	sts	0x071F, r1
    38e8:	10 92 20 07 	sts	0x0720, r1
    38ec:	10 92 21 07 	sts	0x0721, r1
    38f0:	10 92 22 07 	sts	0x0722, r1
				itx1Buff = (char *) malloc(iotcUartBuffSize);
    38f4:	80 e8       	ldi	r24, 0x80	; 128
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	0e 94 93 31 	call	0x6326	; 0x6326 <malloc>
    38fc:	90 93 1e 07 	sts	0x071E, r25
    3900:	80 93 1d 07 	sts	0x071D, r24
				irx1Buff = (char *) malloc(iotcUartBuffSize);
    3904:	80 e8       	ldi	r24, 0x80	; 128
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	0e 94 93 31 	call	0x6326	; 0x6326 <malloc>
    390c:	90 93 1c 07 	sts	0x071C, r25
    3910:	80 93 1b 07 	sts	0x071B, r24
				
				UCSR1B = 0x00; UCSR1A = 0x02; UCSR1C = 0x06;
    3914:	ea e9       	ldi	r30, 0x9A	; 154
    3916:	f0 e0       	ldi	r31, 0x00	; 0
    3918:	10 82       	st	Z, r1
    391a:	22 e0       	ldi	r18, 0x02	; 2
    391c:	20 93 9b 00 	sts	0x009B, r18
    3920:	86 e0       	ldi	r24, 0x06	; 6
    3922:	80 93 9d 00 	sts	0x009D, r24
				
				UBRR1L = iotmBaudRateLow(aBaudRate);
    3926:	80 e1       	ldi	r24, 0x10	; 16
    3928:	80 93 99 00 	sts	0x0099, r24
				UBRR1H = iotmBaudRateHigh(aBaudRate);
    392c:	10 92 98 00 	sts	0x0098, r1
				
				irx1Callback = arxCallback;
    3930:	86 eb       	ldi	r24, 0xB6	; 182
    3932:	93 e0       	ldi	r25, 0x03	; 3
    3934:	90 93 18 07 	sts	0x0718, r25
    3938:	80 93 17 07 	sts	0x0717, r24
				UCSR1B = (1 << RXCIE1) | (1 << RXEN1) | (1 << TXEN1);
    393c:	88 e9       	ldi	r24, 0x98	; 152
    393e:	80 83       	st	Z, r24
			} else return;
			iId = aId;
    3940:	d8 01       	movw	r26, r16
    3942:	2c 93       	st	X, r18

class iotTerminal {
	public:
		static void
		init(iotUart::iotUartId id, long baud = 115200) {
			iUart = new iotUart(id, baud, receiveLine);
    3944:	10 93 16 07 	sts	0x0716, r17
    3948:	00 93 15 07 	sts	0x0715, r16
			fdevopen(putChar, getChar);
    394c:	65 ea       	ldi	r22, 0xA5	; 165
    394e:	75 e0       	ldi	r23, 0x05	; 5
    3950:	8e e0       	ldi	r24, 0x0E	; 14
    3952:	93 e0       	ldi	r25, 0x03	; 3
    3954:	0e 94 36 34 	call	0x686c	; 0x686c <fdevopen>

	// initialize Finger Print Sensor
	//iotFpSensor::init(UART_SENSOR, TIMEOUT_TIMER);	// PORTE

	// initialize Servo Motor
	iotServo::init(iotPin::iotcPE0);			// PORTE: VCC=R, GND=B, PWM=O //송시부에는 서보 모터 x 수신부만..
    3958:	80 e2       	ldi	r24, 0x20	; 32
    395a:	0e 94 be 0c 	call	0x197c	; 0x197c <_ZN8iotServo4initEN6iotPin8iotPinIdE>
//-----------------------------------------------------------------------------
class iotLed {
	public:
	static void
	init(iotPin::iotPinId pin) {
		ipPort = iotPin::getpPort(pin);
    395e:	88 e1       	ldi	r24, 0x18	; 24
    3960:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZN6iotPin8getpPortENS_8iotPinIdE>
    3964:	90 93 07 04 	sts	0x0407, r25
    3968:	80 93 06 04 	sts	0x0406, r24
		iPinMask = iotPin::getPinMask(pin);
    396c:	21 e0       	ldi	r18, 0x01	; 1
    396e:	20 93 05 04 	sts	0x0405, r18
		*ipPort |= ~iPinMask;
    3972:	fc 01       	movw	r30, r24
    3974:	20 81       	ld	r18, Z
    3976:	2e 6f       	ori	r18, 0xFE	; 254
    3978:	20 83       	st	Z, r18
};
class iotSubLed {
public:
static void
init(iotPin::iotPinId pin) {
	ipPort = iotPin::getpPort(pin);
    397a:	89 e1       	ldi	r24, 0x19	; 25
    397c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZN6iotPin8getpPortENS_8iotPinIdE>
    3980:	90 93 04 04 	sts	0x0404, r25
    3984:	80 93 03 04 	sts	0x0403, r24
	iPinMask = iotPin::getPinMask(pin);
    3988:	22 e0       	ldi	r18, 0x02	; 2
    398a:	20 93 02 04 	sts	0x0402, r18
	*ipPort |= ~iPinMask;
    398e:	dc 01       	movw	r26, r24
    3990:	2c 91       	ld	r18, X
    3992:	2d 6f       	ori	r18, 0xFD	; 253
    3994:	2c 93       	st	X, r18
	iotSubLed::init(iotPin::iotcPD1);			// PORTD:  GND=B 1번 핀
	
	
	// initialize DC Fan Motor - iotTimer::iotcTimer2
	// PORTF pin0 to OUTPUT
	FanTimer = new iotTimer(iotTimer::iotcTimer2, iotTimer::iotcPsdNo, 250);
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Znwj>
		typedef enum {		// 32 & 128 only for 8-bit counters 0 & 2.
			iotcPsdNo, iotcPsd1, iotcPsd8, iotcPsd32, iotcPsd64, iotcPsd128,
			iotcPsd256, iotcPsd1024
		} iotTimerPsd;
		iotTimer(iotTimerId aId, iotTimerPsd aPsd, unsigned int aCount) {
			iId = iotcTimerNone;
    399e:	fc 01       	movw	r30, r24
    39a0:	10 82       	st	Z, r1
					if((TCCR1B & 0x07) != 0) return;
					TCNT1 = 0; OCR1A = aCount; TCCR1A = 0;
					TCCR1B = (TCCR1B & ~(0x07)) | (1 << WGM12) | psd;
					break;
				case iotcTimer2:
					if((TCCR2 & 0x07) != 0) return;
    39a2:	25 b5       	in	r18, 0x25	; 37
    39a4:	27 70       	andi	r18, 0x07	; 7
    39a6:	49 f4       	brne	.+18     	; 0x39ba <main+0x2b2>
					TCNT2 = 0; OCR2 = aCount & 0xff;
    39a8:	14 bc       	out	0x24, r1	; 36
    39aa:	2a ef       	ldi	r18, 0xFA	; 250
    39ac:	23 bd       	out	0x23, r18	; 35
					TCCR2 = (TCCR2 & ~(0x07)) | (1 << WGM21) | psd;
    39ae:	25 b5       	in	r18, 0x25	; 37
    39b0:	20 7f       	andi	r18, 0xF0	; 240
    39b2:	28 60       	ori	r18, 0x08	; 8
    39b4:	25 bd       	out	0x25, r18	; 37
					TCNT3 = 0; OCR3A = aCount; TCCR3A = 0;
					TCCR3B = (TCCR3B & ~(0x07)) | (1 << WGM32) | psd;
					break;
				default: return;
			}
			iId = aId;
    39b6:	23 e0       	ldi	r18, 0x03	; 3
    39b8:	20 83       	st	Z, r18
    39ba:	90 93 41 07 	sts	0x0741, r25
    39be:	80 93 40 07 	sts	0x0740, r24
	DDRF |= 0x01;
    39c2:	e1 e6       	ldi	r30, 0x61	; 97
    39c4:	f0 e0       	ldi	r31, 0x00	; 0
    39c6:	80 81       	ld	r24, Z
    39c8:	81 60       	ori	r24, 0x01	; 1
    39ca:	80 83       	st	Z, r24
	PORTF |= 0x01;
    39cc:	e2 e6       	ldi	r30, 0x62	; 98
    39ce:	f0 e0       	ldi	r31, 0x00	; 0
    39d0:	80 81       	ld	r24, Z
    39d2:	81 60       	ori	r24, 0x01	; 1
    39d4:	80 83       	st	Z, r24
	
	
	//iotTimer	timer0(iotTimer::iotcTimer0, iotTimer::iotcPsd64, 250);
	//timer0.enableInterrupt(updateLed);
	
	DDRB = 0x0f;
    39d6:	8f e0       	ldi	r24, 0x0F	; 15
    39d8:	87 bb       	out	0x17, r24	; 23
	
	DDRD = 0x0f; // portD 
    39da:	81 bb       	out	0x11, r24	; 17
	
	/*something more??*/
	
	// initialize infra-red receiver
	IrRecv = new iotIrReceiver(IR_TIMER);
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Znwj>
    39e4:	8c 01       	movw	r16, r24
    39e6:	62 e0       	ldi	r22, 0x02	; 2
    39e8:	0e 94 40 02 	call	0x480	; 0x480 <_ZN13iotIrReceiverC1EN8iotTimer10iotTimerIdE>
    39ec:	10 93 47 07 	sts	0x0747, r17
    39f0:	00 93 46 07 	sts	0x0746, r16
	IrRecv->enable();
    39f4:	c8 01       	movw	r24, r16
    39f6:	f9 dd       	rcall	.-1038   	; 0x35ea <_ZN13iotIrReceiver6enableEv>
	// initialize infra-red transmitter
	IrTrans = new iotIrTransmitter(IR_TIMER);
    39f8:	81 e0       	ldi	r24, 0x01	; 1
    39fa:	90 e0       	ldi	r25, 0x00	; 0
    39fc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Znwj>
    3a00:	8c 01       	movw	r16, r24
    3a02:	62 e0       	ldi	r22, 0x02	; 2
    3a04:	0e 94 ae 02 	call	0x55c	; 0x55c <_ZN16iotIrTransmitterC1EN8iotTimer10iotTimerIdE>
    3a08:	10 93 45 07 	sts	0x0745, r17
    3a0c:	00 93 44 07 	sts	0x0744, r16
	
	
	
	sei();
    3a10:	78 94       	sei

	// use PE0 & PE1 for RX0 & TX0, and PC0 for DHT11
	Dht = new iotDht(iotPin::iotcPC0);				// PORTC
    3a12:	84 e1       	ldi	r24, 0x14	; 20
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Znwj>
    3a1a:	8c 01       	movw	r16, r24
#define	iotcDhtMaxTrigger			3

class iotDht {
	public:
		iotDht(iotPin::iotPinId pin) {
			ipPort = iotPin::getpPort(pin);
    3a1c:	80 e1       	ldi	r24, 0x10	; 16
    3a1e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZN6iotPin8getpPortENS_8iotPinIdE>
    3a22:	d8 01       	movw	r26, r16
    3a24:	1b 96       	adiw	r26, 0x0b	; 11
    3a26:	9c 93       	st	X, r25
    3a28:	8e 93       	st	-X, r24
    3a2a:	1a 97       	sbiw	r26, 0x0a	; 10
			ipPin = iotPin::getpPin(pin);
    3a2c:	80 e1       	ldi	r24, 0x10	; 16
    3a2e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_ZN6iotPin7getpPinENS_8iotPinIdE>
    3a32:	f8 01       	movw	r30, r16
    3a34:	91 87       	std	Z+9, r25	; 0x09
    3a36:	80 87       	std	Z+8, r24	; 0x08
			ipDDR = iotPin::getpDDR(pin);
    3a38:	80 e1       	ldi	r24, 0x10	; 16
    3a3a:	0e 94 08 01 	call	0x210	; 0x210 <_ZN6iotPin7getpDDRENS_8iotPinIdE>
    3a3e:	d8 01       	movw	r26, r16
    3a40:	1d 96       	adiw	r26, 0x0d	; 13
    3a42:	9c 93       	st	X, r25
    3a44:	8e 93       	st	-X, r24
    3a46:	1c 97       	sbiw	r26, 0x0c	; 12
			iPinMask = iotPin::getPinMask(pin);
    3a48:	81 e0       	ldi	r24, 0x01	; 1
    3a4a:	1e 96       	adiw	r26, 0x0e	; 14
    3a4c:	8c 93       	st	X, r24
			for(iotDhtTrigger *t = iTrigger;
    3a4e:	eb e3       	ldi	r30, 0x3B	; 59
    3a50:	f5 e0       	ldi	r31, 0x05	; 5
				t < iTrigger + iotcDhtMaxTrigger; t++) t->iType = iotcDhtNone;
    3a52:	10 82       	st	Z, r1
		iotDht(iotPin::iotPinId pin) {
			ipPort = iotPin::getpPort(pin);
			ipPin = iotPin::getpPin(pin);
			ipDDR = iotPin::getpDDR(pin);
			iPinMask = iotPin::getPinMask(pin);
			for(iotDhtTrigger *t = iTrigger;
    3a54:	f8 96       	adiw	r30, 0x38	; 56
    3a56:	b5 e0       	ldi	r27, 0x05	; 5
    3a58:	e3 3e       	cpi	r30, 0xE3	; 227
    3a5a:	fb 07       	cpc	r31, r27
    3a5c:	d0 f3       	brcs	.-12     	; 0x3a52 <main+0x34a>
    3a5e:	10 93 49 07 	sts	0x0749, r17
    3a62:	00 93 48 07 	sts	0x0748, r16
		processOne() {
			if(!iFlush) return;
			iFlush = 0;

			int days;
			if((days = iSeconds / 86400L) != iYearDays) {
    3a66:	0f 2e       	mov	r0, r31
    3a68:	f0 e8       	ldi	r31, 0x80	; 128
    3a6a:	4f 2e       	mov	r4, r31
    3a6c:	f1 e5       	ldi	r31, 0x51	; 81
    3a6e:	5f 2e       	mov	r5, r31
    3a70:	66 24       	eor	r6, r6
    3a72:	63 94       	inc	r6
    3a74:	71 2c       	mov	r7, r1
    3a76:	f0 2d       	mov	r31, r0
		static iotCharLcd	*getCharLcd()			{ return iCharLcd; }
		static char			lcdmode;

		static void
		processOne() {
			if(!iFlush) return;
    3a78:	80 91 2b 05 	lds	r24, 0x052B
    3a7c:	88 23       	and	r24, r24
    3a7e:	09 f4       	brne	.+2      	; 0x3a82 <main+0x37a>
    3a80:	40 c2       	rjmp	.+1152   	; 0x3f02 <main+0x7fa>
			iFlush = 0;
    3a82:	10 92 2b 05 	sts	0x052B, r1

			int days;
			if((days = iSeconds / 86400L) != iYearDays) {
    3a86:	60 91 2e 05 	lds	r22, 0x052E
    3a8a:	70 91 2f 05 	lds	r23, 0x052F
    3a8e:	80 91 30 05 	lds	r24, 0x0530
    3a92:	90 91 31 05 	lds	r25, 0x0531
    3a96:	a3 01       	movw	r20, r6
    3a98:	92 01       	movw	r18, r4
    3a9a:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <__divmodsi4>
    3a9e:	c9 01       	movw	r24, r18
    3aa0:	60 91 2b 01 	lds	r22, 0x012B
    3aa4:	70 91 2c 01 	lds	r23, 0x012C
    3aa8:	26 17       	cp	r18, r22
    3aaa:	37 07       	cpc	r19, r23
    3aac:	09 f4       	brne	.+2      	; 0x3ab0 <main+0x3a8>
    3aae:	c6 c0       	rjmp	.+396    	; 0x3c3c <main+0x534>
				iYearDays = days;
    3ab0:	30 93 2c 01 	sts	0x012C, r19
    3ab4:	20 93 2b 01 	sts	0x012B, r18
			executeSchedules();
		}
		static void
		toDate(char *s, int days) {
			int		m;
			for(m = 0; days > iMonthDays[m]; m++)
    3ab8:	20 91 07 01 	lds	r18, 0x0107
    3abc:	30 e0       	ldi	r19, 0x00	; 0
    3abe:	28 17       	cp	r18, r24
    3ac0:	39 07       	cpc	r19, r25
    3ac2:	74 f4       	brge	.+28     	; 0x3ae0 <main+0x3d8>
    3ac4:	e8 e0       	ldi	r30, 0x08	; 8
    3ac6:	f1 e0       	ldi	r31, 0x01	; 1
    3ac8:	40 e0       	ldi	r20, 0x00	; 0
    3aca:	50 e0       	ldi	r21, 0x00	; 0
				days -= iMonthDays[m];
    3acc:	82 1b       	sub	r24, r18
    3ace:	93 0b       	sbc	r25, r19
			executeSchedules();
		}
		static void
		toDate(char *s, int days) {
			int		m;
			for(m = 0; days > iMonthDays[m]; m++)
    3ad0:	4f 5f       	subi	r20, 0xFF	; 255
    3ad2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ad4:	21 91       	ld	r18, Z+
    3ad6:	30 e0       	ldi	r19, 0x00	; 0
    3ad8:	28 17       	cp	r18, r24
    3ada:	39 07       	cpc	r19, r25
    3adc:	bc f3       	brlt	.-18     	; 0x3acc <main+0x3c4>
    3ade:	02 c0       	rjmp	.+4      	; 0x3ae4 <main+0x3dc>
    3ae0:	40 e0       	ldi	r20, 0x00	; 0
    3ae2:	50 e0       	ldi	r21, 0x00	; 0
				days -= iMonthDays[m];
			s[0] = iMonth[m][0];
    3ae4:	fa 01       	movw	r30, r20
    3ae6:	ee 0f       	add	r30, r30
    3ae8:	ff 1f       	adc	r31, r31
    3aea:	ed 5e       	subi	r30, 0xED	; 237
    3aec:	fe 4f       	sbci	r31, 0xFE	; 254
    3aee:	a0 81       	ld	r26, Z
    3af0:	b1 81       	ldd	r27, Z+1	; 0x01
    3af2:	2c 91       	ld	r18, X
    3af4:	ee e2       	ldi	r30, 0x2E	; 46
    3af6:	f1 e0       	ldi	r31, 0x01	; 1
    3af8:	20 83       	st	Z, r18
			s[1] = iMonth[m][1];
    3afa:	11 96       	adiw	r26, 0x01	; 1
    3afc:	2c 91       	ld	r18, X
    3afe:	11 97       	sbiw	r26, 0x01	; 1
    3b00:	21 83       	std	Z+1, r18	; 0x01
			s[2] = iMonth[m][2];
    3b02:	12 96       	adiw	r26, 0x02	; 2
    3b04:	2c 91       	ld	r18, X
    3b06:	22 83       	std	Z+2, r18	; 0x02
			s[3] = '-'; days++;
    3b08:	2d e2       	ldi	r18, 0x2D	; 45
    3b0a:	23 83       	std	Z+3, r18	; 0x03
    3b0c:	01 96       	adiw	r24, 0x01	; 1
			s[4] = '0' + days / 10;
    3b0e:	6a e0       	ldi	r22, 0x0A	; 10
    3b10:	70 e0       	ldi	r23, 0x00	; 0
    3b12:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    3b16:	60 5d       	subi	r22, 0xD0	; 208
    3b18:	64 83       	std	Z+4, r22	; 0x04
			s[5] = '0' + days % 10;
    3b1a:	80 5d       	subi	r24, 0xD0	; 208
    3b1c:	85 83       	std	Z+5, r24	; 0x05
			s[6] = ' ';
    3b1e:	80 e2       	ldi	r24, 0x20	; 32
    3b20:	86 83       	std	Z+6, r24	; 0x06
			s[7] = '\0';
    3b22:	17 82       	std	Z+7, r1	; 0x07

			int days;
			if((days = iSeconds / 86400L) != iYearDays) {
				iYearDays = days;
				toDate(iMonDyHrMnSc, days);
				if(iCharLcd && lcdmode) iCharLcd->print(iRow, 1, iMonDyHrMnSc);
    3b24:	e0 90 2c 05 	lds	r14, 0x052C
    3b28:	f0 90 2d 05 	lds	r15, 0x052D
    3b2c:	e1 14       	cp	r14, r1
    3b2e:	f1 04       	cpc	r15, r1
    3b30:	09 f4       	brne	.+2      	; 0x3b34 <main+0x42c>
    3b32:	45 c0       	rjmp	.+138    	; 0x3bbe <main+0x4b6>
    3b34:	80 91 06 01 	lds	r24, 0x0106
    3b38:	88 23       	and	r24, r24
    3b3a:	09 f4       	brne	.+2      	; 0x3b3e <main+0x436>
    3b3c:	40 c0       	rjmp	.+128    	; 0x3bbe <main+0x4b6>
    3b3e:	80 90 2d 01 	lds	r8, 0x012D
    3b42:	9f 01       	movw	r18, r30
    3b44:	dd 24       	eor	r13, r13
    3b46:	d3 94       	inc	r13
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    3b48:	f7 01       	movw	r30, r14
    3b4a:	e4 5d       	subi	r30, 0xD4	; 212
    3b4c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b4e:	57 01       	movw	r10, r14
    3b50:	43 ed       	ldi	r20, 0xD3	; 211
    3b52:	a4 1a       	sub	r10, r20
    3b54:	4e ef       	ldi	r20, 0xFE	; 254
    3b56:	b4 0a       	sbc	r11, r20
    3b58:	04 e6       	ldi	r16, 0x64	; 100
    3b5a:	10 e0       	ldi	r17, 0x00	; 0
    3b5c:	2a c0       	rjmp	.+84     	; 0x3bb2 <main+0x4aa>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    3b5e:	99 24       	eor	r9, r9
    3b60:	93 94       	inc	r9
    3b62:	9d 0c       	add	r9, r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    3b64:	80 81       	ld	r24, Z
    3b66:	d5 01       	movw	r26, r10
    3b68:	4c 91       	ld	r20, X
    3b6a:	90 e0       	ldi	r25, 0x00	; 0
    3b6c:	01 96       	adiw	r24, 0x01	; 1
    3b6e:	b8 01       	movw	r22, r16
    3b70:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    3b74:	50 e0       	ldi	r21, 0x00	; 0
    3b76:	84 17       	cp	r24, r20
    3b78:	95 07       	cpc	r25, r21
    3b7a:	d1 f0       	breq	.+52     	; 0x3bb0 <main+0x4a8>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    3b7c:	80 81       	ld	r24, Z
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	ac 01       	movw	r20, r24
    3b82:	44 0f       	add	r20, r20
    3b84:	55 1f       	adc	r21, r21
    3b86:	84 0f       	add	r24, r20
    3b88:	95 1f       	adc	r25, r21
    3b8a:	d7 01       	movw	r26, r14
    3b8c:	a8 0f       	add	r26, r24
    3b8e:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    3b90:	dc 92       	st	X, r13
    3b92:	11 96       	adiw	r26, 0x01	; 1
    3b94:	8c 92       	st	X, r8
    3b96:	11 97       	sbiw	r26, 0x01	; 1
    3b98:	12 96       	adiw	r26, 0x02	; 2
    3b9a:	cc 92       	st	X, r12

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    3b9c:	4f b7       	in	r20, 0x3f	; 63
    3b9e:	f8 94       	cli
    3ba0:	80 81       	ld	r24, Z
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	01 96       	adiw	r24, 0x01	; 1
    3ba6:	b8 01       	movw	r22, r16
    3ba8:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    3bac:	80 83       	st	Z, r24
    3bae:	4f bf       	out	0x3f, r20	; 63
			executeSchedules();
		}
		static void
		toDate(char *s, int days) {
			int		m;
			for(m = 0; days > iMonthDays[m]; m++)
    3bb0:	d9 2c       	mov	r13, r9
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    3bb2:	d9 01       	movw	r26, r18
    3bb4:	cd 90       	ld	r12, X+
    3bb6:	9d 01       	movw	r18, r26
    3bb8:	c1 10       	cpse	r12, r1
    3bba:	d1 cf       	rjmp	.-94     	; 0x3b5e <main+0x456>
    3bbc:	3f c0       	rjmp	.+126    	; 0x3c3c <main+0x534>
			int days;
			if((days = iSeconds / 86400L) != iYearDays) {
				iYearDays = days;
				toDate(iMonDyHrMnSc, days);
				if(iCharLcd && lcdmode) iCharLcd->print(iRow, 1, iMonDyHrMnSc);
				else iCharLcd->print(iRow, 1, "            ");
    3bbe:	80 90 2d 01 	lds	r8, 0x012D
    3bc2:	2d ed       	ldi	r18, 0xDD	; 221
    3bc4:	33 e0       	ldi	r19, 0x03	; 3
    3bc6:	aa 24       	eor	r10, r10
    3bc8:	a3 94       	inc	r10
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    3bca:	f7 01       	movw	r30, r14
    3bcc:	e4 5d       	subi	r30, 0xD4	; 212
    3bce:	fe 4f       	sbci	r31, 0xFE	; 254
    3bd0:	67 01       	movw	r12, r14
    3bd2:	b3 ed       	ldi	r27, 0xD3	; 211
    3bd4:	cb 1a       	sub	r12, r27
    3bd6:	be ef       	ldi	r27, 0xFE	; 254
    3bd8:	db 0a       	sbc	r13, r27
    3bda:	04 e6       	ldi	r16, 0x64	; 100
    3bdc:	10 e0       	ldi	r17, 0x00	; 0
    3bde:	29 c0       	rjmp	.+82     	; 0x3c32 <main+0x52a>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    3be0:	99 24       	eor	r9, r9
    3be2:	93 94       	inc	r9
    3be4:	9a 0c       	add	r9, r10
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    3be6:	80 81       	ld	r24, Z
    3be8:	d6 01       	movw	r26, r12
    3bea:	4c 91       	ld	r20, X
    3bec:	90 e0       	ldi	r25, 0x00	; 0
    3bee:	01 96       	adiw	r24, 0x01	; 1
    3bf0:	b8 01       	movw	r22, r16
    3bf2:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    3bf6:	50 e0       	ldi	r21, 0x00	; 0
    3bf8:	84 17       	cp	r24, r20
    3bfa:	95 07       	cpc	r25, r21
    3bfc:	c9 f0       	breq	.+50     	; 0x3c30 <main+0x528>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    3bfe:	80 81       	ld	r24, Z
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	dc 01       	movw	r26, r24
    3c04:	aa 0f       	add	r26, r26
    3c06:	bb 1f       	adc	r27, r27
    3c08:	a8 0f       	add	r26, r24
    3c0a:	b9 1f       	adc	r27, r25
    3c0c:	ae 0d       	add	r26, r14
    3c0e:	bf 1d       	adc	r27, r15
			out->x = x; out->y = y; out->c = c;
    3c10:	ac 92       	st	X, r10
    3c12:	11 96       	adiw	r26, 0x01	; 1
    3c14:	8c 92       	st	X, r8
    3c16:	11 97       	sbiw	r26, 0x01	; 1
    3c18:	12 96       	adiw	r26, 0x02	; 2
    3c1a:	bc 92       	st	X, r11

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    3c1c:	4f b7       	in	r20, 0x3f	; 63
    3c1e:	f8 94       	cli
    3c20:	80 81       	ld	r24, Z
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	01 96       	adiw	r24, 0x01	; 1
    3c26:	b8 01       	movw	r22, r16
    3c28:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    3c2c:	80 83       	st	Z, r24
    3c2e:	4f bf       	out	0x3f, r20	; 63

			int days;
			if((days = iSeconds / 86400L) != iYearDays) {
				iYearDays = days;
				toDate(iMonDyHrMnSc, days);
				if(iCharLcd && lcdmode) iCharLcd->print(iRow, 1, iMonDyHrMnSc);
    3c30:	a9 2c       	mov	r10, r9
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    3c32:	d9 01       	movw	r26, r18
    3c34:	bd 90       	ld	r11, X+
    3c36:	9d 01       	movw	r18, r26
    3c38:	b1 10       	cpse	r11, r1
    3c3a:	d2 cf       	rjmp	.-92     	; 0x3be0 <main+0x4d8>
			s[6] = ' ';
			s[7] = '\0';
		}
		static void
		toTime(char *s, long secs) {
			secs %= 86400L;
    3c3c:	60 91 2e 05 	lds	r22, 0x052E
    3c40:	70 91 2f 05 	lds	r23, 0x052F
    3c44:	80 91 30 05 	lds	r24, 0x0530
    3c48:	90 91 31 05 	lds	r25, 0x0531
    3c4c:	a3 01       	movw	r20, r6
    3c4e:	92 01       	movw	r18, r4
    3c50:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <__divmodsi4>
    3c54:	6b 01       	movw	r12, r22
    3c56:	7c 01       	movw	r14, r24
			s[0] = '0' + secs / 36000L;
    3c58:	0e e2       	ldi	r16, 0x2E	; 46
    3c5a:	11 e0       	ldi	r17, 0x01	; 1
    3c5c:	20 ea       	ldi	r18, 0xA0	; 160
    3c5e:	3c e8       	ldi	r19, 0x8C	; 140
    3c60:	40 e0       	ldi	r20, 0x00	; 0
    3c62:	50 e0       	ldi	r21, 0x00	; 0
    3c64:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <__divmodsi4>
    3c68:	20 5d       	subi	r18, 0xD0	; 208
    3c6a:	f8 01       	movw	r30, r16
    3c6c:	27 83       	std	Z+7, r18	; 0x07
			s[1] = '0' + (secs % 36000L) / 3600;
    3c6e:	0f 2e       	mov	r0, r31
    3c70:	f0 e1       	ldi	r31, 0x10	; 16
    3c72:	8f 2e       	mov	r8, r31
    3c74:	fe e0       	ldi	r31, 0x0E	; 14
    3c76:	9f 2e       	mov	r9, r31
    3c78:	a1 2c       	mov	r10, r1
    3c7a:	b1 2c       	mov	r11, r1
    3c7c:	f0 2d       	mov	r31, r0
    3c7e:	a5 01       	movw	r20, r10
    3c80:	94 01       	movw	r18, r8
    3c82:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <__divmodsi4>
    3c86:	20 5d       	subi	r18, 0xD0	; 208
    3c88:	d8 01       	movw	r26, r16
    3c8a:	18 96       	adiw	r26, 0x08	; 8
    3c8c:	2c 93       	st	X, r18
    3c8e:	18 97       	sbiw	r26, 0x08	; 8
			s[2] = s[5] = ':';
    3c90:	8a e3       	ldi	r24, 0x3A	; 58
    3c92:	1c 96       	adiw	r26, 0x0c	; 12
    3c94:	8c 93       	st	X, r24
    3c96:	1c 97       	sbiw	r26, 0x0c	; 12
    3c98:	19 96       	adiw	r26, 0x09	; 9
    3c9a:	8c 93       	st	X, r24
			s[3] = '0' + (secs % 3600) / 600;
    3c9c:	c7 01       	movw	r24, r14
    3c9e:	b6 01       	movw	r22, r12
    3ca0:	a5 01       	movw	r20, r10
    3ca2:	94 01       	movw	r18, r8
    3ca4:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <__divmodsi4>
    3ca8:	0f 2e       	mov	r0, r31
    3caa:	f8 e5       	ldi	r31, 0x58	; 88
    3cac:	8f 2e       	mov	r8, r31
    3cae:	f2 e0       	ldi	r31, 0x02	; 2
    3cb0:	9f 2e       	mov	r9, r31
    3cb2:	a1 2c       	mov	r10, r1
    3cb4:	b1 2c       	mov	r11, r1
    3cb6:	f0 2d       	mov	r31, r0
    3cb8:	a5 01       	movw	r20, r10
    3cba:	94 01       	movw	r18, r8
    3cbc:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <__divmodsi4>
    3cc0:	20 5d       	subi	r18, 0xD0	; 208
    3cc2:	f8 01       	movw	r30, r16
    3cc4:	22 87       	std	Z+10, r18	; 0x0a
			s[4] = '0' + (secs % 600) / 60;
    3cc6:	c7 01       	movw	r24, r14
    3cc8:	b6 01       	movw	r22, r12
    3cca:	a5 01       	movw	r20, r10
    3ccc:	94 01       	movw	r18, r8
    3cce:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <__divmodsi4>
    3cd2:	0f 2e       	mov	r0, r31
    3cd4:	fc e3       	ldi	r31, 0x3C	; 60
    3cd6:	8f 2e       	mov	r8, r31
    3cd8:	91 2c       	mov	r9, r1
    3cda:	a1 2c       	mov	r10, r1
    3cdc:	b1 2c       	mov	r11, r1
    3cde:	f0 2d       	mov	r31, r0
    3ce0:	a5 01       	movw	r20, r10
    3ce2:	94 01       	movw	r18, r8
    3ce4:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <__divmodsi4>
    3ce8:	20 5d       	subi	r18, 0xD0	; 208
    3cea:	d8 01       	movw	r26, r16
    3cec:	1b 96       	adiw	r26, 0x0b	; 11
    3cee:	2c 93       	st	X, r18
			s[6] = '0' + (secs % 60) / 10;
    3cf0:	c7 01       	movw	r24, r14
    3cf2:	b6 01       	movw	r22, r12
    3cf4:	a5 01       	movw	r20, r10
    3cf6:	94 01       	movw	r18, r8
    3cf8:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <__divmodsi4>
    3cfc:	0f 2e       	mov	r0, r31
    3cfe:	fa e0       	ldi	r31, 0x0A	; 10
    3d00:	8f 2e       	mov	r8, r31
    3d02:	91 2c       	mov	r9, r1
    3d04:	a1 2c       	mov	r10, r1
    3d06:	b1 2c       	mov	r11, r1
    3d08:	f0 2d       	mov	r31, r0
    3d0a:	a5 01       	movw	r20, r10
    3d0c:	94 01       	movw	r18, r8
    3d0e:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <__divmodsi4>
    3d12:	20 5d       	subi	r18, 0xD0	; 208
    3d14:	f8 01       	movw	r30, r16
    3d16:	25 87       	std	Z+13, r18	; 0x0d
			s[7] = '0' + (secs % 10);
    3d18:	c7 01       	movw	r24, r14
    3d1a:	b6 01       	movw	r22, r12
    3d1c:	a5 01       	movw	r20, r10
    3d1e:	94 01       	movw	r18, r8
    3d20:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <__divmodsi4>
    3d24:	60 5d       	subi	r22, 0xD0	; 208
    3d26:	d8 01       	movw	r26, r16
    3d28:	1e 96       	adiw	r26, 0x0e	; 14
    3d2a:	6c 93       	st	X, r22
    3d2c:	1e 97       	sbiw	r26, 0x0e	; 14
			s[8] = '\0';
    3d2e:	1f 96       	adiw	r26, 0x0f	; 15
    3d30:	1c 92       	st	X, r1
				toDate(iMonDyHrMnSc, days);
				if(iCharLcd && lcdmode) iCharLcd->print(iRow, 1, iMonDyHrMnSc);
				else iCharLcd->print(iRow, 1, "            ");
			}
			toTime(iMonDyHrMnSc + 7, iSeconds);
			if(iCharLcd && lcdmode) iCharLcd->print(iRow, 8, iMonDyHrMnSc + 7);
    3d32:	e0 90 2c 05 	lds	r14, 0x052C
    3d36:	f0 90 2d 05 	lds	r15, 0x052D
    3d3a:	e1 14       	cp	r14, r1
    3d3c:	f1 04       	cpc	r15, r1
    3d3e:	21 f0       	breq	.+8      	; 0x3d48 <main+0x640>
    3d40:	80 91 06 01 	lds	r24, 0x0106
    3d44:	81 11       	cpse	r24, r1
    3d46:	14 c0       	rjmp	.+40     	; 0x3d70 <main+0x668>
    3d48:	0f 2e       	mov	r0, r31
    3d4a:	fd ed       	ldi	r31, 0xDD	; 221
    3d4c:	cf 2e       	mov	r12, r31
    3d4e:	f3 e0       	ldi	r31, 0x03	; 3
    3d50:	df 2e       	mov	r13, r31
    3d52:	f0 2d       	mov	r31, r0
    3d54:	f6 01       	movw	r30, r12
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    3d56:	97 01       	movw	r18, r14
    3d58:	24 5d       	subi	r18, 0xD4	; 212
    3d5a:	3e 4f       	sbci	r19, 0xFE	; 254
    3d5c:	57 01       	movw	r10, r14
    3d5e:	b3 ed       	ldi	r27, 0xD3	; 211
    3d60:	ab 1a       	sub	r10, r27
    3d62:	be ef       	ldi	r27, 0xFE	; 254
    3d64:	bb 0a       	sbc	r11, r27
    3d66:	04 e6       	ldi	r16, 0x64	; 100
    3d68:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    3d6a:	33 24       	eor	r3, r3
    3d6c:	33 94       	inc	r3
    3d6e:	6c c0       	rjmp	.+216    	; 0x3e48 <main+0x740>
				toDate(iMonDyHrMnSc, days);
				if(iCharLcd && lcdmode) iCharLcd->print(iRow, 1, iMonDyHrMnSc);
				else iCharLcd->print(iRow, 1, "            ");
			}
			toTime(iMonDyHrMnSc + 7, iSeconds);
			if(iCharLcd && lcdmode) iCharLcd->print(iRow, 8, iMonDyHrMnSc + 7);
    3d70:	80 90 2d 01 	lds	r8, 0x012D
    3d74:	25 e3       	ldi	r18, 0x35	; 53
    3d76:	31 e0       	ldi	r19, 0x01	; 1
    3d78:	68 94       	set
    3d7a:	cc 24       	eor	r12, r12
    3d7c:	c3 f8       	bld	r12, 3
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    3d7e:	f7 01       	movw	r30, r14
    3d80:	e4 5d       	subi	r30, 0xD4	; 212
    3d82:	fe 4f       	sbci	r31, 0xFE	; 254
    3d84:	57 01       	movw	r10, r14
    3d86:	43 ed       	ldi	r20, 0xD3	; 211
    3d88:	a4 1a       	sub	r10, r20
    3d8a:	4e ef       	ldi	r20, 0xFE	; 254
    3d8c:	b4 0a       	sbc	r11, r20
    3d8e:	04 e6       	ldi	r16, 0x64	; 100
    3d90:	10 e0       	ldi	r17, 0x00	; 0
    3d92:	2a c0       	rjmp	.+84     	; 0x3de8 <main+0x6e0>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    3d94:	99 24       	eor	r9, r9
    3d96:	93 94       	inc	r9
    3d98:	9c 0c       	add	r9, r12
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    3d9a:	80 81       	ld	r24, Z
    3d9c:	d5 01       	movw	r26, r10
    3d9e:	4c 91       	ld	r20, X
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	01 96       	adiw	r24, 0x01	; 1
    3da4:	b8 01       	movw	r22, r16
    3da6:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    3daa:	50 e0       	ldi	r21, 0x00	; 0
    3dac:	84 17       	cp	r24, r20
    3dae:	95 07       	cpc	r25, r21
    3db0:	d1 f0       	breq	.+52     	; 0x3de6 <main+0x6de>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    3db2:	80 81       	ld	r24, Z
    3db4:	90 e0       	ldi	r25, 0x00	; 0
    3db6:	ac 01       	movw	r20, r24
    3db8:	44 0f       	add	r20, r20
    3dba:	55 1f       	adc	r21, r21
    3dbc:	84 0f       	add	r24, r20
    3dbe:	95 1f       	adc	r25, r21
    3dc0:	d7 01       	movw	r26, r14
    3dc2:	a8 0f       	add	r26, r24
    3dc4:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    3dc6:	cc 92       	st	X, r12
    3dc8:	11 96       	adiw	r26, 0x01	; 1
    3dca:	8c 92       	st	X, r8
    3dcc:	11 97       	sbiw	r26, 0x01	; 1
    3dce:	12 96       	adiw	r26, 0x02	; 2
    3dd0:	dc 92       	st	X, r13

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    3dd2:	4f b7       	in	r20, 0x3f	; 63
    3dd4:	f8 94       	cli
    3dd6:	80 81       	ld	r24, Z
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	01 96       	adiw	r24, 0x01	; 1
    3ddc:	b8 01       	movw	r22, r16
    3dde:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    3de2:	80 83       	st	Z, r24
    3de4:	4f bf       	out	0x3f, r20	; 63
			int days;
			if((days = iSeconds / 86400L) != iYearDays) {
				iYearDays = days;
				toDate(iMonDyHrMnSc, days);
				if(iCharLcd && lcdmode) iCharLcd->print(iRow, 1, iMonDyHrMnSc);
				else iCharLcd->print(iRow, 1, "            ");
    3de6:	c9 2c       	mov	r12, r9
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    3de8:	d9 01       	movw	r26, r18
    3dea:	dd 90       	ld	r13, X+
    3dec:	9d 01       	movw	r18, r26
    3dee:	d1 10       	cpse	r13, r1
    3df0:	d1 cf       	rjmp	.-94     	; 0x3d94 <main+0x68c>
    3df2:	0c 94 ba 2d 	jmp	0x5b74	; 0x5b74 <main+0x246c>
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    3df6:	d9 01       	movw	r26, r18
    3df8:	8c 91       	ld	r24, X
    3dfa:	d5 01       	movw	r26, r10
    3dfc:	4c 91       	ld	r20, X
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	01 96       	adiw	r24, 0x01	; 1
    3e02:	b8 01       	movw	r22, r16
    3e04:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    3e08:	50 e0       	ldi	r21, 0x00	; 0
    3e0a:	84 17       	cp	r24, r20
    3e0c:	95 07       	cpc	r25, r21
    3e0e:	e1 f0       	breq	.+56     	; 0x3e48 <main+0x740>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    3e10:	d9 01       	movw	r26, r18
    3e12:	8c 91       	ld	r24, X
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	dc 01       	movw	r26, r24
    3e18:	aa 0f       	add	r26, r26
    3e1a:	bb 1f       	adc	r27, r27
    3e1c:	a8 0f       	add	r26, r24
    3e1e:	b9 1f       	adc	r27, r25
    3e20:	ae 0d       	add	r26, r14
    3e22:	bf 1d       	adc	r27, r15
			out->x = x; out->y = y; out->c = c;
    3e24:	8c 92       	st	X, r8
    3e26:	11 96       	adiw	r26, 0x01	; 1
    3e28:	3c 92       	st	X, r3
    3e2a:	11 97       	sbiw	r26, 0x01	; 1
    3e2c:	12 96       	adiw	r26, 0x02	; 2
    3e2e:	9c 92       	st	X, r9

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    3e30:	4f b7       	in	r20, 0x3f	; 63
    3e32:	f8 94       	cli
    3e34:	d9 01       	movw	r26, r18
    3e36:	8c 91       	ld	r24, X
    3e38:	90 e0       	ldi	r25, 0x00	; 0
    3e3a:	01 96       	adiw	r24, 0x01	; 1
    3e3c:	b8 01       	movw	r22, r16
    3e3e:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    3e42:	d9 01       	movw	r26, r18
    3e44:	8c 93       	st	X, r24
    3e46:	4f bf       	out	0x3f, r20	; 63
    3e48:	8e 2e       	mov	r8, r30
    3e4a:	8c 18       	sub	r8, r12
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    3e4c:	91 90       	ld	r9, Z+
    3e4e:	91 10       	cpse	r9, r1
    3e50:	d2 cf       	rjmp	.-92     	; 0x3df6 <main+0x6ee>
    3e52:	0c 94 ba 2d 	jmp	0x5b74	; 0x5b74 <main+0x246c>
		}
		static void
		executeSchedules() {
			iotSchedule	*s;
			for(s = iSchedule; s < iSchedule + iotcMaxSchedules; s++) {
				if((s->iTime == 0) || (s->iTime > iSeconds)) continue;
    3e56:	f8 01       	movw	r30, r16
    3e58:	80 80       	ld	r8, Z
    3e5a:	91 80       	ldd	r9, Z+1	; 0x01
    3e5c:	a2 80       	ldd	r10, Z+2	; 0x02
    3e5e:	b3 80       	ldd	r11, Z+3	; 0x03
    3e60:	81 14       	cp	r8, r1
    3e62:	91 04       	cpc	r9, r1
    3e64:	a1 04       	cpc	r10, r1
    3e66:	b1 04       	cpc	r11, r1
    3e68:	09 f4       	brne	.+2      	; 0x3e6c <main+0x764>
    3e6a:	44 c0       	rjmp	.+136    	; 0x3ef4 <main+0x7ec>
    3e6c:	80 91 2e 05 	lds	r24, 0x052E
    3e70:	90 91 2f 05 	lds	r25, 0x052F
    3e74:	a0 91 30 05 	lds	r26, 0x0530
    3e78:	b0 91 31 05 	lds	r27, 0x0531
    3e7c:	88 15       	cp	r24, r8
    3e7e:	99 05       	cpc	r25, r9
    3e80:	aa 05       	cpc	r26, r10
    3e82:	bb 05       	cpc	r27, r11
    3e84:	bc f1       	brlt	.+110    	; 0x3ef4 <main+0x7ec>
			} else if((s = iLineToParse)) iLineToParse = (char *) NULL;
			return s;
		}
		static bool
		enqueueLine(char *s) {
			if((iHead + 1) % iotcCmdQueueSize == iTail) return false;	// full
    3e86:	20 91 ac 06 	lds	r18, 0x06AC
    3e8a:	30 e0       	ldi	r19, 0x00	; 0
    3e8c:	79 01       	movw	r14, r18
    3e8e:	ff ef       	ldi	r31, 0xFF	; 255
    3e90:	ef 1a       	sub	r14, r31
    3e92:	ff 0a       	sbc	r15, r31
    3e94:	43 e0       	ldi	r20, 0x03	; 3
    3e96:	e4 22       	and	r14, r20
    3e98:	40 e8       	ldi	r20, 0x80	; 128
    3e9a:	f4 22       	and	r15, r20
    3e9c:	80 91 ab 06 	lds	r24, 0x06AB
    3ea0:	90 e0       	ldi	r25, 0x00	; 0
    3ea2:	e8 16       	cp	r14, r24
    3ea4:	f9 06       	cpc	r15, r25
    3ea6:	69 f1       	breq	.+90     	; 0x3f02 <main+0x7fa>
			strcpy(iQueue[iHead], s);
    3ea8:	d2 9e       	mul	r13, r18
    3eaa:	c0 01       	movw	r24, r0
    3eac:	d3 9e       	mul	r13, r19
    3eae:	90 0d       	add	r25, r0
    3eb0:	11 24       	eor	r1, r1
    3eb2:	b8 01       	movw	r22, r16
    3eb4:	68 5f       	subi	r22, 0xF8	; 248
    3eb6:	7f 4f       	sbci	r23, 0xFF	; 255
    3eb8:	8d 51       	subi	r24, 0x1D	; 29
    3eba:	9a 4f       	sbci	r25, 0xFA	; 250
    3ebc:	0e 94 01 34 	call	0x6802	; 0x6802 <strcpy>
			iHead = (iHead + 1) % iotcCmdQueueSize;
    3ec0:	e0 92 ac 06 	sts	0x06AC, r14
		executeSchedules() {
			iotSchedule	*s;
			for(s = iSchedule; s < iSchedule + iotcMaxSchedules; s++) {
				if((s->iTime == 0) || (s->iTime > iSeconds)) continue;
				if(!iotTerminal::enqueueLine(s->iLine)) break;	// full
				if(s->iPeriod > 0) s->iTime += s->iPeriod;
    3ec4:	f8 01       	movw	r30, r16
    3ec6:	84 81       	ldd	r24, Z+4	; 0x04
    3ec8:	95 81       	ldd	r25, Z+5	; 0x05
    3eca:	a6 81       	ldd	r26, Z+6	; 0x06
    3ecc:	b7 81       	ldd	r27, Z+7	; 0x07
    3ece:	18 16       	cp	r1, r24
    3ed0:	19 06       	cpc	r1, r25
    3ed2:	1a 06       	cpc	r1, r26
    3ed4:	1b 06       	cpc	r1, r27
    3ed6:	4c f4       	brge	.+18     	; 0x3eea <main+0x7e2>
    3ed8:	88 0e       	add	r8, r24
    3eda:	99 1e       	adc	r9, r25
    3edc:	aa 1e       	adc	r10, r26
    3ede:	bb 1e       	adc	r11, r27
    3ee0:	80 82       	st	Z, r8
    3ee2:	91 82       	std	Z+1, r9	; 0x01
    3ee4:	a2 82       	std	Z+2, r10	; 0x02
    3ee6:	b3 82       	std	Z+3, r11	; 0x03
    3ee8:	05 c0       	rjmp	.+10     	; 0x3ef4 <main+0x7ec>
				else s->iTime = 0;
    3eea:	f8 01       	movw	r30, r16
    3eec:	10 82       	st	Z, r1
    3eee:	11 82       	std	Z+1, r1	; 0x01
    3ef0:	12 82       	std	Z+2, r1	; 0x02
    3ef2:	13 82       	std	Z+3, r1	; 0x03
			return -1;
		}
		static void
		executeSchedules() {
			iotSchedule	*s;
			for(s = iSchedule; s < iSchedule + iotcMaxSchedules; s++) {
    3ef4:	06 5c       	subi	r16, 0xC6	; 198
    3ef6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ef8:	f5 e0       	ldi	r31, 0x05	; 5
    3efa:	0a 32       	cpi	r16, 0x2A	; 42
    3efc:	1f 07       	cpc	r17, r31
    3efe:	08 f4       	brcc	.+2      	; 0x3f02 <main+0x7fa>
    3f00:	aa cf       	rjmp	.-172    	; 0x3e56 <main+0x74e>
	int n = 0;
	char	*s;
	while(1) {
		
		iotClock::processOne();
		CharLcd->processOne();
    3f02:	20 91 4a 07 	lds	r18, 0x074A
    3f06:	30 91 4b 07 	lds	r19, 0x074B

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
		}
		void
		processOne() {
			if(iTail == iHead) return;		// buffer empty.
    3f0a:	f9 01       	movw	r30, r18
    3f0c:	e3 5d       	subi	r30, 0xD3	; 211
    3f0e:	fe 4f       	sbci	r31, 0xFE	; 254
    3f10:	90 81       	ld	r25, Z
    3f12:	31 97       	sbiw	r30, 0x01	; 1
    3f14:	80 81       	ld	r24, Z
    3f16:	98 17       	cp	r25, r24
    3f18:	09 f4       	brne	.+2      	; 0x3f1c <main+0x814>
    3f1a:	93 c3       	rjmp	.+1830   	; 0x4642 <main+0xf3a>

			volatile iotCharLcdOut	*out = iQueue + iTail;
    3f1c:	31 96       	adiw	r30, 0x01	; 1
    3f1e:	80 81       	ld	r24, Z
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	fc 01       	movw	r30, r24
    3f24:	ee 0f       	add	r30, r30
    3f26:	ff 1f       	adc	r31, r31
    3f28:	e8 0f       	add	r30, r24
    3f2a:	f9 1f       	adc	r31, r25
    3f2c:	e2 0f       	add	r30, r18
    3f2e:	f3 1f       	adc	r31, r19
			if((out->x != iX) || (out->y != iY))
    3f30:	90 81       	ld	r25, Z
    3f32:	d9 01       	movw	r26, r18
    3f34:	a2 5d       	subi	r26, 0xD2	; 210
    3f36:	be 4f       	sbci	r27, 0xFE	; 254
    3f38:	8c 91       	ld	r24, X
    3f3a:	98 13       	cpse	r25, r24
    3f3c:	06 c0       	rjmp	.+12     	; 0x3f4a <main+0x842>
    3f3e:	91 81       	ldd	r25, Z+1	; 0x01
    3f40:	11 96       	adiw	r26, 0x01	; 1
    3f42:	8c 91       	ld	r24, X
    3f44:	98 17       	cp	r25, r24
    3f46:	09 f4       	brne	.+2      	; 0x3f4a <main+0x842>
    3f48:	78 c2       	rjmp	.+1264   	; 0x443a <main+0xd32>
				goTo(out->x, out->y);
    3f4a:	81 81       	ldd	r24, Z+1	; 0x01
    3f4c:	40 81       	ld	r20, Z
		volatile unsigned char	iX, iY;
		char			iControl;

		void
		goTo(unsigned char aX, unsigned char aY) {
			if(aY == 1) {
    3f4e:	81 30       	cpi	r24, 0x01	; 1
    3f50:	09 f0       	breq	.+2      	; 0x3f54 <main+0x84c>
    3f52:	66 c1       	rjmp	.+716    	; 0x4220 <main+0xb18>
				writeControl(0x80 + aX - 1); iotTimer::delay(1);	
    3f54:	41 58       	subi	r20, 0x81	; 129
				writeControl(0xc0 + aX - 1); iotTimer::delay(1);
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
    3f56:	d9 01       	movw	r26, r18
    3f58:	a0 5d       	subi	r26, 0xD0	; 208
    3f5a:	be 4f       	sbci	r27, 0xFE	; 254
    3f5c:	8c 91       	ld	r24, X
    3f5e:	8f 70       	andi	r24, 0x0F	; 15
    3f60:	8c 93       	st	X, r24
    3f62:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    3f66:	61 96       	adiw	r28, 0x11	; 17
    3f68:	1f ae       	std	Y+63, r1	; 0x3f
    3f6a:	1e ae       	std	Y+62, r1	; 0x3e
    3f6c:	61 97       	sbiw	r28, 0x11	; 17
    3f6e:	61 96       	adiw	r28, 0x11	; 17
    3f70:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f72:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f74:	61 97       	sbiw	r28, 0x11	; 17
    3f76:	18 16       	cp	r1, r24
    3f78:	19 06       	cpc	r1, r25
    3f7a:	4c f1       	brlt	.+82     	; 0x3fce <main+0x8c6>
				for(volatile int j = 0; j < 6; j++) ;
    3f7c:	2f 96       	adiw	r28, 0x0f	; 15
    3f7e:	1f ae       	std	Y+63, r1	; 0x3f
    3f80:	1e ae       	std	Y+62, r1	; 0x3e
    3f82:	2f 97       	sbiw	r28, 0x0f	; 15
    3f84:	2f 96       	adiw	r28, 0x0f	; 15
    3f86:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f88:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f8a:	2f 97       	sbiw	r28, 0x0f	; 15
    3f8c:	06 97       	sbiw	r24, 0x06	; 6
    3f8e:	7c f4       	brge	.+30     	; 0x3fae <main+0x8a6>
    3f90:	2f 96       	adiw	r28, 0x0f	; 15
    3f92:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f94:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f96:	2f 97       	sbiw	r28, 0x0f	; 15
    3f98:	01 96       	adiw	r24, 0x01	; 1
    3f9a:	2f 96       	adiw	r28, 0x0f	; 15
    3f9c:	9f af       	std	Y+63, r25	; 0x3f
    3f9e:	8e af       	std	Y+62, r24	; 0x3e
    3fa0:	2f 97       	sbiw	r28, 0x0f	; 15
    3fa2:	2f 96       	adiw	r28, 0x0f	; 15
    3fa4:	8e ad       	ldd	r24, Y+62	; 0x3e
    3fa6:	9f ad       	ldd	r25, Y+63	; 0x3f
    3fa8:	2f 97       	sbiw	r28, 0x0f	; 15
    3faa:	06 97       	sbiw	r24, 0x06	; 6
    3fac:	8c f3       	brlt	.-30     	; 0x3f90 <main+0x888>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    3fae:	61 96       	adiw	r28, 0x11	; 17
    3fb0:	8e ad       	ldd	r24, Y+62	; 0x3e
    3fb2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3fb4:	61 97       	sbiw	r28, 0x11	; 17
    3fb6:	01 96       	adiw	r24, 0x01	; 1
    3fb8:	61 96       	adiw	r28, 0x11	; 17
    3fba:	9f af       	std	Y+63, r25	; 0x3f
    3fbc:	8e af       	std	Y+62, r24	; 0x3e
    3fbe:	61 97       	sbiw	r28, 0x11	; 17
    3fc0:	61 96       	adiw	r28, 0x11	; 17
    3fc2:	8e ad       	ldd	r24, Y+62	; 0x3e
    3fc4:	9f ad       	ldd	r25, Y+63	; 0x3f
    3fc6:	61 97       	sbiw	r28, 0x11	; 17
    3fc8:	18 16       	cp	r1, r24
    3fca:	19 06       	cpc	r1, r25
    3fcc:	bc f6       	brge	.-82     	; 0x3f7c <main+0x874>
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
    3fce:	d9 01       	movw	r26, r18
    3fd0:	a0 5d       	subi	r26, 0xD0	; 208
    3fd2:	be 4f       	sbci	r27, 0xFE	; 254
    3fd4:	8c 91       	ld	r24, X
    3fd6:	8b 71       	andi	r24, 0x1B	; 27
    3fd8:	8c 93       	st	X, r24
    3fda:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    3fde:	2d 96       	adiw	r28, 0x0d	; 13
    3fe0:	1f ae       	std	Y+63, r1	; 0x3f
    3fe2:	1e ae       	std	Y+62, r1	; 0x3e
    3fe4:	2d 97       	sbiw	r28, 0x0d	; 13
    3fe6:	2d 96       	adiw	r28, 0x0d	; 13
    3fe8:	8e ad       	ldd	r24, Y+62	; 0x3e
    3fea:	9f ad       	ldd	r25, Y+63	; 0x3f
    3fec:	2d 97       	sbiw	r28, 0x0d	; 13
    3fee:	18 16       	cp	r1, r24
    3ff0:	19 06       	cpc	r1, r25
    3ff2:	4c f1       	brlt	.+82     	; 0x4046 <main+0x93e>
				for(volatile int j = 0; j < 6; j++) ;
    3ff4:	2b 96       	adiw	r28, 0x0b	; 11
    3ff6:	1f ae       	std	Y+63, r1	; 0x3f
    3ff8:	1e ae       	std	Y+62, r1	; 0x3e
    3ffa:	2b 97       	sbiw	r28, 0x0b	; 11
    3ffc:	2b 96       	adiw	r28, 0x0b	; 11
    3ffe:	8e ad       	ldd	r24, Y+62	; 0x3e
    4000:	9f ad       	ldd	r25, Y+63	; 0x3f
    4002:	2b 97       	sbiw	r28, 0x0b	; 11
    4004:	06 97       	sbiw	r24, 0x06	; 6
    4006:	7c f4       	brge	.+30     	; 0x4026 <main+0x91e>
    4008:	2b 96       	adiw	r28, 0x0b	; 11
    400a:	8e ad       	ldd	r24, Y+62	; 0x3e
    400c:	9f ad       	ldd	r25, Y+63	; 0x3f
    400e:	2b 97       	sbiw	r28, 0x0b	; 11
    4010:	01 96       	adiw	r24, 0x01	; 1
    4012:	2b 96       	adiw	r28, 0x0b	; 11
    4014:	9f af       	std	Y+63, r25	; 0x3f
    4016:	8e af       	std	Y+62, r24	; 0x3e
    4018:	2b 97       	sbiw	r28, 0x0b	; 11
    401a:	2b 96       	adiw	r28, 0x0b	; 11
    401c:	8e ad       	ldd	r24, Y+62	; 0x3e
    401e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4020:	2b 97       	sbiw	r28, 0x0b	; 11
    4022:	06 97       	sbiw	r24, 0x06	; 6
    4024:	8c f3       	brlt	.-30     	; 0x4008 <main+0x900>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    4026:	2d 96       	adiw	r28, 0x0d	; 13
    4028:	8e ad       	ldd	r24, Y+62	; 0x3e
    402a:	9f ad       	ldd	r25, Y+63	; 0x3f
    402c:	2d 97       	sbiw	r28, 0x0d	; 13
    402e:	01 96       	adiw	r24, 0x01	; 1
    4030:	2d 96       	adiw	r28, 0x0d	; 13
    4032:	9f af       	std	Y+63, r25	; 0x3f
    4034:	8e af       	std	Y+62, r24	; 0x3e
    4036:	2d 97       	sbiw	r28, 0x0d	; 13
    4038:	2d 96       	adiw	r28, 0x0d	; 13
    403a:	8e ad       	ldd	r24, Y+62	; 0x3e
    403c:	9f ad       	ldd	r25, Y+63	; 0x3f
    403e:	2d 97       	sbiw	r28, 0x0d	; 13
    4040:	18 16       	cp	r1, r24
    4042:	19 06       	cpc	r1, r25
    4044:	bc f6       	brge	.-82     	; 0x3ff4 <main+0x8ec>
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
    4046:	d9 01       	movw	r26, r18
    4048:	a0 5d       	subi	r26, 0xD0	; 208
    404a:	be 4f       	sbci	r27, 0xFE	; 254
    404c:	8c 91       	ld	r24, X
    404e:	87 71       	andi	r24, 0x17	; 23
    4050:	8c 93       	st	X, r24
    4052:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    4056:	29 96       	adiw	r28, 0x09	; 9
    4058:	1f ae       	std	Y+63, r1	; 0x3f
    405a:	1e ae       	std	Y+62, r1	; 0x3e
    405c:	29 97       	sbiw	r28, 0x09	; 9
    405e:	29 96       	adiw	r28, 0x09	; 9
    4060:	8e ad       	ldd	r24, Y+62	; 0x3e
    4062:	9f ad       	ldd	r25, Y+63	; 0x3f
    4064:	29 97       	sbiw	r28, 0x09	; 9
    4066:	18 16       	cp	r1, r24
    4068:	19 06       	cpc	r1, r25
    406a:	4c f1       	brlt	.+82     	; 0x40be <main+0x9b6>
				for(volatile int j = 0; j < 6; j++) ;
    406c:	27 96       	adiw	r28, 0x07	; 7
    406e:	1f ae       	std	Y+63, r1	; 0x3f
    4070:	1e ae       	std	Y+62, r1	; 0x3e
    4072:	27 97       	sbiw	r28, 0x07	; 7
    4074:	27 96       	adiw	r28, 0x07	; 7
    4076:	8e ad       	ldd	r24, Y+62	; 0x3e
    4078:	9f ad       	ldd	r25, Y+63	; 0x3f
    407a:	27 97       	sbiw	r28, 0x07	; 7
    407c:	06 97       	sbiw	r24, 0x06	; 6
    407e:	7c f4       	brge	.+30     	; 0x409e <main+0x996>
    4080:	27 96       	adiw	r28, 0x07	; 7
    4082:	8e ad       	ldd	r24, Y+62	; 0x3e
    4084:	9f ad       	ldd	r25, Y+63	; 0x3f
    4086:	27 97       	sbiw	r28, 0x07	; 7
    4088:	01 96       	adiw	r24, 0x01	; 1
    408a:	27 96       	adiw	r28, 0x07	; 7
    408c:	9f af       	std	Y+63, r25	; 0x3f
    408e:	8e af       	std	Y+62, r24	; 0x3e
    4090:	27 97       	sbiw	r28, 0x07	; 7
    4092:	27 96       	adiw	r28, 0x07	; 7
    4094:	8e ad       	ldd	r24, Y+62	; 0x3e
    4096:	9f ad       	ldd	r25, Y+63	; 0x3f
    4098:	27 97       	sbiw	r28, 0x07	; 7
    409a:	06 97       	sbiw	r24, 0x06	; 6
    409c:	8c f3       	brlt	.-30     	; 0x4080 <main+0x978>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    409e:	29 96       	adiw	r28, 0x09	; 9
    40a0:	8e ad       	ldd	r24, Y+62	; 0x3e
    40a2:	9f ad       	ldd	r25, Y+63	; 0x3f
    40a4:	29 97       	sbiw	r28, 0x09	; 9
    40a6:	01 96       	adiw	r24, 0x01	; 1
    40a8:	29 96       	adiw	r28, 0x09	; 9
    40aa:	9f af       	std	Y+63, r25	; 0x3f
    40ac:	8e af       	std	Y+62, r24	; 0x3e
    40ae:	29 97       	sbiw	r28, 0x09	; 9
    40b0:	29 96       	adiw	r28, 0x09	; 9
    40b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    40b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    40b6:	29 97       	sbiw	r28, 0x09	; 9
    40b8:	18 16       	cp	r1, r24
    40ba:	19 06       	cpc	r1, r25
    40bc:	bc f6       	brge	.-82     	; 0x406c <main+0x964>
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
    40be:	d9 01       	movw	r26, r18
    40c0:	a0 5d       	subi	r26, 0xD0	; 208
    40c2:	be 4f       	sbci	r27, 0xFE	; 254
    40c4:	8c 91       	ld	r24, X
    40c6:	80 61       	ori	r24, 0x10	; 16
    40c8:	8c 93       	st	X, r24
    40ca:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    40ce:	25 96       	adiw	r28, 0x05	; 5
    40d0:	1f ae       	std	Y+63, r1	; 0x3f
    40d2:	1e ae       	std	Y+62, r1	; 0x3e
    40d4:	25 97       	sbiw	r28, 0x05	; 5
    40d6:	25 96       	adiw	r28, 0x05	; 5
    40d8:	8e ad       	ldd	r24, Y+62	; 0x3e
    40da:	9f ad       	ldd	r25, Y+63	; 0x3f
    40dc:	25 97       	sbiw	r28, 0x05	; 5
    40de:	18 16       	cp	r1, r24
    40e0:	19 06       	cpc	r1, r25
    40e2:	4c f1       	brlt	.+82     	; 0x4136 <main+0xa2e>
				for(volatile int j = 0; j < 6; j++) ;
    40e4:	23 96       	adiw	r28, 0x03	; 3
    40e6:	1f ae       	std	Y+63, r1	; 0x3f
    40e8:	1e ae       	std	Y+62, r1	; 0x3e
    40ea:	23 97       	sbiw	r28, 0x03	; 3
    40ec:	23 96       	adiw	r28, 0x03	; 3
    40ee:	8e ad       	ldd	r24, Y+62	; 0x3e
    40f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    40f2:	23 97       	sbiw	r28, 0x03	; 3
    40f4:	06 97       	sbiw	r24, 0x06	; 6
    40f6:	7c f4       	brge	.+30     	; 0x4116 <main+0xa0e>
    40f8:	23 96       	adiw	r28, 0x03	; 3
    40fa:	8e ad       	ldd	r24, Y+62	; 0x3e
    40fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    40fe:	23 97       	sbiw	r28, 0x03	; 3
    4100:	01 96       	adiw	r24, 0x01	; 1
    4102:	23 96       	adiw	r28, 0x03	; 3
    4104:	9f af       	std	Y+63, r25	; 0x3f
    4106:	8e af       	std	Y+62, r24	; 0x3e
    4108:	23 97       	sbiw	r28, 0x03	; 3
    410a:	23 96       	adiw	r28, 0x03	; 3
    410c:	8e ad       	ldd	r24, Y+62	; 0x3e
    410e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4110:	23 97       	sbiw	r28, 0x03	; 3
    4112:	06 97       	sbiw	r24, 0x06	; 6
    4114:	8c f3       	brlt	.-30     	; 0x40f8 <main+0x9f0>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    4116:	25 96       	adiw	r28, 0x05	; 5
    4118:	8e ad       	ldd	r24, Y+62	; 0x3e
    411a:	9f ad       	ldd	r25, Y+63	; 0x3f
    411c:	25 97       	sbiw	r28, 0x05	; 5
    411e:	01 96       	adiw	r24, 0x01	; 1
    4120:	25 96       	adiw	r28, 0x05	; 5
    4122:	9f af       	std	Y+63, r25	; 0x3f
    4124:	8e af       	std	Y+62, r24	; 0x3e
    4126:	25 97       	sbiw	r28, 0x05	; 5
    4128:	25 96       	adiw	r28, 0x05	; 5
    412a:	8e ad       	ldd	r24, Y+62	; 0x3e
    412c:	9f ad       	ldd	r25, Y+63	; 0x3f
    412e:	25 97       	sbiw	r28, 0x05	; 5
    4130:	18 16       	cp	r1, r24
    4132:	19 06       	cpc	r1, r25
    4134:	bc f6       	brge	.-82     	; 0x40e4 <main+0x9dc>
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
    4136:	4b bb       	out	0x1b, r20	; 27
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    4138:	21 96       	adiw	r28, 0x01	; 1
    413a:	1f ae       	std	Y+63, r1	; 0x3f
    413c:	1e ae       	std	Y+62, r1	; 0x3e
    413e:	21 97       	sbiw	r28, 0x01	; 1
    4140:	21 96       	adiw	r28, 0x01	; 1
    4142:	8e ad       	ldd	r24, Y+62	; 0x3e
    4144:	9f ad       	ldd	r25, Y+63	; 0x3f
    4146:	21 97       	sbiw	r28, 0x01	; 1
    4148:	18 16       	cp	r1, r24
    414a:	19 06       	cpc	r1, r25
    414c:	fc f0       	brlt	.+62     	; 0x418c <main+0xa84>
				for(volatile int j = 0; j < 6; j++) ;
    414e:	1e ae       	std	Y+62, r1	; 0x3e
    4150:	1d ae       	std	Y+61, r1	; 0x3d
    4152:	8d ad       	ldd	r24, Y+61	; 0x3d
    4154:	9e ad       	ldd	r25, Y+62	; 0x3e
    4156:	06 97       	sbiw	r24, 0x06	; 6
    4158:	4c f4       	brge	.+18     	; 0x416c <main+0xa64>
    415a:	8d ad       	ldd	r24, Y+61	; 0x3d
    415c:	9e ad       	ldd	r25, Y+62	; 0x3e
    415e:	01 96       	adiw	r24, 0x01	; 1
    4160:	9e af       	std	Y+62, r25	; 0x3e
    4162:	8d af       	std	Y+61, r24	; 0x3d
    4164:	8d ad       	ldd	r24, Y+61	; 0x3d
    4166:	9e ad       	ldd	r25, Y+62	; 0x3e
    4168:	06 97       	sbiw	r24, 0x06	; 6
    416a:	bc f3       	brlt	.-18     	; 0x415a <main+0xa52>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    416c:	21 96       	adiw	r28, 0x01	; 1
    416e:	8e ad       	ldd	r24, Y+62	; 0x3e
    4170:	9f ad       	ldd	r25, Y+63	; 0x3f
    4172:	21 97       	sbiw	r28, 0x01	; 1
    4174:	01 96       	adiw	r24, 0x01	; 1
    4176:	21 96       	adiw	r28, 0x01	; 1
    4178:	9f af       	std	Y+63, r25	; 0x3f
    417a:	8e af       	std	Y+62, r24	; 0x3e
    417c:	21 97       	sbiw	r28, 0x01	; 1
    417e:	21 96       	adiw	r28, 0x01	; 1
    4180:	8e ad       	ldd	r24, Y+62	; 0x3e
    4182:	9f ad       	ldd	r25, Y+63	; 0x3f
    4184:	21 97       	sbiw	r28, 0x01	; 1
    4186:	18 16       	cp	r1, r24
    4188:	19 06       	cpc	r1, r25
    418a:	0c f7       	brge	.-62     	; 0x414e <main+0xa46>
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
			iotmCharLcdEnOff; iotTimer::delay(1);
    418c:	d9 01       	movw	r26, r18
    418e:	a0 5d       	subi	r26, 0xD0	; 208
    4190:	be 4f       	sbci	r27, 0xFE	; 254
    4192:	8c 91       	ld	r24, X
    4194:	8f 70       	andi	r24, 0x0F	; 15
    4196:	8c 93       	st	X, r24
    4198:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    419c:	1c ae       	std	Y+60, r1	; 0x3c
    419e:	1b ae       	std	Y+59, r1	; 0x3b
    41a0:	8b ad       	ldd	r24, Y+59	; 0x3b
    41a2:	9c ad       	ldd	r25, Y+60	; 0x3c
    41a4:	18 16       	cp	r1, r24
    41a6:	19 06       	cpc	r1, r25
    41a8:	cc f0       	brlt	.+50     	; 0x41dc <main+0xad4>
				for(volatile int j = 0; j < 6; j++) ;
    41aa:	1a ae       	std	Y+58, r1	; 0x3a
    41ac:	19 ae       	std	Y+57, r1	; 0x39
    41ae:	89 ad       	ldd	r24, Y+57	; 0x39
    41b0:	9a ad       	ldd	r25, Y+58	; 0x3a
    41b2:	06 97       	sbiw	r24, 0x06	; 6
    41b4:	4c f4       	brge	.+18     	; 0x41c8 <main+0xac0>
    41b6:	89 ad       	ldd	r24, Y+57	; 0x39
    41b8:	9a ad       	ldd	r25, Y+58	; 0x3a
    41ba:	01 96       	adiw	r24, 0x01	; 1
    41bc:	9a af       	std	Y+58, r25	; 0x3a
    41be:	89 af       	std	Y+57, r24	; 0x39
    41c0:	89 ad       	ldd	r24, Y+57	; 0x39
    41c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    41c4:	06 97       	sbiw	r24, 0x06	; 6
    41c6:	bc f3       	brlt	.-18     	; 0x41b6 <main+0xaae>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    41c8:	8b ad       	ldd	r24, Y+59	; 0x3b
    41ca:	9c ad       	ldd	r25, Y+60	; 0x3c
    41cc:	01 96       	adiw	r24, 0x01	; 1
    41ce:	9c af       	std	Y+60, r25	; 0x3c
    41d0:	8b af       	std	Y+59, r24	; 0x3b
    41d2:	8b ad       	ldd	r24, Y+59	; 0x3b
    41d4:	9c ad       	ldd	r25, Y+60	; 0x3c
    41d6:	18 16       	cp	r1, r24
    41d8:	19 06       	cpc	r1, r25
    41da:	3c f7       	brge	.-50     	; 0x41aa <main+0xaa2>
    41dc:	18 ae       	std	Y+56, r1	; 0x38
    41de:	1f aa       	std	Y+55, r1	; 0x37
    41e0:	8f a9       	ldd	r24, Y+55	; 0x37
    41e2:	98 ad       	ldd	r25, Y+56	; 0x38
    41e4:	18 16       	cp	r1, r24
    41e6:	19 06       	cpc	r1, r25
    41e8:	0c f4       	brge	.+2      	; 0x41ec <main+0xae4>
    41ea:	27 c1       	rjmp	.+590    	; 0x443a <main+0xd32>
				for(volatile int j = 0; j < 6; j++) ;
    41ec:	1e aa       	std	Y+54, r1	; 0x36
    41ee:	1d aa       	std	Y+53, r1	; 0x35
    41f0:	8d a9       	ldd	r24, Y+53	; 0x35
    41f2:	9e a9       	ldd	r25, Y+54	; 0x36
    41f4:	06 97       	sbiw	r24, 0x06	; 6
    41f6:	4c f4       	brge	.+18     	; 0x420a <main+0xb02>
    41f8:	8d a9       	ldd	r24, Y+53	; 0x35
    41fa:	9e a9       	ldd	r25, Y+54	; 0x36
    41fc:	01 96       	adiw	r24, 0x01	; 1
    41fe:	9e ab       	std	Y+54, r25	; 0x36
    4200:	8d ab       	std	Y+53, r24	; 0x35
    4202:	8d a9       	ldd	r24, Y+53	; 0x35
    4204:	9e a9       	ldd	r25, Y+54	; 0x36
    4206:	06 97       	sbiw	r24, 0x06	; 6
    4208:	bc f3       	brlt	.-18     	; 0x41f8 <main+0xaf0>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    420a:	8f a9       	ldd	r24, Y+55	; 0x37
    420c:	98 ad       	ldd	r25, Y+56	; 0x38
    420e:	01 96       	adiw	r24, 0x01	; 1
    4210:	98 af       	std	Y+56, r25	; 0x38
    4212:	8f ab       	std	Y+55, r24	; 0x37
    4214:	8f a9       	ldd	r24, Y+55	; 0x37
    4216:	98 ad       	ldd	r25, Y+56	; 0x38
    4218:	18 16       	cp	r1, r24
    421a:	19 06       	cpc	r1, r25
    421c:	3c f7       	brge	.-50     	; 0x41ec <main+0xae4>
    421e:	0d c1       	rjmp	.+538    	; 0x443a <main+0xd32>

		void
		goTo(unsigned char aX, unsigned char aY) {
			if(aY == 1) {
				writeControl(0x80 + aX - 1); iotTimer::delay(1);	
			} else if (aY == 2) {
    4220:	82 30       	cpi	r24, 0x02	; 2
    4222:	09 f0       	breq	.+2      	; 0x4226 <main+0xb1e>
    4224:	0a c1       	rjmp	.+532    	; 0x443a <main+0xd32>
				writeControl(0xc0 + aX - 1); iotTimer::delay(1);
    4226:	41 54       	subi	r20, 0x41	; 65
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
    4228:	d9 01       	movw	r26, r18
    422a:	a0 5d       	subi	r26, 0xD0	; 208
    422c:	be 4f       	sbci	r27, 0xFE	; 254
    422e:	8c 91       	ld	r24, X
    4230:	8f 70       	andi	r24, 0x0F	; 15
    4232:	8c 93       	st	X, r24
    4234:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    4238:	1c aa       	std	Y+52, r1	; 0x34
    423a:	1b aa       	std	Y+51, r1	; 0x33
    423c:	8b a9       	ldd	r24, Y+51	; 0x33
    423e:	9c a9       	ldd	r25, Y+52	; 0x34
    4240:	18 16       	cp	r1, r24
    4242:	19 06       	cpc	r1, r25
    4244:	cc f0       	brlt	.+50     	; 0x4278 <main+0xb70>
				for(volatile int j = 0; j < 6; j++) ;
    4246:	1a aa       	std	Y+50, r1	; 0x32
    4248:	19 aa       	std	Y+49, r1	; 0x31
    424a:	89 a9       	ldd	r24, Y+49	; 0x31
    424c:	9a a9       	ldd	r25, Y+50	; 0x32
    424e:	06 97       	sbiw	r24, 0x06	; 6
    4250:	4c f4       	brge	.+18     	; 0x4264 <main+0xb5c>
    4252:	89 a9       	ldd	r24, Y+49	; 0x31
    4254:	9a a9       	ldd	r25, Y+50	; 0x32
    4256:	01 96       	adiw	r24, 0x01	; 1
    4258:	9a ab       	std	Y+50, r25	; 0x32
    425a:	89 ab       	std	Y+49, r24	; 0x31
    425c:	89 a9       	ldd	r24, Y+49	; 0x31
    425e:	9a a9       	ldd	r25, Y+50	; 0x32
    4260:	06 97       	sbiw	r24, 0x06	; 6
    4262:	bc f3       	brlt	.-18     	; 0x4252 <main+0xb4a>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    4264:	8b a9       	ldd	r24, Y+51	; 0x33
    4266:	9c a9       	ldd	r25, Y+52	; 0x34
    4268:	01 96       	adiw	r24, 0x01	; 1
    426a:	9c ab       	std	Y+52, r25	; 0x34
    426c:	8b ab       	std	Y+51, r24	; 0x33
    426e:	8b a9       	ldd	r24, Y+51	; 0x33
    4270:	9c a9       	ldd	r25, Y+52	; 0x34
    4272:	18 16       	cp	r1, r24
    4274:	19 06       	cpc	r1, r25
    4276:	3c f7       	brge	.-50     	; 0x4246 <main+0xb3e>
			}
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
    4278:	d9 01       	movw	r26, r18
    427a:	a0 5d       	subi	r26, 0xD0	; 208
    427c:	be 4f       	sbci	r27, 0xFE	; 254
    427e:	8c 91       	ld	r24, X
    4280:	8b 71       	andi	r24, 0x1B	; 27
    4282:	8c 93       	st	X, r24
    4284:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    4288:	18 aa       	std	Y+48, r1	; 0x30
    428a:	1f a6       	std	Y+47, r1	; 0x2f
    428c:	8f a5       	ldd	r24, Y+47	; 0x2f
    428e:	98 a9       	ldd	r25, Y+48	; 0x30
    4290:	18 16       	cp	r1, r24
    4292:	19 06       	cpc	r1, r25
    4294:	cc f0       	brlt	.+50     	; 0x42c8 <main+0xbc0>
				for(volatile int j = 0; j < 6; j++) ;
    4296:	1e a6       	std	Y+46, r1	; 0x2e
    4298:	1d a6       	std	Y+45, r1	; 0x2d
    429a:	8d a5       	ldd	r24, Y+45	; 0x2d
    429c:	9e a5       	ldd	r25, Y+46	; 0x2e
    429e:	06 97       	sbiw	r24, 0x06	; 6
    42a0:	4c f4       	brge	.+18     	; 0x42b4 <main+0xbac>
    42a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    42a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    42a6:	01 96       	adiw	r24, 0x01	; 1
    42a8:	9e a7       	std	Y+46, r25	; 0x2e
    42aa:	8d a7       	std	Y+45, r24	; 0x2d
    42ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    42ae:	9e a5       	ldd	r25, Y+46	; 0x2e
    42b0:	06 97       	sbiw	r24, 0x06	; 6
    42b2:	bc f3       	brlt	.-18     	; 0x42a2 <main+0xb9a>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    42b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    42b6:	98 a9       	ldd	r25, Y+48	; 0x30
    42b8:	01 96       	adiw	r24, 0x01	; 1
    42ba:	98 ab       	std	Y+48, r25	; 0x30
    42bc:	8f a7       	std	Y+47, r24	; 0x2f
    42be:	8f a5       	ldd	r24, Y+47	; 0x2f
    42c0:	98 a9       	ldd	r25, Y+48	; 0x30
    42c2:	18 16       	cp	r1, r24
    42c4:	19 06       	cpc	r1, r25
    42c6:	3c f7       	brge	.-50     	; 0x4296 <main+0xb8e>
		}
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
    42c8:	d9 01       	movw	r26, r18
    42ca:	a0 5d       	subi	r26, 0xD0	; 208
    42cc:	be 4f       	sbci	r27, 0xFE	; 254
    42ce:	8c 91       	ld	r24, X
    42d0:	87 71       	andi	r24, 0x17	; 23
    42d2:	8c 93       	st	X, r24
    42d4:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    42d8:	1c a6       	std	Y+44, r1	; 0x2c
    42da:	1b a6       	std	Y+43, r1	; 0x2b
    42dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    42de:	9c a5       	ldd	r25, Y+44	; 0x2c
    42e0:	18 16       	cp	r1, r24
    42e2:	19 06       	cpc	r1, r25
    42e4:	cc f0       	brlt	.+50     	; 0x4318 <main+0xc10>
				for(volatile int j = 0; j < 6; j++) ;
    42e6:	1a a6       	std	Y+42, r1	; 0x2a
    42e8:	19 a6       	std	Y+41, r1	; 0x29
    42ea:	89 a5       	ldd	r24, Y+41	; 0x29
    42ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    42ee:	06 97       	sbiw	r24, 0x06	; 6
    42f0:	4c f4       	brge	.+18     	; 0x4304 <main+0xbfc>
    42f2:	89 a5       	ldd	r24, Y+41	; 0x29
    42f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    42f6:	01 96       	adiw	r24, 0x01	; 1
    42f8:	9a a7       	std	Y+42, r25	; 0x2a
    42fa:	89 a7       	std	Y+41, r24	; 0x29
    42fc:	89 a5       	ldd	r24, Y+41	; 0x29
    42fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    4300:	06 97       	sbiw	r24, 0x06	; 6
    4302:	bc f3       	brlt	.-18     	; 0x42f2 <main+0xbea>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    4304:	8b a5       	ldd	r24, Y+43	; 0x2b
    4306:	9c a5       	ldd	r25, Y+44	; 0x2c
    4308:	01 96       	adiw	r24, 0x01	; 1
    430a:	9c a7       	std	Y+44, r25	; 0x2c
    430c:	8b a7       	std	Y+43, r24	; 0x2b
    430e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4310:	9c a5       	ldd	r25, Y+44	; 0x2c
    4312:	18 16       	cp	r1, r24
    4314:	19 06       	cpc	r1, r25
    4316:	3c f7       	brge	.-50     	; 0x42e6 <main+0xbde>
		void
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
    4318:	d9 01       	movw	r26, r18
    431a:	a0 5d       	subi	r26, 0xD0	; 208
    431c:	be 4f       	sbci	r27, 0xFE	; 254
    431e:	8c 91       	ld	r24, X
    4320:	80 61       	ori	r24, 0x10	; 16
    4322:	8c 93       	st	X, r24
    4324:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    4328:	18 a6       	std	Y+40, r1	; 0x28
    432a:	1f a2       	std	Y+39, r1	; 0x27
    432c:	8f a1       	ldd	r24, Y+39	; 0x27
    432e:	98 a5       	ldd	r25, Y+40	; 0x28
    4330:	18 16       	cp	r1, r24
    4332:	19 06       	cpc	r1, r25
    4334:	cc f0       	brlt	.+50     	; 0x4368 <main+0xc60>
				for(volatile int j = 0; j < 6; j++) ;
    4336:	1e a2       	std	Y+38, r1	; 0x26
    4338:	1d a2       	std	Y+37, r1	; 0x25
    433a:	8d a1       	ldd	r24, Y+37	; 0x25
    433c:	9e a1       	ldd	r25, Y+38	; 0x26
    433e:	06 97       	sbiw	r24, 0x06	; 6
    4340:	4c f4       	brge	.+18     	; 0x4354 <main+0xc4c>
    4342:	8d a1       	ldd	r24, Y+37	; 0x25
    4344:	9e a1       	ldd	r25, Y+38	; 0x26
    4346:	01 96       	adiw	r24, 0x01	; 1
    4348:	9e a3       	std	Y+38, r25	; 0x26
    434a:	8d a3       	std	Y+37, r24	; 0x25
    434c:	8d a1       	ldd	r24, Y+37	; 0x25
    434e:	9e a1       	ldd	r25, Y+38	; 0x26
    4350:	06 97       	sbiw	r24, 0x06	; 6
    4352:	bc f3       	brlt	.-18     	; 0x4342 <main+0xc3a>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    4354:	8f a1       	ldd	r24, Y+39	; 0x27
    4356:	98 a5       	ldd	r25, Y+40	; 0x28
    4358:	01 96       	adiw	r24, 0x01	; 1
    435a:	98 a7       	std	Y+40, r25	; 0x28
    435c:	8f a3       	std	Y+39, r24	; 0x27
    435e:	8f a1       	ldd	r24, Y+39	; 0x27
    4360:	98 a5       	ldd	r25, Y+40	; 0x28
    4362:	18 16       	cp	r1, r24
    4364:	19 06       	cpc	r1, r25
    4366:	3c f7       	brge	.-50     	; 0x4336 <main+0xc2e>
		writeControl(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
    4368:	4b bb       	out	0x1b, r20	; 27
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    436a:	1c a2       	std	Y+36, r1	; 0x24
    436c:	1b a2       	std	Y+35, r1	; 0x23
    436e:	8b a1       	ldd	r24, Y+35	; 0x23
    4370:	9c a1       	ldd	r25, Y+36	; 0x24
    4372:	18 16       	cp	r1, r24
    4374:	19 06       	cpc	r1, r25
    4376:	cc f0       	brlt	.+50     	; 0x43aa <main+0xca2>
				for(volatile int j = 0; j < 6; j++) ;
    4378:	1a a2       	std	Y+34, r1	; 0x22
    437a:	19 a2       	std	Y+33, r1	; 0x21
    437c:	89 a1       	ldd	r24, Y+33	; 0x21
    437e:	9a a1       	ldd	r25, Y+34	; 0x22
    4380:	06 97       	sbiw	r24, 0x06	; 6
    4382:	4c f4       	brge	.+18     	; 0x4396 <main+0xc8e>
    4384:	89 a1       	ldd	r24, Y+33	; 0x21
    4386:	9a a1       	ldd	r25, Y+34	; 0x22
    4388:	01 96       	adiw	r24, 0x01	; 1
    438a:	9a a3       	std	Y+34, r25	; 0x22
    438c:	89 a3       	std	Y+33, r24	; 0x21
    438e:	89 a1       	ldd	r24, Y+33	; 0x21
    4390:	9a a1       	ldd	r25, Y+34	; 0x22
    4392:	06 97       	sbiw	r24, 0x06	; 6
    4394:	bc f3       	brlt	.-18     	; 0x4384 <main+0xc7c>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    4396:	8b a1       	ldd	r24, Y+35	; 0x23
    4398:	9c a1       	ldd	r25, Y+36	; 0x24
    439a:	01 96       	adiw	r24, 0x01	; 1
    439c:	9c a3       	std	Y+36, r25	; 0x24
    439e:	8b a3       	std	Y+35, r24	; 0x23
    43a0:	8b a1       	ldd	r24, Y+35	; 0x23
    43a2:	9c a1       	ldd	r25, Y+36	; 0x24
    43a4:	18 16       	cp	r1, r24
    43a6:	19 06       	cpc	r1, r25
    43a8:	3c f7       	brge	.-50     	; 0x4378 <main+0xc70>
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOff; iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
			iotmCharLcdEnOff; iotTimer::delay(1);
    43aa:	d9 01       	movw	r26, r18
    43ac:	a0 5d       	subi	r26, 0xD0	; 208
    43ae:	be 4f       	sbci	r27, 0xFE	; 254
    43b0:	8c 91       	ld	r24, X
    43b2:	8f 70       	andi	r24, 0x0F	; 15
    43b4:	8c 93       	st	X, r24
    43b6:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    43ba:	18 a2       	std	Y+32, r1	; 0x20
    43bc:	1f 8e       	std	Y+31, r1	; 0x1f
    43be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    43c0:	98 a1       	ldd	r25, Y+32	; 0x20
    43c2:	18 16       	cp	r1, r24
    43c4:	19 06       	cpc	r1, r25
    43c6:	cc f0       	brlt	.+50     	; 0x43fa <main+0xcf2>
				for(volatile int j = 0; j < 6; j++) ;
    43c8:	1e 8e       	std	Y+30, r1	; 0x1e
    43ca:	1d 8e       	std	Y+29, r1	; 0x1d
    43cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    43ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    43d0:	06 97       	sbiw	r24, 0x06	; 6
    43d2:	4c f4       	brge	.+18     	; 0x43e6 <main+0xcde>
    43d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    43d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    43d8:	01 96       	adiw	r24, 0x01	; 1
    43da:	9e 8f       	std	Y+30, r25	; 0x1e
    43dc:	8d 8f       	std	Y+29, r24	; 0x1d
    43de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    43e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    43e2:	06 97       	sbiw	r24, 0x06	; 6
    43e4:	bc f3       	brlt	.-18     	; 0x43d4 <main+0xccc>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    43e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    43e8:	98 a1       	ldd	r25, Y+32	; 0x20
    43ea:	01 96       	adiw	r24, 0x01	; 1
    43ec:	98 a3       	std	Y+32, r25	; 0x20
    43ee:	8f 8f       	std	Y+31, r24	; 0x1f
    43f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    43f2:	98 a1       	ldd	r25, Y+32	; 0x20
    43f4:	18 16       	cp	r1, r24
    43f6:	19 06       	cpc	r1, r25
    43f8:	3c f7       	brge	.-50     	; 0x43c8 <main+0xcc0>
    43fa:	1c 8e       	std	Y+28, r1	; 0x1c
    43fc:	1b 8e       	std	Y+27, r1	; 0x1b
    43fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4400:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4402:	18 16       	cp	r1, r24
    4404:	19 06       	cpc	r1, r25
    4406:	cc f0       	brlt	.+50     	; 0x443a <main+0xd32>
				for(volatile int j = 0; j < 6; j++) ;
    4408:	1a 8e       	std	Y+26, r1	; 0x1a
    440a:	19 8e       	std	Y+25, r1	; 0x19
    440c:	89 8d       	ldd	r24, Y+25	; 0x19
    440e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4410:	06 97       	sbiw	r24, 0x06	; 6
    4412:	4c f4       	brge	.+18     	; 0x4426 <main+0xd1e>
    4414:	89 8d       	ldd	r24, Y+25	; 0x19
    4416:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4418:	01 96       	adiw	r24, 0x01	; 1
    441a:	9a 8f       	std	Y+26, r25	; 0x1a
    441c:	89 8f       	std	Y+25, r24	; 0x19
    441e:	89 8d       	ldd	r24, Y+25	; 0x19
    4420:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4422:	06 97       	sbiw	r24, 0x06	; 6
    4424:	bc f3       	brlt	.-18     	; 0x4414 <main+0xd0c>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    4426:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4428:	9c 8d       	ldd	r25, Y+28	; 0x1c
    442a:	01 96       	adiw	r24, 0x01	; 1
    442c:	9c 8f       	std	Y+28, r25	; 0x1c
    442e:	8b 8f       	std	Y+27, r24	; 0x1b
    4430:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4432:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4434:	18 16       	cp	r1, r24
    4436:	19 06       	cpc	r1, r25
    4438:	3c f7       	brge	.-50     	; 0x4408 <main+0xd00>
			if(iTail == iHead) return;		// buffer empty.

			volatile iotCharLcdOut	*out = iQueue + iTail;
			if((out->x != iX) || (out->y != iY))
				goTo(out->x, out->y);
			iX = (out->x + 1) % iotcCharLcdColumns;
    443a:	80 81       	ld	r24, Z
    443c:	90 e0       	ldi	r25, 0x00	; 0
    443e:	01 96       	adiw	r24, 0x01	; 1
    4440:	8f 70       	andi	r24, 0x0F	; 15
    4442:	90 78       	andi	r25, 0x80	; 128
    4444:	d9 01       	movw	r26, r18
    4446:	a2 5d       	subi	r26, 0xD2	; 210
    4448:	be 4f       	sbci	r27, 0xFE	; 254
    444a:	8c 93       	st	X, r24
			iY = out->y;
    444c:	81 81       	ldd	r24, Z+1	; 0x01
    444e:	11 96       	adiw	r26, 0x01	; 1
    4450:	8c 93       	st	X, r24
			writeData(out->c);
    4452:	42 81       	ldd	r20, Z+2	; 0x02
			iotcCharLcdData = value; iotTimer::delay(1);
			iotmCharLcdEnOff; iotTimer::delay(1);
		}
		void
		writeData(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
    4454:	f9 01       	movw	r30, r18
    4456:	e0 5d       	subi	r30, 0xD0	; 208
    4458:	fe 4f       	sbci	r31, 0xFE	; 254
    445a:	80 81       	ld	r24, Z
    445c:	8f 70       	andi	r24, 0x0F	; 15
    445e:	80 83       	st	Z, r24
    4460:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    4464:	18 8e       	std	Y+24, r1	; 0x18
    4466:	1f 8a       	std	Y+23, r1	; 0x17
    4468:	8f 89       	ldd	r24, Y+23	; 0x17
    446a:	98 8d       	ldd	r25, Y+24	; 0x18
    446c:	18 16       	cp	r1, r24
    446e:	19 06       	cpc	r1, r25
    4470:	cc f0       	brlt	.+50     	; 0x44a4 <main+0xd9c>
				for(volatile int j = 0; j < 6; j++) ;
    4472:	1e 8a       	std	Y+22, r1	; 0x16
    4474:	1d 8a       	std	Y+21, r1	; 0x15
    4476:	8d 89       	ldd	r24, Y+21	; 0x15
    4478:	9e 89       	ldd	r25, Y+22	; 0x16
    447a:	06 97       	sbiw	r24, 0x06	; 6
    447c:	4c f4       	brge	.+18     	; 0x4490 <main+0xd88>
    447e:	8d 89       	ldd	r24, Y+21	; 0x15
    4480:	9e 89       	ldd	r25, Y+22	; 0x16
    4482:	01 96       	adiw	r24, 0x01	; 1
    4484:	9e 8b       	std	Y+22, r25	; 0x16
    4486:	8d 8b       	std	Y+21, r24	; 0x15
    4488:	8d 89       	ldd	r24, Y+21	; 0x15
    448a:	9e 89       	ldd	r25, Y+22	; 0x16
    448c:	06 97       	sbiw	r24, 0x06	; 6
    448e:	bc f3       	brlt	.-18     	; 0x447e <main+0xd76>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    4490:	8f 89       	ldd	r24, Y+23	; 0x17
    4492:	98 8d       	ldd	r25, Y+24	; 0x18
    4494:	01 96       	adiw	r24, 0x01	; 1
    4496:	98 8f       	std	Y+24, r25	; 0x18
    4498:	8f 8b       	std	Y+23, r24	; 0x17
    449a:	8f 89       	ldd	r24, Y+23	; 0x17
    449c:	98 8d       	ldd	r25, Y+24	; 0x18
    449e:	18 16       	cp	r1, r24
    44a0:	19 06       	cpc	r1, r25
    44a2:	3c f7       	brge	.-50     	; 0x4472 <main+0xd6a>
			iotmCharLcdEnOff; iotTimer::delay(1);
		}
		void
		writeData(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOn;  iotTimer::delay(1);
    44a4:	f9 01       	movw	r30, r18
    44a6:	e0 5d       	subi	r30, 0xD0	; 208
    44a8:	fe 4f       	sbci	r31, 0xFE	; 254
    44aa:	80 81       	ld	r24, Z
    44ac:	84 60       	ori	r24, 0x04	; 4
    44ae:	80 83       	st	Z, r24
    44b0:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    44b4:	1c 8a       	std	Y+20, r1	; 0x14
    44b6:	1b 8a       	std	Y+19, r1	; 0x13
    44b8:	8b 89       	ldd	r24, Y+19	; 0x13
    44ba:	9c 89       	ldd	r25, Y+20	; 0x14
    44bc:	18 16       	cp	r1, r24
    44be:	19 06       	cpc	r1, r25
    44c0:	cc f0       	brlt	.+50     	; 0x44f4 <main+0xdec>
				for(volatile int j = 0; j < 6; j++) ;
    44c2:	1a 8a       	std	Y+18, r1	; 0x12
    44c4:	19 8a       	std	Y+17, r1	; 0x11
    44c6:	89 89       	ldd	r24, Y+17	; 0x11
    44c8:	9a 89       	ldd	r25, Y+18	; 0x12
    44ca:	06 97       	sbiw	r24, 0x06	; 6
    44cc:	4c f4       	brge	.+18     	; 0x44e0 <main+0xdd8>
    44ce:	89 89       	ldd	r24, Y+17	; 0x11
    44d0:	9a 89       	ldd	r25, Y+18	; 0x12
    44d2:	01 96       	adiw	r24, 0x01	; 1
    44d4:	9a 8b       	std	Y+18, r25	; 0x12
    44d6:	89 8b       	std	Y+17, r24	; 0x11
    44d8:	89 89       	ldd	r24, Y+17	; 0x11
    44da:	9a 89       	ldd	r25, Y+18	; 0x12
    44dc:	06 97       	sbiw	r24, 0x06	; 6
    44de:	bc f3       	brlt	.-18     	; 0x44ce <main+0xdc6>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    44e0:	8b 89       	ldd	r24, Y+19	; 0x13
    44e2:	9c 89       	ldd	r25, Y+20	; 0x14
    44e4:	01 96       	adiw	r24, 0x01	; 1
    44e6:	9c 8b       	std	Y+20, r25	; 0x14
    44e8:	8b 8b       	std	Y+19, r24	; 0x13
    44ea:	8b 89       	ldd	r24, Y+19	; 0x13
    44ec:	9c 89       	ldd	r25, Y+20	; 0x14
    44ee:	18 16       	cp	r1, r24
    44f0:	19 06       	cpc	r1, r25
    44f2:	3c f7       	brge	.-50     	; 0x44c2 <main+0xdba>
		}
		void
		writeData(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOn;  iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
    44f4:	f9 01       	movw	r30, r18
    44f6:	e0 5d       	subi	r30, 0xD0	; 208
    44f8:	fe 4f       	sbci	r31, 0xFE	; 254
    44fa:	80 81       	ld	r24, Z
    44fc:	87 71       	andi	r24, 0x17	; 23
    44fe:	80 83       	st	Z, r24
    4500:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    4504:	18 8a       	std	Y+16, r1	; 0x10
    4506:	1f 86       	std	Y+15, r1	; 0x0f
    4508:	8f 85       	ldd	r24, Y+15	; 0x0f
    450a:	98 89       	ldd	r25, Y+16	; 0x10
    450c:	18 16       	cp	r1, r24
    450e:	19 06       	cpc	r1, r25
    4510:	cc f0       	brlt	.+50     	; 0x4544 <main+0xe3c>
				for(volatile int j = 0; j < 6; j++) ;
    4512:	1e 86       	std	Y+14, r1	; 0x0e
    4514:	1d 86       	std	Y+13, r1	; 0x0d
    4516:	8d 85       	ldd	r24, Y+13	; 0x0d
    4518:	9e 85       	ldd	r25, Y+14	; 0x0e
    451a:	06 97       	sbiw	r24, 0x06	; 6
    451c:	4c f4       	brge	.+18     	; 0x4530 <main+0xe28>
    451e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4520:	9e 85       	ldd	r25, Y+14	; 0x0e
    4522:	01 96       	adiw	r24, 0x01	; 1
    4524:	9e 87       	std	Y+14, r25	; 0x0e
    4526:	8d 87       	std	Y+13, r24	; 0x0d
    4528:	8d 85       	ldd	r24, Y+13	; 0x0d
    452a:	9e 85       	ldd	r25, Y+14	; 0x0e
    452c:	06 97       	sbiw	r24, 0x06	; 6
    452e:	bc f3       	brlt	.-18     	; 0x451e <main+0xe16>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    4530:	8f 85       	ldd	r24, Y+15	; 0x0f
    4532:	98 89       	ldd	r25, Y+16	; 0x10
    4534:	01 96       	adiw	r24, 0x01	; 1
    4536:	98 8b       	std	Y+16, r25	; 0x10
    4538:	8f 87       	std	Y+15, r24	; 0x0f
    453a:	8f 85       	ldd	r24, Y+15	; 0x0f
    453c:	98 89       	ldd	r25, Y+16	; 0x10
    453e:	18 16       	cp	r1, r24
    4540:	19 06       	cpc	r1, r25
    4542:	3c f7       	brge	.-50     	; 0x4512 <main+0xe0a>
		void
		writeData(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOn;  iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
    4544:	f9 01       	movw	r30, r18
    4546:	e0 5d       	subi	r30, 0xD0	; 208
    4548:	fe 4f       	sbci	r31, 0xFE	; 254
    454a:	80 81       	ld	r24, Z
    454c:	80 61       	ori	r24, 0x10	; 16
    454e:	80 83       	st	Z, r24
    4550:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    4554:	1c 86       	std	Y+12, r1	; 0x0c
    4556:	1b 86       	std	Y+11, r1	; 0x0b
    4558:	8b 85       	ldd	r24, Y+11	; 0x0b
    455a:	9c 85       	ldd	r25, Y+12	; 0x0c
    455c:	18 16       	cp	r1, r24
    455e:	19 06       	cpc	r1, r25
    4560:	cc f0       	brlt	.+50     	; 0x4594 <main+0xe8c>
				for(volatile int j = 0; j < 6; j++) ;
    4562:	1a 86       	std	Y+10, r1	; 0x0a
    4564:	19 86       	std	Y+9, r1	; 0x09
    4566:	89 85       	ldd	r24, Y+9	; 0x09
    4568:	9a 85       	ldd	r25, Y+10	; 0x0a
    456a:	06 97       	sbiw	r24, 0x06	; 6
    456c:	4c f4       	brge	.+18     	; 0x4580 <main+0xe78>
    456e:	89 85       	ldd	r24, Y+9	; 0x09
    4570:	9a 85       	ldd	r25, Y+10	; 0x0a
    4572:	01 96       	adiw	r24, 0x01	; 1
    4574:	9a 87       	std	Y+10, r25	; 0x0a
    4576:	89 87       	std	Y+9, r24	; 0x09
    4578:	89 85       	ldd	r24, Y+9	; 0x09
    457a:	9a 85       	ldd	r25, Y+10	; 0x0a
    457c:	06 97       	sbiw	r24, 0x06	; 6
    457e:	bc f3       	brlt	.-18     	; 0x456e <main+0xe66>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    4580:	8b 85       	ldd	r24, Y+11	; 0x0b
    4582:	9c 85       	ldd	r25, Y+12	; 0x0c
    4584:	01 96       	adiw	r24, 0x01	; 1
    4586:	9c 87       	std	Y+12, r25	; 0x0c
    4588:	8b 87       	std	Y+11, r24	; 0x0b
    458a:	8b 85       	ldd	r24, Y+11	; 0x0b
    458c:	9c 85       	ldd	r25, Y+12	; 0x0c
    458e:	18 16       	cp	r1, r24
    4590:	19 06       	cpc	r1, r25
    4592:	3c f7       	brge	.-50     	; 0x4562 <main+0xe5a>
		writeData(char value) {
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOn;  iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
    4594:	4b bb       	out	0x1b, r20	; 27
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    4596:	18 86       	std	Y+8, r1	; 0x08
    4598:	1f 82       	std	Y+7, r1	; 0x07
    459a:	8f 81       	ldd	r24, Y+7	; 0x07
    459c:	98 85       	ldd	r25, Y+8	; 0x08
    459e:	18 16       	cp	r1, r24
    45a0:	19 06       	cpc	r1, r25
    45a2:	cc f0       	brlt	.+50     	; 0x45d6 <main+0xece>
				for(volatile int j = 0; j < 6; j++) ;
    45a4:	1e 82       	std	Y+6, r1	; 0x06
    45a6:	1d 82       	std	Y+5, r1	; 0x05
    45a8:	8d 81       	ldd	r24, Y+5	; 0x05
    45aa:	9e 81       	ldd	r25, Y+6	; 0x06
    45ac:	06 97       	sbiw	r24, 0x06	; 6
    45ae:	4c f4       	brge	.+18     	; 0x45c2 <main+0xeba>
    45b0:	8d 81       	ldd	r24, Y+5	; 0x05
    45b2:	9e 81       	ldd	r25, Y+6	; 0x06
    45b4:	01 96       	adiw	r24, 0x01	; 1
    45b6:	9e 83       	std	Y+6, r25	; 0x06
    45b8:	8d 83       	std	Y+5, r24	; 0x05
    45ba:	8d 81       	ldd	r24, Y+5	; 0x05
    45bc:	9e 81       	ldd	r25, Y+6	; 0x06
    45be:	06 97       	sbiw	r24, 0x06	; 6
    45c0:	bc f3       	brlt	.-18     	; 0x45b0 <main+0xea8>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    45c2:	8f 81       	ldd	r24, Y+7	; 0x07
    45c4:	98 85       	ldd	r25, Y+8	; 0x08
    45c6:	01 96       	adiw	r24, 0x01	; 1
    45c8:	98 87       	std	Y+8, r25	; 0x08
    45ca:	8f 83       	std	Y+7, r24	; 0x07
    45cc:	8f 81       	ldd	r24, Y+7	; 0x07
    45ce:	98 85       	ldd	r25, Y+8	; 0x08
    45d0:	18 16       	cp	r1, r24
    45d2:	19 06       	cpc	r1, r25
    45d4:	3c f7       	brge	.-50     	; 0x45a4 <main+0xe9c>
			iotmCharLcdEnOff; iotTimer::delay(1);
			iotmCharLcdRsOn;  iotTimer::delay(1);
			iotmCharLcdRwOff; iotTimer::delay(1);
			iotmCharLcdEnOn;  iotTimer::delay(1);
			iotcCharLcdData = value; iotTimer::delay(1);
			iotmCharLcdEnOff; iotTimer::delay(1);
    45d6:	f9 01       	movw	r30, r18
    45d8:	e0 5d       	subi	r30, 0xD0	; 208
    45da:	fe 4f       	sbci	r31, 0xFE	; 254
    45dc:	80 81       	ld	r24, Z
    45de:	8f 70       	andi	r24, 0x0F	; 15
    45e0:	80 83       	st	Z, r24
    45e2:	80 93 65 00 	sts	0x0065, r24
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    45e6:	1c 82       	std	Y+4, r1	; 0x04
    45e8:	1b 82       	std	Y+3, r1	; 0x03
    45ea:	8b 81       	ldd	r24, Y+3	; 0x03
    45ec:	9c 81       	ldd	r25, Y+4	; 0x04
    45ee:	18 16       	cp	r1, r24
    45f0:	19 06       	cpc	r1, r25
    45f2:	cc f0       	brlt	.+50     	; 0x4626 <main+0xf1e>
				for(volatile int j = 0; j < 6; j++) ;
    45f4:	1a 82       	std	Y+2, r1	; 0x02
    45f6:	19 82       	std	Y+1, r1	; 0x01
    45f8:	89 81       	ldd	r24, Y+1	; 0x01
    45fa:	9a 81       	ldd	r25, Y+2	; 0x02
    45fc:	06 97       	sbiw	r24, 0x06	; 6
    45fe:	4c f4       	brge	.+18     	; 0x4612 <main+0xf0a>
    4600:	89 81       	ldd	r24, Y+1	; 0x01
    4602:	9a 81       	ldd	r25, Y+2	; 0x02
    4604:	01 96       	adiw	r24, 0x01	; 1
    4606:	9a 83       	std	Y+2, r25	; 0x02
    4608:	89 83       	std	Y+1, r24	; 0x01
    460a:	89 81       	ldd	r24, Y+1	; 0x01
    460c:	9a 81       	ldd	r25, Y+2	; 0x02
    460e:	06 97       	sbiw	r24, 0x06	; 6
    4610:	bc f3       	brlt	.-18     	; 0x4600 <main+0xef8>
		iotTimerId getId()		{ return(iId); }
		bool isValid()	{ return(iId != iotcTimerNone); }
		
		static void
		delay(int cnt) {	// about cnt * 15 usec
			for(volatile int i = 0; i < cnt; i++) {
    4612:	8b 81       	ldd	r24, Y+3	; 0x03
    4614:	9c 81       	ldd	r25, Y+4	; 0x04
    4616:	01 96       	adiw	r24, 0x01	; 1
    4618:	9c 83       	std	Y+4, r25	; 0x04
    461a:	8b 83       	std	Y+3, r24	; 0x03
    461c:	8b 81       	ldd	r24, Y+3	; 0x03
    461e:	9c 81       	ldd	r25, Y+4	; 0x04
    4620:	18 16       	cp	r1, r24
    4622:	19 06       	cpc	r1, r25
    4624:	3c f7       	brge	.-50     	; 0x45f4 <main+0xeec>
				goTo(out->x, out->y);
			iX = (out->x + 1) % iotcCharLcdColumns;
			iY = out->y;
			writeData(out->c);

			iotmAtomic(iTail = (iTail + 1) % iotcCharLcdQueueSize);
    4626:	4f b7       	in	r20, 0x3f	; 63
    4628:	f8 94       	cli
    462a:	f9 01       	movw	r30, r18
    462c:	e3 5d       	subi	r30, 0xD3	; 211
    462e:	fe 4f       	sbci	r31, 0xFE	; 254
    4630:	80 81       	ld	r24, Z
    4632:	90 e0       	ldi	r25, 0x00	; 0
    4634:	01 96       	adiw	r24, 0x01	; 1
    4636:	64 e6       	ldi	r22, 0x64	; 100
    4638:	70 e0       	ldi	r23, 0x00	; 0
    463a:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    463e:	80 83       	st	Z, r24
    4640:	4f bf       	out	0x3f, r20	; 63
			iHead = (iHead + 1) % iotcCmdQueueSize;
			return true;
		}
		static void
		processOne() {
			if(iUart) iUart->processOne();
    4642:	80 91 15 07 	lds	r24, 0x0715
    4646:	90 91 16 07 	lds	r25, 0x0716
    464a:	89 2b       	or	r24, r25
    464c:	81 f1       	breq	.+96     	; 0x46ae <main+0xfa6>
		}
		bool isValid()	{ return(iId != iotcUartNone); }

		void
		processOne(void) {
			if(irx0Tail != irx0Head) {	// buffer not empty
    464e:	90 91 27 07 	lds	r25, 0x0727
    4652:	80 91 28 07 	lds	r24, 0x0728
    4656:	98 17       	cp	r25, r24
    4658:	39 f0       	breq	.+14     	; 0x4668 <main+0xf60>
				if(irx0Callback) (* irx0Callback)();
    465a:	e0 91 19 07 	lds	r30, 0x0719
    465e:	f0 91 1a 07 	lds	r31, 0x071A
    4662:	30 97       	sbiw	r30, 0x00	; 0
    4664:	09 f0       	breq	.+2      	; 0x4668 <main+0xf60>
    4666:	09 95       	icall
			}
			if(irx1Tail != irx1Head) {	// buffer not empty
    4668:	90 91 1f 07 	lds	r25, 0x071F
    466c:	80 91 20 07 	lds	r24, 0x0720
    4670:	98 17       	cp	r25, r24
    4672:	39 f0       	breq	.+14     	; 0x4682 <main+0xf7a>
				if(irx1Callback) (* irx1Callback)();
    4674:	e0 91 17 07 	lds	r30, 0x0717
    4678:	f0 91 18 07 	lds	r31, 0x0718
    467c:	30 97       	sbiw	r30, 0x00	; 0
    467e:	09 f0       	breq	.+2      	; 0x4682 <main+0xf7a>
    4680:	09 95       	icall
			}
			if((itx0Tail != itx0Head) && (UCSR0A & (1 << UDRE0))) {
    4682:	90 91 29 07 	lds	r25, 0x0729
    4686:	80 91 2a 07 	lds	r24, 0x072A
    468a:	98 17       	cp	r25, r24
    468c:	21 f0       	breq	.+8      	; 0x4696 <main+0xf8e>
    468e:	5d 9b       	sbis	0x0b, 5	; 11
    4690:	02 c0       	rjmp	.+4      	; 0x4696 <main+0xf8e>
    4692:	0c 94 c2 2d 	jmp	0x5b84	; 0x5b84 <main+0x247c>
				// buffer is not empty but data register is empty.
				UDR0 = itx0Buff[itx0Tail];
				iotmAtomic(itx0Tail = (itx0Tail + 1) % iotcUartBuffSize);
			}
			if((itx1Tail != itx1Head) && (UCSR1A & (1 << UDRE1))) {
    4696:	90 91 21 07 	lds	r25, 0x0721
    469a:	80 91 22 07 	lds	r24, 0x0722
    469e:	98 17       	cp	r25, r24
    46a0:	31 f0       	breq	.+12     	; 0x46ae <main+0xfa6>
    46a2:	80 91 9b 00 	lds	r24, 0x009B
    46a6:	85 ff       	sbrs	r24, 5
    46a8:	02 c0       	rjmp	.+4      	; 0x46ae <main+0xfa6>
    46aa:	0c 94 d9 2d 	jmp	0x5bb2	; 0x5bb2 <main+0x24aa>
			iUart = (iotUart *) NULL;
		}
		static char	*
		getLine() {
			char	*s;
			if(iTail != iHead) {	// queue not empty.
    46ae:	80 91 ab 06 	lds	r24, 0x06AB
    46b2:	90 91 ac 06 	lds	r25, 0x06AC
    46b6:	89 17       	cp	r24, r25
    46b8:	89 f0       	breq	.+34     	; 0x46dc <main+0xfd4>
				s = iQueue[iTail];
    46ba:	28 2f       	mov	r18, r24
    46bc:	30 e0       	ldi	r19, 0x00	; 0
    46be:	42 e3       	ldi	r20, 0x32	; 50
    46c0:	84 9f       	mul	r24, r20
    46c2:	c0 01       	movw	r24, r0
    46c4:	11 24       	eor	r1, r1
    46c6:	8d 51       	subi	r24, 0x1D	; 29
    46c8:	9a 4f       	sbci	r25, 0xFA	; 250
				iTail = (iTail + 1) % iotcCmdQueueSize;
    46ca:	2f 5f       	subi	r18, 0xFF	; 255
    46cc:	3f 4f       	sbci	r19, 0xFF	; 255
    46ce:	23 70       	andi	r18, 0x03	; 3
    46d0:	30 78       	andi	r19, 0x80	; 128
    46d2:	20 93 ab 06 	sts	0x06AB, r18
		iotTerminal::processOne();
		//iotFpSensor::processOne();
		if((s = iotTerminal::getLine())) parseLine(s);
    46d6:	00 97       	sbiw	r24, 0x00	; 0
    46d8:	59 f4       	brne	.+22     	; 0x46f0 <main+0xfe8>
    46da:	0c c0       	rjmp	.+24     	; 0x46f4 <main+0xfec>
			} else if((s = iLineToParse)) iLineToParse = (char *) NULL;
    46dc:	80 91 af 06 	lds	r24, 0x06AF
    46e0:	90 91 b0 06 	lds	r25, 0x06B0
    46e4:	00 97       	sbiw	r24, 0x00	; 0
    46e6:	31 f0       	breq	.+12     	; 0x46f4 <main+0xfec>
    46e8:	10 92 b0 06 	sts	0x06B0, r1
    46ec:	10 92 af 06 	sts	0x06AF, r1
    46f0:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZL9parseLinePc>
			iTimer->enableInterrupt(iotIrReceiver::stateMachine);
		}

		iotIrDecoder *
		getDecoder() {
			if(iDecoder->iState == iotcIrStateStop)
    46f4:	e0 91 37 07 	lds	r30, 0x0737
    46f8:	f0 91 38 07 	lds	r31, 0x0738
    46fc:	81 81       	ldd	r24, Z+1	; 0x01
    46fe:	83 30       	cpi	r24, 0x03	; 3
    4700:	11 f0       	breq	.+4      	; 0x4706 <main+0xffe>
    4702:	0c 94 f1 2d 	jmp	0x5be2	; 0x5be2 <main+0x24da>
		// 추가한 부분
		
		
		
		
		if((dec = IrRecv->getDecoder())) {
    4706:	f0 93 43 07 	sts	0x0743, r31
    470a:	e0 93 42 07 	sts	0x0742, r30
    470e:	30 97       	sbiw	r30, 0x00	; 0
    4710:	09 f4       	brne	.+2      	; 0x4714 <main+0x100c>
    4712:	b2 c9       	rjmp	.-3228   	; 0x3a78 <main+0x370>

class iotIrDecoder {
	public:
		iotIrVendor
		decode() {
			if((iState == iotcIrStateStop) &&
    4714:	81 81       	ldd	r24, Z+1	; 0x01
    4716:	83 30       	cpi	r24, 0x03	; 3
    4718:	11 f0       	breq	.+4      	; 0x471e <main+0x1016>
    471a:	0c 94 e7 2c 	jmp	0x59ce	; 0x59ce <main+0x22c6>
		bool
		decodeNec() {
			long	data = 0;
			int		offset = 1;		// skip first space
			// initial mark
			if(!matchMark(iInterval[offset], iotcNecHdrMark))
    471e:	85 81       	ldd	r24, Z+5	; 0x05
    4720:	96 81       	ldd	r25, Z+6	; 0x06

		bool
		matchMark(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs + iotcIrMarkExcess) &&
    4722:	88 58       	subi	r24, 0x88	; 136
    4724:	91 09       	sbc	r25, r1
    4726:	8d 35       	cpi	r24, 0x5D	; 93
    4728:	91 05       	cpc	r25, r1
    472a:	10 f4       	brcc	.+4      	; 0x4730 <main+0x1028>
    472c:	0c 94 f7 2d 	jmp	0x5bee	; 0x5bee <main+0x24e6>
    4730:	0c 94 49 2e 	jmp	0x5c92	; 0x5c92 <main+0x258a>
			if(!matchMark(iInterval[offset], iotcNecHdrMark))
				return(false);
			offset++;
			// check for repeat
			if(inIntervals == 4 &&
				matchSpace(iInterval[offset], iotcNecRptSpace) &&
    4734:	87 81       	ldd	r24, Z+7	; 0x07
    4736:	90 85       	ldd	r25, Z+8	; 0x08

		bool
		matchSpace(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs - iotcIrMarkExcess) &&
    4738:	80 97       	sbiw	r24, 0x20	; 32
    473a:	47 97       	sbiw	r24, 0x17	; 23
    473c:	10 f4       	brcc	.+4      	; 0x4742 <main+0x103a>
    473e:	0c 94 fc 2d 	jmp	0x5bf8	; 0x5bf8 <main+0x24f0>
    4742:	0c 94 01 2e 	jmp	0x5c02	; 0x5c02 <main+0x24fa>
				iVendor = iotcNec;
				return true;
			}
			if(inIntervals < 2 * iotcNecBits + 4) return false;
			// initial space
			if(!matchSpace(iInterval[offset], iotcNecHdrSpace))
    4746:	87 81       	ldd	r24, Z+7	; 0x07
    4748:	90 85       	ldd	r25, Z+8	; 0x08

		bool
		matchSpace(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs - iotcIrMarkExcess) &&
    474a:	82 54       	subi	r24, 0x42	; 66
    474c:	91 09       	sbc	r25, r1
    474e:	8e 97       	sbiw	r24, 0x2e	; 46
    4750:	10 f0       	brcs	.+4      	; 0x4756 <main+0x104e>
    4752:	0c 94 49 2e 	jmp	0x5c92	; 0x5c92 <main+0x258a>
    4756:	c1 2c       	mov	r12, r1
    4758:	d1 2c       	mov	r13, r1
    475a:	76 01       	movw	r14, r12
    475c:	83 e0       	ldi	r24, 0x03	; 3
    475e:	90 e0       	ldi	r25, 0x00	; 0
			// initial space
			if(!matchSpace(iInterval[offset], iotcNecHdrSpace))
				return false;
			offset++;
			for(int i = 0; i < iotcNecBits; i++) {
				if(!matchMark(iInterval[offset], iotcNecBitMark))
    4760:	dc 01       	movw	r26, r24
    4762:	aa 0f       	add	r26, r26
    4764:	bb 1f       	adc	r27, r27
    4766:	ae 0f       	add	r26, r30
    4768:	bf 1f       	adc	r27, r31
    476a:	13 96       	adiw	r26, 0x03	; 3
    476c:	2d 91       	ld	r18, X+
    476e:	3c 91       	ld	r19, X
    4770:	14 97       	sbiw	r26, 0x04	; 4

		bool
		matchMark(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs + iotcIrMarkExcess) &&
    4772:	29 50       	subi	r18, 0x09	; 9
    4774:	31 09       	sbc	r19, r1
    4776:	29 30       	cpi	r18, 0x09	; 9
    4778:	31 05       	cpc	r19, r1
    477a:	10 f4       	brcc	.+4      	; 0x4780 <main+0x1078>
    477c:	0c 94 1c 2e 	jmp	0x5c38	; 0x5c38 <main+0x2530>
    4780:	0c 94 49 2e 	jmp	0x5c92	; 0x5c92 <main+0x258a>
				if(matchSpace(iInterval[offset], iotcNecOneSpace))
					data = (data << 1) | 1;
				else if(matchSpace(
					iInterval[offset], iotcNecZeroSpace)) data <<= 1;
				else return false;
				offset++;
    4784:	02 96       	adiw	r24, 0x02	; 2
			if(inIntervals < 2 * iotcNecBits + 4) return false;
			// initial space
			if(!matchSpace(iInterval[offset], iotcNecHdrSpace))
				return false;
			offset++;
			for(int i = 0; i < iotcNecBits; i++) {
    4786:	83 34       	cpi	r24, 0x43	; 67
    4788:	91 05       	cpc	r25, r1
    478a:	51 f7       	brne	.-44     	; 0x4760 <main+0x1058>
					iInterval[offset], iotcNecZeroSpace)) data <<= 1;
				else return false;
				offset++;
			}
			// success
			inBits = iotcNecBits;
    478c:	80 e2       	ldi	r24, 0x20	; 32
    478e:	90 e0       	ldi	r25, 0x00	; 0
    4790:	df 01       	movw	r26, r30
    4792:	ad 52       	subi	r26, 0x2D	; 45
    4794:	bf 4f       	sbci	r27, 0xFF	; 255
    4796:	11 96       	adiw	r26, 0x01	; 1
    4798:	9c 93       	st	X, r25
    479a:	8e 93       	st	-X, r24
			iValue = data;
    479c:	14 97       	sbiw	r26, 0x04	; 4
    479e:	cd 92       	st	X+, r12
    47a0:	dd 92       	st	X+, r13
    47a2:	ed 92       	st	X+, r14
    47a4:	fc 92       	st	X, r15
    47a6:	13 97       	sbiw	r26, 0x03	; 3
			iVendor = iotcNec;
    47a8:	81 e0       	ldi	r24, 0x01	; 1
    47aa:	80 83       	st	Z, r24
    47ac:	6e c0       	rjmp	.+220    	; 0x488a <main+0x1182>
			// initial mark
				return false;
			offset++;
			if (inIntervals < 2 * iotcLgBits + 1) return false;
			// initial space
			if (!matchSpace(iInterval[offset], iotcLgHdrSpace))
    47ae:	87 81       	ldd	r24, Z+7	; 0x07
    47b0:	90 85       	ldd	r25, Z+8	; 0x08

		bool
		matchSpace(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs - iotcIrMarkExcess) &&
    47b2:	ca 97       	sbiw	r24, 0x3a	; 58
    47b4:	89 97       	sbiw	r24, 0x29	; 41
    47b6:	10 f0       	brcs	.+4      	; 0x47bc <main+0x10b4>
    47b8:	0c 94 97 2e 	jmp	0x5d2e	; 0x5d2e <main+0x2626>
    47bc:	c1 2c       	mov	r12, r1
    47be:	d1 2c       	mov	r13, r1
    47c0:	76 01       	movw	r14, r12
    47c2:	83 e0       	ldi	r24, 0x03	; 3
    47c4:	90 e0       	ldi	r25, 0x00	; 0
			// initial space
			if (!matchSpace(iInterval[offset], iotcLgHdrSpace))
				return false;
			offset++;
			for (int i = 0; i < iotcLgBits; i++) {
				if (!matchMark(iInterval[offset], iotcLgBitMark))
    47c6:	dc 01       	movw	r26, r24
    47c8:	aa 0f       	add	r26, r26
    47ca:	bb 1f       	adc	r27, r27
    47cc:	ae 0f       	add	r26, r30
    47ce:	bf 1f       	adc	r27, r31
    47d0:	13 96       	adiw	r26, 0x03	; 3
    47d2:	2d 91       	ld	r18, X+
    47d4:	3c 91       	ld	r19, X
    47d6:	14 97       	sbiw	r26, 0x04	; 4

		bool
		matchMark(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs + iotcIrMarkExcess) &&
    47d8:	2a 50       	subi	r18, 0x0A	; 10
    47da:	31 09       	sbc	r19, r1
    47dc:	29 30       	cpi	r18, 0x09	; 9
    47de:	31 05       	cpc	r19, r1
    47e0:	10 f4       	brcc	.+4      	; 0x47e6 <main+0x10de>
    47e2:	0c 94 57 2e 	jmp	0x5cae	; 0x5cae <main+0x25a6>
    47e6:	0c 94 97 2e 	jmp	0x5d2e	; 0x5d2e <main+0x2626>
					data = (data << 1) | 1;
				else if (matchSpace(
					iInterval[offset], iotcLgZeroSpace))
					data <<= 1;
				else return false;
				offset++;
    47ea:	02 96       	adiw	r24, 0x02	; 2
			if (inIntervals < 2 * iotcLgBits + 1) return false;
			// initial space
			if (!matchSpace(iInterval[offset], iotcLgHdrSpace))
				return false;
			offset++;
			for (int i = 0; i < iotcLgBits; i++) {
    47ec:	8b 33       	cpi	r24, 0x3B	; 59
    47ee:	91 05       	cpc	r25, r1
    47f0:	51 f7       	brne	.-44     	; 0x47c6 <main+0x10be>
					data <<= 1;
				else return false;
				offset++;
			}
			// stop bit
			if (!matchMark(iInterval[offset], iotcLgBitMark))
    47f2:	88 0f       	add	r24, r24
    47f4:	99 1f       	adc	r25, r25
    47f6:	df 01       	movw	r26, r30
    47f8:	a8 0f       	add	r26, r24
    47fa:	b9 1f       	adc	r27, r25
    47fc:	13 96       	adiw	r26, 0x03	; 3
    47fe:	8d 91       	ld	r24, X+
    4800:	9c 91       	ld	r25, X
    4802:	14 97       	sbiw	r26, 0x04	; 4

		bool
		matchMark(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs + iotcIrMarkExcess) &&
    4804:	0a 97       	sbiw	r24, 0x0a	; 10
    4806:	09 97       	sbiw	r24, 0x09	; 9
    4808:	10 f4       	brcc	.+4      	; 0x480e <main+0x1106>
    480a:	0c 94 85 2e 	jmp	0x5d0a	; 0x5d0a <main+0x2602>
    480e:	0c 94 97 2e 	jmp	0x5d2e	; 0x5d2e <main+0x2626>
			if (!matchMark(iInterval[offset], iotcSamsungHdrMark))
				return false;
			offset++;
			// check for repeat
			if(inIntervals == 4 &&
				matchSpace(iInterval[offset], iotcSamsungRptSpace) &&
    4812:	87 81       	ldd	r24, Z+7	; 0x07
    4814:	90 85       	ldd	r25, Z+8	; 0x08

		bool
		matchSpace(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs - iotcIrMarkExcess) &&
    4816:	80 97       	sbiw	r24, 0x20	; 32
    4818:	47 97       	sbiw	r24, 0x17	; 23
    481a:	10 f4       	brcc	.+4      	; 0x4820 <main+0x1118>
    481c:	0c 94 a3 2e 	jmp	0x5d46	; 0x5d46 <main+0x263e>
    4820:	0c 94 a8 2e 	jmp	0x5d50	; 0x5d50 <main+0x2648>
				iVendor = iotcSamsung;
				return true;
			}
			if (inIntervals < 2 * iotcSamsungBits + 4) return false;
			// initial space
			if (!matchSpace(iInterval[offset], iotcSamsungHdrSpace))
    4824:	87 81       	ldd	r24, Z+7	; 0x07
    4826:	90 85       	ldd	r25, Z+8	; 0x08

		bool
		matchSpace(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs - iotcIrMarkExcess) &&
    4828:	89 54       	subi	r24, 0x49	; 73
    482a:	91 09       	sbc	r25, r1
    482c:	c3 97       	sbiw	r24, 0x33	; 51
    482e:	10 f0       	brcs	.+4      	; 0x4834 <main+0x112c>
    4830:	0c 94 e7 2c 	jmp	0x59ce	; 0x59ce <main+0x22c6>
    4834:	c1 2c       	mov	r12, r1
    4836:	d1 2c       	mov	r13, r1
    4838:	76 01       	movw	r14, r12
    483a:	83 e0       	ldi	r24, 0x03	; 3
    483c:	90 e0       	ldi	r25, 0x00	; 0
			if (!matchSpace(iInterval[offset], iotcSamsungHdrSpace))
				return false;
			offset++;
			for (int i = 0; i < iotcSamsungBits; i++) {
				if (!matchMark(
					iInterval[offset], iotcSamsungBitMark))
    483e:	dc 01       	movw	r26, r24
    4840:	aa 0f       	add	r26, r26
    4842:	bb 1f       	adc	r27, r27
    4844:	ae 0f       	add	r26, r30
    4846:	bf 1f       	adc	r27, r31
    4848:	13 96       	adiw	r26, 0x03	; 3
    484a:	2d 91       	ld	r18, X+
    484c:	3c 91       	ld	r19, X
    484e:	14 97       	sbiw	r26, 0x04	; 4

		bool
		matchMark(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs + iotcIrMarkExcess) &&
    4850:	29 50       	subi	r18, 0x09	; 9
    4852:	31 09       	sbc	r19, r1
    4854:	29 30       	cpi	r18, 0x09	; 9
    4856:	31 05       	cpc	r19, r1
    4858:	10 f4       	brcc	.+4      	; 0x485e <main+0x1156>
    485a:	0c 94 c3 2e 	jmp	0x5d86	; 0x5d86 <main+0x267e>
    485e:	0c 94 e7 2c 	jmp	0x59ce	; 0x59ce <main+0x22c6>
					data = (data << 1) | 1;
				else if (matchSpace(
					iInterval[offset], iotcSamsungZeroSpace))
					data <<= 1;
				else return false;
				offset++;
    4862:	02 96       	adiw	r24, 0x02	; 2
			if (inIntervals < 2 * iotcSamsungBits + 4) return false;
			// initial space
			if (!matchSpace(iInterval[offset], iotcSamsungHdrSpace))
				return false;
			offset++;
			for (int i = 0; i < iotcSamsungBits; i++) {
    4864:	83 34       	cpi	r24, 0x43	; 67
    4866:	91 05       	cpc	r25, r1
    4868:	51 f7       	brne	.-44     	; 0x483e <main+0x1136>
					data <<= 1;
				else return false;
				offset++;
			}
			// stop bit
			if (!matchMark(iInterval[offset], iotcLgBitMark))
    486a:	88 0f       	add	r24, r24
    486c:	99 1f       	adc	r25, r25
    486e:	df 01       	movw	r26, r30
    4870:	a8 0f       	add	r26, r24
    4872:	b9 1f       	adc	r27, r25
    4874:	13 96       	adiw	r26, 0x03	; 3
    4876:	8d 91       	ld	r24, X+
    4878:	9c 91       	ld	r25, X
    487a:	14 97       	sbiw	r26, 0x04	; 4

		bool
		matchMark(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs + iotcIrMarkExcess) &&
    487c:	0a 97       	sbiw	r24, 0x0a	; 10
    487e:	09 97       	sbiw	r24, 0x09	; 9
    4880:	10 f4       	brcc	.+4      	; 0x4886 <main+0x117e>
    4882:	0c 94 f1 2e 	jmp	0x5de2	; 0x5de2 <main+0x26da>
    4886:	0c 94 e7 2c 	jmp	0x59ce	; 0x59ce <main+0x22c6>
			if(dec->decode() != iotcUnknown) {
    488a:	80 81       	ld	r24, Z
    488c:	88 23       	and	r24, r24
    488e:	11 f4       	brne	.+4      	; 0x4894 <main+0x118c>
    4890:	0c 94 e7 2c 	jmp	0x59ce	; 0x59ce <main+0x22c6>
				printf("%d: 0x%lx(%d)\n\r",
					dec->getVendor(), dec->getValue(), dec->getBits()); // 11: 0x001010(32)
    4894:	a0 91 42 07 	lds	r26, 0x0742
    4898:	b0 91 43 07 	lds	r27, 0x0743
				return(iVendor);
			return (iotcUnknown);
		}
		iotIrVendor		getVendor()	{ return(iVendor); }
		unsigned long	getValue()	{ return(iValue); }
		int				getBits()	{ return(inBits); }
    489c:	fd 01       	movw	r30, r26
    489e:	ed 52       	subi	r30, 0x2D	; 45
    48a0:	ff 4f       	sbci	r31, 0xFF	; 255
    48a2:	81 81       	ldd	r24, Z+1	; 0x01
    48a4:	8f 93       	push	r24
    48a6:	80 81       	ld	r24, Z
    48a8:	8f 93       	push	r24
				decodeLg() || decodeSamsung()))
				return(iVendor);
			return (iotcUnknown);
		}
		iotIrVendor		getVendor()	{ return(iVendor); }
		unsigned long	getValue()	{ return(iValue); }
    48aa:	34 97       	sbiw	r30, 0x04	; 4
    48ac:	83 81       	ldd	r24, Z+3	; 0x03
    48ae:	8f 93       	push	r24
    48b0:	82 81       	ldd	r24, Z+2	; 0x02
    48b2:	8f 93       	push	r24
    48b4:	81 81       	ldd	r24, Z+1	; 0x01
    48b6:	8f 93       	push	r24
    48b8:	80 81       	ld	r24, Z
    48ba:	8f 93       	push	r24
    48bc:	8c 91       	ld	r24, X
    48be:	1f 92       	push	r1
    48c0:	8f 93       	push	r24
    48c2:	8a ee       	ldi	r24, 0xEA	; 234
    48c4:	93 e0       	ldi	r25, 0x03	; 3
    48c6:	9f 93       	push	r25
    48c8:	8f 93       	push	r24
    48ca:	0e 94 80 34 	call	0x6900	; 0x6900 <printf>
				if(dec->getVendor() == iotcSamsung) { //&& (NumKeys < MaxKeys)
    48ce:	e0 91 42 07 	lds	r30, 0x0742
    48d2:	f0 91 43 07 	lds	r31, 0x0743
    48d6:	0f b6       	in	r0, 0x3f	; 63
    48d8:	f8 94       	cli
    48da:	de bf       	out	0x3e, r29	; 62
    48dc:	0f be       	out	0x3f, r0	; 63
    48de:	cd bf       	out	0x3d, r28	; 61
    48e0:	80 81       	ld	r24, Z
    48e2:	8b 30       	cpi	r24, 0x0B	; 11
    48e4:	11 f0       	breq	.+4      	; 0x48ea <main+0x11e2>
    48e6:	0c 94 25 2d 	jmp	0x5a4a	; 0x5a4a <main+0x2342>
    48ea:	e1 53       	subi	r30, 0x31	; 49
    48ec:	ff 4f       	sbci	r31, 0xFF	; 255
						
						printf("number1\n"); // 명령어 처주면 될듯
						CharLcd->print(2, 1, "rx : number1");
					}*/
					
					switch(dec->getValue()) {
    48ee:	80 81       	ld	r24, Z
    48f0:	91 81       	ldd	r25, Z+1	; 0x01
    48f2:	a2 81       	ldd	r26, Z+2	; 0x02
    48f4:	b3 81       	ldd	r27, Z+3	; 0x03
    48f6:	87 3b       	cpi	r24, 0xB7	; 183
    48f8:	e8 e4       	ldi	r30, 0x48	; 72
    48fa:	9e 07       	cpc	r25, r30
    48fc:	e0 ee       	ldi	r30, 0xE0	; 224
    48fe:	ae 07       	cpc	r26, r30
    4900:	be 07       	cpc	r27, r30
    4902:	09 f4       	brne	.+2      	; 0x4906 <main+0x11fe>
    4904:	0c c4       	rjmp	.+2072   	; 0x511e <main+0x1a16>
    4906:	08 f0       	brcs	.+2      	; 0x490a <main+0x1202>
    4908:	47 c0       	rjmp	.+142    	; 0x4998 <main+0x1290>
    490a:	87 3f       	cpi	r24, 0xF7	; 247
    490c:	28 e0       	ldi	r18, 0x08	; 8
    490e:	92 07       	cpc	r25, r18
    4910:	20 ee       	ldi	r18, 0xE0	; 224
    4912:	a2 07       	cpc	r26, r18
    4914:	b2 07       	cpc	r27, r18
    4916:	09 f4       	brne	.+2      	; 0x491a <main+0x1212>
    4918:	4c c4       	rjmp	.+2200   	; 0x51b2 <main+0x1aaa>
    491a:	e8 f4       	brcc	.+58     	; 0x4956 <main+0x124e>
    491c:	81 30       	cpi	r24, 0x01	; 1
    491e:	91 05       	cpc	r25, r1
    4920:	e0 ee       	ldi	r30, 0xE0	; 224
    4922:	ae 07       	cpc	r26, r30
    4924:	be 07       	cpc	r27, r30
    4926:	09 f4       	brne	.+2      	; 0x492a <main+0x1222>
    4928:	3e c5       	rjmp	.+2684   	; 0x53a6 <main+0x1c9e>
    492a:	38 f4       	brcc	.+14     	; 0x493a <main+0x1232>
    492c:	00 97       	sbiw	r24, 0x00	; 0
    492e:	a0 4e       	sbci	r26, 0xE0	; 224
    4930:	b0 4e       	sbci	r27, 0xE0	; 224
    4932:	09 f4       	brne	.+2      	; 0x4936 <main+0x122e>
    4934:	86 c4       	rjmp	.+2316   	; 0x5242 <main+0x1b3a>
    4936:	0c 94 25 2d 	jmp	0x5a4a	; 0x5a4a <main+0x2342>
    493a:	82 30       	cpi	r24, 0x02	; 2
    493c:	91 05       	cpc	r25, r1
    493e:	40 ee       	ldi	r20, 0xE0	; 224
    4940:	a4 07       	cpc	r26, r20
    4942:	b4 07       	cpc	r27, r20
    4944:	09 f4       	brne	.+2      	; 0x4948 <main+0x1240>
    4946:	00 c6       	rjmp	.+3072   	; 0x5548 <main+0x1e40>
    4948:	04 97       	sbiw	r24, 0x04	; 4
    494a:	a0 4e       	sbci	r26, 0xE0	; 224
    494c:	b0 4e       	sbci	r27, 0xE0	; 224
    494e:	09 f4       	brne	.+2      	; 0x4952 <main+0x124a>
    4950:	cc c6       	rjmp	.+3480   	; 0x56ea <main+0x1fe2>
    4952:	0c 94 25 2d 	jmp	0x5a4a	; 0x5a4a <main+0x2342>
    4956:	8f 3d       	cpi	r24, 0xDF	; 223
    4958:	f0 e2       	ldi	r31, 0x20	; 32
    495a:	9f 07       	cpc	r25, r31
    495c:	f0 ee       	ldi	r31, 0xE0	; 224
    495e:	af 07       	cpc	r26, r31
    4960:	bf 07       	cpc	r27, r31
    4962:	09 f4       	brne	.+2      	; 0x4966 <main+0x125e>
    4964:	64 c0       	rjmp	.+200    	; 0x4a2e <main+0x1326>
    4966:	40 f4       	brcc	.+16     	; 0x4978 <main+0x1270>
    4968:	8f 3e       	cpi	r24, 0xEF	; 239
    496a:	90 41       	sbci	r25, 0x10	; 16
    496c:	a0 4e       	sbci	r26, 0xE0	; 224
    496e:	b0 4e       	sbci	r27, 0xE0	; 224
    4970:	09 f4       	brne	.+2      	; 0x4974 <main+0x126c>
    4972:	3b c1       	rjmp	.+630    	; 0x4bea <main+0x14e2>
    4974:	0c 94 25 2d 	jmp	0x5a4a	; 0x5a4a <main+0x2342>
    4978:	8f 3c       	cpi	r24, 0xCF	; 207
    497a:	e0 e3       	ldi	r30, 0x30	; 48
    497c:	9e 07       	cpc	r25, r30
    497e:	e0 ee       	ldi	r30, 0xE0	; 224
    4980:	ae 07       	cpc	r26, r30
    4982:	be 07       	cpc	r27, r30
    4984:	09 f4       	brne	.+2      	; 0x4988 <main+0x1280>
    4986:	0f c2       	rjmp	.+1054   	; 0x4da6 <main+0x169e>
    4988:	8c 3b       	cpi	r24, 0xBC	; 188
    498a:	90 44       	sbci	r25, 0x40	; 64
    498c:	a0 4e       	sbci	r26, 0xE0	; 224
    498e:	b0 4e       	sbci	r27, 0xE0	; 224
    4990:	09 f4       	brne	.+2      	; 0x4994 <main+0x128c>
    4992:	7c c7       	rjmp	.+3832   	; 0x588c <main+0x2184>
    4994:	0c 94 25 2d 	jmp	0x5a4a	; 0x5a4a <main+0x2342>
    4998:	8f 36       	cpi	r24, 0x6F	; 111
    499a:	20 e9       	ldi	r18, 0x90	; 144
    499c:	92 07       	cpc	r25, r18
    499e:	20 ee       	ldi	r18, 0xE0	; 224
    49a0:	a2 07       	cpc	r26, r18
    49a2:	b2 07       	cpc	r27, r18
    49a4:	09 f4       	brne	.+2      	; 0x49a8 <main+0x12a0>
    49a6:	6b c1       	rjmp	.+726    	; 0x4c7e <main+0x1576>
    49a8:	08 f5       	brcc	.+66     	; 0x49ec <main+0x12e4>
    49aa:	8f 39       	cpi	r24, 0x9F	; 159
    49ac:	e0 e6       	ldi	r30, 0x60	; 96
    49ae:	9e 07       	cpc	r25, r30
    49b0:	e0 ee       	ldi	r30, 0xE0	; 224
    49b2:	ae 07       	cpc	r26, r30
    49b4:	be 07       	cpc	r27, r30
    49b6:	09 f4       	brne	.+2      	; 0x49ba <main+0x12b2>
    49b8:	ce c0       	rjmp	.+412    	; 0x4b56 <main+0x144e>
    49ba:	40 f4       	brcc	.+16     	; 0x49cc <main+0x12c4>
    49bc:	8f 3a       	cpi	r24, 0xAF	; 175
    49be:	90 45       	sbci	r25, 0x50	; 80
    49c0:	a0 4e       	sbci	r26, 0xE0	; 224
    49c2:	b0 4e       	sbci	r27, 0xE0	; 224
    49c4:	09 f4       	brne	.+2      	; 0x49c8 <main+0x12c0>
    49c6:	a5 c1       	rjmp	.+842    	; 0x4d12 <main+0x160a>
    49c8:	0c 94 25 2d 	jmp	0x5a4a	; 0x5a4a <main+0x2342>
    49cc:	8f 38       	cpi	r24, 0x8F	; 143
    49ce:	40 e7       	ldi	r20, 0x70	; 112
    49d0:	94 07       	cpc	r25, r20
    49d2:	40 ee       	ldi	r20, 0xE0	; 224
    49d4:	a4 07       	cpc	r26, r20
    49d6:	b4 07       	cpc	r27, r20
    49d8:	09 f4       	brne	.+2      	; 0x49dc <main+0x12d4>
    49da:	79 c2       	rjmp	.+1266   	; 0x4ece <main+0x17c6>
    49dc:	87 37       	cpi	r24, 0x77	; 119
    49de:	98 48       	sbci	r25, 0x88	; 136
    49e0:	a0 4e       	sbci	r26, 0xE0	; 224
    49e2:	b0 4e       	sbci	r27, 0xE0	; 224
    49e4:	09 f4       	brne	.+2      	; 0x49e8 <main+0x12e0>
    49e6:	bd c2       	rjmp	.+1402   	; 0x4f62 <main+0x185a>
    49e8:	0c 94 25 2d 	jmp	0x5a4a	; 0x5a4a <main+0x2342>
    49ec:	8f 34       	cpi	r24, 0x4F	; 79
    49ee:	f0 eb       	ldi	r31, 0xB0	; 176
    49f0:	9f 07       	cpc	r25, r31
    49f2:	f0 ee       	ldi	r31, 0xE0	; 224
    49f4:	af 07       	cpc	r26, r31
    49f6:	bf 07       	cpc	r27, r31
    49f8:	09 f4       	brne	.+2      	; 0x49fc <main+0x12f4>
    49fa:	1f c2       	rjmp	.+1086   	; 0x4e3a <main+0x1732>
    49fc:	40 f4       	brcc	.+16     	; 0x4a0e <main+0x1306>
    49fe:	8f 35       	cpi	r24, 0x5F	; 95
    4a00:	90 4a       	sbci	r25, 0xA0	; 160
    4a02:	a0 4e       	sbci	r26, 0xE0	; 224
    4a04:	b0 4e       	sbci	r27, 0xE0	; 224
    4a06:	09 f4       	brne	.+2      	; 0x4a0a <main+0x1302>
    4a08:	5c c0       	rjmp	.+184    	; 0x4ac2 <main+0x13ba>
    4a0a:	0c 94 25 2d 	jmp	0x5a4a	; 0x5a4a <main+0x2342>
    4a0e:	8f 32       	cpi	r24, 0x2F	; 47
    4a10:	e0 ed       	ldi	r30, 0xD0	; 208
    4a12:	9e 07       	cpc	r25, r30
    4a14:	e0 ee       	ldi	r30, 0xE0	; 224
    4a16:	ae 07       	cpc	r26, r30
    4a18:	be 07       	cpc	r27, r30
    4a1a:	09 f4       	brne	.+2      	; 0x4a1e <main+0x1316>
    4a1c:	36 c3       	rjmp	.+1644   	; 0x508a <main+0x1982>
    4a1e:	8f 31       	cpi	r24, 0x1F	; 31
    4a20:	90 4e       	sbci	r25, 0xE0	; 224
    4a22:	a0 4e       	sbci	r26, 0xE0	; 224
    4a24:	b0 4e       	sbci	r27, 0xE0	; 224
    4a26:	09 f4       	brne	.+2      	; 0x4a2a <main+0x1322>
    4a28:	e6 c2       	rjmp	.+1484   	; 0x4ff6 <main+0x18ee>
    4a2a:	0c 94 25 2d 	jmp	0x5a4a	; 0x5a4a <main+0x2342>
						case 0xe0e020df:
							CharLcd->print(2, 1, "rx : number1    ");
    4a2e:	20 91 4a 07 	lds	r18, 0x074A
    4a32:	30 91 4b 07 	lds	r19, 0x074B
    4a36:	0f 2e       	mov	r0, r31
    4a38:	ff ee       	ldi	r31, 0xEF	; 239
    4a3a:	ef 2e       	mov	r14, r31
    4a3c:	f2 e0       	ldi	r31, 0x02	; 2
    4a3e:	ff 2e       	mov	r15, r31
    4a40:	f0 2d       	mov	r31, r0
    4a42:	dd 24       	eor	r13, r13
    4a44:	d3 94       	inc	r13
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4a46:	f9 01       	movw	r30, r18
    4a48:	e4 5d       	subi	r30, 0xD4	; 212
    4a4a:	fe 4f       	sbci	r31, 0xFE	; 254
    4a4c:	59 01       	movw	r10, r18
    4a4e:	43 ed       	ldi	r20, 0xD3	; 211
    4a50:	a4 1a       	sub	r10, r20
    4a52:	4e ef       	ldi	r20, 0xFE	; 254
    4a54:	b4 0a       	sbc	r11, r20
    4a56:	04 e6       	ldi	r16, 0x64	; 100
    4a58:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    4a5a:	68 94       	set
    4a5c:	88 24       	eor	r8, r8
    4a5e:	81 f8       	bld	r8, 1
    4a60:	2a c0       	rjmp	.+84     	; 0x4ab6 <main+0x13ae>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4a62:	99 24       	eor	r9, r9
    4a64:	93 94       	inc	r9
    4a66:	9d 0c       	add	r9, r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4a68:	80 81       	ld	r24, Z
    4a6a:	d5 01       	movw	r26, r10
    4a6c:	4c 91       	ld	r20, X
    4a6e:	90 e0       	ldi	r25, 0x00	; 0
    4a70:	01 96       	adiw	r24, 0x01	; 1
    4a72:	b8 01       	movw	r22, r16
    4a74:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    4a78:	50 e0       	ldi	r21, 0x00	; 0
    4a7a:	84 17       	cp	r24, r20
    4a7c:	95 07       	cpc	r25, r21
    4a7e:	d1 f0       	breq	.+52     	; 0x4ab4 <main+0x13ac>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    4a80:	80 81       	ld	r24, Z
    4a82:	90 e0       	ldi	r25, 0x00	; 0
    4a84:	ac 01       	movw	r20, r24
    4a86:	44 0f       	add	r20, r20
    4a88:	55 1f       	adc	r21, r21
    4a8a:	84 0f       	add	r24, r20
    4a8c:	95 1f       	adc	r25, r21
    4a8e:	d9 01       	movw	r26, r18
    4a90:	a8 0f       	add	r26, r24
    4a92:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    4a94:	dc 92       	st	X, r13
    4a96:	11 96       	adiw	r26, 0x01	; 1
    4a98:	8c 92       	st	X, r8
    4a9a:	11 97       	sbiw	r26, 0x01	; 1
    4a9c:	12 96       	adiw	r26, 0x02	; 2
    4a9e:	cc 92       	st	X, r12

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    4aa0:	4f b7       	in	r20, 0x3f	; 63
    4aa2:	f8 94       	cli
    4aa4:	80 81       	ld	r24, Z
    4aa6:	90 e0       	ldi	r25, 0x00	; 0
    4aa8:	01 96       	adiw	r24, 0x01	; 1
    4aaa:	b8 01       	movw	r22, r16
    4aac:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    4ab0:	80 83       	st	Z, r24
    4ab2:	4f bf       	out	0x3f, r20	; 63

		bool
		matchSpace(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs - iotcIrMarkExcess) &&
    4ab4:	d9 2c       	mov	r13, r9
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4ab6:	d7 01       	movw	r26, r14
    4ab8:	cd 90       	ld	r12, X+
    4aba:	7d 01       	movw	r14, r26
    4abc:	c1 10       	cpse	r12, r1
    4abe:	d1 cf       	rjmp	.-94     	; 0x4a62 <main+0x135a>
    4ac0:	c4 c7       	rjmp	.+3976   	; 0x5a4a <main+0x2342>
							break;
						case 0xe0e0a05f:
							CharLcd->print(2, 1, "rx : number2    ");
    4ac2:	20 91 4a 07 	lds	r18, 0x074A
    4ac6:	30 91 4b 07 	lds	r19, 0x074B
    4aca:	0f 2e       	mov	r0, r31
    4acc:	f9 e9       	ldi	r31, 0x99	; 153
    4ace:	ef 2e       	mov	r14, r31
    4ad0:	f3 e0       	ldi	r31, 0x03	; 3
    4ad2:	ff 2e       	mov	r15, r31
    4ad4:	f0 2d       	mov	r31, r0
    4ad6:	dd 24       	eor	r13, r13
    4ad8:	d3 94       	inc	r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4ada:	f9 01       	movw	r30, r18
    4adc:	e4 5d       	subi	r30, 0xD4	; 212
    4ade:	fe 4f       	sbci	r31, 0xFE	; 254
    4ae0:	59 01       	movw	r10, r18
    4ae2:	b3 ed       	ldi	r27, 0xD3	; 211
    4ae4:	ab 1a       	sub	r10, r27
    4ae6:	be ef       	ldi	r27, 0xFE	; 254
    4ae8:	bb 0a       	sbc	r11, r27
    4aea:	04 e6       	ldi	r16, 0x64	; 100
    4aec:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    4aee:	68 94       	set
    4af0:	88 24       	eor	r8, r8
    4af2:	81 f8       	bld	r8, 1
    4af4:	2a c0       	rjmp	.+84     	; 0x4b4a <main+0x1442>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4af6:	99 24       	eor	r9, r9
    4af8:	93 94       	inc	r9
    4afa:	9d 0c       	add	r9, r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4afc:	80 81       	ld	r24, Z
    4afe:	d5 01       	movw	r26, r10
    4b00:	4c 91       	ld	r20, X
    4b02:	90 e0       	ldi	r25, 0x00	; 0
    4b04:	01 96       	adiw	r24, 0x01	; 1
    4b06:	b8 01       	movw	r22, r16
    4b08:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    4b0c:	50 e0       	ldi	r21, 0x00	; 0
    4b0e:	84 17       	cp	r24, r20
    4b10:	95 07       	cpc	r25, r21
    4b12:	d1 f0       	breq	.+52     	; 0x4b48 <main+0x1440>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    4b14:	80 81       	ld	r24, Z
    4b16:	90 e0       	ldi	r25, 0x00	; 0
    4b18:	ac 01       	movw	r20, r24
    4b1a:	44 0f       	add	r20, r20
    4b1c:	55 1f       	adc	r21, r21
    4b1e:	84 0f       	add	r24, r20
    4b20:	95 1f       	adc	r25, r21
    4b22:	d9 01       	movw	r26, r18
    4b24:	a8 0f       	add	r26, r24
    4b26:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    4b28:	dc 92       	st	X, r13
    4b2a:	11 96       	adiw	r26, 0x01	; 1
    4b2c:	8c 92       	st	X, r8
    4b2e:	11 97       	sbiw	r26, 0x01	; 1
    4b30:	12 96       	adiw	r26, 0x02	; 2
    4b32:	cc 92       	st	X, r12

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    4b34:	4f b7       	in	r20, 0x3f	; 63
    4b36:	f8 94       	cli
    4b38:	80 81       	ld	r24, Z
    4b3a:	90 e0       	ldi	r25, 0x00	; 0
    4b3c:	01 96       	adiw	r24, 0x01	; 1
    4b3e:	b8 01       	movw	r22, r16
    4b40:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    4b44:	80 83       	st	Z, r24
    4b46:	4f bf       	out	0x3f, r20	; 63
						CharLcd->print(2, 1, "rx : number1");
					}*/
					
					switch(dec->getValue()) {
						case 0xe0e020df:
							CharLcd->print(2, 1, "rx : number1    ");
    4b48:	d9 2c       	mov	r13, r9
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4b4a:	d7 01       	movw	r26, r14
    4b4c:	cd 90       	ld	r12, X+
    4b4e:	7d 01       	movw	r14, r26
    4b50:	c1 10       	cpse	r12, r1
    4b52:	d1 cf       	rjmp	.-94     	; 0x4af6 <main+0x13ee>
    4b54:	7a c7       	rjmp	.+3828   	; 0x5a4a <main+0x2342>
							break;
						case 0xe0e0a05f:
							CharLcd->print(2, 1, "rx : number2    ");
							break;
						case 0xe0e0609f:
							CharLcd->print(2, 1, "rx : number3    ");
    4b56:	20 91 4a 07 	lds	r18, 0x074A
    4b5a:	30 91 4b 07 	lds	r19, 0x074B
    4b5e:	0f 2e       	mov	r0, r31
    4b60:	f5 e5       	ldi	r31, 0x55	; 85
    4b62:	ef 2e       	mov	r14, r31
    4b64:	f3 e0       	ldi	r31, 0x03	; 3
    4b66:	ff 2e       	mov	r15, r31
    4b68:	f0 2d       	mov	r31, r0
    4b6a:	dd 24       	eor	r13, r13
    4b6c:	d3 94       	inc	r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4b6e:	f9 01       	movw	r30, r18
    4b70:	e4 5d       	subi	r30, 0xD4	; 212
    4b72:	fe 4f       	sbci	r31, 0xFE	; 254
    4b74:	59 01       	movw	r10, r18
    4b76:	b3 ed       	ldi	r27, 0xD3	; 211
    4b78:	ab 1a       	sub	r10, r27
    4b7a:	be ef       	ldi	r27, 0xFE	; 254
    4b7c:	bb 0a       	sbc	r11, r27
    4b7e:	04 e6       	ldi	r16, 0x64	; 100
    4b80:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    4b82:	68 94       	set
    4b84:	88 24       	eor	r8, r8
    4b86:	81 f8       	bld	r8, 1
    4b88:	2a c0       	rjmp	.+84     	; 0x4bde <main+0x14d6>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4b8a:	99 24       	eor	r9, r9
    4b8c:	93 94       	inc	r9
    4b8e:	9d 0c       	add	r9, r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4b90:	80 81       	ld	r24, Z
    4b92:	d5 01       	movw	r26, r10
    4b94:	4c 91       	ld	r20, X
    4b96:	90 e0       	ldi	r25, 0x00	; 0
    4b98:	01 96       	adiw	r24, 0x01	; 1
    4b9a:	b8 01       	movw	r22, r16
    4b9c:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    4ba0:	50 e0       	ldi	r21, 0x00	; 0
    4ba2:	84 17       	cp	r24, r20
    4ba4:	95 07       	cpc	r25, r21
    4ba6:	d1 f0       	breq	.+52     	; 0x4bdc <main+0x14d4>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    4ba8:	80 81       	ld	r24, Z
    4baa:	90 e0       	ldi	r25, 0x00	; 0
    4bac:	ac 01       	movw	r20, r24
    4bae:	44 0f       	add	r20, r20
    4bb0:	55 1f       	adc	r21, r21
    4bb2:	84 0f       	add	r24, r20
    4bb4:	95 1f       	adc	r25, r21
    4bb6:	d9 01       	movw	r26, r18
    4bb8:	a8 0f       	add	r26, r24
    4bba:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    4bbc:	dc 92       	st	X, r13
    4bbe:	11 96       	adiw	r26, 0x01	; 1
    4bc0:	8c 92       	st	X, r8
    4bc2:	11 97       	sbiw	r26, 0x01	; 1
    4bc4:	12 96       	adiw	r26, 0x02	; 2
    4bc6:	cc 92       	st	X, r12

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    4bc8:	4f b7       	in	r20, 0x3f	; 63
    4bca:	f8 94       	cli
    4bcc:	80 81       	ld	r24, Z
    4bce:	90 e0       	ldi	r25, 0x00	; 0
    4bd0:	01 96       	adiw	r24, 0x01	; 1
    4bd2:	b8 01       	movw	r22, r16
    4bd4:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    4bd8:	80 83       	st	Z, r24
    4bda:	4f bf       	out	0x3f, r20	; 63
					switch(dec->getValue()) {
						case 0xe0e020df:
							CharLcd->print(2, 1, "rx : number1    ");
							break;
						case 0xe0e0a05f:
							CharLcd->print(2, 1, "rx : number2    ");
    4bdc:	d9 2c       	mov	r13, r9
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4bde:	d7 01       	movw	r26, r14
    4be0:	cd 90       	ld	r12, X+
    4be2:	7d 01       	movw	r14, r26
    4be4:	c1 10       	cpse	r12, r1
    4be6:	d1 cf       	rjmp	.-94     	; 0x4b8a <main+0x1482>
    4be8:	30 c7       	rjmp	.+3680   	; 0x5a4a <main+0x2342>
							break;
						case 0xe0e0609f:
							CharLcd->print(2, 1, "rx : number3    ");
							break;
						case 0xe0e010ef:
							CharLcd->print(2, 1, "rx : number4    ");
    4bea:	20 91 4a 07 	lds	r18, 0x074A
    4bee:	30 91 4b 07 	lds	r19, 0x074B
    4bf2:	0f 2e       	mov	r0, r31
    4bf4:	fe ed       	ldi	r31, 0xDE	; 222
    4bf6:	ef 2e       	mov	r14, r31
    4bf8:	f2 e0       	ldi	r31, 0x02	; 2
    4bfa:	ff 2e       	mov	r15, r31
    4bfc:	f0 2d       	mov	r31, r0
    4bfe:	dd 24       	eor	r13, r13
    4c00:	d3 94       	inc	r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4c02:	f9 01       	movw	r30, r18
    4c04:	e4 5d       	subi	r30, 0xD4	; 212
    4c06:	fe 4f       	sbci	r31, 0xFE	; 254
    4c08:	59 01       	movw	r10, r18
    4c0a:	b3 ed       	ldi	r27, 0xD3	; 211
    4c0c:	ab 1a       	sub	r10, r27
    4c0e:	be ef       	ldi	r27, 0xFE	; 254
    4c10:	bb 0a       	sbc	r11, r27
    4c12:	04 e6       	ldi	r16, 0x64	; 100
    4c14:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    4c16:	68 94       	set
    4c18:	88 24       	eor	r8, r8
    4c1a:	81 f8       	bld	r8, 1
    4c1c:	2a c0       	rjmp	.+84     	; 0x4c72 <main+0x156a>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4c1e:	99 24       	eor	r9, r9
    4c20:	93 94       	inc	r9
    4c22:	9d 0c       	add	r9, r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4c24:	80 81       	ld	r24, Z
    4c26:	d5 01       	movw	r26, r10
    4c28:	4c 91       	ld	r20, X
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	01 96       	adiw	r24, 0x01	; 1
    4c2e:	b8 01       	movw	r22, r16
    4c30:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    4c34:	50 e0       	ldi	r21, 0x00	; 0
    4c36:	84 17       	cp	r24, r20
    4c38:	95 07       	cpc	r25, r21
    4c3a:	d1 f0       	breq	.+52     	; 0x4c70 <main+0x1568>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    4c3c:	80 81       	ld	r24, Z
    4c3e:	90 e0       	ldi	r25, 0x00	; 0
    4c40:	ac 01       	movw	r20, r24
    4c42:	44 0f       	add	r20, r20
    4c44:	55 1f       	adc	r21, r21
    4c46:	84 0f       	add	r24, r20
    4c48:	95 1f       	adc	r25, r21
    4c4a:	d9 01       	movw	r26, r18
    4c4c:	a8 0f       	add	r26, r24
    4c4e:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    4c50:	dc 92       	st	X, r13
    4c52:	11 96       	adiw	r26, 0x01	; 1
    4c54:	8c 92       	st	X, r8
    4c56:	11 97       	sbiw	r26, 0x01	; 1
    4c58:	12 96       	adiw	r26, 0x02	; 2
    4c5a:	cc 92       	st	X, r12

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    4c5c:	4f b7       	in	r20, 0x3f	; 63
    4c5e:	f8 94       	cli
    4c60:	80 81       	ld	r24, Z
    4c62:	90 e0       	ldi	r25, 0x00	; 0
    4c64:	01 96       	adiw	r24, 0x01	; 1
    4c66:	b8 01       	movw	r22, r16
    4c68:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    4c6c:	80 83       	st	Z, r24
    4c6e:	4f bf       	out	0x3f, r20	; 63
							break;
						case 0xe0e0a05f:
							CharLcd->print(2, 1, "rx : number2    ");
							break;
						case 0xe0e0609f:
							CharLcd->print(2, 1, "rx : number3    ");
    4c70:	d9 2c       	mov	r13, r9
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4c72:	d7 01       	movw	r26, r14
    4c74:	cd 90       	ld	r12, X+
    4c76:	7d 01       	movw	r14, r26
    4c78:	c1 10       	cpse	r12, r1
    4c7a:	d1 cf       	rjmp	.-94     	; 0x4c1e <main+0x1516>
    4c7c:	e6 c6       	rjmp	.+3532   	; 0x5a4a <main+0x2342>
							break;
						case 0xe0e010ef:
							CharLcd->print(2, 1, "rx : number4    ");
							break;
						case 0xe0e0906f:
							CharLcd->print(2, 1, "rx : number5    ");
    4c7e:	20 91 4a 07 	lds	r18, 0x074A
    4c82:	30 91 4b 07 	lds	r19, 0x074B
    4c86:	0f 2e       	mov	r0, r31
    4c88:	f8 e8       	ldi	r31, 0x88	; 136
    4c8a:	ef 2e       	mov	r14, r31
    4c8c:	f3 e0       	ldi	r31, 0x03	; 3
    4c8e:	ff 2e       	mov	r15, r31
    4c90:	f0 2d       	mov	r31, r0
    4c92:	dd 24       	eor	r13, r13
    4c94:	d3 94       	inc	r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4c96:	f9 01       	movw	r30, r18
    4c98:	e4 5d       	subi	r30, 0xD4	; 212
    4c9a:	fe 4f       	sbci	r31, 0xFE	; 254
    4c9c:	59 01       	movw	r10, r18
    4c9e:	b3 ed       	ldi	r27, 0xD3	; 211
    4ca0:	ab 1a       	sub	r10, r27
    4ca2:	be ef       	ldi	r27, 0xFE	; 254
    4ca4:	bb 0a       	sbc	r11, r27
    4ca6:	04 e6       	ldi	r16, 0x64	; 100
    4ca8:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    4caa:	68 94       	set
    4cac:	88 24       	eor	r8, r8
    4cae:	81 f8       	bld	r8, 1
    4cb0:	2a c0       	rjmp	.+84     	; 0x4d06 <main+0x15fe>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4cb2:	99 24       	eor	r9, r9
    4cb4:	93 94       	inc	r9
    4cb6:	9d 0c       	add	r9, r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4cb8:	80 81       	ld	r24, Z
    4cba:	d5 01       	movw	r26, r10
    4cbc:	4c 91       	ld	r20, X
    4cbe:	90 e0       	ldi	r25, 0x00	; 0
    4cc0:	01 96       	adiw	r24, 0x01	; 1
    4cc2:	b8 01       	movw	r22, r16
    4cc4:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    4cc8:	50 e0       	ldi	r21, 0x00	; 0
    4cca:	84 17       	cp	r24, r20
    4ccc:	95 07       	cpc	r25, r21
    4cce:	d1 f0       	breq	.+52     	; 0x4d04 <main+0x15fc>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    4cd0:	80 81       	ld	r24, Z
    4cd2:	90 e0       	ldi	r25, 0x00	; 0
    4cd4:	ac 01       	movw	r20, r24
    4cd6:	44 0f       	add	r20, r20
    4cd8:	55 1f       	adc	r21, r21
    4cda:	84 0f       	add	r24, r20
    4cdc:	95 1f       	adc	r25, r21
    4cde:	d9 01       	movw	r26, r18
    4ce0:	a8 0f       	add	r26, r24
    4ce2:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    4ce4:	dc 92       	st	X, r13
    4ce6:	11 96       	adiw	r26, 0x01	; 1
    4ce8:	8c 92       	st	X, r8
    4cea:	11 97       	sbiw	r26, 0x01	; 1
    4cec:	12 96       	adiw	r26, 0x02	; 2
    4cee:	cc 92       	st	X, r12

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    4cf0:	4f b7       	in	r20, 0x3f	; 63
    4cf2:	f8 94       	cli
    4cf4:	80 81       	ld	r24, Z
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	01 96       	adiw	r24, 0x01	; 1
    4cfa:	b8 01       	movw	r22, r16
    4cfc:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    4d00:	80 83       	st	Z, r24
    4d02:	4f bf       	out	0x3f, r20	; 63
							break;
						case 0xe0e0609f:
							CharLcd->print(2, 1, "rx : number3    ");
							break;
						case 0xe0e010ef:
							CharLcd->print(2, 1, "rx : number4    ");
    4d04:	d9 2c       	mov	r13, r9
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4d06:	d7 01       	movw	r26, r14
    4d08:	cd 90       	ld	r12, X+
    4d0a:	7d 01       	movw	r14, r26
    4d0c:	c1 10       	cpse	r12, r1
    4d0e:	d1 cf       	rjmp	.-94     	; 0x4cb2 <main+0x15aa>
    4d10:	9c c6       	rjmp	.+3384   	; 0x5a4a <main+0x2342>
							break;
						case 0xe0e0906f:
							CharLcd->print(2, 1, "rx : number5    ");
							break;
						case 0xe0e050af:
							CharLcd->print(2, 1, "rx : number6    ");
    4d12:	20 91 4a 07 	lds	r18, 0x074A
    4d16:	30 91 4b 07 	lds	r19, 0x074B
    4d1a:	0f 2e       	mov	r0, r31
    4d1c:	f4 e4       	ldi	r31, 0x44	; 68
    4d1e:	ef 2e       	mov	r14, r31
    4d20:	f3 e0       	ldi	r31, 0x03	; 3
    4d22:	ff 2e       	mov	r15, r31
    4d24:	f0 2d       	mov	r31, r0
    4d26:	dd 24       	eor	r13, r13
    4d28:	d3 94       	inc	r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4d2a:	f9 01       	movw	r30, r18
    4d2c:	e4 5d       	subi	r30, 0xD4	; 212
    4d2e:	fe 4f       	sbci	r31, 0xFE	; 254
    4d30:	59 01       	movw	r10, r18
    4d32:	b3 ed       	ldi	r27, 0xD3	; 211
    4d34:	ab 1a       	sub	r10, r27
    4d36:	be ef       	ldi	r27, 0xFE	; 254
    4d38:	bb 0a       	sbc	r11, r27
    4d3a:	04 e6       	ldi	r16, 0x64	; 100
    4d3c:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    4d3e:	68 94       	set
    4d40:	88 24       	eor	r8, r8
    4d42:	81 f8       	bld	r8, 1
    4d44:	2a c0       	rjmp	.+84     	; 0x4d9a <main+0x1692>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4d46:	99 24       	eor	r9, r9
    4d48:	93 94       	inc	r9
    4d4a:	9d 0c       	add	r9, r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4d4c:	80 81       	ld	r24, Z
    4d4e:	d5 01       	movw	r26, r10
    4d50:	4c 91       	ld	r20, X
    4d52:	90 e0       	ldi	r25, 0x00	; 0
    4d54:	01 96       	adiw	r24, 0x01	; 1
    4d56:	b8 01       	movw	r22, r16
    4d58:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    4d5c:	50 e0       	ldi	r21, 0x00	; 0
    4d5e:	84 17       	cp	r24, r20
    4d60:	95 07       	cpc	r25, r21
    4d62:	d1 f0       	breq	.+52     	; 0x4d98 <main+0x1690>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    4d64:	80 81       	ld	r24, Z
    4d66:	90 e0       	ldi	r25, 0x00	; 0
    4d68:	ac 01       	movw	r20, r24
    4d6a:	44 0f       	add	r20, r20
    4d6c:	55 1f       	adc	r21, r21
    4d6e:	84 0f       	add	r24, r20
    4d70:	95 1f       	adc	r25, r21
    4d72:	d9 01       	movw	r26, r18
    4d74:	a8 0f       	add	r26, r24
    4d76:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    4d78:	dc 92       	st	X, r13
    4d7a:	11 96       	adiw	r26, 0x01	; 1
    4d7c:	8c 92       	st	X, r8
    4d7e:	11 97       	sbiw	r26, 0x01	; 1
    4d80:	12 96       	adiw	r26, 0x02	; 2
    4d82:	cc 92       	st	X, r12

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    4d84:	4f b7       	in	r20, 0x3f	; 63
    4d86:	f8 94       	cli
    4d88:	80 81       	ld	r24, Z
    4d8a:	90 e0       	ldi	r25, 0x00	; 0
    4d8c:	01 96       	adiw	r24, 0x01	; 1
    4d8e:	b8 01       	movw	r22, r16
    4d90:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    4d94:	80 83       	st	Z, r24
    4d96:	4f bf       	out	0x3f, r20	; 63
							break;
						case 0xe0e010ef:
							CharLcd->print(2, 1, "rx : number4    ");
							break;
						case 0xe0e0906f:
							CharLcd->print(2, 1, "rx : number5    ");
    4d98:	d9 2c       	mov	r13, r9
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4d9a:	d7 01       	movw	r26, r14
    4d9c:	cd 90       	ld	r12, X+
    4d9e:	7d 01       	movw	r14, r26
    4da0:	c1 10       	cpse	r12, r1
    4da2:	d1 cf       	rjmp	.-94     	; 0x4d46 <main+0x163e>
    4da4:	52 c6       	rjmp	.+3236   	; 0x5a4a <main+0x2342>
							break;
						case 0xe0e050af:
							CharLcd->print(2, 1, "rx : number6    ");
							break;
						case 0xe0e030cf:
							CharLcd->print(2, 1, "rx : number7    ");
    4da6:	20 91 4a 07 	lds	r18, 0x074A
    4daa:	30 91 4b 07 	lds	r19, 0x074B
    4dae:	0f 2e       	mov	r0, r31
    4db0:	f0 e0       	ldi	r31, 0x00	; 0
    4db2:	ef 2e       	mov	r14, r31
    4db4:	f3 e0       	ldi	r31, 0x03	; 3
    4db6:	ff 2e       	mov	r15, r31
    4db8:	f0 2d       	mov	r31, r0
    4dba:	dd 24       	eor	r13, r13
    4dbc:	d3 94       	inc	r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4dbe:	f9 01       	movw	r30, r18
    4dc0:	e4 5d       	subi	r30, 0xD4	; 212
    4dc2:	fe 4f       	sbci	r31, 0xFE	; 254
    4dc4:	59 01       	movw	r10, r18
    4dc6:	b3 ed       	ldi	r27, 0xD3	; 211
    4dc8:	ab 1a       	sub	r10, r27
    4dca:	be ef       	ldi	r27, 0xFE	; 254
    4dcc:	bb 0a       	sbc	r11, r27
    4dce:	04 e6       	ldi	r16, 0x64	; 100
    4dd0:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    4dd2:	68 94       	set
    4dd4:	88 24       	eor	r8, r8
    4dd6:	81 f8       	bld	r8, 1
    4dd8:	2a c0       	rjmp	.+84     	; 0x4e2e <main+0x1726>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4dda:	99 24       	eor	r9, r9
    4ddc:	93 94       	inc	r9
    4dde:	9d 0c       	add	r9, r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4de0:	80 81       	ld	r24, Z
    4de2:	d5 01       	movw	r26, r10
    4de4:	4c 91       	ld	r20, X
    4de6:	90 e0       	ldi	r25, 0x00	; 0
    4de8:	01 96       	adiw	r24, 0x01	; 1
    4dea:	b8 01       	movw	r22, r16
    4dec:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    4df0:	50 e0       	ldi	r21, 0x00	; 0
    4df2:	84 17       	cp	r24, r20
    4df4:	95 07       	cpc	r25, r21
    4df6:	d1 f0       	breq	.+52     	; 0x4e2c <main+0x1724>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    4df8:	80 81       	ld	r24, Z
    4dfa:	90 e0       	ldi	r25, 0x00	; 0
    4dfc:	ac 01       	movw	r20, r24
    4dfe:	44 0f       	add	r20, r20
    4e00:	55 1f       	adc	r21, r21
    4e02:	84 0f       	add	r24, r20
    4e04:	95 1f       	adc	r25, r21
    4e06:	d9 01       	movw	r26, r18
    4e08:	a8 0f       	add	r26, r24
    4e0a:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    4e0c:	dc 92       	st	X, r13
    4e0e:	11 96       	adiw	r26, 0x01	; 1
    4e10:	8c 92       	st	X, r8
    4e12:	11 97       	sbiw	r26, 0x01	; 1
    4e14:	12 96       	adiw	r26, 0x02	; 2
    4e16:	cc 92       	st	X, r12

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    4e18:	4f b7       	in	r20, 0x3f	; 63
    4e1a:	f8 94       	cli
    4e1c:	80 81       	ld	r24, Z
    4e1e:	90 e0       	ldi	r25, 0x00	; 0
    4e20:	01 96       	adiw	r24, 0x01	; 1
    4e22:	b8 01       	movw	r22, r16
    4e24:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    4e28:	80 83       	st	Z, r24
    4e2a:	4f bf       	out	0x3f, r20	; 63
							break;
						case 0xe0e0906f:
							CharLcd->print(2, 1, "rx : number5    ");
							break;
						case 0xe0e050af:
							CharLcd->print(2, 1, "rx : number6    ");
    4e2c:	d9 2c       	mov	r13, r9
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4e2e:	d7 01       	movw	r26, r14
    4e30:	cd 90       	ld	r12, X+
    4e32:	7d 01       	movw	r14, r26
    4e34:	c1 10       	cpse	r12, r1
    4e36:	d1 cf       	rjmp	.-94     	; 0x4dda <main+0x16d2>
    4e38:	08 c6       	rjmp	.+3088   	; 0x5a4a <main+0x2342>
							break;
						case 0xe0e030cf:
							CharLcd->print(2, 1, "rx : number7    ");
							break;
						case 0xe0e0b04f:
							CharLcd->print(2, 1, "rx : number8    ");
    4e3a:	20 91 4a 07 	lds	r18, 0x074A
    4e3e:	30 91 4b 07 	lds	r19, 0x074B
    4e42:	0f 2e       	mov	r0, r31
    4e44:	fa ea       	ldi	r31, 0xAA	; 170
    4e46:	ef 2e       	mov	r14, r31
    4e48:	f3 e0       	ldi	r31, 0x03	; 3
    4e4a:	ff 2e       	mov	r15, r31
    4e4c:	f0 2d       	mov	r31, r0
    4e4e:	dd 24       	eor	r13, r13
    4e50:	d3 94       	inc	r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4e52:	f9 01       	movw	r30, r18
    4e54:	e4 5d       	subi	r30, 0xD4	; 212
    4e56:	fe 4f       	sbci	r31, 0xFE	; 254
    4e58:	59 01       	movw	r10, r18
    4e5a:	b3 ed       	ldi	r27, 0xD3	; 211
    4e5c:	ab 1a       	sub	r10, r27
    4e5e:	be ef       	ldi	r27, 0xFE	; 254
    4e60:	bb 0a       	sbc	r11, r27
    4e62:	04 e6       	ldi	r16, 0x64	; 100
    4e64:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    4e66:	68 94       	set
    4e68:	88 24       	eor	r8, r8
    4e6a:	81 f8       	bld	r8, 1
    4e6c:	2a c0       	rjmp	.+84     	; 0x4ec2 <main+0x17ba>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4e6e:	99 24       	eor	r9, r9
    4e70:	93 94       	inc	r9
    4e72:	9d 0c       	add	r9, r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4e74:	80 81       	ld	r24, Z
    4e76:	d5 01       	movw	r26, r10
    4e78:	4c 91       	ld	r20, X
    4e7a:	90 e0       	ldi	r25, 0x00	; 0
    4e7c:	01 96       	adiw	r24, 0x01	; 1
    4e7e:	b8 01       	movw	r22, r16
    4e80:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    4e84:	50 e0       	ldi	r21, 0x00	; 0
    4e86:	84 17       	cp	r24, r20
    4e88:	95 07       	cpc	r25, r21
    4e8a:	d1 f0       	breq	.+52     	; 0x4ec0 <main+0x17b8>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    4e8c:	80 81       	ld	r24, Z
    4e8e:	90 e0       	ldi	r25, 0x00	; 0
    4e90:	ac 01       	movw	r20, r24
    4e92:	44 0f       	add	r20, r20
    4e94:	55 1f       	adc	r21, r21
    4e96:	84 0f       	add	r24, r20
    4e98:	95 1f       	adc	r25, r21
    4e9a:	d9 01       	movw	r26, r18
    4e9c:	a8 0f       	add	r26, r24
    4e9e:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    4ea0:	dc 92       	st	X, r13
    4ea2:	11 96       	adiw	r26, 0x01	; 1
    4ea4:	8c 92       	st	X, r8
    4ea6:	11 97       	sbiw	r26, 0x01	; 1
    4ea8:	12 96       	adiw	r26, 0x02	; 2
    4eaa:	cc 92       	st	X, r12

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    4eac:	4f b7       	in	r20, 0x3f	; 63
    4eae:	f8 94       	cli
    4eb0:	80 81       	ld	r24, Z
    4eb2:	90 e0       	ldi	r25, 0x00	; 0
    4eb4:	01 96       	adiw	r24, 0x01	; 1
    4eb6:	b8 01       	movw	r22, r16
    4eb8:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    4ebc:	80 83       	st	Z, r24
    4ebe:	4f bf       	out	0x3f, r20	; 63
							break;
						case 0xe0e050af:
							CharLcd->print(2, 1, "rx : number6    ");
							break;
						case 0xe0e030cf:
							CharLcd->print(2, 1, "rx : number7    ");
    4ec0:	d9 2c       	mov	r13, r9
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4ec2:	d7 01       	movw	r26, r14
    4ec4:	cd 90       	ld	r12, X+
    4ec6:	7d 01       	movw	r14, r26
    4ec8:	c1 10       	cpse	r12, r1
    4eca:	d1 cf       	rjmp	.-94     	; 0x4e6e <main+0x1766>
    4ecc:	be c5       	rjmp	.+2940   	; 0x5a4a <main+0x2342>
							break;
						case 0xe0e0b04f:
							CharLcd->print(2, 1, "rx : number8    ");
							break;
						case 0xe0e0708f:
							CharLcd->print(2, 1, "rx : number9    ");
    4ece:	20 91 4a 07 	lds	r18, 0x074A
    4ed2:	30 91 4b 07 	lds	r19, 0x074B
    4ed6:	0f 2e       	mov	r0, r31
    4ed8:	f6 e6       	ldi	r31, 0x66	; 102
    4eda:	ef 2e       	mov	r14, r31
    4edc:	f3 e0       	ldi	r31, 0x03	; 3
    4ede:	ff 2e       	mov	r15, r31
    4ee0:	f0 2d       	mov	r31, r0
    4ee2:	dd 24       	eor	r13, r13
    4ee4:	d3 94       	inc	r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4ee6:	f9 01       	movw	r30, r18
    4ee8:	e4 5d       	subi	r30, 0xD4	; 212
    4eea:	fe 4f       	sbci	r31, 0xFE	; 254
    4eec:	59 01       	movw	r10, r18
    4eee:	b3 ed       	ldi	r27, 0xD3	; 211
    4ef0:	ab 1a       	sub	r10, r27
    4ef2:	be ef       	ldi	r27, 0xFE	; 254
    4ef4:	bb 0a       	sbc	r11, r27
    4ef6:	04 e6       	ldi	r16, 0x64	; 100
    4ef8:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    4efa:	68 94       	set
    4efc:	88 24       	eor	r8, r8
    4efe:	81 f8       	bld	r8, 1
    4f00:	2a c0       	rjmp	.+84     	; 0x4f56 <main+0x184e>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4f02:	99 24       	eor	r9, r9
    4f04:	93 94       	inc	r9
    4f06:	9d 0c       	add	r9, r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4f08:	80 81       	ld	r24, Z
    4f0a:	d5 01       	movw	r26, r10
    4f0c:	4c 91       	ld	r20, X
    4f0e:	90 e0       	ldi	r25, 0x00	; 0
    4f10:	01 96       	adiw	r24, 0x01	; 1
    4f12:	b8 01       	movw	r22, r16
    4f14:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    4f18:	50 e0       	ldi	r21, 0x00	; 0
    4f1a:	84 17       	cp	r24, r20
    4f1c:	95 07       	cpc	r25, r21
    4f1e:	d1 f0       	breq	.+52     	; 0x4f54 <main+0x184c>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    4f20:	80 81       	ld	r24, Z
    4f22:	90 e0       	ldi	r25, 0x00	; 0
    4f24:	ac 01       	movw	r20, r24
    4f26:	44 0f       	add	r20, r20
    4f28:	55 1f       	adc	r21, r21
    4f2a:	84 0f       	add	r24, r20
    4f2c:	95 1f       	adc	r25, r21
    4f2e:	d9 01       	movw	r26, r18
    4f30:	a8 0f       	add	r26, r24
    4f32:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    4f34:	dc 92       	st	X, r13
    4f36:	11 96       	adiw	r26, 0x01	; 1
    4f38:	8c 92       	st	X, r8
    4f3a:	11 97       	sbiw	r26, 0x01	; 1
    4f3c:	12 96       	adiw	r26, 0x02	; 2
    4f3e:	cc 92       	st	X, r12

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    4f40:	4f b7       	in	r20, 0x3f	; 63
    4f42:	f8 94       	cli
    4f44:	80 81       	ld	r24, Z
    4f46:	90 e0       	ldi	r25, 0x00	; 0
    4f48:	01 96       	adiw	r24, 0x01	; 1
    4f4a:	b8 01       	movw	r22, r16
    4f4c:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    4f50:	80 83       	st	Z, r24
    4f52:	4f bf       	out	0x3f, r20	; 63
							break;
						case 0xe0e030cf:
							CharLcd->print(2, 1, "rx : number7    ");
							break;
						case 0xe0e0b04f:
							CharLcd->print(2, 1, "rx : number8    ");
    4f54:	d9 2c       	mov	r13, r9
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4f56:	d7 01       	movw	r26, r14
    4f58:	cd 90       	ld	r12, X+
    4f5a:	7d 01       	movw	r14, r26
    4f5c:	c1 10       	cpse	r12, r1
    4f5e:	d1 cf       	rjmp	.-94     	; 0x4f02 <main+0x17fa>
    4f60:	74 c5       	rjmp	.+2792   	; 0x5a4a <main+0x2342>
							break;
						case 0xe0e0708f:
							CharLcd->print(2, 1, "rx : number9    ");
							break;
						case 0xe0e08877:
							CharLcd->print(2, 1, "rx : number0    ");
    4f62:	20 91 4a 07 	lds	r18, 0x074A
    4f66:	30 91 4b 07 	lds	r19, 0x074B
    4f6a:	0f 2e       	mov	r0, r31
    4f6c:	f7 e7       	ldi	r31, 0x77	; 119
    4f6e:	ef 2e       	mov	r14, r31
    4f70:	f3 e0       	ldi	r31, 0x03	; 3
    4f72:	ff 2e       	mov	r15, r31
    4f74:	f0 2d       	mov	r31, r0
    4f76:	dd 24       	eor	r13, r13
    4f78:	d3 94       	inc	r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4f7a:	f9 01       	movw	r30, r18
    4f7c:	e4 5d       	subi	r30, 0xD4	; 212
    4f7e:	fe 4f       	sbci	r31, 0xFE	; 254
    4f80:	59 01       	movw	r10, r18
    4f82:	b3 ed       	ldi	r27, 0xD3	; 211
    4f84:	ab 1a       	sub	r10, r27
    4f86:	be ef       	ldi	r27, 0xFE	; 254
    4f88:	bb 0a       	sbc	r11, r27
    4f8a:	04 e6       	ldi	r16, 0x64	; 100
    4f8c:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    4f8e:	68 94       	set
    4f90:	88 24       	eor	r8, r8
    4f92:	81 f8       	bld	r8, 1
    4f94:	2a c0       	rjmp	.+84     	; 0x4fea <main+0x18e2>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4f96:	99 24       	eor	r9, r9
    4f98:	93 94       	inc	r9
    4f9a:	9d 0c       	add	r9, r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    4f9c:	80 81       	ld	r24, Z
    4f9e:	d5 01       	movw	r26, r10
    4fa0:	4c 91       	ld	r20, X
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	01 96       	adiw	r24, 0x01	; 1
    4fa6:	b8 01       	movw	r22, r16
    4fa8:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    4fac:	50 e0       	ldi	r21, 0x00	; 0
    4fae:	84 17       	cp	r24, r20
    4fb0:	95 07       	cpc	r25, r21
    4fb2:	d1 f0       	breq	.+52     	; 0x4fe8 <main+0x18e0>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    4fb4:	80 81       	ld	r24, Z
    4fb6:	90 e0       	ldi	r25, 0x00	; 0
    4fb8:	ac 01       	movw	r20, r24
    4fba:	44 0f       	add	r20, r20
    4fbc:	55 1f       	adc	r21, r21
    4fbe:	84 0f       	add	r24, r20
    4fc0:	95 1f       	adc	r25, r21
    4fc2:	d9 01       	movw	r26, r18
    4fc4:	a8 0f       	add	r26, r24
    4fc6:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    4fc8:	dc 92       	st	X, r13
    4fca:	11 96       	adiw	r26, 0x01	; 1
    4fcc:	8c 92       	st	X, r8
    4fce:	11 97       	sbiw	r26, 0x01	; 1
    4fd0:	12 96       	adiw	r26, 0x02	; 2
    4fd2:	cc 92       	st	X, r12

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    4fd4:	4f b7       	in	r20, 0x3f	; 63
    4fd6:	f8 94       	cli
    4fd8:	80 81       	ld	r24, Z
    4fda:	90 e0       	ldi	r25, 0x00	; 0
    4fdc:	01 96       	adiw	r24, 0x01	; 1
    4fde:	b8 01       	movw	r22, r16
    4fe0:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    4fe4:	80 83       	st	Z, r24
    4fe6:	4f bf       	out	0x3f, r20	; 63
							break;
						case 0xe0e0b04f:
							CharLcd->print(2, 1, "rx : number8    ");
							break;
						case 0xe0e0708f:
							CharLcd->print(2, 1, "rx : number9    ");
    4fe8:	d9 2c       	mov	r13, r9
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    4fea:	d7 01       	movw	r26, r14
    4fec:	cd 90       	ld	r12, X+
    4fee:	7d 01       	movw	r14, r26
    4ff0:	c1 10       	cpse	r12, r1
    4ff2:	d1 cf       	rjmp	.-94     	; 0x4f96 <main+0x188e>
    4ff4:	2a c5       	rjmp	.+2644   	; 0x5a4a <main+0x2342>
							break;
						case 0xe0e08877:
							CharLcd->print(2, 1, "rx : number0    ");
							break;
						case 0xe0e0e01f:
							CharLcd->print(2, 1, "rx : vol up     ");
    4ff6:	20 91 4a 07 	lds	r18, 0x074A
    4ffa:	30 91 4b 07 	lds	r19, 0x074B
    4ffe:	0f 2e       	mov	r0, r31
    5000:	fc ec       	ldi	r31, 0xCC	; 204
    5002:	ef 2e       	mov	r14, r31
    5004:	f3 e0       	ldi	r31, 0x03	; 3
    5006:	ff 2e       	mov	r15, r31
    5008:	f0 2d       	mov	r31, r0
    500a:	dd 24       	eor	r13, r13
    500c:	d3 94       	inc	r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    500e:	f9 01       	movw	r30, r18
    5010:	e4 5d       	subi	r30, 0xD4	; 212
    5012:	fe 4f       	sbci	r31, 0xFE	; 254
    5014:	59 01       	movw	r10, r18
    5016:	b3 ed       	ldi	r27, 0xD3	; 211
    5018:	ab 1a       	sub	r10, r27
    501a:	be ef       	ldi	r27, 0xFE	; 254
    501c:	bb 0a       	sbc	r11, r27
    501e:	04 e6       	ldi	r16, 0x64	; 100
    5020:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    5022:	68 94       	set
    5024:	88 24       	eor	r8, r8
    5026:	81 f8       	bld	r8, 1
    5028:	2a c0       	rjmp	.+84     	; 0x507e <main+0x1976>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    502a:	99 24       	eor	r9, r9
    502c:	93 94       	inc	r9
    502e:	9d 0c       	add	r9, r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    5030:	80 81       	ld	r24, Z
    5032:	d5 01       	movw	r26, r10
    5034:	4c 91       	ld	r20, X
    5036:	90 e0       	ldi	r25, 0x00	; 0
    5038:	01 96       	adiw	r24, 0x01	; 1
    503a:	b8 01       	movw	r22, r16
    503c:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    5040:	50 e0       	ldi	r21, 0x00	; 0
    5042:	84 17       	cp	r24, r20
    5044:	95 07       	cpc	r25, r21
    5046:	d1 f0       	breq	.+52     	; 0x507c <main+0x1974>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    5048:	80 81       	ld	r24, Z
    504a:	90 e0       	ldi	r25, 0x00	; 0
    504c:	ac 01       	movw	r20, r24
    504e:	44 0f       	add	r20, r20
    5050:	55 1f       	adc	r21, r21
    5052:	84 0f       	add	r24, r20
    5054:	95 1f       	adc	r25, r21
    5056:	d9 01       	movw	r26, r18
    5058:	a8 0f       	add	r26, r24
    505a:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    505c:	dc 92       	st	X, r13
    505e:	11 96       	adiw	r26, 0x01	; 1
    5060:	8c 92       	st	X, r8
    5062:	11 97       	sbiw	r26, 0x01	; 1
    5064:	12 96       	adiw	r26, 0x02	; 2
    5066:	cc 92       	st	X, r12

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    5068:	4f b7       	in	r20, 0x3f	; 63
    506a:	f8 94       	cli
    506c:	80 81       	ld	r24, Z
    506e:	90 e0       	ldi	r25, 0x00	; 0
    5070:	01 96       	adiw	r24, 0x01	; 1
    5072:	b8 01       	movw	r22, r16
    5074:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    5078:	80 83       	st	Z, r24
    507a:	4f bf       	out	0x3f, r20	; 63
							break;
						case 0xe0e0708f:
							CharLcd->print(2, 1, "rx : number9    ");
							break;
						case 0xe0e08877:
							CharLcd->print(2, 1, "rx : number0    ");
    507c:	d9 2c       	mov	r13, r9
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    507e:	d7 01       	movw	r26, r14
    5080:	cd 90       	ld	r12, X+
    5082:	7d 01       	movw	r14, r26
    5084:	c1 10       	cpse	r12, r1
    5086:	d1 cf       	rjmp	.-94     	; 0x502a <main+0x1922>
    5088:	e0 c4       	rjmp	.+2496   	; 0x5a4a <main+0x2342>
							break;
						case 0xe0e0e01f:
							CharLcd->print(2, 1, "rx : vol up     ");
							break;
						case 0xe0e0d02f:
							CharLcd->print(2, 1, "rx : vol down   ");
    508a:	20 91 4a 07 	lds	r18, 0x074A
    508e:	30 91 4b 07 	lds	r19, 0x074B
    5092:	0f 2e       	mov	r0, r31
    5094:	fb eb       	ldi	r31, 0xBB	; 187
    5096:	ef 2e       	mov	r14, r31
    5098:	f3 e0       	ldi	r31, 0x03	; 3
    509a:	ff 2e       	mov	r15, r31
    509c:	f0 2d       	mov	r31, r0
    509e:	dd 24       	eor	r13, r13
    50a0:	d3 94       	inc	r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    50a2:	f9 01       	movw	r30, r18
    50a4:	e4 5d       	subi	r30, 0xD4	; 212
    50a6:	fe 4f       	sbci	r31, 0xFE	; 254
    50a8:	59 01       	movw	r10, r18
    50aa:	b3 ed       	ldi	r27, 0xD3	; 211
    50ac:	ab 1a       	sub	r10, r27
    50ae:	be ef       	ldi	r27, 0xFE	; 254
    50b0:	bb 0a       	sbc	r11, r27
    50b2:	04 e6       	ldi	r16, 0x64	; 100
    50b4:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    50b6:	68 94       	set
    50b8:	88 24       	eor	r8, r8
    50ba:	81 f8       	bld	r8, 1
    50bc:	2a c0       	rjmp	.+84     	; 0x5112 <main+0x1a0a>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    50be:	99 24       	eor	r9, r9
    50c0:	93 94       	inc	r9
    50c2:	9d 0c       	add	r9, r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    50c4:	80 81       	ld	r24, Z
    50c6:	d5 01       	movw	r26, r10
    50c8:	4c 91       	ld	r20, X
    50ca:	90 e0       	ldi	r25, 0x00	; 0
    50cc:	01 96       	adiw	r24, 0x01	; 1
    50ce:	b8 01       	movw	r22, r16
    50d0:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    50d4:	50 e0       	ldi	r21, 0x00	; 0
    50d6:	84 17       	cp	r24, r20
    50d8:	95 07       	cpc	r25, r21
    50da:	d1 f0       	breq	.+52     	; 0x5110 <main+0x1a08>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    50dc:	80 81       	ld	r24, Z
    50de:	90 e0       	ldi	r25, 0x00	; 0
    50e0:	ac 01       	movw	r20, r24
    50e2:	44 0f       	add	r20, r20
    50e4:	55 1f       	adc	r21, r21
    50e6:	84 0f       	add	r24, r20
    50e8:	95 1f       	adc	r25, r21
    50ea:	d9 01       	movw	r26, r18
    50ec:	a8 0f       	add	r26, r24
    50ee:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    50f0:	dc 92       	st	X, r13
    50f2:	11 96       	adiw	r26, 0x01	; 1
    50f4:	8c 92       	st	X, r8
    50f6:	11 97       	sbiw	r26, 0x01	; 1
    50f8:	12 96       	adiw	r26, 0x02	; 2
    50fa:	cc 92       	st	X, r12

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    50fc:	4f b7       	in	r20, 0x3f	; 63
    50fe:	f8 94       	cli
    5100:	80 81       	ld	r24, Z
    5102:	90 e0       	ldi	r25, 0x00	; 0
    5104:	01 96       	adiw	r24, 0x01	; 1
    5106:	b8 01       	movw	r22, r16
    5108:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    510c:	80 83       	st	Z, r24
    510e:	4f bf       	out	0x3f, r20	; 63
							break;
						case 0xe0e08877:
							CharLcd->print(2, 1, "rx : number0    ");
							break;
						case 0xe0e0e01f:
							CharLcd->print(2, 1, "rx : vol up     ");
    5110:	d9 2c       	mov	r13, r9
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    5112:	d7 01       	movw	r26, r14
    5114:	cd 90       	ld	r12, X+
    5116:	7d 01       	movw	r14, r26
    5118:	c1 10       	cpse	r12, r1
    511a:	d1 cf       	rjmp	.-94     	; 0x50be <main+0x19b6>
    511c:	96 c4       	rjmp	.+2348   	; 0x5a4a <main+0x2342>
							break;
						case 0xe0e0d02f:
							CharLcd->print(2, 1, "rx : vol down   ");
							break;
						case 0xe0e048b7:
							CharLcd->print(2, 1, "rx : ch up      ");
    511e:	20 91 4a 07 	lds	r18, 0x074A
    5122:	30 91 4b 07 	lds	r19, 0x074B
    5126:	0f 2e       	mov	r0, r31
    5128:	f3 e3       	ldi	r31, 0x33	; 51
    512a:	ef 2e       	mov	r14, r31
    512c:	f3 e0       	ldi	r31, 0x03	; 3
    512e:	ff 2e       	mov	r15, r31
    5130:	f0 2d       	mov	r31, r0
    5132:	dd 24       	eor	r13, r13
    5134:	d3 94       	inc	r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    5136:	f9 01       	movw	r30, r18
    5138:	e4 5d       	subi	r30, 0xD4	; 212
    513a:	fe 4f       	sbci	r31, 0xFE	; 254
    513c:	59 01       	movw	r10, r18
    513e:	b3 ed       	ldi	r27, 0xD3	; 211
    5140:	ab 1a       	sub	r10, r27
    5142:	be ef       	ldi	r27, 0xFE	; 254
    5144:	bb 0a       	sbc	r11, r27
    5146:	04 e6       	ldi	r16, 0x64	; 100
    5148:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    514a:	68 94       	set
    514c:	88 24       	eor	r8, r8
    514e:	81 f8       	bld	r8, 1
    5150:	2a c0       	rjmp	.+84     	; 0x51a6 <main+0x1a9e>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    5152:	99 24       	eor	r9, r9
    5154:	93 94       	inc	r9
    5156:	9d 0c       	add	r9, r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    5158:	80 81       	ld	r24, Z
    515a:	d5 01       	movw	r26, r10
    515c:	4c 91       	ld	r20, X
    515e:	90 e0       	ldi	r25, 0x00	; 0
    5160:	01 96       	adiw	r24, 0x01	; 1
    5162:	b8 01       	movw	r22, r16
    5164:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    5168:	50 e0       	ldi	r21, 0x00	; 0
    516a:	84 17       	cp	r24, r20
    516c:	95 07       	cpc	r25, r21
    516e:	d1 f0       	breq	.+52     	; 0x51a4 <main+0x1a9c>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    5170:	80 81       	ld	r24, Z
    5172:	90 e0       	ldi	r25, 0x00	; 0
    5174:	ac 01       	movw	r20, r24
    5176:	44 0f       	add	r20, r20
    5178:	55 1f       	adc	r21, r21
    517a:	84 0f       	add	r24, r20
    517c:	95 1f       	adc	r25, r21
    517e:	d9 01       	movw	r26, r18
    5180:	a8 0f       	add	r26, r24
    5182:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    5184:	dc 92       	st	X, r13
    5186:	11 96       	adiw	r26, 0x01	; 1
    5188:	8c 92       	st	X, r8
    518a:	11 97       	sbiw	r26, 0x01	; 1
    518c:	12 96       	adiw	r26, 0x02	; 2
    518e:	cc 92       	st	X, r12

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    5190:	4f b7       	in	r20, 0x3f	; 63
    5192:	f8 94       	cli
    5194:	80 81       	ld	r24, Z
    5196:	90 e0       	ldi	r25, 0x00	; 0
    5198:	01 96       	adiw	r24, 0x01	; 1
    519a:	b8 01       	movw	r22, r16
    519c:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__divmodhi4>
    51a0:	80 83       	st	Z, r24
    51a2:	4f bf       	out	0x3f, r20	; 63
							break;
						case 0xe0e0e01f:
							CharLcd->print(2, 1, "rx : vol up     ");
							break;
						case 0xe0e0d02f:
							CharLcd->print(2, 1, "rx : vol down   ");
    51a4:	d9 2c       	mov	r13, r9
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    51a6:	d7 01       	movw	r26, r14
    51a8:	cd 90       	ld	r12, X+
    51aa:	7d 01       	movw	r14, r26
    51ac:	c1 10       	cpse	r12, r1
    51ae:	d1 cf       	rjmp	.-94     	; 0x5152 <main+0x1a4a>
    51b0:	4c c4       	rjmp	.+2200   	; 0x5a4a <main+0x2342>
							break;
						case 0xe0e048b7:
							CharLcd->print(2, 1, "rx : ch up      ");
							break;
						case 0xe0e008f7:
							CharLcd->print(2, 1, "rx : ch down    ");
    51b2:	20 91 4a 07 	lds	r18, 0x074A
    51b6:	30 91 4b 07 	lds	r19, 0x074B
    51ba:	0f 2e       	mov	r0, r31
    51bc:	fd ec       	ldi	r31, 0xCD	; 205
    51be:	ef 2e       	mov	r14, r31
    51c0:	f2 e0       	ldi	r31, 0x02	; 2
    51c2:	ff 2e       	mov	r15, r31
    51c4:	f0 2d       	mov	r31, r0
    51c6:	dd 24       	eor	r13, r13
    51c8:	d3 94       	inc	r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    51ca:	f9 01       	movw	r30, r18
    51cc:	e4 5d       	subi	r30, 0xD4	; 212
    51ce:	fe 4f       	sbci	r31, 0xFE	; 254
    51d0:	59 01       	movw	r10, r18
    51d2:	b3 ed       	ldi	r27, 0xD3	; 211
    51d4:	ab 1a       	sub	r10, r27
    51d6:	be ef       	ldi	r27, 0xFE	; 254
    51d8:	bb 0a       	sbc	r11, r27
    51da:	04 e6       	ldi	r16, 0x64	; 100
    51dc:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    51de:	68 94       	set
    51e0:	88 24       	eor	r8, r8
    51e2:	81 f8       	bld	r8, 1
    51e4:	28 c0       	rjmp	.+80     	; 0x5236 <main+0x1b2e>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    51e6:	99 24       	eor	r9, r9
    51e8:	93 94       	inc	r9
    51ea:	9d 0c       	add	r9, r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    51ec:	80 81       	ld	r24, Z
    51ee:	d5 01       	movw	r26, r10
    51f0:	4c 91       	ld	r20, X
    51f2:	90 e0       	ldi	r25, 0x00	; 0
    51f4:	01 96       	adiw	r24, 0x01	; 1
    51f6:	b8 01       	movw	r22, r16
    51f8:	ec d7       	rcall	.+4056   	; 0x61d2 <__divmodhi4>
    51fa:	50 e0       	ldi	r21, 0x00	; 0
    51fc:	84 17       	cp	r24, r20
    51fe:	95 07       	cpc	r25, r21
    5200:	c9 f0       	breq	.+50     	; 0x5234 <main+0x1b2c>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    5202:	80 81       	ld	r24, Z
    5204:	90 e0       	ldi	r25, 0x00	; 0
    5206:	ac 01       	movw	r20, r24
    5208:	44 0f       	add	r20, r20
    520a:	55 1f       	adc	r21, r21
    520c:	84 0f       	add	r24, r20
    520e:	95 1f       	adc	r25, r21
    5210:	d9 01       	movw	r26, r18
    5212:	a8 0f       	add	r26, r24
    5214:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    5216:	dc 92       	st	X, r13
    5218:	11 96       	adiw	r26, 0x01	; 1
    521a:	8c 92       	st	X, r8
    521c:	11 97       	sbiw	r26, 0x01	; 1
    521e:	12 96       	adiw	r26, 0x02	; 2
    5220:	cc 92       	st	X, r12

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    5222:	4f b7       	in	r20, 0x3f	; 63
    5224:	f8 94       	cli
    5226:	80 81       	ld	r24, Z
    5228:	90 e0       	ldi	r25, 0x00	; 0
    522a:	01 96       	adiw	r24, 0x01	; 1
    522c:	b8 01       	movw	r22, r16
    522e:	d1 d7       	rcall	.+4002   	; 0x61d2 <__divmodhi4>
    5230:	80 83       	st	Z, r24
    5232:	4f bf       	out	0x3f, r20	; 63
							break;
						case 0xe0e0d02f:
							CharLcd->print(2, 1, "rx : vol down   ");
							break;
						case 0xe0e048b7:
							CharLcd->print(2, 1, "rx : ch up      ");
    5234:	d9 2c       	mov	r13, r9
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    5236:	d7 01       	movw	r26, r14
    5238:	cd 90       	ld	r12, X+
    523a:	7d 01       	movw	r14, r26
    523c:	c1 10       	cpse	r12, r1
    523e:	d3 cf       	rjmp	.-90     	; 0x51e6 <main+0x1ade>
    5240:	04 c4       	rjmp	.+2056   	; 0x5a4a <main+0x2342>
						case 0xe0e008f7:
							CharLcd->print(2, 1, "rx : ch down    ");
							break;
							//testing
						case 0xe0e00000:	//fan 0
							CharLcd->print(2, 1, "fan turn off    ");
    5242:	20 91 4a 07 	lds	r18, 0x074A
    5246:	30 91 4b 07 	lds	r19, 0x074B
    524a:	0f 2e       	mov	r0, r31
    524c:	f9 e8       	ldi	r31, 0x89	; 137
    524e:	ef 2e       	mov	r14, r31
    5250:	f2 e0       	ldi	r31, 0x02	; 2
    5252:	ff 2e       	mov	r15, r31
    5254:	f0 2d       	mov	r31, r0
    5256:	dd 24       	eor	r13, r13
    5258:	d3 94       	inc	r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    525a:	f9 01       	movw	r30, r18
    525c:	e4 5d       	subi	r30, 0xD4	; 212
    525e:	fe 4f       	sbci	r31, 0xFE	; 254
    5260:	59 01       	movw	r10, r18
    5262:	b3 ed       	ldi	r27, 0xD3	; 211
    5264:	ab 1a       	sub	r10, r27
    5266:	be ef       	ldi	r27, 0xFE	; 254
    5268:	bb 0a       	sbc	r11, r27
    526a:	04 e6       	ldi	r16, 0x64	; 100
    526c:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    526e:	68 94       	set
    5270:	88 24       	eor	r8, r8
    5272:	81 f8       	bld	r8, 1
    5274:	28 c0       	rjmp	.+80     	; 0x52c6 <main+0x1bbe>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    5276:	99 24       	eor	r9, r9
    5278:	93 94       	inc	r9
    527a:	9d 0c       	add	r9, r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    527c:	80 81       	ld	r24, Z
    527e:	d5 01       	movw	r26, r10
    5280:	4c 91       	ld	r20, X
    5282:	90 e0       	ldi	r25, 0x00	; 0
    5284:	01 96       	adiw	r24, 0x01	; 1
    5286:	b8 01       	movw	r22, r16
    5288:	a4 d7       	rcall	.+3912   	; 0x61d2 <__divmodhi4>
    528a:	50 e0       	ldi	r21, 0x00	; 0
    528c:	84 17       	cp	r24, r20
    528e:	95 07       	cpc	r25, r21
    5290:	c9 f0       	breq	.+50     	; 0x52c4 <main+0x1bbc>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    5292:	80 81       	ld	r24, Z
    5294:	90 e0       	ldi	r25, 0x00	; 0
    5296:	ac 01       	movw	r20, r24
    5298:	44 0f       	add	r20, r20
    529a:	55 1f       	adc	r21, r21
    529c:	84 0f       	add	r24, r20
    529e:	95 1f       	adc	r25, r21
    52a0:	d9 01       	movw	r26, r18
    52a2:	a8 0f       	add	r26, r24
    52a4:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    52a6:	dc 92       	st	X, r13
    52a8:	11 96       	adiw	r26, 0x01	; 1
    52aa:	8c 92       	st	X, r8
    52ac:	11 97       	sbiw	r26, 0x01	; 1
    52ae:	12 96       	adiw	r26, 0x02	; 2
    52b0:	cc 92       	st	X, r12

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    52b2:	4f b7       	in	r20, 0x3f	; 63
    52b4:	f8 94       	cli
    52b6:	80 81       	ld	r24, Z
    52b8:	90 e0       	ldi	r25, 0x00	; 0
    52ba:	01 96       	adiw	r24, 0x01	; 1
    52bc:	b8 01       	movw	r22, r16
    52be:	89 d7       	rcall	.+3858   	; 0x61d2 <__divmodhi4>
    52c0:	80 83       	st	Z, r24
    52c2:	4f bf       	out	0x3f, r20	; 63
							break;
						case 0xe0e048b7:
							CharLcd->print(2, 1, "rx : ch up      ");
							break;
						case 0xe0e008f7:
							CharLcd->print(2, 1, "rx : ch down    ");
    52c4:	d9 2c       	mov	r13, r9
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    52c6:	d7 01       	movw	r26, r14
    52c8:	cd 90       	ld	r12, X+
    52ca:	7d 01       	movw	r14, r26
    52cc:	c1 10       	cpse	r12, r1
    52ce:	d3 cf       	rjmp	.-90     	; 0x5276 <main+0x1b6e>
						case 0xe0e00000:	//fan 0
							CharLcd->print(2, 1, "fan turn off    ");
							n = 0;
							if (n < 0) n = 0;
							else if (n > cMaxFanSpeed) n = cMaxFanSpeed;
							if(FanSpeed == 0) {
    52d0:	80 91 3b 07 	lds	r24, 0x073B
    52d4:	90 91 3c 07 	lds	r25, 0x073C
    52d8:	89 2b       	or	r24, r25
    52da:	09 f4       	brne	.+2      	; 0x52de <main+0x1bd6>
    52dc:	59 c0       	rjmp	.+178    	; 0x5390 <main+0x1c88>
			}
		}
		void
		configure(iotTimerPsd aPsd, unsigned int aCount) {
			unsigned char	psd = 0;
			if(iId == iotcTimer0) {
    52de:	e0 91 40 07 	lds	r30, 0x0740
    52e2:	f0 91 41 07 	lds	r31, 0x0741
					case iotcPsd256: psd = 4; break;
					case iotcPsd1024: psd = 5; break;
					default: return;
				}
			}
			switch(iId) {
    52e6:	80 81       	ld	r24, Z
    52e8:	82 30       	cpi	r24, 0x02	; 2
    52ea:	79 f0       	breq	.+30     	; 0x530a <main+0x1c02>
    52ec:	18 f4       	brcc	.+6      	; 0x52f4 <main+0x1bec>
    52ee:	81 30       	cpi	r24, 0x01	; 1
    52f0:	31 f0       	breq	.+12     	; 0x52fe <main+0x1bf6>
    52f2:	2d c0       	rjmp	.+90     	; 0x534e <main+0x1c46>
    52f4:	83 30       	cpi	r24, 0x03	; 3
    52f6:	a1 f0       	breq	.+40     	; 0x5320 <main+0x1c18>
    52f8:	84 30       	cpi	r24, 0x04	; 4
    52fa:	c1 f0       	breq	.+48     	; 0x532c <main+0x1c24>
    52fc:	28 c0       	rjmp	.+80     	; 0x534e <main+0x1c46>
				case iotcTimer0:
					TCNT0 = 0; OCR0 = aCount & 0xff;
    52fe:	12 be       	out	0x32, r1	; 50
    5300:	8a ef       	ldi	r24, 0xFA	; 250
    5302:	81 bf       	out	0x31, r24	; 49
					TCCR0 = (1 << WGM01) | psd;
    5304:	88 e0       	ldi	r24, 0x08	; 8
    5306:	83 bf       	out	0x33, r24	; 51
    5308:	22 c0       	rjmp	.+68     	; 0x534e <main+0x1c46>
					break;
				case iotcTimer1:
					TCCR1A = 0; TCCR1B = 0; TCNT1 = 0; OCR1A = aCount;
    530a:	1f bc       	out	0x2f, r1	; 47
    530c:	1e bc       	out	0x2e, r1	; 46
    530e:	1d bc       	out	0x2d, r1	; 45
    5310:	1c bc       	out	0x2c, r1	; 44
    5312:	8a ef       	ldi	r24, 0xFA	; 250
    5314:	90 e0       	ldi	r25, 0x00	; 0
    5316:	9b bd       	out	0x2b, r25	; 43
    5318:	8a bd       	out	0x2a, r24	; 42
					TCCR1B = (1 << WGM12) | psd;
    531a:	88 e0       	ldi	r24, 0x08	; 8
    531c:	8e bd       	out	0x2e, r24	; 46
    531e:	17 c0       	rjmp	.+46     	; 0x534e <main+0x1c46>
					break;
				case iotcTimer2:
					TCNT2 = 0; OCR2 = aCount & 0xff;
    5320:	14 bc       	out	0x24, r1	; 36
    5322:	8a ef       	ldi	r24, 0xFA	; 250
    5324:	83 bd       	out	0x23, r24	; 35
					TCCR2 = (1 << WGM21) | psd;
    5326:	88 e0       	ldi	r24, 0x08	; 8
    5328:	85 bd       	out	0x25, r24	; 37
    532a:	11 c0       	rjmp	.+34     	; 0x534e <main+0x1c46>
					break;
				case iotcTimer3:
					TCCR3A = 0; TCCR3B = 0; TCNT3 = 0; OCR3A = aCount;
    532c:	10 92 8b 00 	sts	0x008B, r1
    5330:	ea e8       	ldi	r30, 0x8A	; 138
    5332:	f0 e0       	ldi	r31, 0x00	; 0
    5334:	10 82       	st	Z, r1
    5336:	10 92 89 00 	sts	0x0089, r1
    533a:	10 92 88 00 	sts	0x0088, r1
    533e:	8a ef       	ldi	r24, 0xFA	; 250
    5340:	90 e0       	ldi	r25, 0x00	; 0
    5342:	90 93 87 00 	sts	0x0087, r25
    5346:	80 93 86 00 	sts	0x0086, r24
					TCCR3B = (1 << WGM32) | psd;
    534a:	88 e0       	ldi	r24, 0x08	; 8
    534c:	80 83       	st	Z, r24
				default: break;
			}
		}
		void
		disableInterrupt() {
			switch(iId) {
    534e:	e0 91 40 07 	lds	r30, 0x0740
    5352:	f0 91 41 07 	lds	r31, 0x0741
    5356:	80 81       	ld	r24, Z
    5358:	82 30       	cpi	r24, 0x02	; 2
    535a:	69 f0       	breq	.+26     	; 0x5376 <main+0x1c6e>
    535c:	18 f4       	brcc	.+6      	; 0x5364 <main+0x1c5c>
    535e:	81 30       	cpi	r24, 0x01	; 1
    5360:	31 f0       	breq	.+12     	; 0x536e <main+0x1c66>
    5362:	16 c0       	rjmp	.+44     	; 0x5390 <main+0x1c88>
    5364:	83 30       	cpi	r24, 0x03	; 3
    5366:	59 f0       	breq	.+22     	; 0x537e <main+0x1c76>
    5368:	84 30       	cpi	r24, 0x04	; 4
    536a:	69 f0       	breq	.+26     	; 0x5386 <main+0x1c7e>
    536c:	11 c0       	rjmp	.+34     	; 0x5390 <main+0x1c88>
				case iotcTimer0: TIMSK &= ~(1 << OCIE0); break;
    536e:	87 b7       	in	r24, 0x37	; 55
    5370:	8d 7f       	andi	r24, 0xFD	; 253
    5372:	87 bf       	out	0x37, r24	; 55
    5374:	0d c0       	rjmp	.+26     	; 0x5390 <main+0x1c88>
				case iotcTimer1: TIMSK &= ~(1 << OCIE1A); break;
    5376:	87 b7       	in	r24, 0x37	; 55
    5378:	8f 7e       	andi	r24, 0xEF	; 239
    537a:	87 bf       	out	0x37, r24	; 55
    537c:	09 c0       	rjmp	.+18     	; 0x5390 <main+0x1c88>
				case iotcTimer2: TIMSK &= ~(1 << OCIE2); break;
    537e:	87 b7       	in	r24, 0x37	; 55
    5380:	8f 77       	andi	r24, 0x7F	; 127
    5382:	87 bf       	out	0x37, r24	; 55
    5384:	05 c0       	rjmp	.+10     	; 0x5390 <main+0x1c88>
				case iotcTimer3: ETIMSK &= ~(1 << OCIE3A); break;
    5386:	ed e7       	ldi	r30, 0x7D	; 125
    5388:	f0 e0       	ldi	r31, 0x00	; 0
    538a:	80 81       	ld	r24, Z
    538c:	8f 7e       	andi	r24, 0xEF	; 239
    538e:	80 83       	st	Z, r24
								if(n == 0) {
									FanTimer->configure(iotTimer::iotcPsdNo, 250);
									FanTimer->disableInterrupt();
								}
							}
							FanSpeed = n;
    5390:	10 92 3c 07 	sts	0x073C, r1
    5394:	10 92 3b 07 	sts	0x073B, r1
							FanCount = FanSpeed;
    5398:	10 92 3f 07 	sts	0x073F, r1
    539c:	10 92 3e 07 	sts	0x073E, r1
							FanState = false;
    53a0:	10 92 3d 07 	sts	0x073D, r1
							break;
    53a4:	52 c3       	rjmp	.+1700   	; 0x5a4a <main+0x2342>
						case 0xe0e00001:	//fan 1
							CharLcd->print(2, 1, "fan slow speed  ");
    53a6:	20 91 4a 07 	lds	r18, 0x074A
    53aa:	30 91 4b 07 	lds	r19, 0x074B
    53ae:	0f 2e       	mov	r0, r31
    53b0:	fa e9       	ldi	r31, 0x9A	; 154
    53b2:	ef 2e       	mov	r14, r31
    53b4:	f2 e0       	ldi	r31, 0x02	; 2
    53b6:	ff 2e       	mov	r15, r31
    53b8:	f0 2d       	mov	r31, r0
    53ba:	dd 24       	eor	r13, r13
    53bc:	d3 94       	inc	r13
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    53be:	f9 01       	movw	r30, r18
    53c0:	e4 5d       	subi	r30, 0xD4	; 212
    53c2:	fe 4f       	sbci	r31, 0xFE	; 254
    53c4:	59 01       	movw	r10, r18
    53c6:	b3 ed       	ldi	r27, 0xD3	; 211
    53c8:	ab 1a       	sub	r10, r27
    53ca:	be ef       	ldi	r27, 0xFE	; 254
    53cc:	bb 0a       	sbc	r11, r27
    53ce:	04 e6       	ldi	r16, 0x64	; 100
    53d0:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    53d2:	68 94       	set
    53d4:	88 24       	eor	r8, r8
    53d6:	81 f8       	bld	r8, 1
    53d8:	28 c0       	rjmp	.+80     	; 0x542a <main+0x1d22>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    53da:	99 24       	eor	r9, r9
    53dc:	93 94       	inc	r9
    53de:	9d 0c       	add	r9, r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    53e0:	80 81       	ld	r24, Z
    53e2:	d5 01       	movw	r26, r10
    53e4:	4c 91       	ld	r20, X
    53e6:	90 e0       	ldi	r25, 0x00	; 0
    53e8:	01 96       	adiw	r24, 0x01	; 1
    53ea:	b8 01       	movw	r22, r16
    53ec:	f2 d6       	rcall	.+3556   	; 0x61d2 <__divmodhi4>
    53ee:	50 e0       	ldi	r21, 0x00	; 0
    53f0:	84 17       	cp	r24, r20
    53f2:	95 07       	cpc	r25, r21
    53f4:	c9 f0       	breq	.+50     	; 0x5428 <main+0x1d20>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    53f6:	80 81       	ld	r24, Z
    53f8:	90 e0       	ldi	r25, 0x00	; 0
    53fa:	ac 01       	movw	r20, r24
    53fc:	44 0f       	add	r20, r20
    53fe:	55 1f       	adc	r21, r21
    5400:	84 0f       	add	r24, r20
    5402:	95 1f       	adc	r25, r21
    5404:	d9 01       	movw	r26, r18
    5406:	a8 0f       	add	r26, r24
    5408:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    540a:	dc 92       	st	X, r13
    540c:	11 96       	adiw	r26, 0x01	; 1
    540e:	8c 92       	st	X, r8
    5410:	11 97       	sbiw	r26, 0x01	; 1
    5412:	12 96       	adiw	r26, 0x02	; 2
    5414:	cc 92       	st	X, r12

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    5416:	4f b7       	in	r20, 0x3f	; 63
    5418:	f8 94       	cli
    541a:	80 81       	ld	r24, Z
    541c:	90 e0       	ldi	r25, 0x00	; 0
    541e:	01 96       	adiw	r24, 0x01	; 1
    5420:	b8 01       	movw	r22, r16
    5422:	d7 d6       	rcall	.+3502   	; 0x61d2 <__divmodhi4>
    5424:	80 83       	st	Z, r24
    5426:	4f bf       	out	0x3f, r20	; 63
						case 0xe0e008f7:
							CharLcd->print(2, 1, "rx : ch down    ");
							break;
							//testing
						case 0xe0e00000:	//fan 0
							CharLcd->print(2, 1, "fan turn off    ");
    5428:	d9 2c       	mov	r13, r9
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    542a:	d7 01       	movw	r26, r14
    542c:	cd 90       	ld	r12, X+
    542e:	7d 01       	movw	r14, r26
    5430:	c1 10       	cpse	r12, r1
    5432:	d3 cf       	rjmp	.-90     	; 0x53da <main+0x1cd2>
						case 0xe0e00001:	//fan 1
							CharLcd->print(2, 1, "fan slow speed  ");
							n = 1;
							if (n < 0) n = 0;
							else if (n > cMaxFanSpeed) n = cMaxFanSpeed;
							if(FanSpeed == 0) {
    5434:	80 91 3b 07 	lds	r24, 0x073B
    5438:	90 91 3c 07 	lds	r25, 0x073C
    543c:	89 2b       	or	r24, r25
    543e:	09 f0       	breq	.+2      	; 0x5442 <main+0x1d3a>
    5440:	76 c0       	rjmp	.+236    	; 0x552e <main+0x1e26>
			}
		}
		void
		configure(iotTimerPsd aPsd, unsigned int aCount) {
			unsigned char	psd = 0;
			if(iId == iotcTimer0) {
    5442:	e0 91 40 07 	lds	r30, 0x0740
    5446:	f0 91 41 07 	lds	r31, 0x0741
    544a:	80 81       	ld	r24, Z
    544c:	81 30       	cpi	r24, 0x01	; 1
    544e:	59 f0       	breq	.+22     	; 0x5466 <main+0x1d5e>
					case iotcPsd256: psd = 4; break;
					case iotcPsd1024: psd = 5; break;
					default: return;
				}
			}
			switch(iId) {
    5450:	82 30       	cpi	r24, 0x02	; 2
    5452:	91 f0       	breq	.+36     	; 0x5478 <main+0x1d70>
    5454:	18 f4       	brcc	.+6      	; 0x545c <main+0x1d54>
    5456:	81 30       	cpi	r24, 0x01	; 1
    5458:	41 f0       	breq	.+16     	; 0x546a <main+0x1d62>
    545a:	30 c0       	rjmp	.+96     	; 0x54bc <main+0x1db4>
    545c:	83 30       	cpi	r24, 0x03	; 3
    545e:	b9 f0       	breq	.+46     	; 0x548e <main+0x1d86>
    5460:	84 30       	cpi	r24, 0x04	; 4
    5462:	d9 f0       	breq	.+54     	; 0x549a <main+0x1d92>
    5464:	2b c0       	rjmp	.+86     	; 0x54bc <main+0x1db4>
				switch(aPsd) {
					case iotcPsdNo: psd = 0; break;
					case iotcPsd1: psd = 1; break;
					case iotcPsd8: psd = 2; break;
					case iotcPsd32: psd = 3; break;
					case iotcPsd64: psd = 4; break;
    5466:	84 e0       	ldi	r24, 0x04	; 4
    5468:	01 c0       	rjmp	.+2      	; 0x546c <main+0x1d64>
			} else { // iotcTimer1, 2, | 3
				switch(aPsd) {
					case iotcPsdNo: psd = 0; break;
					case iotcPsd1: psd = 1; break;
					case iotcPsd8: psd = 2; break;
					case iotcPsd64: psd = 3; break;
    546a:	83 e0       	ldi	r24, 0x03	; 3
					default: return;
				}
			}
			switch(iId) {
				case iotcTimer0:
					TCNT0 = 0; OCR0 = aCount & 0xff;
    546c:	12 be       	out	0x32, r1	; 50
    546e:	9a ef       	ldi	r25, 0xFA	; 250
    5470:	91 bf       	out	0x31, r25	; 49
					TCCR0 = (1 << WGM01) | psd;
    5472:	88 60       	ori	r24, 0x08	; 8
    5474:	83 bf       	out	0x33, r24	; 51
    5476:	22 c0       	rjmp	.+68     	; 0x54bc <main+0x1db4>
					break;
				case iotcTimer1:
					TCCR1A = 0; TCCR1B = 0; TCNT1 = 0; OCR1A = aCount;
    5478:	1f bc       	out	0x2f, r1	; 47
    547a:	1e bc       	out	0x2e, r1	; 46
    547c:	1d bc       	out	0x2d, r1	; 45
    547e:	1c bc       	out	0x2c, r1	; 44
    5480:	8a ef       	ldi	r24, 0xFA	; 250
    5482:	90 e0       	ldi	r25, 0x00	; 0
    5484:	9b bd       	out	0x2b, r25	; 43
    5486:	8a bd       	out	0x2a, r24	; 42
					TCCR1B = (1 << WGM12) | psd;
    5488:	8b e0       	ldi	r24, 0x0B	; 11
    548a:	8e bd       	out	0x2e, r24	; 46
    548c:	17 c0       	rjmp	.+46     	; 0x54bc <main+0x1db4>
					break;
				case iotcTimer2:
					TCNT2 = 0; OCR2 = aCount & 0xff;
    548e:	14 bc       	out	0x24, r1	; 36
    5490:	8a ef       	ldi	r24, 0xFA	; 250
    5492:	83 bd       	out	0x23, r24	; 35
					TCCR2 = (1 << WGM21) | psd;
    5494:	8b e0       	ldi	r24, 0x0B	; 11
    5496:	85 bd       	out	0x25, r24	; 37
    5498:	11 c0       	rjmp	.+34     	; 0x54bc <main+0x1db4>
					break;
				case iotcTimer3:
					TCCR3A = 0; TCCR3B = 0; TCNT3 = 0; OCR3A = aCount;
    549a:	10 92 8b 00 	sts	0x008B, r1
    549e:	ea e8       	ldi	r30, 0x8A	; 138
    54a0:	f0 e0       	ldi	r31, 0x00	; 0
    54a2:	10 82       	st	Z, r1
    54a4:	10 92 89 00 	sts	0x0089, r1
    54a8:	10 92 88 00 	sts	0x0088, r1
    54ac:	8a ef       	ldi	r24, 0xFA	; 250
    54ae:	90 e0       	ldi	r25, 0x00	; 0
    54b0:	90 93 87 00 	sts	0x0087, r25
    54b4:	80 93 86 00 	sts	0x0086, r24
					TCCR3B = (1 << WGM32) | psd;
    54b8:	8b e0       	ldi	r24, 0x0B	; 11
    54ba:	80 83       	st	Z, r24
				default: return;
			}
		}
		void
		enableInterrupt(void (* aCallback) (void)) {
			switch(iId) {
    54bc:	e0 91 40 07 	lds	r30, 0x0740
    54c0:	f0 91 41 07 	lds	r31, 0x0741
    54c4:	80 81       	ld	r24, Z
    54c6:	82 30       	cpi	r24, 0x02	; 2
    54c8:	99 f0       	breq	.+38     	; 0x54f0 <main+0x1de8>
    54ca:	18 f4       	brcc	.+6      	; 0x54d2 <main+0x1dca>
    54cc:	81 30       	cpi	r24, 0x01	; 1
    54ce:	31 f0       	breq	.+12     	; 0x54dc <main+0x1dd4>
    54d0:	2e c0       	rjmp	.+92     	; 0x552e <main+0x1e26>
    54d2:	83 30       	cpi	r24, 0x03	; 3
    54d4:	b9 f0       	breq	.+46     	; 0x5504 <main+0x1dfc>
    54d6:	84 30       	cpi	r24, 0x04	; 4
    54d8:	f9 f0       	breq	.+62     	; 0x5518 <main+0x1e10>
    54da:	29 c0       	rjmp	.+82     	; 0x552e <main+0x1e26>
				case iotcTimer0:
					iCallback0 = aCallback; TIMSK |= (1 << OCIE0); break;
    54dc:	8f e6       	ldi	r24, 0x6F	; 111
    54de:	95 e0       	ldi	r25, 0x05	; 5
    54e0:	90 93 32 07 	sts	0x0732, r25
    54e4:	80 93 31 07 	sts	0x0731, r24
    54e8:	87 b7       	in	r24, 0x37	; 55
    54ea:	82 60       	ori	r24, 0x02	; 2
    54ec:	87 bf       	out	0x37, r24	; 55
    54ee:	1f c0       	rjmp	.+62     	; 0x552e <main+0x1e26>
				case iotcTimer1:
					iCallback1 = aCallback; TIMSK |= (1 << OCIE1A); break;
    54f0:	8f e6       	ldi	r24, 0x6F	; 111
    54f2:	95 e0       	ldi	r25, 0x05	; 5
    54f4:	90 93 30 07 	sts	0x0730, r25
    54f8:	80 93 2f 07 	sts	0x072F, r24
    54fc:	87 b7       	in	r24, 0x37	; 55
    54fe:	80 61       	ori	r24, 0x10	; 16
    5500:	87 bf       	out	0x37, r24	; 55
    5502:	15 c0       	rjmp	.+42     	; 0x552e <main+0x1e26>
				case iotcTimer2:
					iCallback2 = aCallback; TIMSK |= (1 << OCIE2); break;
    5504:	8f e6       	ldi	r24, 0x6F	; 111
    5506:	95 e0       	ldi	r25, 0x05	; 5
    5508:	90 93 2e 07 	sts	0x072E, r25
    550c:	80 93 2d 07 	sts	0x072D, r24
    5510:	87 b7       	in	r24, 0x37	; 55
    5512:	80 68       	ori	r24, 0x80	; 128
    5514:	87 bf       	out	0x37, r24	; 55
    5516:	0b c0       	rjmp	.+22     	; 0x552e <main+0x1e26>
				case iotcTimer3:
					iCallback3 = aCallback; ETIMSK |= (1 << OCIE3A); break;
    5518:	8f e6       	ldi	r24, 0x6F	; 111
    551a:	95 e0       	ldi	r25, 0x05	; 5
    551c:	90 93 2c 07 	sts	0x072C, r25
    5520:	80 93 2b 07 	sts	0x072B, r24
    5524:	ed e7       	ldi	r30, 0x7D	; 125
    5526:	f0 e0       	ldi	r31, 0x00	; 0
    5528:	80 81       	ld	r24, Z
    552a:	80 61       	ori	r24, 0x10	; 16
    552c:	80 83       	st	Z, r24
								if(n == 0) {
									FanTimer->configure(iotTimer::iotcPsdNo, 250);
									FanTimer->disableInterrupt();
								}
							}
							FanSpeed = n;
    552e:	81 e0       	ldi	r24, 0x01	; 1
    5530:	90 e0       	ldi	r25, 0x00	; 0
    5532:	90 93 3c 07 	sts	0x073C, r25
    5536:	80 93 3b 07 	sts	0x073B, r24
							FanCount = FanSpeed;
    553a:	90 93 3f 07 	sts	0x073F, r25
    553e:	80 93 3e 07 	sts	0x073E, r24
							FanState = false;
    5542:	10 92 3d 07 	sts	0x073D, r1
							break;
    5546:	81 c2       	rjmp	.+1282   	; 0x5a4a <main+0x2342>
						case 0xe0e00002:	//fan 1
							CharLcd->print(2, 1, "fan medium speed");
    5548:	20 91 4a 07 	lds	r18, 0x074A
    554c:	30 91 4b 07 	lds	r19, 0x074B
    5550:	0f 2e       	mov	r0, r31
    5552:	fb ea       	ldi	r31, 0xAB	; 171
    5554:	ef 2e       	mov	r14, r31
    5556:	f2 e0       	ldi	r31, 0x02	; 2
    5558:	ff 2e       	mov	r15, r31
    555a:	f0 2d       	mov	r31, r0
    555c:	dd 24       	eor	r13, r13
    555e:	d3 94       	inc	r13
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    5560:	f9 01       	movw	r30, r18
    5562:	e4 5d       	subi	r30, 0xD4	; 212
    5564:	fe 4f       	sbci	r31, 0xFE	; 254
    5566:	59 01       	movw	r10, r18
    5568:	b3 ed       	ldi	r27, 0xD3	; 211
    556a:	ab 1a       	sub	r10, r27
    556c:	be ef       	ldi	r27, 0xFE	; 254
    556e:	bb 0a       	sbc	r11, r27
    5570:	04 e6       	ldi	r16, 0x64	; 100
    5572:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    5574:	68 94       	set
    5576:	88 24       	eor	r8, r8
    5578:	81 f8       	bld	r8, 1
    557a:	28 c0       	rjmp	.+80     	; 0x55cc <main+0x1ec4>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    557c:	99 24       	eor	r9, r9
    557e:	93 94       	inc	r9
    5580:	9d 0c       	add	r9, r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    5582:	80 81       	ld	r24, Z
    5584:	d5 01       	movw	r26, r10
    5586:	4c 91       	ld	r20, X
    5588:	90 e0       	ldi	r25, 0x00	; 0
    558a:	01 96       	adiw	r24, 0x01	; 1
    558c:	b8 01       	movw	r22, r16
    558e:	21 d6       	rcall	.+3138   	; 0x61d2 <__divmodhi4>
    5590:	50 e0       	ldi	r21, 0x00	; 0
    5592:	84 17       	cp	r24, r20
    5594:	95 07       	cpc	r25, r21
    5596:	c9 f0       	breq	.+50     	; 0x55ca <main+0x1ec2>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    5598:	80 81       	ld	r24, Z
    559a:	90 e0       	ldi	r25, 0x00	; 0
    559c:	ac 01       	movw	r20, r24
    559e:	44 0f       	add	r20, r20
    55a0:	55 1f       	adc	r21, r21
    55a2:	84 0f       	add	r24, r20
    55a4:	95 1f       	adc	r25, r21
    55a6:	d9 01       	movw	r26, r18
    55a8:	a8 0f       	add	r26, r24
    55aa:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    55ac:	dc 92       	st	X, r13
    55ae:	11 96       	adiw	r26, 0x01	; 1
    55b0:	8c 92       	st	X, r8
    55b2:	11 97       	sbiw	r26, 0x01	; 1
    55b4:	12 96       	adiw	r26, 0x02	; 2
    55b6:	cc 92       	st	X, r12

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    55b8:	4f b7       	in	r20, 0x3f	; 63
    55ba:	f8 94       	cli
    55bc:	80 81       	ld	r24, Z
    55be:	90 e0       	ldi	r25, 0x00	; 0
    55c0:	01 96       	adiw	r24, 0x01	; 1
    55c2:	b8 01       	movw	r22, r16
    55c4:	06 d6       	rcall	.+3084   	; 0x61d2 <__divmodhi4>
    55c6:	80 83       	st	Z, r24
    55c8:	4f bf       	out	0x3f, r20	; 63
				switch(aPsd) {
					case iotcPsdNo: psd = 0; break;
					case iotcPsd1: psd = 1; break;
					case iotcPsd8: psd = 2; break;
					case iotcPsd32: psd = 3; break;
					case iotcPsd64: psd = 4; break;
    55ca:	d9 2c       	mov	r13, r9
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    55cc:	d7 01       	movw	r26, r14
    55ce:	cd 90       	ld	r12, X+
    55d0:	7d 01       	movw	r14, r26
    55d2:	c1 10       	cpse	r12, r1
    55d4:	d3 cf       	rjmp	.-90     	; 0x557c <main+0x1e74>
							n = 2;
							if (n < 0) n = 0;
							else if (n > cMaxFanSpeed) n = cMaxFanSpeed;
							if(FanSpeed == 0) {
    55d6:	80 91 3b 07 	lds	r24, 0x073B
    55da:	90 91 3c 07 	lds	r25, 0x073C
    55de:	89 2b       	or	r24, r25
    55e0:	09 f0       	breq	.+2      	; 0x55e4 <main+0x1edc>
    55e2:	76 c0       	rjmp	.+236    	; 0x56d0 <main+0x1fc8>
			}
		}
		void
		configure(iotTimerPsd aPsd, unsigned int aCount) {
			unsigned char	psd = 0;
			if(iId == iotcTimer0) {
    55e4:	e0 91 40 07 	lds	r30, 0x0740
    55e8:	f0 91 41 07 	lds	r31, 0x0741
    55ec:	80 81       	ld	r24, Z
    55ee:	81 30       	cpi	r24, 0x01	; 1
    55f0:	59 f0       	breq	.+22     	; 0x5608 <main+0x1f00>
					case iotcPsd256: psd = 4; break;
					case iotcPsd1024: psd = 5; break;
					default: return;
				}
			}
			switch(iId) {
    55f2:	82 30       	cpi	r24, 0x02	; 2
    55f4:	91 f0       	breq	.+36     	; 0x561a <main+0x1f12>
    55f6:	18 f4       	brcc	.+6      	; 0x55fe <main+0x1ef6>
    55f8:	81 30       	cpi	r24, 0x01	; 1
    55fa:	41 f0       	breq	.+16     	; 0x560c <main+0x1f04>
    55fc:	30 c0       	rjmp	.+96     	; 0x565e <main+0x1f56>
    55fe:	83 30       	cpi	r24, 0x03	; 3
    5600:	b9 f0       	breq	.+46     	; 0x5630 <main+0x1f28>
    5602:	84 30       	cpi	r24, 0x04	; 4
    5604:	d9 f0       	breq	.+54     	; 0x563c <main+0x1f34>
    5606:	2b c0       	rjmp	.+86     	; 0x565e <main+0x1f56>
				switch(aPsd) {
					case iotcPsdNo: psd = 0; break;
					case iotcPsd1: psd = 1; break;
					case iotcPsd8: psd = 2; break;
					case iotcPsd32: psd = 3; break;
					case iotcPsd64: psd = 4; break;
    5608:	84 e0       	ldi	r24, 0x04	; 4
    560a:	01 c0       	rjmp	.+2      	; 0x560e <main+0x1f06>
			} else { // iotcTimer1, 2, | 3
				switch(aPsd) {
					case iotcPsdNo: psd = 0; break;
					case iotcPsd1: psd = 1; break;
					case iotcPsd8: psd = 2; break;
					case iotcPsd64: psd = 3; break;
    560c:	83 e0       	ldi	r24, 0x03	; 3
					default: return;
				}
			}
			switch(iId) {
				case iotcTimer0:
					TCNT0 = 0; OCR0 = aCount & 0xff;
    560e:	12 be       	out	0x32, r1	; 50
    5610:	9a ef       	ldi	r25, 0xFA	; 250
    5612:	91 bf       	out	0x31, r25	; 49
					TCCR0 = (1 << WGM01) | psd;
    5614:	88 60       	ori	r24, 0x08	; 8
    5616:	83 bf       	out	0x33, r24	; 51
    5618:	22 c0       	rjmp	.+68     	; 0x565e <main+0x1f56>
					break;
				case iotcTimer1:
					TCCR1A = 0; TCCR1B = 0; TCNT1 = 0; OCR1A = aCount;
    561a:	1f bc       	out	0x2f, r1	; 47
    561c:	1e bc       	out	0x2e, r1	; 46
    561e:	1d bc       	out	0x2d, r1	; 45
    5620:	1c bc       	out	0x2c, r1	; 44
    5622:	8a ef       	ldi	r24, 0xFA	; 250
    5624:	90 e0       	ldi	r25, 0x00	; 0
    5626:	9b bd       	out	0x2b, r25	; 43
    5628:	8a bd       	out	0x2a, r24	; 42
					TCCR1B = (1 << WGM12) | psd;
    562a:	8b e0       	ldi	r24, 0x0B	; 11
    562c:	8e bd       	out	0x2e, r24	; 46
    562e:	17 c0       	rjmp	.+46     	; 0x565e <main+0x1f56>
					break;
				case iotcTimer2:
					TCNT2 = 0; OCR2 = aCount & 0xff;
    5630:	14 bc       	out	0x24, r1	; 36
    5632:	8a ef       	ldi	r24, 0xFA	; 250
    5634:	83 bd       	out	0x23, r24	; 35
					TCCR2 = (1 << WGM21) | psd;
    5636:	8b e0       	ldi	r24, 0x0B	; 11
    5638:	85 bd       	out	0x25, r24	; 37
    563a:	11 c0       	rjmp	.+34     	; 0x565e <main+0x1f56>
					break;
				case iotcTimer3:
					TCCR3A = 0; TCCR3B = 0; TCNT3 = 0; OCR3A = aCount;
    563c:	10 92 8b 00 	sts	0x008B, r1
    5640:	ea e8       	ldi	r30, 0x8A	; 138
    5642:	f0 e0       	ldi	r31, 0x00	; 0
    5644:	10 82       	st	Z, r1
    5646:	10 92 89 00 	sts	0x0089, r1
    564a:	10 92 88 00 	sts	0x0088, r1
    564e:	8a ef       	ldi	r24, 0xFA	; 250
    5650:	90 e0       	ldi	r25, 0x00	; 0
    5652:	90 93 87 00 	sts	0x0087, r25
    5656:	80 93 86 00 	sts	0x0086, r24
					TCCR3B = (1 << WGM32) | psd;
    565a:	8b e0       	ldi	r24, 0x0B	; 11
    565c:	80 83       	st	Z, r24
				default: return;
			}
		}
		void
		enableInterrupt(void (* aCallback) (void)) {
			switch(iId) {
    565e:	e0 91 40 07 	lds	r30, 0x0740
    5662:	f0 91 41 07 	lds	r31, 0x0741
    5666:	80 81       	ld	r24, Z
    5668:	82 30       	cpi	r24, 0x02	; 2
    566a:	99 f0       	breq	.+38     	; 0x5692 <main+0x1f8a>
    566c:	18 f4       	brcc	.+6      	; 0x5674 <main+0x1f6c>
    566e:	81 30       	cpi	r24, 0x01	; 1
    5670:	31 f0       	breq	.+12     	; 0x567e <main+0x1f76>
    5672:	2e c0       	rjmp	.+92     	; 0x56d0 <main+0x1fc8>
    5674:	83 30       	cpi	r24, 0x03	; 3
    5676:	b9 f0       	breq	.+46     	; 0x56a6 <main+0x1f9e>
    5678:	84 30       	cpi	r24, 0x04	; 4
    567a:	f9 f0       	breq	.+62     	; 0x56ba <main+0x1fb2>
    567c:	29 c0       	rjmp	.+82     	; 0x56d0 <main+0x1fc8>
				case iotcTimer0:
					iCallback0 = aCallback; TIMSK |= (1 << OCIE0); break;
    567e:	8f e6       	ldi	r24, 0x6F	; 111
    5680:	95 e0       	ldi	r25, 0x05	; 5
    5682:	90 93 32 07 	sts	0x0732, r25
    5686:	80 93 31 07 	sts	0x0731, r24
    568a:	87 b7       	in	r24, 0x37	; 55
    568c:	82 60       	ori	r24, 0x02	; 2
    568e:	87 bf       	out	0x37, r24	; 55
    5690:	1f c0       	rjmp	.+62     	; 0x56d0 <main+0x1fc8>
				case iotcTimer1:
					iCallback1 = aCallback; TIMSK |= (1 << OCIE1A); break;
    5692:	8f e6       	ldi	r24, 0x6F	; 111
    5694:	95 e0       	ldi	r25, 0x05	; 5
    5696:	90 93 30 07 	sts	0x0730, r25
    569a:	80 93 2f 07 	sts	0x072F, r24
    569e:	87 b7       	in	r24, 0x37	; 55
    56a0:	80 61       	ori	r24, 0x10	; 16
    56a2:	87 bf       	out	0x37, r24	; 55
    56a4:	15 c0       	rjmp	.+42     	; 0x56d0 <main+0x1fc8>
				case iotcTimer2:
					iCallback2 = aCallback; TIMSK |= (1 << OCIE2); break;
    56a6:	8f e6       	ldi	r24, 0x6F	; 111
    56a8:	95 e0       	ldi	r25, 0x05	; 5
    56aa:	90 93 2e 07 	sts	0x072E, r25
    56ae:	80 93 2d 07 	sts	0x072D, r24
    56b2:	87 b7       	in	r24, 0x37	; 55
    56b4:	80 68       	ori	r24, 0x80	; 128
    56b6:	87 bf       	out	0x37, r24	; 55
    56b8:	0b c0       	rjmp	.+22     	; 0x56d0 <main+0x1fc8>
				case iotcTimer3:
					iCallback3 = aCallback; ETIMSK |= (1 << OCIE3A); break;
    56ba:	8f e6       	ldi	r24, 0x6F	; 111
    56bc:	95 e0       	ldi	r25, 0x05	; 5
    56be:	90 93 2c 07 	sts	0x072C, r25
    56c2:	80 93 2b 07 	sts	0x072B, r24
    56c6:	ed e7       	ldi	r30, 0x7D	; 125
    56c8:	f0 e0       	ldi	r31, 0x00	; 0
    56ca:	80 81       	ld	r24, Z
    56cc:	80 61       	ori	r24, 0x10	; 16
    56ce:	80 83       	st	Z, r24
								if(n == 0) {
									FanTimer->configure(iotTimer::iotcPsdNo, 250);
									FanTimer->disableInterrupt();
								}
							}
							FanSpeed = n;
    56d0:	82 e0       	ldi	r24, 0x02	; 2
    56d2:	90 e0       	ldi	r25, 0x00	; 0
    56d4:	90 93 3c 07 	sts	0x073C, r25
    56d8:	80 93 3b 07 	sts	0x073B, r24
							FanCount = FanSpeed;
    56dc:	90 93 3f 07 	sts	0x073F, r25
    56e0:	80 93 3e 07 	sts	0x073E, r24
							FanState = false;
    56e4:	10 92 3d 07 	sts	0x073D, r1
							break;
    56e8:	b0 c1       	rjmp	.+864    	; 0x5a4a <main+0x2342>
							
						case 0xe0e00004:	//fan 1
							CharLcd->print(2, 1, "fan high speed  ");
    56ea:	20 91 4a 07 	lds	r18, 0x074A
    56ee:	30 91 4b 07 	lds	r19, 0x074B
    56f2:	0f 2e       	mov	r0, r31
    56f4:	fc eb       	ldi	r31, 0xBC	; 188
    56f6:	ef 2e       	mov	r14, r31
    56f8:	f2 e0       	ldi	r31, 0x02	; 2
    56fa:	ff 2e       	mov	r15, r31
    56fc:	f0 2d       	mov	r31, r0
    56fe:	dd 24       	eor	r13, r13
    5700:	d3 94       	inc	r13
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    5702:	f9 01       	movw	r30, r18
    5704:	e4 5d       	subi	r30, 0xD4	; 212
    5706:	fe 4f       	sbci	r31, 0xFE	; 254
    5708:	59 01       	movw	r10, r18
    570a:	b3 ed       	ldi	r27, 0xD3	; 211
    570c:	ab 1a       	sub	r10, r27
    570e:	be ef       	ldi	r27, 0xFE	; 254
    5710:	bb 0a       	sbc	r11, r27
    5712:	04 e6       	ldi	r16, 0x64	; 100
    5714:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    5716:	68 94       	set
    5718:	88 24       	eor	r8, r8
    571a:	81 f8       	bld	r8, 1
    571c:	28 c0       	rjmp	.+80     	; 0x576e <main+0x2066>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    571e:	99 24       	eor	r9, r9
    5720:	93 94       	inc	r9
    5722:	9d 0c       	add	r9, r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    5724:	80 81       	ld	r24, Z
    5726:	d5 01       	movw	r26, r10
    5728:	4c 91       	ld	r20, X
    572a:	90 e0       	ldi	r25, 0x00	; 0
    572c:	01 96       	adiw	r24, 0x01	; 1
    572e:	b8 01       	movw	r22, r16
    5730:	50 d5       	rcall	.+2720   	; 0x61d2 <__divmodhi4>
    5732:	50 e0       	ldi	r21, 0x00	; 0
    5734:	84 17       	cp	r24, r20
    5736:	95 07       	cpc	r25, r21
    5738:	c9 f0       	breq	.+50     	; 0x576c <main+0x2064>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    573a:	80 81       	ld	r24, Z
    573c:	90 e0       	ldi	r25, 0x00	; 0
    573e:	ac 01       	movw	r20, r24
    5740:	44 0f       	add	r20, r20
    5742:	55 1f       	adc	r21, r21
    5744:	84 0f       	add	r24, r20
    5746:	95 1f       	adc	r25, r21
    5748:	d9 01       	movw	r26, r18
    574a:	a8 0f       	add	r26, r24
    574c:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    574e:	dc 92       	st	X, r13
    5750:	11 96       	adiw	r26, 0x01	; 1
    5752:	8c 92       	st	X, r8
    5754:	11 97       	sbiw	r26, 0x01	; 1
    5756:	12 96       	adiw	r26, 0x02	; 2
    5758:	cc 92       	st	X, r12

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    575a:	4f b7       	in	r20, 0x3f	; 63
    575c:	f8 94       	cli
    575e:	80 81       	ld	r24, Z
    5760:	90 e0       	ldi	r25, 0x00	; 0
    5762:	01 96       	adiw	r24, 0x01	; 1
    5764:	b8 01       	movw	r22, r16
    5766:	35 d5       	rcall	.+2666   	; 0x61d2 <__divmodhi4>
    5768:	80 83       	st	Z, r24
    576a:	4f bf       	out	0x3f, r20	; 63
				switch(aPsd) {
					case iotcPsdNo: psd = 0; break;
					case iotcPsd1: psd = 1; break;
					case iotcPsd8: psd = 2; break;
					case iotcPsd32: psd = 3; break;
					case iotcPsd64: psd = 4; break;
    576c:	d9 2c       	mov	r13, r9
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    576e:	d7 01       	movw	r26, r14
    5770:	cd 90       	ld	r12, X+
    5772:	7d 01       	movw	r14, r26
    5774:	c1 10       	cpse	r12, r1
    5776:	d3 cf       	rjmp	.-90     	; 0x571e <main+0x2016>
							n = 4;
							if (n < 0) n = 0;
							else if (n > cMaxFanSpeed) n = cMaxFanSpeed;
							if(FanSpeed == 0) {
    5778:	80 91 3b 07 	lds	r24, 0x073B
    577c:	90 91 3c 07 	lds	r25, 0x073C
    5780:	89 2b       	or	r24, r25
    5782:	09 f0       	breq	.+2      	; 0x5786 <main+0x207e>
    5784:	76 c0       	rjmp	.+236    	; 0x5872 <main+0x216a>
			}
		}
		void
		configure(iotTimerPsd aPsd, unsigned int aCount) {
			unsigned char	psd = 0;
			if(iId == iotcTimer0) {
    5786:	e0 91 40 07 	lds	r30, 0x0740
    578a:	f0 91 41 07 	lds	r31, 0x0741
    578e:	80 81       	ld	r24, Z
    5790:	81 30       	cpi	r24, 0x01	; 1
    5792:	59 f0       	breq	.+22     	; 0x57aa <main+0x20a2>
					case iotcPsd256: psd = 4; break;
					case iotcPsd1024: psd = 5; break;
					default: return;
				}
			}
			switch(iId) {
    5794:	82 30       	cpi	r24, 0x02	; 2
    5796:	91 f0       	breq	.+36     	; 0x57bc <main+0x20b4>
    5798:	18 f4       	brcc	.+6      	; 0x57a0 <main+0x2098>
    579a:	81 30       	cpi	r24, 0x01	; 1
    579c:	41 f0       	breq	.+16     	; 0x57ae <main+0x20a6>
    579e:	30 c0       	rjmp	.+96     	; 0x5800 <main+0x20f8>
    57a0:	83 30       	cpi	r24, 0x03	; 3
    57a2:	b9 f0       	breq	.+46     	; 0x57d2 <main+0x20ca>
    57a4:	84 30       	cpi	r24, 0x04	; 4
    57a6:	d9 f0       	breq	.+54     	; 0x57de <main+0x20d6>
    57a8:	2b c0       	rjmp	.+86     	; 0x5800 <main+0x20f8>
				switch(aPsd) {
					case iotcPsdNo: psd = 0; break;
					case iotcPsd1: psd = 1; break;
					case iotcPsd8: psd = 2; break;
					case iotcPsd32: psd = 3; break;
					case iotcPsd64: psd = 4; break;
    57aa:	84 e0       	ldi	r24, 0x04	; 4
    57ac:	01 c0       	rjmp	.+2      	; 0x57b0 <main+0x20a8>
			} else { // iotcTimer1, 2, | 3
				switch(aPsd) {
					case iotcPsdNo: psd = 0; break;
					case iotcPsd1: psd = 1; break;
					case iotcPsd8: psd = 2; break;
					case iotcPsd64: psd = 3; break;
    57ae:	83 e0       	ldi	r24, 0x03	; 3
					default: return;
				}
			}
			switch(iId) {
				case iotcTimer0:
					TCNT0 = 0; OCR0 = aCount & 0xff;
    57b0:	12 be       	out	0x32, r1	; 50
    57b2:	9a ef       	ldi	r25, 0xFA	; 250
    57b4:	91 bf       	out	0x31, r25	; 49
					TCCR0 = (1 << WGM01) | psd;
    57b6:	88 60       	ori	r24, 0x08	; 8
    57b8:	83 bf       	out	0x33, r24	; 51
    57ba:	22 c0       	rjmp	.+68     	; 0x5800 <main+0x20f8>
					break;
				case iotcTimer1:
					TCCR1A = 0; TCCR1B = 0; TCNT1 = 0; OCR1A = aCount;
    57bc:	1f bc       	out	0x2f, r1	; 47
    57be:	1e bc       	out	0x2e, r1	; 46
    57c0:	1d bc       	out	0x2d, r1	; 45
    57c2:	1c bc       	out	0x2c, r1	; 44
    57c4:	8a ef       	ldi	r24, 0xFA	; 250
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	9b bd       	out	0x2b, r25	; 43
    57ca:	8a bd       	out	0x2a, r24	; 42
					TCCR1B = (1 << WGM12) | psd;
    57cc:	8b e0       	ldi	r24, 0x0B	; 11
    57ce:	8e bd       	out	0x2e, r24	; 46
    57d0:	17 c0       	rjmp	.+46     	; 0x5800 <main+0x20f8>
					break;
				case iotcTimer2:
					TCNT2 = 0; OCR2 = aCount & 0xff;
    57d2:	14 bc       	out	0x24, r1	; 36
    57d4:	8a ef       	ldi	r24, 0xFA	; 250
    57d6:	83 bd       	out	0x23, r24	; 35
					TCCR2 = (1 << WGM21) | psd;
    57d8:	8b e0       	ldi	r24, 0x0B	; 11
    57da:	85 bd       	out	0x25, r24	; 37
    57dc:	11 c0       	rjmp	.+34     	; 0x5800 <main+0x20f8>
					break;
				case iotcTimer3:
					TCCR3A = 0; TCCR3B = 0; TCNT3 = 0; OCR3A = aCount;
    57de:	10 92 8b 00 	sts	0x008B, r1
    57e2:	ea e8       	ldi	r30, 0x8A	; 138
    57e4:	f0 e0       	ldi	r31, 0x00	; 0
    57e6:	10 82       	st	Z, r1
    57e8:	10 92 89 00 	sts	0x0089, r1
    57ec:	10 92 88 00 	sts	0x0088, r1
    57f0:	8a ef       	ldi	r24, 0xFA	; 250
    57f2:	90 e0       	ldi	r25, 0x00	; 0
    57f4:	90 93 87 00 	sts	0x0087, r25
    57f8:	80 93 86 00 	sts	0x0086, r24
					TCCR3B = (1 << WGM32) | psd;
    57fc:	8b e0       	ldi	r24, 0x0B	; 11
    57fe:	80 83       	st	Z, r24
				default: return;
			}
		}
		void
		enableInterrupt(void (* aCallback) (void)) {
			switch(iId) {
    5800:	e0 91 40 07 	lds	r30, 0x0740
    5804:	f0 91 41 07 	lds	r31, 0x0741
    5808:	80 81       	ld	r24, Z
    580a:	82 30       	cpi	r24, 0x02	; 2
    580c:	99 f0       	breq	.+38     	; 0x5834 <main+0x212c>
    580e:	18 f4       	brcc	.+6      	; 0x5816 <main+0x210e>
    5810:	81 30       	cpi	r24, 0x01	; 1
    5812:	31 f0       	breq	.+12     	; 0x5820 <main+0x2118>
    5814:	2e c0       	rjmp	.+92     	; 0x5872 <main+0x216a>
    5816:	83 30       	cpi	r24, 0x03	; 3
    5818:	b9 f0       	breq	.+46     	; 0x5848 <main+0x2140>
    581a:	84 30       	cpi	r24, 0x04	; 4
    581c:	f9 f0       	breq	.+62     	; 0x585c <main+0x2154>
    581e:	29 c0       	rjmp	.+82     	; 0x5872 <main+0x216a>
				case iotcTimer0:
					iCallback0 = aCallback; TIMSK |= (1 << OCIE0); break;
    5820:	8f e6       	ldi	r24, 0x6F	; 111
    5822:	95 e0       	ldi	r25, 0x05	; 5
    5824:	90 93 32 07 	sts	0x0732, r25
    5828:	80 93 31 07 	sts	0x0731, r24
    582c:	87 b7       	in	r24, 0x37	; 55
    582e:	82 60       	ori	r24, 0x02	; 2
    5830:	87 bf       	out	0x37, r24	; 55
    5832:	1f c0       	rjmp	.+62     	; 0x5872 <main+0x216a>
				case iotcTimer1:
					iCallback1 = aCallback; TIMSK |= (1 << OCIE1A); break;
    5834:	8f e6       	ldi	r24, 0x6F	; 111
    5836:	95 e0       	ldi	r25, 0x05	; 5
    5838:	90 93 30 07 	sts	0x0730, r25
    583c:	80 93 2f 07 	sts	0x072F, r24
    5840:	87 b7       	in	r24, 0x37	; 55
    5842:	80 61       	ori	r24, 0x10	; 16
    5844:	87 bf       	out	0x37, r24	; 55
    5846:	15 c0       	rjmp	.+42     	; 0x5872 <main+0x216a>
				case iotcTimer2:
					iCallback2 = aCallback; TIMSK |= (1 << OCIE2); break;
    5848:	8f e6       	ldi	r24, 0x6F	; 111
    584a:	95 e0       	ldi	r25, 0x05	; 5
    584c:	90 93 2e 07 	sts	0x072E, r25
    5850:	80 93 2d 07 	sts	0x072D, r24
    5854:	87 b7       	in	r24, 0x37	; 55
    5856:	80 68       	ori	r24, 0x80	; 128
    5858:	87 bf       	out	0x37, r24	; 55
    585a:	0b c0       	rjmp	.+22     	; 0x5872 <main+0x216a>
				case iotcTimer3:
					iCallback3 = aCallback; ETIMSK |= (1 << OCIE3A); break;
    585c:	8f e6       	ldi	r24, 0x6F	; 111
    585e:	95 e0       	ldi	r25, 0x05	; 5
    5860:	90 93 2c 07 	sts	0x072C, r25
    5864:	80 93 2b 07 	sts	0x072B, r24
    5868:	ed e7       	ldi	r30, 0x7D	; 125
    586a:	f0 e0       	ldi	r31, 0x00	; 0
    586c:	80 81       	ld	r24, Z
    586e:	80 61       	ori	r24, 0x10	; 16
    5870:	80 83       	st	Z, r24
								if(n == 0) {
									FanTimer->configure(iotTimer::iotcPsdNo, 250);
									FanTimer->disableInterrupt();
								}
							}
							FanSpeed = n;
    5872:	84 e0       	ldi	r24, 0x04	; 4
    5874:	90 e0       	ldi	r25, 0x00	; 0
    5876:	90 93 3c 07 	sts	0x073C, r25
    587a:	80 93 3b 07 	sts	0x073B, r24
							FanCount = FanSpeed;
    587e:	90 93 3f 07 	sts	0x073F, r25
    5882:	80 93 3e 07 	sts	0x073E, r24
							FanState = false;
    5886:	10 92 3d 07 	sts	0x073D, r1
							break;
    588a:	df c0       	rjmp	.+446    	; 0x5a4a <main+0x2342>
						case 0xe0e040bc:
							if(lcdon) {
    588c:	80 91 39 07 	lds	r24, 0x0739
    5890:	90 91 3a 07 	lds	r25, 0x073A
    5894:	89 2b       	or	r24, r25
    5896:	09 f4       	brne	.+2      	; 0x589a <main+0x2192>
    5898:	4c c0       	rjmp	.+152    	; 0x5932 <main+0x222a>
								CharLcd->print(2, 1, "power off       ");
    589a:	20 91 4a 07 	lds	r18, 0x074A
    589e:	30 91 4b 07 	lds	r19, 0x074B
    58a2:	0f 2e       	mov	r0, r31
    58a4:	f1 e1       	ldi	r31, 0x11	; 17
    58a6:	ef 2e       	mov	r14, r31
    58a8:	f3 e0       	ldi	r31, 0x03	; 3
    58aa:	ff 2e       	mov	r15, r31
    58ac:	f0 2d       	mov	r31, r0
    58ae:	dd 24       	eor	r13, r13
    58b0:	d3 94       	inc	r13
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    58b2:	f9 01       	movw	r30, r18
    58b4:	e4 5d       	subi	r30, 0xD4	; 212
    58b6:	fe 4f       	sbci	r31, 0xFE	; 254
    58b8:	59 01       	movw	r10, r18
    58ba:	b3 ed       	ldi	r27, 0xD3	; 211
    58bc:	ab 1a       	sub	r10, r27
    58be:	be ef       	ldi	r27, 0xFE	; 254
    58c0:	bb 0a       	sbc	r11, r27
    58c2:	04 e6       	ldi	r16, 0x64	; 100
    58c4:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    58c6:	68 94       	set
    58c8:	88 24       	eor	r8, r8
    58ca:	81 f8       	bld	r8, 1
    58cc:	28 c0       	rjmp	.+80     	; 0x591e <main+0x2216>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    58ce:	99 24       	eor	r9, r9
    58d0:	93 94       	inc	r9
    58d2:	9d 0c       	add	r9, r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    58d4:	80 81       	ld	r24, Z
    58d6:	d5 01       	movw	r26, r10
    58d8:	4c 91       	ld	r20, X
    58da:	90 e0       	ldi	r25, 0x00	; 0
    58dc:	01 96       	adiw	r24, 0x01	; 1
    58de:	b8 01       	movw	r22, r16
    58e0:	78 d4       	rcall	.+2288   	; 0x61d2 <__divmodhi4>
    58e2:	50 e0       	ldi	r21, 0x00	; 0
    58e4:	84 17       	cp	r24, r20
    58e6:	95 07       	cpc	r25, r21
    58e8:	c9 f0       	breq	.+50     	; 0x591c <main+0x2214>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    58ea:	80 81       	ld	r24, Z
    58ec:	90 e0       	ldi	r25, 0x00	; 0
    58ee:	ac 01       	movw	r20, r24
    58f0:	44 0f       	add	r20, r20
    58f2:	55 1f       	adc	r21, r21
    58f4:	84 0f       	add	r24, r20
    58f6:	95 1f       	adc	r25, r21
    58f8:	d9 01       	movw	r26, r18
    58fa:	a8 0f       	add	r26, r24
    58fc:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    58fe:	dc 92       	st	X, r13
    5900:	11 96       	adiw	r26, 0x01	; 1
    5902:	8c 92       	st	X, r8
    5904:	11 97       	sbiw	r26, 0x01	; 1
    5906:	12 96       	adiw	r26, 0x02	; 2
    5908:	cc 92       	st	X, r12

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    590a:	4f b7       	in	r20, 0x3f	; 63
    590c:	f8 94       	cli
    590e:	80 81       	ld	r24, Z
    5910:	90 e0       	ldi	r25, 0x00	; 0
    5912:	01 96       	adiw	r24, 0x01	; 1
    5914:	b8 01       	movw	r22, r16
    5916:	5d d4       	rcall	.+2234   	; 0x61d2 <__divmodhi4>
    5918:	80 83       	st	Z, r24
    591a:	4f bf       	out	0x3f, r20	; 63
				switch(aPsd) {
					case iotcPsdNo: psd = 0; break;
					case iotcPsd1: psd = 1; break;
					case iotcPsd8: psd = 2; break;
					case iotcPsd32: psd = 3; break;
					case iotcPsd64: psd = 4; break;
    591c:	d9 2c       	mov	r13, r9
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    591e:	d7 01       	movw	r26, r14
    5920:	cd 90       	ld	r12, X+
    5922:	7d 01       	movw	r14, r26
    5924:	c1 10       	cpse	r12, r1
    5926:	d3 cf       	rjmp	.-90     	; 0x58ce <main+0x21c6>
								lcdon = 0;
    5928:	10 92 3a 07 	sts	0x073A, r1
    592c:	10 92 39 07 	sts	0x0739, r1
    5930:	8c c0       	rjmp	.+280    	; 0x5a4a <main+0x2342>
							} else {
								CharLcd->print(2, 1, "power on        ");
    5932:	20 91 4a 07 	lds	r18, 0x074A
    5936:	30 91 4b 07 	lds	r19, 0x074B
    593a:	0f 2e       	mov	r0, r31
    593c:	f2 e2       	ldi	r31, 0x22	; 34
    593e:	ef 2e       	mov	r14, r31
    5940:	f3 e0       	ldi	r31, 0x03	; 3
    5942:	ff 2e       	mov	r15, r31
    5944:	f0 2d       	mov	r31, r0
    5946:	dd 24       	eor	r13, r13
    5948:	d3 94       	inc	r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    594a:	f9 01       	movw	r30, r18
    594c:	e4 5d       	subi	r30, 0xD4	; 212
    594e:	fe 4f       	sbci	r31, 0xFE	; 254
    5950:	59 01       	movw	r10, r18
    5952:	b3 ed       	ldi	r27, 0xD3	; 211
    5954:	ab 1a       	sub	r10, r27
    5956:	be ef       	ldi	r27, 0xFE	; 254
    5958:	bb 0a       	sbc	r11, r27
    595a:	04 e6       	ldi	r16, 0x64	; 100
    595c:	10 e0       	ldi	r17, 0x00	; 0
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
			out->x = x; out->y = y; out->c = c;
    595e:	68 94       	set
    5960:	88 24       	eor	r8, r8
    5962:	81 f8       	bld	r8, 1
    5964:	28 c0       	rjmp	.+80     	; 0x59b6 <main+0x22ae>
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    5966:	99 24       	eor	r9, r9
    5968:	93 94       	inc	r9
    596a:	9d 0c       	add	r9, r13
		}
		void
		print(unsigned char y, unsigned char x, char c) {
			if((iHead + 1) % iotcCharLcdQueueSize == iTail)
    596c:	80 81       	ld	r24, Z
    596e:	d5 01       	movw	r26, r10
    5970:	4c 91       	ld	r20, X
    5972:	90 e0       	ldi	r25, 0x00	; 0
    5974:	01 96       	adiw	r24, 0x01	; 1
    5976:	b8 01       	movw	r22, r16
    5978:	2c d4       	rcall	.+2136   	; 0x61d2 <__divmodhi4>
    597a:	50 e0       	ldi	r21, 0x00	; 0
    597c:	84 17       	cp	r24, r20
    597e:	95 07       	cpc	r25, r21
    5980:	c9 f0       	breq	.+50     	; 0x59b4 <main+0x22ac>
				return;	// buffer full

			volatile iotCharLcdOut	*out = iQueue + iHead;
    5982:	80 81       	ld	r24, Z
    5984:	90 e0       	ldi	r25, 0x00	; 0
    5986:	ac 01       	movw	r20, r24
    5988:	44 0f       	add	r20, r20
    598a:	55 1f       	adc	r21, r21
    598c:	84 0f       	add	r24, r20
    598e:	95 1f       	adc	r25, r21
    5990:	d9 01       	movw	r26, r18
    5992:	a8 0f       	add	r26, r24
    5994:	b9 1f       	adc	r27, r25
			out->x = x; out->y = y; out->c = c;
    5996:	dc 92       	st	X, r13
    5998:	11 96       	adiw	r26, 0x01	; 1
    599a:	8c 92       	st	X, r8
    599c:	11 97       	sbiw	r26, 0x01	; 1
    599e:	12 96       	adiw	r26, 0x02	; 2
    59a0:	cc 92       	st	X, r12

			iotmAtomic(iHead = (iHead + 1) % iotcCharLcdQueueSize);
    59a2:	4f b7       	in	r20, 0x3f	; 63
    59a4:	f8 94       	cli
    59a6:	80 81       	ld	r24, Z
    59a8:	90 e0       	ldi	r25, 0x00	; 0
    59aa:	01 96       	adiw	r24, 0x01	; 1
    59ac:	b8 01       	movw	r22, r16
    59ae:	11 d4       	rcall	.+2082   	; 0x61d2 <__divmodhi4>
    59b0:	80 83       	st	Z, r24
    59b2:	4f bf       	out	0x3f, r20	; 63
							FanCount = FanSpeed;
							FanState = false;
							break;
						case 0xe0e040bc:
							if(lcdon) {
								CharLcd->print(2, 1, "power off       ");
    59b4:	d9 2c       	mov	r13, r9
		}
		~iotCharLcd()	{ }
			
		void
		print(unsigned char y, unsigned char x, const char *s) {
			while(*s) print(y, x++, *s++);
    59b6:	d7 01       	movw	r26, r14
    59b8:	cd 90       	ld	r12, X+
    59ba:	7d 01       	movw	r14, r26
    59bc:	c1 10       	cpse	r12, r1
    59be:	d3 cf       	rjmp	.-90     	; 0x5966 <main+0x225e>
								lcdon = 0;
							} else {
								CharLcd->print(2, 1, "power on        ");
								lcdon = 1;
    59c0:	81 e0       	ldi	r24, 0x01	; 1
    59c2:	90 e0       	ldi	r25, 0x00	; 0
    59c4:	90 93 3a 07 	sts	0x073A, r25
    59c8:	80 93 39 07 	sts	0x0739, r24
    59cc:	3e c0       	rjmp	.+124    	; 0x5a4a <main+0x2342>
					}
					if(i == NumKeys)
						Key[NumKeys++] = dec->getValue();
					*/
				}
			} else dec->dumpIntervals();
    59ce:	00 91 42 07 	lds	r16, 0x0742
    59d2:	10 91 43 07 	lds	r17, 0x0743
		unsigned long	getValue()	{ return(iValue); }
		int				getBits()	{ return(inBits); }

		void
		dumpIntervals() {
			printf("%d:", iVendor);
    59d6:	f8 01       	movw	r30, r16
    59d8:	80 81       	ld	r24, Z
    59da:	1f 92       	push	r1
    59dc:	8f 93       	push	r24
    59de:	8a ef       	ldi	r24, 0xFA	; 250
    59e0:	93 e0       	ldi	r25, 0x03	; 3
    59e2:	9f 93       	push	r25
    59e4:	8f 93       	push	r24
    59e6:	8c d7       	rcall	.+3864   	; 0x6900 <printf>
			for(int i = 0; i < inIntervals; i++)
    59e8:	d8 01       	movw	r26, r16
    59ea:	12 96       	adiw	r26, 0x02	; 2
    59ec:	8c 91       	ld	r24, X
    59ee:	0f 90       	pop	r0
    59f0:	0f 90       	pop	r0
    59f2:	0f 90       	pop	r0
    59f4:	0f 90       	pop	r0
    59f6:	88 23       	and	r24, r24
    59f8:	09 f1       	breq	.+66     	; 0x5a3c <main+0x2334>
    59fa:	c1 2c       	mov	r12, r1
    59fc:	d1 2c       	mov	r13, r1
				printf(" %d", iInterval[i]);
    59fe:	0f 2e       	mov	r0, r31
    5a00:	fe ef       	ldi	r31, 0xFE	; 254
    5a02:	ef 2e       	mov	r14, r31
    5a04:	f3 e0       	ldi	r31, 0x03	; 3
    5a06:	ff 2e       	mov	r15, r31
    5a08:	f0 2d       	mov	r31, r0
    5a0a:	f6 01       	movw	r30, r12
    5a0c:	ee 0f       	add	r30, r30
    5a0e:	ff 1f       	adc	r31, r31
    5a10:	e0 0f       	add	r30, r16
    5a12:	f1 1f       	adc	r31, r17
    5a14:	83 81       	ldd	r24, Z+3	; 0x03
    5a16:	94 81       	ldd	r25, Z+4	; 0x04
    5a18:	9f 93       	push	r25
    5a1a:	8f 93       	push	r24
    5a1c:	ff 92       	push	r15
    5a1e:	ef 92       	push	r14
    5a20:	6f d7       	rcall	.+3806   	; 0x6900 <printf>
		int				getBits()	{ return(inBits); }

		void
		dumpIntervals() {
			printf("%d:", iVendor);
			for(int i = 0; i < inIntervals; i++)
    5a22:	bf ef       	ldi	r27, 0xFF	; 255
    5a24:	cb 1a       	sub	r12, r27
    5a26:	db 0a       	sbc	r13, r27
    5a28:	f8 01       	movw	r30, r16
    5a2a:	82 81       	ldd	r24, Z+2	; 0x02
    5a2c:	90 e0       	ldi	r25, 0x00	; 0
    5a2e:	0f 90       	pop	r0
    5a30:	0f 90       	pop	r0
    5a32:	0f 90       	pop	r0
    5a34:	0f 90       	pop	r0
    5a36:	c8 16       	cp	r12, r24
    5a38:	d9 06       	cpc	r13, r25
    5a3a:	3c f3       	brlt	.-50     	; 0x5a0a <main+0x2302>
				printf(" %d", iInterval[i]);
			printf("\n\r");
    5a3c:	87 ef       	ldi	r24, 0xF7	; 247
    5a3e:	93 e0       	ldi	r25, 0x03	; 3
    5a40:	9f 93       	push	r25
    5a42:	8f 93       	push	r24
    5a44:	5d d7       	rcall	.+3770   	; 0x6900 <printf>
    5a46:	0f 90       	pop	r0
    5a48:	0f 90       	pop	r0
			}
		}
		void
		configure(iotTimerPsd aPsd, unsigned int aCount) {
			unsigned char	psd = 0;
			if(iId == iotcTimer0) {
    5a4a:	e0 91 35 07 	lds	r30, 0x0735
    5a4e:	f0 91 36 07 	lds	r31, 0x0736
					case iotcPsd256: psd = 4; break;
					case iotcPsd1024: psd = 5; break;
					default: return;
				}
			}
			switch(iId) {
    5a52:	80 81       	ld	r24, Z
    5a54:	82 30       	cpi	r24, 0x02	; 2
    5a56:	79 f0       	breq	.+30     	; 0x5a76 <main+0x236e>
    5a58:	18 f4       	brcc	.+6      	; 0x5a60 <main+0x2358>
    5a5a:	81 30       	cpi	r24, 0x01	; 1
    5a5c:	31 f0       	breq	.+12     	; 0x5a6a <main+0x2362>
    5a5e:	2d c0       	rjmp	.+90     	; 0x5aba <main+0x23b2>
    5a60:	83 30       	cpi	r24, 0x03	; 3
    5a62:	a1 f0       	breq	.+40     	; 0x5a8c <main+0x2384>
    5a64:	84 30       	cpi	r24, 0x04	; 4
    5a66:	c1 f0       	breq	.+48     	; 0x5a98 <main+0x2390>
    5a68:	28 c0       	rjmp	.+80     	; 0x5aba <main+0x23b2>
				case iotcTimer0:
					TCNT0 = 0; OCR0 = aCount & 0xff;
    5a6a:	12 be       	out	0x32, r1	; 50
    5a6c:	80 e2       	ldi	r24, 0x20	; 32
    5a6e:	81 bf       	out	0x31, r24	; 49
					TCCR0 = (1 << WGM01) | psd;
    5a70:	89 e0       	ldi	r24, 0x09	; 9
    5a72:	83 bf       	out	0x33, r24	; 51
    5a74:	22 c0       	rjmp	.+68     	; 0x5aba <main+0x23b2>
					break;
				case iotcTimer1:
					TCCR1A = 0; TCCR1B = 0; TCNT1 = 0; OCR1A = aCount;
    5a76:	1f bc       	out	0x2f, r1	; 47
    5a78:	1e bc       	out	0x2e, r1	; 46
    5a7a:	1d bc       	out	0x2d, r1	; 45
    5a7c:	1c bc       	out	0x2c, r1	; 44
    5a7e:	80 e2       	ldi	r24, 0x20	; 32
    5a80:	93 e0       	ldi	r25, 0x03	; 3
    5a82:	9b bd       	out	0x2b, r25	; 43
    5a84:	8a bd       	out	0x2a, r24	; 42
					TCCR1B = (1 << WGM12) | psd;
    5a86:	89 e0       	ldi	r24, 0x09	; 9
    5a88:	8e bd       	out	0x2e, r24	; 46
    5a8a:	17 c0       	rjmp	.+46     	; 0x5aba <main+0x23b2>
					break;
				case iotcTimer2:
					TCNT2 = 0; OCR2 = aCount & 0xff;
    5a8c:	14 bc       	out	0x24, r1	; 36
    5a8e:	80 e2       	ldi	r24, 0x20	; 32
    5a90:	83 bd       	out	0x23, r24	; 35
					TCCR2 = (1 << WGM21) | psd;
    5a92:	89 e0       	ldi	r24, 0x09	; 9
    5a94:	85 bd       	out	0x25, r24	; 37
    5a96:	11 c0       	rjmp	.+34     	; 0x5aba <main+0x23b2>
					break;
				case iotcTimer3:
					TCCR3A = 0; TCCR3B = 0; TCNT3 = 0; OCR3A = aCount;
    5a98:	10 92 8b 00 	sts	0x008B, r1
    5a9c:	ea e8       	ldi	r30, 0x8A	; 138
    5a9e:	f0 e0       	ldi	r31, 0x00	; 0
    5aa0:	10 82       	st	Z, r1
    5aa2:	10 92 89 00 	sts	0x0089, r1
    5aa6:	10 92 88 00 	sts	0x0088, r1
    5aaa:	80 e2       	ldi	r24, 0x20	; 32
    5aac:	93 e0       	ldi	r25, 0x03	; 3
    5aae:	90 93 87 00 	sts	0x0087, r25
    5ab2:	80 93 86 00 	sts	0x0086, r24
					TCCR3B = (1 << WGM32) | psd;
    5ab6:	89 e0       	ldi	r24, 0x09	; 9
    5ab8:	80 83       	st	Z, r24
		void
		enable() {
			iTimer->configure(iotTimer::iotcPsd1,
				F_CPU * iotcIrUSecPerTick / 1000000);

			iDecoder->iVendor = iotcUnknown;
    5aba:	e0 91 37 07 	lds	r30, 0x0737
    5abe:	f0 91 38 07 	lds	r31, 0x0738
    5ac2:	10 82       	st	Z, r1
			iDecoder->iState = iotcIrStateIdle;
    5ac4:	e0 91 37 07 	lds	r30, 0x0737
    5ac8:	f0 91 38 07 	lds	r31, 0x0738
    5acc:	11 82       	std	Z+1, r1	; 0x01
			iDecoder->inIntervals = 0;
    5ace:	e0 91 37 07 	lds	r30, 0x0737
    5ad2:	f0 91 38 07 	lds	r31, 0x0738
    5ad6:	12 82       	std	Z+2, r1	; 0x02
			iDecoder->iTimer = 0;
    5ad8:	e5 53       	subi	r30, 0x35	; 53
    5ada:	ff 4f       	sbci	r31, 0xFF	; 255
    5adc:	11 82       	std	Z+1, r1	; 0x01
    5ade:	10 82       	st	Z, r1
					iCallback3 = (void (*)(void)) NULL; break;
				default: break;
			}
			iId = iotcTimerNone;
		}
		iotTimerId getId()		{ return(iId); }
    5ae0:	e0 91 35 07 	lds	r30, 0x0735
    5ae4:	f0 91 36 07 	lds	r31, 0x0736

			// set pin direction to input.
			if(iTimer->getId() == iotTimer::iotcTimer1) DDRB &= ~(1 << PB4);
    5ae8:	80 81       	ld	r24, Z
    5aea:	82 30       	cpi	r24, 0x02	; 2
    5aec:	11 f4       	brne	.+4      	; 0x5af2 <main+0x23ea>
    5aee:	bc 98       	cbi	0x17, 4	; 23
    5af0:	01 c0       	rjmp	.+2      	; 0x5af4 <main+0x23ec>
			else DDRE &= ~(1 << PE2);	// iotTimer::iotcTimer3
    5af2:	12 98       	cbi	0x02, 2	; 2
				default: return;
			}
		}
		void
		enableInterrupt(void (* aCallback) (void)) {
			switch(iId) {
    5af4:	e0 91 35 07 	lds	r30, 0x0735
    5af8:	f0 91 36 07 	lds	r31, 0x0736
    5afc:	80 81       	ld	r24, Z
    5afe:	82 30       	cpi	r24, 0x02	; 2
    5b00:	b1 f0       	breq	.+44     	; 0x5b2e <main+0x2426>
    5b02:	20 f4       	brcc	.+8      	; 0x5b0c <main+0x2404>
    5b04:	81 30       	cpi	r24, 0x01	; 1
    5b06:	41 f0       	breq	.+16     	; 0x5b18 <main+0x2410>
    5b08:	0c 94 3c 1d 	jmp	0x3a78	; 0x3a78 <main+0x370>
    5b0c:	83 30       	cpi	r24, 0x03	; 3
    5b0e:	d1 f0       	breq	.+52     	; 0x5b44 <main+0x243c>
    5b10:	84 30       	cpi	r24, 0x04	; 4
    5b12:	19 f1       	breq	.+70     	; 0x5b5a <main+0x2452>
    5b14:	0c 94 3c 1d 	jmp	0x3a78	; 0x3a78 <main+0x370>
				case iotcTimer0:
					iCallback0 = aCallback; TIMSK |= (1 << OCIE0); break;
    5b18:	83 ec       	ldi	r24, 0xC3	; 195
    5b1a:	94 e0       	ldi	r25, 0x04	; 4
    5b1c:	90 93 32 07 	sts	0x0732, r25
    5b20:	80 93 31 07 	sts	0x0731, r24
    5b24:	87 b7       	in	r24, 0x37	; 55
    5b26:	82 60       	ori	r24, 0x02	; 2
    5b28:	87 bf       	out	0x37, r24	; 55
    5b2a:	0c 94 3c 1d 	jmp	0x3a78	; 0x3a78 <main+0x370>
				case iotcTimer1:
					iCallback1 = aCallback; TIMSK |= (1 << OCIE1A); break;
    5b2e:	83 ec       	ldi	r24, 0xC3	; 195
    5b30:	94 e0       	ldi	r25, 0x04	; 4
    5b32:	90 93 30 07 	sts	0x0730, r25
    5b36:	80 93 2f 07 	sts	0x072F, r24
    5b3a:	87 b7       	in	r24, 0x37	; 55
    5b3c:	80 61       	ori	r24, 0x10	; 16
    5b3e:	87 bf       	out	0x37, r24	; 55
    5b40:	0c 94 3c 1d 	jmp	0x3a78	; 0x3a78 <main+0x370>
				case iotcTimer2:
					iCallback2 = aCallback; TIMSK |= (1 << OCIE2); break;
    5b44:	83 ec       	ldi	r24, 0xC3	; 195
    5b46:	94 e0       	ldi	r25, 0x04	; 4
    5b48:	90 93 2e 07 	sts	0x072E, r25
    5b4c:	80 93 2d 07 	sts	0x072D, r24
    5b50:	87 b7       	in	r24, 0x37	; 55
    5b52:	80 68       	ori	r24, 0x80	; 128
    5b54:	87 bf       	out	0x37, r24	; 55
    5b56:	0c 94 3c 1d 	jmp	0x3a78	; 0x3a78 <main+0x370>
				case iotcTimer3:
					iCallback3 = aCallback; ETIMSK |= (1 << OCIE3A); break;
    5b5a:	83 ec       	ldi	r24, 0xC3	; 195
    5b5c:	94 e0       	ldi	r25, 0x04	; 4
    5b5e:	90 93 2c 07 	sts	0x072C, r25
    5b62:	80 93 2b 07 	sts	0x072B, r24
    5b66:	ed e7       	ldi	r30, 0x7D	; 125
    5b68:	f0 e0       	ldi	r31, 0x00	; 0
    5b6a:	80 81       	ld	r24, Z
    5b6c:	80 61       	ori	r24, 0x10	; 16
    5b6e:	80 83       	st	Z, r24
    5b70:	0c 94 3c 1d 	jmp	0x3a78	; 0x3a78 <main+0x370>
				toDate(iMonDyHrMnSc, days);
				if(iCharLcd && lcdmode) iCharLcd->print(iRow, 1, iMonDyHrMnSc);
				else iCharLcd->print(iRow, 1, "            ");
			}
			toTime(iMonDyHrMnSc + 7, iSeconds);
			if(iCharLcd && lcdmode) iCharLcd->print(iRow, 8, iMonDyHrMnSc + 7);
    5b74:	08 e0       	ldi	r16, 0x08	; 8
    5b76:	14 e0       	ldi	r17, 0x04	; 4
			return s;
		}
		static bool
		enqueueLine(char *s) {
			if((iHead + 1) % iotcCmdQueueSize == iTail) return false;	// full
			strcpy(iQueue[iHead], s);
    5b78:	0f 2e       	mov	r0, r31
    5b7a:	f2 e3       	ldi	r31, 0x32	; 50
    5b7c:	df 2e       	mov	r13, r31
    5b7e:	f0 2d       	mov	r31, r0
    5b80:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <main+0x74e>
			if(irx1Tail != irx1Head) {	// buffer not empty
				if(irx1Callback) (* irx1Callback)();
			}
			if((itx0Tail != itx0Head) && (UCSR0A & (1 << UDRE0))) {
				// buffer is not empty but data register is empty.
				UDR0 = itx0Buff[itx0Tail];
    5b84:	80 91 29 07 	lds	r24, 0x0729
    5b88:	e0 91 25 07 	lds	r30, 0x0725
    5b8c:	f0 91 26 07 	lds	r31, 0x0726
    5b90:	e8 0f       	add	r30, r24
    5b92:	f1 1d       	adc	r31, r1
    5b94:	80 81       	ld	r24, Z
    5b96:	8c b9       	out	0x0c, r24	; 12
				iotmAtomic(itx0Tail = (itx0Tail + 1) % iotcUartBuffSize);
    5b98:	2f b7       	in	r18, 0x3f	; 63
    5b9a:	f8 94       	cli
    5b9c:	80 91 29 07 	lds	r24, 0x0729
    5ba0:	90 e0       	ldi	r25, 0x00	; 0
    5ba2:	01 96       	adiw	r24, 0x01	; 1
    5ba4:	8f 77       	andi	r24, 0x7F	; 127
    5ba6:	90 78       	andi	r25, 0x80	; 128
    5ba8:	80 93 29 07 	sts	0x0729, r24
    5bac:	2f bf       	out	0x3f, r18	; 63
    5bae:	0c 94 4b 23 	jmp	0x4696	; 0x4696 <main+0xf8e>
			}
			if((itx1Tail != itx1Head) && (UCSR1A & (1 << UDRE1))) {
				// buffer is not empty but data register is empty.
				UDR1 = itx1Buff[itx1Tail];
    5bb2:	80 91 21 07 	lds	r24, 0x0721
    5bb6:	e0 91 1d 07 	lds	r30, 0x071D
    5bba:	f0 91 1e 07 	lds	r31, 0x071E
    5bbe:	e8 0f       	add	r30, r24
    5bc0:	f1 1d       	adc	r31, r1
    5bc2:	80 81       	ld	r24, Z
    5bc4:	80 93 9c 00 	sts	0x009C, r24
				iotmAtomic(itx1Tail = (itx1Tail + 1) % iotcUartBuffSize);
    5bc8:	2f b7       	in	r18, 0x3f	; 63
    5bca:	f8 94       	cli
    5bcc:	80 91 21 07 	lds	r24, 0x0721
    5bd0:	90 e0       	ldi	r25, 0x00	; 0
    5bd2:	01 96       	adiw	r24, 0x01	; 1
    5bd4:	8f 77       	andi	r24, 0x7F	; 127
    5bd6:	90 78       	andi	r25, 0x80	; 128
    5bd8:	80 93 21 07 	sts	0x0721, r24
    5bdc:	2f bf       	out	0x3f, r18	; 63
    5bde:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <main+0xfa6>
		// 추가한 부분
		
		
		
		
		if((dec = IrRecv->getDecoder())) {
    5be2:	10 92 43 07 	sts	0x0743, r1
    5be6:	10 92 42 07 	sts	0x0742, r1
    5bea:	0c 94 3c 1d 	jmp	0x3a78	; 0x3a78 <main+0x370>
			// initial mark
			if(!matchMark(iInterval[offset], iotcNecHdrMark))
				return(false);
			offset++;
			// check for repeat
			if(inIntervals == 4 &&
    5bee:	82 81       	ldd	r24, Z+2	; 0x02
				matchSpace(iInterval[offset], iotcNecRptSpace) &&
    5bf0:	84 30       	cpi	r24, 0x04	; 4
    5bf2:	39 f4       	brne	.+14     	; 0x5c02 <main+0x24fa>
    5bf4:	0c 94 9a 23 	jmp	0x4734	; 0x4734 <main+0x102c>
				matchMark(iInterval[offset + 1], iotcNecBitMark)) {
    5bf8:	81 85       	ldd	r24, Z+9	; 0x09
    5bfa:	92 85       	ldd	r25, Z+10	; 0x0a

		bool
		matchMark(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs + iotcIrMarkExcess) &&
    5bfc:	09 97       	sbiw	r24, 0x09	; 9
    5bfe:	09 97       	sbiw	r24, 0x09	; 9
    5c00:	30 f0       	brcs	.+12     	; 0x5c0e <main+0x2506>
				inBits = 0;
				iValue = iotcRepeat;
				iVendor = iotcNec;
				return true;
			}
			if(inIntervals < 2 * iotcNecBits + 4) return false;
    5c02:	82 81       	ldd	r24, Z+2	; 0x02
    5c04:	84 34       	cpi	r24, 0x44	; 68
    5c06:	10 f0       	brcs	.+4      	; 0x5c0c <main+0x2504>
    5c08:	0c 94 a3 23 	jmp	0x4746	; 0x4746 <main+0x103e>
    5c0c:	42 c0       	rjmp	.+132    	; 0x5c92 <main+0x258a>
			offset++;
			// check for repeat
			if(inIntervals == 4 &&
				matchSpace(iInterval[offset], iotcNecRptSpace) &&
				matchMark(iInterval[offset + 1], iotcNecBitMark)) {
				inBits = 0;
    5c0e:	df 01       	movw	r26, r30
    5c10:	ad 52       	subi	r26, 0x2D	; 45
    5c12:	bf 4f       	sbci	r27, 0xFF	; 255
    5c14:	1d 92       	st	X+, r1
    5c16:	1c 92       	st	X, r1
				iValue = iotcRepeat;
    5c18:	4f ef       	ldi	r20, 0xFF	; 255
    5c1a:	5f ef       	ldi	r21, 0xFF	; 255
    5c1c:	ba 01       	movw	r22, r20
    5c1e:	9f 01       	movw	r18, r30
    5c20:	21 53       	subi	r18, 0x31	; 49
    5c22:	3f 4f       	sbci	r19, 0xFF	; 255
    5c24:	d9 01       	movw	r26, r18
    5c26:	4d 93       	st	X+, r20
    5c28:	5d 93       	st	X+, r21
    5c2a:	6d 93       	st	X+, r22
    5c2c:	7c 93       	st	X, r23
    5c2e:	13 97       	sbiw	r26, 0x03	; 3
				iVendor = iotcNec;
    5c30:	81 e0       	ldi	r24, 0x01	; 1
    5c32:	80 83       	st	Z, r24
    5c34:	0c 94 45 24 	jmp	0x488a	; 0x488a <main+0x1182>
    5c38:	9c 01       	movw	r18, r24
    5c3a:	2f 5f       	subi	r18, 0xFF	; 255
    5c3c:	3f 4f       	sbci	r19, 0xFF	; 255
			offset++;
			for(int i = 0; i < iotcNecBits; i++) {
				if(!matchMark(iInterval[offset], iotcNecBitMark))
					return false;
				offset++;
				if(matchSpace(iInterval[offset], iotcNecOneSpace))
    5c3e:	d9 01       	movw	r26, r18
    5c40:	aa 0f       	add	r26, r26
    5c42:	bb 1f       	adc	r27, r27
    5c44:	ae 0f       	add	r26, r30
    5c46:	bf 1f       	adc	r27, r31
    5c48:	13 96       	adiw	r26, 0x03	; 3
    5c4a:	4d 91       	ld	r20, X+
    5c4c:	5c 91       	ld	r21, X
    5c4e:	14 97       	sbiw	r26, 0x04	; 4

		bool
		matchSpace(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs - iotcIrMarkExcess) &&
    5c50:	46 51       	subi	r20, 0x16	; 22
    5c52:	51 09       	sbc	r21, r1
    5c54:	41 31       	cpi	r20, 0x11	; 17
    5c56:	51 05       	cpc	r21, r1
    5c58:	40 f4       	brcc	.+16     	; 0x5c6a <main+0x2562>
			for(int i = 0; i < iotcNecBits; i++) {
				if(!matchMark(iInterval[offset], iotcNecBitMark))
					return false;
				offset++;
				if(matchSpace(iInterval[offset], iotcNecOneSpace))
					data = (data << 1) | 1;
    5c5a:	cc 0c       	add	r12, r12
    5c5c:	dd 1c       	adc	r13, r13
    5c5e:	ee 1c       	adc	r14, r14
    5c60:	ff 1c       	adc	r15, r15
    5c62:	68 94       	set
    5c64:	c0 f8       	bld	r12, 0
    5c66:	0c 94 c2 23 	jmp	0x4784	; 0x4784 <main+0x107c>
				else if(matchSpace(
					iInterval[offset], iotcNecZeroSpace)) data <<= 1;
    5c6a:	22 0f       	add	r18, r18
    5c6c:	33 1f       	adc	r19, r19
    5c6e:	df 01       	movw	r26, r30
    5c70:	a2 0f       	add	r26, r18
    5c72:	b3 1f       	adc	r27, r19
    5c74:	13 96       	adiw	r26, 0x03	; 3
    5c76:	2d 91       	ld	r18, X+
    5c78:	3c 91       	ld	r19, X
    5c7a:	14 97       	sbiw	r26, 0x04	; 4

		bool
		matchSpace(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs - iotcIrMarkExcess) &&
    5c7c:	26 50       	subi	r18, 0x06	; 6
    5c7e:	31 09       	sbc	r19, r1
    5c80:	27 30       	cpi	r18, 0x07	; 7
    5c82:	31 05       	cpc	r19, r1
    5c84:	30 f4       	brcc	.+12     	; 0x5c92 <main+0x258a>
					return false;
				offset++;
				if(matchSpace(iInterval[offset], iotcNecOneSpace))
					data = (data << 1) | 1;
				else if(matchSpace(
					iInterval[offset], iotcNecZeroSpace)) data <<= 1;
    5c86:	cc 0c       	add	r12, r12
    5c88:	dd 1c       	adc	r13, r13
    5c8a:	ee 1c       	adc	r14, r14
    5c8c:	ff 1c       	adc	r15, r15
    5c8e:	0c 94 c2 23 	jmp	0x4784	; 0x4784 <main+0x107c>
		bool
		decodeLg() {
			long	data = 0;
			int		offset = 1;		// skip first space
			
			if (!matchMark(iInterval[offset], iotcLgHdrMark))
    5c92:	85 81       	ldd	r24, Z+5	; 0x05
    5c94:	96 81       	ldd	r25, Z+6	; 0x06

		bool
		matchMark(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs + iotcIrMarkExcess) &&
    5c96:	89 57       	subi	r24, 0x79	; 121
    5c98:	91 09       	sbc	r25, r1
    5c9a:	83 35       	cpi	r24, 0x53	; 83
    5c9c:	91 05       	cpc	r25, r1
    5c9e:	08 f0       	brcs	.+2      	; 0x5ca2 <main+0x259a>
    5ca0:	46 c0       	rjmp	.+140    	; 0x5d2e <main+0x2626>
			
			if (!matchMark(iInterval[offset], iotcLgHdrMark))
			// initial mark
				return false;
			offset++;
			if (inIntervals < 2 * iotcLgBits + 1) return false;
    5ca2:	82 81       	ldd	r24, Z+2	; 0x02
    5ca4:	89 33       	cpi	r24, 0x39	; 57
    5ca6:	10 f0       	brcs	.+4      	; 0x5cac <main+0x25a4>
    5ca8:	0c 94 d7 23 	jmp	0x47ae	; 0x47ae <main+0x10a6>
    5cac:	40 c0       	rjmp	.+128    	; 0x5d2e <main+0x2626>
    5cae:	9c 01       	movw	r18, r24
    5cb0:	2f 5f       	subi	r18, 0xFF	; 255
    5cb2:	3f 4f       	sbci	r19, 0xFF	; 255
			offset++;
			for (int i = 0; i < iotcLgBits; i++) {
				if (!matchMark(iInterval[offset], iotcLgBitMark))
					return false;
				offset++;
				if (matchSpace(iInterval[offset], iotcLgOneSpace))
    5cb4:	d9 01       	movw	r26, r18
    5cb6:	aa 0f       	add	r26, r26
    5cb8:	bb 1f       	adc	r27, r27
    5cba:	ae 0f       	add	r26, r30
    5cbc:	bf 1f       	adc	r27, r31
    5cbe:	13 96       	adiw	r26, 0x03	; 3
    5cc0:	4d 91       	ld	r20, X+
    5cc2:	5c 91       	ld	r21, X
    5cc4:	14 97       	sbiw	r26, 0x04	; 4

		bool
		matchSpace(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs - iotcIrMarkExcess) &&
    5cc6:	46 51       	subi	r20, 0x16	; 22
    5cc8:	51 09       	sbc	r21, r1
    5cca:	41 31       	cpi	r20, 0x11	; 17
    5ccc:	51 05       	cpc	r21, r1
    5cce:	78 f0       	brcs	.+30     	; 0x5cee <main+0x25e6>
					return false;
				offset++;
				if (matchSpace(iInterval[offset], iotcLgOneSpace))
					data = (data << 1) | 1;
				else if (matchSpace(
					iInterval[offset], iotcLgZeroSpace))
    5cd0:	22 0f       	add	r18, r18
    5cd2:	33 1f       	adc	r19, r19
    5cd4:	df 01       	movw	r26, r30
    5cd6:	a2 0f       	add	r26, r18
    5cd8:	b3 1f       	adc	r27, r19
    5cda:	13 96       	adiw	r26, 0x03	; 3
    5cdc:	2d 91       	ld	r18, X+
    5cde:	3c 91       	ld	r19, X
    5ce0:	14 97       	sbiw	r26, 0x04	; 4

		bool
		matchSpace(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs - iotcIrMarkExcess) &&
    5ce2:	26 50       	subi	r18, 0x06	; 6
    5ce4:	31 09       	sbc	r19, r1
    5ce6:	27 30       	cpi	r18, 0x07	; 7
    5ce8:	31 05       	cpc	r19, r1
    5cea:	48 f0       	brcs	.+18     	; 0x5cfe <main+0x25f6>
    5cec:	20 c0       	rjmp	.+64     	; 0x5d2e <main+0x2626>
			for (int i = 0; i < iotcLgBits; i++) {
				if (!matchMark(iInterval[offset], iotcLgBitMark))
					return false;
				offset++;
				if (matchSpace(iInterval[offset], iotcLgOneSpace))
					data = (data << 1) | 1;
    5cee:	cc 0c       	add	r12, r12
    5cf0:	dd 1c       	adc	r13, r13
    5cf2:	ee 1c       	adc	r14, r14
    5cf4:	ff 1c       	adc	r15, r15
    5cf6:	68 94       	set
    5cf8:	c0 f8       	bld	r12, 0
    5cfa:	0c 94 f5 23 	jmp	0x47ea	; 0x47ea <main+0x10e2>
				else if (matchSpace(
					iInterval[offset], iotcLgZeroSpace))
					data <<= 1;
    5cfe:	cc 0c       	add	r12, r12
    5d00:	dd 1c       	adc	r13, r13
    5d02:	ee 1c       	adc	r14, r14
    5d04:	ff 1c       	adc	r15, r15
    5d06:	0c 94 f5 23 	jmp	0x47ea	; 0x47ea <main+0x10e2>
			}
			// stop bit
			if (!matchMark(iInterval[offset], iotcLgBitMark))
				return false;
			// success
			inBits = iotcLgBits;
    5d0a:	8c e1       	ldi	r24, 0x1C	; 28
    5d0c:	90 e0       	ldi	r25, 0x00	; 0
    5d0e:	df 01       	movw	r26, r30
    5d10:	ad 52       	subi	r26, 0x2D	; 45
    5d12:	bf 4f       	sbci	r27, 0xFF	; 255
    5d14:	11 96       	adiw	r26, 0x01	; 1
    5d16:	9c 93       	st	X, r25
    5d18:	8e 93       	st	-X, r24
			iValue = data;
    5d1a:	14 97       	sbiw	r26, 0x04	; 4
    5d1c:	cd 92       	st	X+, r12
    5d1e:	dd 92       	st	X+, r13
    5d20:	ed 92       	st	X+, r14
    5d22:	fc 92       	st	X, r15
    5d24:	13 97       	sbiw	r26, 0x03	; 3
			iVendor = iotcLg;
    5d26:	8c e0       	ldi	r24, 0x0C	; 12
    5d28:	80 83       	st	Z, r24
    5d2a:	0c 94 45 24 	jmp	0x488a	; 0x488a <main+0x1182>
		decodeSamsung() {
			long	data = 0;
			int		offset = 1;		// skip first space
			
			// initial mark
			if (!matchMark(iInterval[offset], iotcSamsungHdrMark))
    5d2e:	85 81       	ldd	r24, Z+5	; 0x05
    5d30:	96 81       	ldd	r25, Z+6	; 0x06

		bool
		matchMark(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs + iotcIrMarkExcess) &&
    5d32:	8c 54       	subi	r24, 0x4C	; 76
    5d34:	91 09       	sbc	r25, r1
    5d36:	c5 97       	sbiw	r24, 0x35	; 53
    5d38:	08 f0       	brcs	.+2      	; 0x5d3c <main+0x2634>
    5d3a:	49 ce       	rjmp	.-878    	; 0x59ce <main+0x22c6>
			// initial mark
			if (!matchMark(iInterval[offset], iotcSamsungHdrMark))
				return false;
			offset++;
			// check for repeat
			if(inIntervals == 4 &&
    5d3c:	82 81       	ldd	r24, Z+2	; 0x02
				matchSpace(iInterval[offset], iotcSamsungRptSpace) &&
    5d3e:	84 30       	cpi	r24, 0x04	; 4
    5d40:	39 f4       	brne	.+14     	; 0x5d50 <main+0x2648>
    5d42:	0c 94 09 24 	jmp	0x4812	; 0x4812 <main+0x110a>
				matchMark(
					iInterval[offset + 1], iotcSamsungBitMark)) {
    5d46:	81 85       	ldd	r24, Z+9	; 0x09
    5d48:	92 85       	ldd	r25, Z+10	; 0x0a

		bool
		matchMark(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs + iotcIrMarkExcess) &&
    5d4a:	09 97       	sbiw	r24, 0x09	; 9
    5d4c:	09 97       	sbiw	r24, 0x09	; 9
    5d4e:	30 f0       	brcs	.+12     	; 0x5d5c <main+0x2654>
				inBits = 0;
				iValue = iotcRepeat;
				iVendor = iotcSamsung;
				return true;
			}
			if (inIntervals < 2 * iotcSamsungBits + 4) return false;
    5d50:	82 81       	ldd	r24, Z+2	; 0x02
    5d52:	84 34       	cpi	r24, 0x44	; 68
    5d54:	10 f0       	brcs	.+4      	; 0x5d5a <main+0x2652>
    5d56:	0c 94 12 24 	jmp	0x4824	; 0x4824 <main+0x111c>
    5d5a:	39 ce       	rjmp	.-910    	; 0x59ce <main+0x22c6>
			// check for repeat
			if(inIntervals == 4 &&
				matchSpace(iInterval[offset], iotcSamsungRptSpace) &&
				matchMark(
					iInterval[offset + 1], iotcSamsungBitMark)) {
				inBits = 0;
    5d5c:	df 01       	movw	r26, r30
    5d5e:	ad 52       	subi	r26, 0x2D	; 45
    5d60:	bf 4f       	sbci	r27, 0xFF	; 255
    5d62:	1d 92       	st	X+, r1
    5d64:	1c 92       	st	X, r1
				iValue = iotcRepeat;
    5d66:	4f ef       	ldi	r20, 0xFF	; 255
    5d68:	5f ef       	ldi	r21, 0xFF	; 255
    5d6a:	ba 01       	movw	r22, r20
    5d6c:	9f 01       	movw	r18, r30
    5d6e:	21 53       	subi	r18, 0x31	; 49
    5d70:	3f 4f       	sbci	r19, 0xFF	; 255
    5d72:	d9 01       	movw	r26, r18
    5d74:	4d 93       	st	X+, r20
    5d76:	5d 93       	st	X+, r21
    5d78:	6d 93       	st	X+, r22
    5d7a:	7c 93       	st	X, r23
    5d7c:	13 97       	sbiw	r26, 0x03	; 3
				iVendor = iotcSamsung;
    5d7e:	8b e0       	ldi	r24, 0x0B	; 11
    5d80:	80 83       	st	Z, r24
    5d82:	0c 94 45 24 	jmp	0x488a	; 0x488a <main+0x1182>
    5d86:	9c 01       	movw	r18, r24
    5d88:	2f 5f       	subi	r18, 0xFF	; 255
    5d8a:	3f 4f       	sbci	r19, 0xFF	; 255
				if (!matchMark(
					iInterval[offset], iotcSamsungBitMark))
					return false;
				offset++;
				if (matchSpace(
					iInterval[offset], iotcSamsungOneSpace))
    5d8c:	d9 01       	movw	r26, r18
    5d8e:	aa 0f       	add	r26, r26
    5d90:	bb 1f       	adc	r27, r27
    5d92:	ae 0f       	add	r26, r30
    5d94:	bf 1f       	adc	r27, r31
    5d96:	13 96       	adiw	r26, 0x03	; 3
    5d98:	4d 91       	ld	r20, X+
    5d9a:	5c 91       	ld	r21, X
    5d9c:	14 97       	sbiw	r26, 0x04	; 4

		bool
		matchSpace(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs - iotcIrMarkExcess) &&
    5d9e:	46 51       	subi	r20, 0x16	; 22
    5da0:	51 09       	sbc	r21, r1
    5da2:	41 31       	cpi	r20, 0x11	; 17
    5da4:	51 05       	cpc	r21, r1
    5da6:	40 f4       	brcc	.+16     	; 0x5db8 <main+0x26b0>
					iInterval[offset], iotcSamsungBitMark))
					return false;
				offset++;
				if (matchSpace(
					iInterval[offset], iotcSamsungOneSpace))
					data = (data << 1) | 1;
    5da8:	cc 0c       	add	r12, r12
    5daa:	dd 1c       	adc	r13, r13
    5dac:	ee 1c       	adc	r14, r14
    5dae:	ff 1c       	adc	r15, r15
    5db0:	68 94       	set
    5db2:	c0 f8       	bld	r12, 0
    5db4:	0c 94 31 24 	jmp	0x4862	; 0x4862 <main+0x115a>
				else if (matchSpace(
					iInterval[offset], iotcSamsungZeroSpace))
    5db8:	22 0f       	add	r18, r18
    5dba:	33 1f       	adc	r19, r19
    5dbc:	df 01       	movw	r26, r30
    5dbe:	a2 0f       	add	r26, r18
    5dc0:	b3 1f       	adc	r27, r19
    5dc2:	13 96       	adiw	r26, 0x03	; 3
    5dc4:	2d 91       	ld	r18, X+
    5dc6:	3c 91       	ld	r19, X
    5dc8:	14 97       	sbiw	r26, 0x04	; 4

		bool
		matchSpace(int aMeasuredTicks, int aDesiredUs) {
			return(
				aMeasuredTicks
					>= iotmIrTicksLow(aDesiredUs - iotcIrMarkExcess) &&
    5dca:	26 50       	subi	r18, 0x06	; 6
    5dcc:	31 09       	sbc	r19, r1
    5dce:	27 30       	cpi	r18, 0x07	; 7
    5dd0:	31 05       	cpc	r19, r1
    5dd2:	08 f0       	brcs	.+2      	; 0x5dd6 <main+0x26ce>
    5dd4:	fc cd       	rjmp	.-1032   	; 0x59ce <main+0x22c6>
				if (matchSpace(
					iInterval[offset], iotcSamsungOneSpace))
					data = (data << 1) | 1;
				else if (matchSpace(
					iInterval[offset], iotcSamsungZeroSpace))
					data <<= 1;
    5dd6:	cc 0c       	add	r12, r12
    5dd8:	dd 1c       	adc	r13, r13
    5dda:	ee 1c       	adc	r14, r14
    5ddc:	ff 1c       	adc	r15, r15
    5dde:	0c 94 31 24 	jmp	0x4862	; 0x4862 <main+0x115a>
			}
			// stop bit
			if (!matchMark(iInterval[offset], iotcLgBitMark))
				return false;
			// success
			inBits = iotcSamsungBits;
    5de2:	80 e2       	ldi	r24, 0x20	; 32
    5de4:	90 e0       	ldi	r25, 0x00	; 0
    5de6:	df 01       	movw	r26, r30
    5de8:	ad 52       	subi	r26, 0x2D	; 45
    5dea:	bf 4f       	sbci	r27, 0xFF	; 255
    5dec:	11 96       	adiw	r26, 0x01	; 1
    5dee:	9c 93       	st	X, r25
    5df0:	8e 93       	st	-X, r24
			iValue = data;
    5df2:	14 97       	sbiw	r26, 0x04	; 4
    5df4:	cd 92       	st	X+, r12
    5df6:	dd 92       	st	X+, r13
    5df8:	ed 92       	st	X+, r14
    5dfa:	fc 92       	st	X, r15
    5dfc:	13 97       	sbiw	r26, 0x03	; 3
			iVendor = iotcSamsung;
    5dfe:	8b e0       	ldi	r24, 0x0B	; 11
    5e00:	80 83       	st	Z, r24
    5e02:	0c 94 45 24 	jmp	0x488a	; 0x488a <main+0x1182>

00005e06 <__subsf3>:
    5e06:	50 58       	subi	r21, 0x80	; 128

00005e08 <__addsf3>:
    5e08:	bb 27       	eor	r27, r27
    5e0a:	aa 27       	eor	r26, r26
    5e0c:	0e d0       	rcall	.+28     	; 0x5e2a <__addsf3x>
    5e0e:	1c c1       	rjmp	.+568    	; 0x6048 <__fp_round>
    5e10:	0d d1       	rcall	.+538    	; 0x602c <__fp_pscA>
    5e12:	30 f0       	brcs	.+12     	; 0x5e20 <__addsf3+0x18>
    5e14:	12 d1       	rcall	.+548    	; 0x603a <__fp_pscB>
    5e16:	20 f0       	brcs	.+8      	; 0x5e20 <__addsf3+0x18>
    5e18:	31 f4       	brne	.+12     	; 0x5e26 <__addsf3+0x1e>
    5e1a:	9f 3f       	cpi	r25, 0xFF	; 255
    5e1c:	11 f4       	brne	.+4      	; 0x5e22 <__addsf3+0x1a>
    5e1e:	1e f4       	brtc	.+6      	; 0x5e26 <__addsf3+0x1e>
    5e20:	02 c1       	rjmp	.+516    	; 0x6026 <__fp_nan>
    5e22:	0e f4       	brtc	.+2      	; 0x5e26 <__addsf3+0x1e>
    5e24:	e0 95       	com	r30
    5e26:	e7 fb       	bst	r30, 7
    5e28:	f8 c0       	rjmp	.+496    	; 0x601a <__fp_inf>

00005e2a <__addsf3x>:
    5e2a:	e9 2f       	mov	r30, r25
    5e2c:	1e d1       	rcall	.+572    	; 0x606a <__fp_split3>
    5e2e:	80 f3       	brcs	.-32     	; 0x5e10 <__addsf3+0x8>
    5e30:	ba 17       	cp	r27, r26
    5e32:	62 07       	cpc	r22, r18
    5e34:	73 07       	cpc	r23, r19
    5e36:	84 07       	cpc	r24, r20
    5e38:	95 07       	cpc	r25, r21
    5e3a:	18 f0       	brcs	.+6      	; 0x5e42 <__addsf3x+0x18>
    5e3c:	71 f4       	brne	.+28     	; 0x5e5a <__addsf3x+0x30>
    5e3e:	9e f5       	brtc	.+102    	; 0x5ea6 <__addsf3x+0x7c>
    5e40:	36 c1       	rjmp	.+620    	; 0x60ae <__fp_zero>
    5e42:	0e f4       	brtc	.+2      	; 0x5e46 <__addsf3x+0x1c>
    5e44:	e0 95       	com	r30
    5e46:	0b 2e       	mov	r0, r27
    5e48:	ba 2f       	mov	r27, r26
    5e4a:	a0 2d       	mov	r26, r0
    5e4c:	0b 01       	movw	r0, r22
    5e4e:	b9 01       	movw	r22, r18
    5e50:	90 01       	movw	r18, r0
    5e52:	0c 01       	movw	r0, r24
    5e54:	ca 01       	movw	r24, r20
    5e56:	a0 01       	movw	r20, r0
    5e58:	11 24       	eor	r1, r1
    5e5a:	ff 27       	eor	r31, r31
    5e5c:	59 1b       	sub	r21, r25
    5e5e:	99 f0       	breq	.+38     	; 0x5e86 <__addsf3x+0x5c>
    5e60:	59 3f       	cpi	r21, 0xF9	; 249
    5e62:	50 f4       	brcc	.+20     	; 0x5e78 <__addsf3x+0x4e>
    5e64:	50 3e       	cpi	r21, 0xE0	; 224
    5e66:	68 f1       	brcs	.+90     	; 0x5ec2 <__addsf3x+0x98>
    5e68:	1a 16       	cp	r1, r26
    5e6a:	f0 40       	sbci	r31, 0x00	; 0
    5e6c:	a2 2f       	mov	r26, r18
    5e6e:	23 2f       	mov	r18, r19
    5e70:	34 2f       	mov	r19, r20
    5e72:	44 27       	eor	r20, r20
    5e74:	58 5f       	subi	r21, 0xF8	; 248
    5e76:	f3 cf       	rjmp	.-26     	; 0x5e5e <__addsf3x+0x34>
    5e78:	46 95       	lsr	r20
    5e7a:	37 95       	ror	r19
    5e7c:	27 95       	ror	r18
    5e7e:	a7 95       	ror	r26
    5e80:	f0 40       	sbci	r31, 0x00	; 0
    5e82:	53 95       	inc	r21
    5e84:	c9 f7       	brne	.-14     	; 0x5e78 <__addsf3x+0x4e>
    5e86:	7e f4       	brtc	.+30     	; 0x5ea6 <__addsf3x+0x7c>
    5e88:	1f 16       	cp	r1, r31
    5e8a:	ba 0b       	sbc	r27, r26
    5e8c:	62 0b       	sbc	r22, r18
    5e8e:	73 0b       	sbc	r23, r19
    5e90:	84 0b       	sbc	r24, r20
    5e92:	ba f0       	brmi	.+46     	; 0x5ec2 <__addsf3x+0x98>
    5e94:	91 50       	subi	r25, 0x01	; 1
    5e96:	a1 f0       	breq	.+40     	; 0x5ec0 <__addsf3x+0x96>
    5e98:	ff 0f       	add	r31, r31
    5e9a:	bb 1f       	adc	r27, r27
    5e9c:	66 1f       	adc	r22, r22
    5e9e:	77 1f       	adc	r23, r23
    5ea0:	88 1f       	adc	r24, r24
    5ea2:	c2 f7       	brpl	.-16     	; 0x5e94 <__addsf3x+0x6a>
    5ea4:	0e c0       	rjmp	.+28     	; 0x5ec2 <__addsf3x+0x98>
    5ea6:	ba 0f       	add	r27, r26
    5ea8:	62 1f       	adc	r22, r18
    5eaa:	73 1f       	adc	r23, r19
    5eac:	84 1f       	adc	r24, r20
    5eae:	48 f4       	brcc	.+18     	; 0x5ec2 <__addsf3x+0x98>
    5eb0:	87 95       	ror	r24
    5eb2:	77 95       	ror	r23
    5eb4:	67 95       	ror	r22
    5eb6:	b7 95       	ror	r27
    5eb8:	f7 95       	ror	r31
    5eba:	9e 3f       	cpi	r25, 0xFE	; 254
    5ebc:	08 f0       	brcs	.+2      	; 0x5ec0 <__addsf3x+0x96>
    5ebe:	b3 cf       	rjmp	.-154    	; 0x5e26 <__addsf3+0x1e>
    5ec0:	93 95       	inc	r25
    5ec2:	88 0f       	add	r24, r24
    5ec4:	08 f0       	brcs	.+2      	; 0x5ec8 <__addsf3x+0x9e>
    5ec6:	99 27       	eor	r25, r25
    5ec8:	ee 0f       	add	r30, r30
    5eca:	97 95       	ror	r25
    5ecc:	87 95       	ror	r24
    5ece:	08 95       	ret

00005ed0 <__divsf3>:
    5ed0:	0c d0       	rcall	.+24     	; 0x5eea <__divsf3x>
    5ed2:	ba c0       	rjmp	.+372    	; 0x6048 <__fp_round>
    5ed4:	b2 d0       	rcall	.+356    	; 0x603a <__fp_pscB>
    5ed6:	40 f0       	brcs	.+16     	; 0x5ee8 <__divsf3+0x18>
    5ed8:	a9 d0       	rcall	.+338    	; 0x602c <__fp_pscA>
    5eda:	30 f0       	brcs	.+12     	; 0x5ee8 <__divsf3+0x18>
    5edc:	21 f4       	brne	.+8      	; 0x5ee6 <__divsf3+0x16>
    5ede:	5f 3f       	cpi	r21, 0xFF	; 255
    5ee0:	19 f0       	breq	.+6      	; 0x5ee8 <__divsf3+0x18>
    5ee2:	9b c0       	rjmp	.+310    	; 0x601a <__fp_inf>
    5ee4:	51 11       	cpse	r21, r1
    5ee6:	e4 c0       	rjmp	.+456    	; 0x60b0 <__fp_szero>
    5ee8:	9e c0       	rjmp	.+316    	; 0x6026 <__fp_nan>

00005eea <__divsf3x>:
    5eea:	bf d0       	rcall	.+382    	; 0x606a <__fp_split3>
    5eec:	98 f3       	brcs	.-26     	; 0x5ed4 <__divsf3+0x4>

00005eee <__divsf3_pse>:
    5eee:	99 23       	and	r25, r25
    5ef0:	c9 f3       	breq	.-14     	; 0x5ee4 <__divsf3+0x14>
    5ef2:	55 23       	and	r21, r21
    5ef4:	b1 f3       	breq	.-20     	; 0x5ee2 <__divsf3+0x12>
    5ef6:	95 1b       	sub	r25, r21
    5ef8:	55 0b       	sbc	r21, r21
    5efa:	bb 27       	eor	r27, r27
    5efc:	aa 27       	eor	r26, r26
    5efe:	62 17       	cp	r22, r18
    5f00:	73 07       	cpc	r23, r19
    5f02:	84 07       	cpc	r24, r20
    5f04:	38 f0       	brcs	.+14     	; 0x5f14 <__divsf3_pse+0x26>
    5f06:	9f 5f       	subi	r25, 0xFF	; 255
    5f08:	5f 4f       	sbci	r21, 0xFF	; 255
    5f0a:	22 0f       	add	r18, r18
    5f0c:	33 1f       	adc	r19, r19
    5f0e:	44 1f       	adc	r20, r20
    5f10:	aa 1f       	adc	r26, r26
    5f12:	a9 f3       	breq	.-22     	; 0x5efe <__divsf3_pse+0x10>
    5f14:	33 d0       	rcall	.+102    	; 0x5f7c <__divsf3_pse+0x8e>
    5f16:	0e 2e       	mov	r0, r30
    5f18:	3a f0       	brmi	.+14     	; 0x5f28 <__divsf3_pse+0x3a>
    5f1a:	e0 e8       	ldi	r30, 0x80	; 128
    5f1c:	30 d0       	rcall	.+96     	; 0x5f7e <__divsf3_pse+0x90>
    5f1e:	91 50       	subi	r25, 0x01	; 1
    5f20:	50 40       	sbci	r21, 0x00	; 0
    5f22:	e6 95       	lsr	r30
    5f24:	00 1c       	adc	r0, r0
    5f26:	ca f7       	brpl	.-14     	; 0x5f1a <__divsf3_pse+0x2c>
    5f28:	29 d0       	rcall	.+82     	; 0x5f7c <__divsf3_pse+0x8e>
    5f2a:	fe 2f       	mov	r31, r30
    5f2c:	27 d0       	rcall	.+78     	; 0x5f7c <__divsf3_pse+0x8e>
    5f2e:	66 0f       	add	r22, r22
    5f30:	77 1f       	adc	r23, r23
    5f32:	88 1f       	adc	r24, r24
    5f34:	bb 1f       	adc	r27, r27
    5f36:	26 17       	cp	r18, r22
    5f38:	37 07       	cpc	r19, r23
    5f3a:	48 07       	cpc	r20, r24
    5f3c:	ab 07       	cpc	r26, r27
    5f3e:	b0 e8       	ldi	r27, 0x80	; 128
    5f40:	09 f0       	breq	.+2      	; 0x5f44 <__divsf3_pse+0x56>
    5f42:	bb 0b       	sbc	r27, r27
    5f44:	80 2d       	mov	r24, r0
    5f46:	bf 01       	movw	r22, r30
    5f48:	ff 27       	eor	r31, r31
    5f4a:	93 58       	subi	r25, 0x83	; 131
    5f4c:	5f 4f       	sbci	r21, 0xFF	; 255
    5f4e:	2a f0       	brmi	.+10     	; 0x5f5a <__divsf3_pse+0x6c>
    5f50:	9e 3f       	cpi	r25, 0xFE	; 254
    5f52:	51 05       	cpc	r21, r1
    5f54:	68 f0       	brcs	.+26     	; 0x5f70 <__divsf3_pse+0x82>
    5f56:	61 c0       	rjmp	.+194    	; 0x601a <__fp_inf>
    5f58:	ab c0       	rjmp	.+342    	; 0x60b0 <__fp_szero>
    5f5a:	5f 3f       	cpi	r21, 0xFF	; 255
    5f5c:	ec f3       	brlt	.-6      	; 0x5f58 <__divsf3_pse+0x6a>
    5f5e:	98 3e       	cpi	r25, 0xE8	; 232
    5f60:	dc f3       	brlt	.-10     	; 0x5f58 <__divsf3_pse+0x6a>
    5f62:	86 95       	lsr	r24
    5f64:	77 95       	ror	r23
    5f66:	67 95       	ror	r22
    5f68:	b7 95       	ror	r27
    5f6a:	f7 95       	ror	r31
    5f6c:	9f 5f       	subi	r25, 0xFF	; 255
    5f6e:	c9 f7       	brne	.-14     	; 0x5f62 <__divsf3_pse+0x74>
    5f70:	88 0f       	add	r24, r24
    5f72:	91 1d       	adc	r25, r1
    5f74:	96 95       	lsr	r25
    5f76:	87 95       	ror	r24
    5f78:	97 f9       	bld	r25, 7
    5f7a:	08 95       	ret
    5f7c:	e1 e0       	ldi	r30, 0x01	; 1
    5f7e:	66 0f       	add	r22, r22
    5f80:	77 1f       	adc	r23, r23
    5f82:	88 1f       	adc	r24, r24
    5f84:	bb 1f       	adc	r27, r27
    5f86:	62 17       	cp	r22, r18
    5f88:	73 07       	cpc	r23, r19
    5f8a:	84 07       	cpc	r24, r20
    5f8c:	ba 07       	cpc	r27, r26
    5f8e:	20 f0       	brcs	.+8      	; 0x5f98 <__divsf3_pse+0xaa>
    5f90:	62 1b       	sub	r22, r18
    5f92:	73 0b       	sbc	r23, r19
    5f94:	84 0b       	sbc	r24, r20
    5f96:	ba 0b       	sbc	r27, r26
    5f98:	ee 1f       	adc	r30, r30
    5f9a:	88 f7       	brcc	.-30     	; 0x5f7e <__divsf3_pse+0x90>
    5f9c:	e0 95       	com	r30
    5f9e:	08 95       	ret

00005fa0 <__floatunsisf>:
    5fa0:	e8 94       	clt
    5fa2:	09 c0       	rjmp	.+18     	; 0x5fb6 <__floatsisf+0x12>

00005fa4 <__floatsisf>:
    5fa4:	97 fb       	bst	r25, 7
    5fa6:	3e f4       	brtc	.+14     	; 0x5fb6 <__floatsisf+0x12>
    5fa8:	90 95       	com	r25
    5faa:	80 95       	com	r24
    5fac:	70 95       	com	r23
    5fae:	61 95       	neg	r22
    5fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    5fb2:	8f 4f       	sbci	r24, 0xFF	; 255
    5fb4:	9f 4f       	sbci	r25, 0xFF	; 255
    5fb6:	99 23       	and	r25, r25
    5fb8:	a9 f0       	breq	.+42     	; 0x5fe4 <__floatsisf+0x40>
    5fba:	f9 2f       	mov	r31, r25
    5fbc:	96 e9       	ldi	r25, 0x96	; 150
    5fbe:	bb 27       	eor	r27, r27
    5fc0:	93 95       	inc	r25
    5fc2:	f6 95       	lsr	r31
    5fc4:	87 95       	ror	r24
    5fc6:	77 95       	ror	r23
    5fc8:	67 95       	ror	r22
    5fca:	b7 95       	ror	r27
    5fcc:	f1 11       	cpse	r31, r1
    5fce:	f8 cf       	rjmp	.-16     	; 0x5fc0 <__floatsisf+0x1c>
    5fd0:	fa f4       	brpl	.+62     	; 0x6010 <__floatsisf+0x6c>
    5fd2:	bb 0f       	add	r27, r27
    5fd4:	11 f4       	brne	.+4      	; 0x5fda <__floatsisf+0x36>
    5fd6:	60 ff       	sbrs	r22, 0
    5fd8:	1b c0       	rjmp	.+54     	; 0x6010 <__floatsisf+0x6c>
    5fda:	6f 5f       	subi	r22, 0xFF	; 255
    5fdc:	7f 4f       	sbci	r23, 0xFF	; 255
    5fde:	8f 4f       	sbci	r24, 0xFF	; 255
    5fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    5fe2:	16 c0       	rjmp	.+44     	; 0x6010 <__floatsisf+0x6c>
    5fe4:	88 23       	and	r24, r24
    5fe6:	11 f0       	breq	.+4      	; 0x5fec <__floatsisf+0x48>
    5fe8:	96 e9       	ldi	r25, 0x96	; 150
    5fea:	11 c0       	rjmp	.+34     	; 0x600e <__floatsisf+0x6a>
    5fec:	77 23       	and	r23, r23
    5fee:	21 f0       	breq	.+8      	; 0x5ff8 <__floatsisf+0x54>
    5ff0:	9e e8       	ldi	r25, 0x8E	; 142
    5ff2:	87 2f       	mov	r24, r23
    5ff4:	76 2f       	mov	r23, r22
    5ff6:	05 c0       	rjmp	.+10     	; 0x6002 <__floatsisf+0x5e>
    5ff8:	66 23       	and	r22, r22
    5ffa:	71 f0       	breq	.+28     	; 0x6018 <__floatsisf+0x74>
    5ffc:	96 e8       	ldi	r25, 0x86	; 134
    5ffe:	86 2f       	mov	r24, r22
    6000:	70 e0       	ldi	r23, 0x00	; 0
    6002:	60 e0       	ldi	r22, 0x00	; 0
    6004:	2a f0       	brmi	.+10     	; 0x6010 <__floatsisf+0x6c>
    6006:	9a 95       	dec	r25
    6008:	66 0f       	add	r22, r22
    600a:	77 1f       	adc	r23, r23
    600c:	88 1f       	adc	r24, r24
    600e:	da f7       	brpl	.-10     	; 0x6006 <__floatsisf+0x62>
    6010:	88 0f       	add	r24, r24
    6012:	96 95       	lsr	r25
    6014:	87 95       	ror	r24
    6016:	97 f9       	bld	r25, 7
    6018:	08 95       	ret

0000601a <__fp_inf>:
    601a:	97 f9       	bld	r25, 7
    601c:	9f 67       	ori	r25, 0x7F	; 127
    601e:	80 e8       	ldi	r24, 0x80	; 128
    6020:	70 e0       	ldi	r23, 0x00	; 0
    6022:	60 e0       	ldi	r22, 0x00	; 0
    6024:	08 95       	ret

00006026 <__fp_nan>:
    6026:	9f ef       	ldi	r25, 0xFF	; 255
    6028:	80 ec       	ldi	r24, 0xC0	; 192
    602a:	08 95       	ret

0000602c <__fp_pscA>:
    602c:	00 24       	eor	r0, r0
    602e:	0a 94       	dec	r0
    6030:	16 16       	cp	r1, r22
    6032:	17 06       	cpc	r1, r23
    6034:	18 06       	cpc	r1, r24
    6036:	09 06       	cpc	r0, r25
    6038:	08 95       	ret

0000603a <__fp_pscB>:
    603a:	00 24       	eor	r0, r0
    603c:	0a 94       	dec	r0
    603e:	12 16       	cp	r1, r18
    6040:	13 06       	cpc	r1, r19
    6042:	14 06       	cpc	r1, r20
    6044:	05 06       	cpc	r0, r21
    6046:	08 95       	ret

00006048 <__fp_round>:
    6048:	09 2e       	mov	r0, r25
    604a:	03 94       	inc	r0
    604c:	00 0c       	add	r0, r0
    604e:	11 f4       	brne	.+4      	; 0x6054 <__fp_round+0xc>
    6050:	88 23       	and	r24, r24
    6052:	52 f0       	brmi	.+20     	; 0x6068 <__fp_round+0x20>
    6054:	bb 0f       	add	r27, r27
    6056:	40 f4       	brcc	.+16     	; 0x6068 <__fp_round+0x20>
    6058:	bf 2b       	or	r27, r31
    605a:	11 f4       	brne	.+4      	; 0x6060 <__fp_round+0x18>
    605c:	60 ff       	sbrs	r22, 0
    605e:	04 c0       	rjmp	.+8      	; 0x6068 <__fp_round+0x20>
    6060:	6f 5f       	subi	r22, 0xFF	; 255
    6062:	7f 4f       	sbci	r23, 0xFF	; 255
    6064:	8f 4f       	sbci	r24, 0xFF	; 255
    6066:	9f 4f       	sbci	r25, 0xFF	; 255
    6068:	08 95       	ret

0000606a <__fp_split3>:
    606a:	57 fd       	sbrc	r21, 7
    606c:	90 58       	subi	r25, 0x80	; 128
    606e:	44 0f       	add	r20, r20
    6070:	55 1f       	adc	r21, r21
    6072:	59 f0       	breq	.+22     	; 0x608a <__fp_splitA+0x10>
    6074:	5f 3f       	cpi	r21, 0xFF	; 255
    6076:	71 f0       	breq	.+28     	; 0x6094 <__fp_splitA+0x1a>
    6078:	47 95       	ror	r20

0000607a <__fp_splitA>:
    607a:	88 0f       	add	r24, r24
    607c:	97 fb       	bst	r25, 7
    607e:	99 1f       	adc	r25, r25
    6080:	61 f0       	breq	.+24     	; 0x609a <__fp_splitA+0x20>
    6082:	9f 3f       	cpi	r25, 0xFF	; 255
    6084:	79 f0       	breq	.+30     	; 0x60a4 <__fp_splitA+0x2a>
    6086:	87 95       	ror	r24
    6088:	08 95       	ret
    608a:	12 16       	cp	r1, r18
    608c:	13 06       	cpc	r1, r19
    608e:	14 06       	cpc	r1, r20
    6090:	55 1f       	adc	r21, r21
    6092:	f2 cf       	rjmp	.-28     	; 0x6078 <__fp_split3+0xe>
    6094:	46 95       	lsr	r20
    6096:	f1 df       	rcall	.-30     	; 0x607a <__fp_splitA>
    6098:	08 c0       	rjmp	.+16     	; 0x60aa <__fp_splitA+0x30>
    609a:	16 16       	cp	r1, r22
    609c:	17 06       	cpc	r1, r23
    609e:	18 06       	cpc	r1, r24
    60a0:	99 1f       	adc	r25, r25
    60a2:	f1 cf       	rjmp	.-30     	; 0x6086 <__fp_splitA+0xc>
    60a4:	86 95       	lsr	r24
    60a6:	71 05       	cpc	r23, r1
    60a8:	61 05       	cpc	r22, r1
    60aa:	08 94       	sec
    60ac:	08 95       	ret

000060ae <__fp_zero>:
    60ae:	e8 94       	clt

000060b0 <__fp_szero>:
    60b0:	bb 27       	eor	r27, r27
    60b2:	66 27       	eor	r22, r22
    60b4:	77 27       	eor	r23, r23
    60b6:	cb 01       	movw	r24, r22
    60b8:	97 f9       	bld	r25, 7
    60ba:	08 95       	ret

000060bc <__gesf2>:
    60bc:	66 d0       	rcall	.+204    	; 0x618a <__fp_cmp>
    60be:	08 f4       	brcc	.+2      	; 0x60c2 <__gesf2+0x6>
    60c0:	8f ef       	ldi	r24, 0xFF	; 255
    60c2:	08 95       	ret

000060c4 <__mulsf3>:
    60c4:	0b d0       	rcall	.+22     	; 0x60dc <__mulsf3x>
    60c6:	c0 cf       	rjmp	.-128    	; 0x6048 <__fp_round>
    60c8:	b1 df       	rcall	.-158    	; 0x602c <__fp_pscA>
    60ca:	28 f0       	brcs	.+10     	; 0x60d6 <__mulsf3+0x12>
    60cc:	b6 df       	rcall	.-148    	; 0x603a <__fp_pscB>
    60ce:	18 f0       	brcs	.+6      	; 0x60d6 <__mulsf3+0x12>
    60d0:	95 23       	and	r25, r21
    60d2:	09 f0       	breq	.+2      	; 0x60d6 <__mulsf3+0x12>
    60d4:	a2 cf       	rjmp	.-188    	; 0x601a <__fp_inf>
    60d6:	a7 cf       	rjmp	.-178    	; 0x6026 <__fp_nan>
    60d8:	11 24       	eor	r1, r1
    60da:	ea cf       	rjmp	.-44     	; 0x60b0 <__fp_szero>

000060dc <__mulsf3x>:
    60dc:	c6 df       	rcall	.-116    	; 0x606a <__fp_split3>
    60de:	a0 f3       	brcs	.-24     	; 0x60c8 <__mulsf3+0x4>

000060e0 <__mulsf3_pse>:
    60e0:	95 9f       	mul	r25, r21
    60e2:	d1 f3       	breq	.-12     	; 0x60d8 <__mulsf3+0x14>
    60e4:	95 0f       	add	r25, r21
    60e6:	50 e0       	ldi	r21, 0x00	; 0
    60e8:	55 1f       	adc	r21, r21
    60ea:	62 9f       	mul	r22, r18
    60ec:	f0 01       	movw	r30, r0
    60ee:	72 9f       	mul	r23, r18
    60f0:	bb 27       	eor	r27, r27
    60f2:	f0 0d       	add	r31, r0
    60f4:	b1 1d       	adc	r27, r1
    60f6:	63 9f       	mul	r22, r19
    60f8:	aa 27       	eor	r26, r26
    60fa:	f0 0d       	add	r31, r0
    60fc:	b1 1d       	adc	r27, r1
    60fe:	aa 1f       	adc	r26, r26
    6100:	64 9f       	mul	r22, r20
    6102:	66 27       	eor	r22, r22
    6104:	b0 0d       	add	r27, r0
    6106:	a1 1d       	adc	r26, r1
    6108:	66 1f       	adc	r22, r22
    610a:	82 9f       	mul	r24, r18
    610c:	22 27       	eor	r18, r18
    610e:	b0 0d       	add	r27, r0
    6110:	a1 1d       	adc	r26, r1
    6112:	62 1f       	adc	r22, r18
    6114:	73 9f       	mul	r23, r19
    6116:	b0 0d       	add	r27, r0
    6118:	a1 1d       	adc	r26, r1
    611a:	62 1f       	adc	r22, r18
    611c:	83 9f       	mul	r24, r19
    611e:	a0 0d       	add	r26, r0
    6120:	61 1d       	adc	r22, r1
    6122:	22 1f       	adc	r18, r18
    6124:	74 9f       	mul	r23, r20
    6126:	33 27       	eor	r19, r19
    6128:	a0 0d       	add	r26, r0
    612a:	61 1d       	adc	r22, r1
    612c:	23 1f       	adc	r18, r19
    612e:	84 9f       	mul	r24, r20
    6130:	60 0d       	add	r22, r0
    6132:	21 1d       	adc	r18, r1
    6134:	82 2f       	mov	r24, r18
    6136:	76 2f       	mov	r23, r22
    6138:	6a 2f       	mov	r22, r26
    613a:	11 24       	eor	r1, r1
    613c:	9f 57       	subi	r25, 0x7F	; 127
    613e:	50 40       	sbci	r21, 0x00	; 0
    6140:	8a f0       	brmi	.+34     	; 0x6164 <__mulsf3_pse+0x84>
    6142:	e1 f0       	breq	.+56     	; 0x617c <__mulsf3_pse+0x9c>
    6144:	88 23       	and	r24, r24
    6146:	4a f0       	brmi	.+18     	; 0x615a <__mulsf3_pse+0x7a>
    6148:	ee 0f       	add	r30, r30
    614a:	ff 1f       	adc	r31, r31
    614c:	bb 1f       	adc	r27, r27
    614e:	66 1f       	adc	r22, r22
    6150:	77 1f       	adc	r23, r23
    6152:	88 1f       	adc	r24, r24
    6154:	91 50       	subi	r25, 0x01	; 1
    6156:	50 40       	sbci	r21, 0x00	; 0
    6158:	a9 f7       	brne	.-22     	; 0x6144 <__mulsf3_pse+0x64>
    615a:	9e 3f       	cpi	r25, 0xFE	; 254
    615c:	51 05       	cpc	r21, r1
    615e:	70 f0       	brcs	.+28     	; 0x617c <__mulsf3_pse+0x9c>
    6160:	5c cf       	rjmp	.-328    	; 0x601a <__fp_inf>
    6162:	a6 cf       	rjmp	.-180    	; 0x60b0 <__fp_szero>
    6164:	5f 3f       	cpi	r21, 0xFF	; 255
    6166:	ec f3       	brlt	.-6      	; 0x6162 <__mulsf3_pse+0x82>
    6168:	98 3e       	cpi	r25, 0xE8	; 232
    616a:	dc f3       	brlt	.-10     	; 0x6162 <__mulsf3_pse+0x82>
    616c:	86 95       	lsr	r24
    616e:	77 95       	ror	r23
    6170:	67 95       	ror	r22
    6172:	b7 95       	ror	r27
    6174:	f7 95       	ror	r31
    6176:	e7 95       	ror	r30
    6178:	9f 5f       	subi	r25, 0xFF	; 255
    617a:	c1 f7       	brne	.-16     	; 0x616c <__mulsf3_pse+0x8c>
    617c:	fe 2b       	or	r31, r30
    617e:	88 0f       	add	r24, r24
    6180:	91 1d       	adc	r25, r1
    6182:	96 95       	lsr	r25
    6184:	87 95       	ror	r24
    6186:	97 f9       	bld	r25, 7
    6188:	08 95       	ret

0000618a <__fp_cmp>:
    618a:	99 0f       	add	r25, r25
    618c:	00 08       	sbc	r0, r0
    618e:	55 0f       	add	r21, r21
    6190:	aa 0b       	sbc	r26, r26
    6192:	e0 e8       	ldi	r30, 0x80	; 128
    6194:	fe ef       	ldi	r31, 0xFE	; 254
    6196:	16 16       	cp	r1, r22
    6198:	17 06       	cpc	r1, r23
    619a:	e8 07       	cpc	r30, r24
    619c:	f9 07       	cpc	r31, r25
    619e:	c0 f0       	brcs	.+48     	; 0x61d0 <__fp_cmp+0x46>
    61a0:	12 16       	cp	r1, r18
    61a2:	13 06       	cpc	r1, r19
    61a4:	e4 07       	cpc	r30, r20
    61a6:	f5 07       	cpc	r31, r21
    61a8:	98 f0       	brcs	.+38     	; 0x61d0 <__fp_cmp+0x46>
    61aa:	62 1b       	sub	r22, r18
    61ac:	73 0b       	sbc	r23, r19
    61ae:	84 0b       	sbc	r24, r20
    61b0:	95 0b       	sbc	r25, r21
    61b2:	39 f4       	brne	.+14     	; 0x61c2 <__fp_cmp+0x38>
    61b4:	0a 26       	eor	r0, r26
    61b6:	61 f0       	breq	.+24     	; 0x61d0 <__fp_cmp+0x46>
    61b8:	23 2b       	or	r18, r19
    61ba:	24 2b       	or	r18, r20
    61bc:	25 2b       	or	r18, r21
    61be:	21 f4       	brne	.+8      	; 0x61c8 <__fp_cmp+0x3e>
    61c0:	08 95       	ret
    61c2:	0a 26       	eor	r0, r26
    61c4:	09 f4       	brne	.+2      	; 0x61c8 <__fp_cmp+0x3e>
    61c6:	a1 40       	sbci	r26, 0x01	; 1
    61c8:	a6 95       	lsr	r26
    61ca:	8f ef       	ldi	r24, 0xFF	; 255
    61cc:	81 1d       	adc	r24, r1
    61ce:	81 1d       	adc	r24, r1
    61d0:	08 95       	ret

000061d2 <__divmodhi4>:
    61d2:	97 fb       	bst	r25, 7
    61d4:	07 2e       	mov	r0, r23
    61d6:	16 f4       	brtc	.+4      	; 0x61dc <__divmodhi4+0xa>
    61d8:	00 94       	com	r0
    61da:	06 d0       	rcall	.+12     	; 0x61e8 <__divmodhi4_neg1>
    61dc:	77 fd       	sbrc	r23, 7
    61de:	08 d0       	rcall	.+16     	; 0x61f0 <__divmodhi4_neg2>
    61e0:	33 d0       	rcall	.+102    	; 0x6248 <__udivmodhi4>
    61e2:	07 fc       	sbrc	r0, 7
    61e4:	05 d0       	rcall	.+10     	; 0x61f0 <__divmodhi4_neg2>
    61e6:	3e f4       	brtc	.+14     	; 0x61f6 <__divmodhi4_exit>

000061e8 <__divmodhi4_neg1>:
    61e8:	90 95       	com	r25
    61ea:	81 95       	neg	r24
    61ec:	9f 4f       	sbci	r25, 0xFF	; 255
    61ee:	08 95       	ret

000061f0 <__divmodhi4_neg2>:
    61f0:	70 95       	com	r23
    61f2:	61 95       	neg	r22
    61f4:	7f 4f       	sbci	r23, 0xFF	; 255

000061f6 <__divmodhi4_exit>:
    61f6:	08 95       	ret

000061f8 <__divmodsi4>:
    61f8:	05 2e       	mov	r0, r21
    61fa:	97 fb       	bst	r25, 7
    61fc:	16 f4       	brtc	.+4      	; 0x6202 <__divmodsi4+0xa>
    61fe:	00 94       	com	r0
    6200:	0f d0       	rcall	.+30     	; 0x6220 <__negsi2>
    6202:	57 fd       	sbrc	r21, 7
    6204:	05 d0       	rcall	.+10     	; 0x6210 <__divmodsi4_neg2>
    6206:	34 d0       	rcall	.+104    	; 0x6270 <__udivmodsi4>
    6208:	07 fc       	sbrc	r0, 7
    620a:	02 d0       	rcall	.+4      	; 0x6210 <__divmodsi4_neg2>
    620c:	46 f4       	brtc	.+16     	; 0x621e <__divmodsi4_exit>
    620e:	08 c0       	rjmp	.+16     	; 0x6220 <__negsi2>

00006210 <__divmodsi4_neg2>:
    6210:	50 95       	com	r21
    6212:	40 95       	com	r20
    6214:	30 95       	com	r19
    6216:	21 95       	neg	r18
    6218:	3f 4f       	sbci	r19, 0xFF	; 255
    621a:	4f 4f       	sbci	r20, 0xFF	; 255
    621c:	5f 4f       	sbci	r21, 0xFF	; 255

0000621e <__divmodsi4_exit>:
    621e:	08 95       	ret

00006220 <__negsi2>:
    6220:	90 95       	com	r25
    6222:	80 95       	com	r24
    6224:	70 95       	com	r23
    6226:	61 95       	neg	r22
    6228:	7f 4f       	sbci	r23, 0xFF	; 255
    622a:	8f 4f       	sbci	r24, 0xFF	; 255
    622c:	9f 4f       	sbci	r25, 0xFF	; 255
    622e:	08 95       	ret

00006230 <__usmulhisi3>:
    6230:	41 d0       	rcall	.+130    	; 0x62b4 <__umulhisi3>

00006232 <__usmulhisi3_tail>:
    6232:	b7 ff       	sbrs	r27, 7
    6234:	08 95       	ret
    6236:	82 1b       	sub	r24, r18
    6238:	93 0b       	sbc	r25, r19
    623a:	08 95       	ret

0000623c <__mulshisi3>:
    623c:	b7 ff       	sbrs	r27, 7
    623e:	49 c0       	rjmp	.+146    	; 0x62d2 <__muluhisi3>

00006240 <__mulohisi3>:
    6240:	48 d0       	rcall	.+144    	; 0x62d2 <__muluhisi3>
    6242:	82 1b       	sub	r24, r18
    6244:	93 0b       	sbc	r25, r19
    6246:	08 95       	ret

00006248 <__udivmodhi4>:
    6248:	aa 1b       	sub	r26, r26
    624a:	bb 1b       	sub	r27, r27
    624c:	51 e1       	ldi	r21, 0x11	; 17
    624e:	07 c0       	rjmp	.+14     	; 0x625e <__udivmodhi4_ep>

00006250 <__udivmodhi4_loop>:
    6250:	aa 1f       	adc	r26, r26
    6252:	bb 1f       	adc	r27, r27
    6254:	a6 17       	cp	r26, r22
    6256:	b7 07       	cpc	r27, r23
    6258:	10 f0       	brcs	.+4      	; 0x625e <__udivmodhi4_ep>
    625a:	a6 1b       	sub	r26, r22
    625c:	b7 0b       	sbc	r27, r23

0000625e <__udivmodhi4_ep>:
    625e:	88 1f       	adc	r24, r24
    6260:	99 1f       	adc	r25, r25
    6262:	5a 95       	dec	r21
    6264:	a9 f7       	brne	.-22     	; 0x6250 <__udivmodhi4_loop>
    6266:	80 95       	com	r24
    6268:	90 95       	com	r25
    626a:	bc 01       	movw	r22, r24
    626c:	cd 01       	movw	r24, r26
    626e:	08 95       	ret

00006270 <__udivmodsi4>:
    6270:	a1 e2       	ldi	r26, 0x21	; 33
    6272:	1a 2e       	mov	r1, r26
    6274:	aa 1b       	sub	r26, r26
    6276:	bb 1b       	sub	r27, r27
    6278:	fd 01       	movw	r30, r26
    627a:	0d c0       	rjmp	.+26     	; 0x6296 <__udivmodsi4_ep>

0000627c <__udivmodsi4_loop>:
    627c:	aa 1f       	adc	r26, r26
    627e:	bb 1f       	adc	r27, r27
    6280:	ee 1f       	adc	r30, r30
    6282:	ff 1f       	adc	r31, r31
    6284:	a2 17       	cp	r26, r18
    6286:	b3 07       	cpc	r27, r19
    6288:	e4 07       	cpc	r30, r20
    628a:	f5 07       	cpc	r31, r21
    628c:	20 f0       	brcs	.+8      	; 0x6296 <__udivmodsi4_ep>
    628e:	a2 1b       	sub	r26, r18
    6290:	b3 0b       	sbc	r27, r19
    6292:	e4 0b       	sbc	r30, r20
    6294:	f5 0b       	sbc	r31, r21

00006296 <__udivmodsi4_ep>:
    6296:	66 1f       	adc	r22, r22
    6298:	77 1f       	adc	r23, r23
    629a:	88 1f       	adc	r24, r24
    629c:	99 1f       	adc	r25, r25
    629e:	1a 94       	dec	r1
    62a0:	69 f7       	brne	.-38     	; 0x627c <__udivmodsi4_loop>
    62a2:	60 95       	com	r22
    62a4:	70 95       	com	r23
    62a6:	80 95       	com	r24
    62a8:	90 95       	com	r25
    62aa:	9b 01       	movw	r18, r22
    62ac:	ac 01       	movw	r20, r24
    62ae:	bd 01       	movw	r22, r26
    62b0:	cf 01       	movw	r24, r30
    62b2:	08 95       	ret

000062b4 <__umulhisi3>:
    62b4:	a2 9f       	mul	r26, r18
    62b6:	b0 01       	movw	r22, r0
    62b8:	b3 9f       	mul	r27, r19
    62ba:	c0 01       	movw	r24, r0
    62bc:	a3 9f       	mul	r26, r19
    62be:	70 0d       	add	r23, r0
    62c0:	81 1d       	adc	r24, r1
    62c2:	11 24       	eor	r1, r1
    62c4:	91 1d       	adc	r25, r1
    62c6:	b2 9f       	mul	r27, r18
    62c8:	70 0d       	add	r23, r0
    62ca:	81 1d       	adc	r24, r1
    62cc:	11 24       	eor	r1, r1
    62ce:	91 1d       	adc	r25, r1
    62d0:	08 95       	ret

000062d2 <__muluhisi3>:
    62d2:	f0 df       	rcall	.-32     	; 0x62b4 <__umulhisi3>
    62d4:	a5 9f       	mul	r26, r21
    62d6:	90 0d       	add	r25, r0
    62d8:	b4 9f       	mul	r27, r20
    62da:	90 0d       	add	r25, r0
    62dc:	a4 9f       	mul	r26, r20
    62de:	80 0d       	add	r24, r0
    62e0:	91 1d       	adc	r25, r1
    62e2:	11 24       	eor	r1, r1
    62e4:	08 95       	ret

000062e6 <dtostrf>:
    62e6:	ef 92       	push	r14
    62e8:	0f 93       	push	r16
    62ea:	1f 93       	push	r17
    62ec:	cf 93       	push	r28
    62ee:	df 93       	push	r29
    62f0:	e8 01       	movw	r28, r16
    62f2:	47 ff       	sbrs	r20, 7
    62f4:	02 c0       	rjmp	.+4      	; 0x62fa <dtostrf+0x14>
    62f6:	34 e1       	ldi	r19, 0x14	; 20
    62f8:	01 c0       	rjmp	.+2      	; 0x62fc <dtostrf+0x16>
    62fa:	34 e0       	ldi	r19, 0x04	; 4
    62fc:	e4 2f       	mov	r30, r20
    62fe:	ff 27       	eor	r31, r31
    6300:	e7 fd       	sbrc	r30, 7
    6302:	f0 95       	com	r31
    6304:	f7 ff       	sbrs	r31, 7
    6306:	03 c0       	rjmp	.+6      	; 0x630e <dtostrf+0x28>
    6308:	f1 95       	neg	r31
    630a:	e1 95       	neg	r30
    630c:	f1 09       	sbc	r31, r1
    630e:	e3 2e       	mov	r14, r19
    6310:	02 2f       	mov	r16, r18
    6312:	2e 2f       	mov	r18, r30
    6314:	ae 01       	movw	r20, r28
    6316:	3a d5       	rcall	.+2676   	; 0x6d8c <dtoa_prf>
    6318:	ce 01       	movw	r24, r28
    631a:	df 91       	pop	r29
    631c:	cf 91       	pop	r28
    631e:	1f 91       	pop	r17
    6320:	0f 91       	pop	r16
    6322:	ef 90       	pop	r14
    6324:	08 95       	ret

00006326 <malloc>:
    6326:	cf 93       	push	r28
    6328:	df 93       	push	r29
    632a:	82 30       	cpi	r24, 0x02	; 2
    632c:	91 05       	cpc	r25, r1
    632e:	10 f4       	brcc	.+4      	; 0x6334 <malloc+0xe>
    6330:	82 e0       	ldi	r24, 0x02	; 2
    6332:	90 e0       	ldi	r25, 0x00	; 0
    6334:	e0 91 4e 07 	lds	r30, 0x074E
    6338:	f0 91 4f 07 	lds	r31, 0x074F
    633c:	20 e0       	ldi	r18, 0x00	; 0
    633e:	30 e0       	ldi	r19, 0x00	; 0
    6340:	a0 e0       	ldi	r26, 0x00	; 0
    6342:	b0 e0       	ldi	r27, 0x00	; 0
    6344:	30 97       	sbiw	r30, 0x00	; 0
    6346:	39 f1       	breq	.+78     	; 0x6396 <malloc+0x70>
    6348:	40 81       	ld	r20, Z
    634a:	51 81       	ldd	r21, Z+1	; 0x01
    634c:	48 17       	cp	r20, r24
    634e:	59 07       	cpc	r21, r25
    6350:	b8 f0       	brcs	.+46     	; 0x6380 <malloc+0x5a>
    6352:	48 17       	cp	r20, r24
    6354:	59 07       	cpc	r21, r25
    6356:	71 f4       	brne	.+28     	; 0x6374 <malloc+0x4e>
    6358:	82 81       	ldd	r24, Z+2	; 0x02
    635a:	93 81       	ldd	r25, Z+3	; 0x03
    635c:	10 97       	sbiw	r26, 0x00	; 0
    635e:	29 f0       	breq	.+10     	; 0x636a <malloc+0x44>
    6360:	13 96       	adiw	r26, 0x03	; 3
    6362:	9c 93       	st	X, r25
    6364:	8e 93       	st	-X, r24
    6366:	12 97       	sbiw	r26, 0x02	; 2
    6368:	2c c0       	rjmp	.+88     	; 0x63c2 <malloc+0x9c>
    636a:	90 93 4f 07 	sts	0x074F, r25
    636e:	80 93 4e 07 	sts	0x074E, r24
    6372:	27 c0       	rjmp	.+78     	; 0x63c2 <malloc+0x9c>
    6374:	21 15       	cp	r18, r1
    6376:	31 05       	cpc	r19, r1
    6378:	31 f0       	breq	.+12     	; 0x6386 <malloc+0x60>
    637a:	42 17       	cp	r20, r18
    637c:	53 07       	cpc	r21, r19
    637e:	18 f0       	brcs	.+6      	; 0x6386 <malloc+0x60>
    6380:	a9 01       	movw	r20, r18
    6382:	db 01       	movw	r26, r22
    6384:	01 c0       	rjmp	.+2      	; 0x6388 <malloc+0x62>
    6386:	ef 01       	movw	r28, r30
    6388:	9a 01       	movw	r18, r20
    638a:	bd 01       	movw	r22, r26
    638c:	df 01       	movw	r26, r30
    638e:	02 80       	ldd	r0, Z+2	; 0x02
    6390:	f3 81       	ldd	r31, Z+3	; 0x03
    6392:	e0 2d       	mov	r30, r0
    6394:	d7 cf       	rjmp	.-82     	; 0x6344 <malloc+0x1e>
    6396:	21 15       	cp	r18, r1
    6398:	31 05       	cpc	r19, r1
    639a:	f9 f0       	breq	.+62     	; 0x63da <malloc+0xb4>
    639c:	28 1b       	sub	r18, r24
    639e:	39 0b       	sbc	r19, r25
    63a0:	24 30       	cpi	r18, 0x04	; 4
    63a2:	31 05       	cpc	r19, r1
    63a4:	80 f4       	brcc	.+32     	; 0x63c6 <malloc+0xa0>
    63a6:	8a 81       	ldd	r24, Y+2	; 0x02
    63a8:	9b 81       	ldd	r25, Y+3	; 0x03
    63aa:	61 15       	cp	r22, r1
    63ac:	71 05       	cpc	r23, r1
    63ae:	21 f0       	breq	.+8      	; 0x63b8 <malloc+0x92>
    63b0:	fb 01       	movw	r30, r22
    63b2:	93 83       	std	Z+3, r25	; 0x03
    63b4:	82 83       	std	Z+2, r24	; 0x02
    63b6:	04 c0       	rjmp	.+8      	; 0x63c0 <malloc+0x9a>
    63b8:	90 93 4f 07 	sts	0x074F, r25
    63bc:	80 93 4e 07 	sts	0x074E, r24
    63c0:	fe 01       	movw	r30, r28
    63c2:	32 96       	adiw	r30, 0x02	; 2
    63c4:	44 c0       	rjmp	.+136    	; 0x644e <malloc+0x128>
    63c6:	fe 01       	movw	r30, r28
    63c8:	e2 0f       	add	r30, r18
    63ca:	f3 1f       	adc	r31, r19
    63cc:	81 93       	st	Z+, r24
    63ce:	91 93       	st	Z+, r25
    63d0:	22 50       	subi	r18, 0x02	; 2
    63d2:	31 09       	sbc	r19, r1
    63d4:	39 83       	std	Y+1, r19	; 0x01
    63d6:	28 83       	st	Y, r18
    63d8:	3a c0       	rjmp	.+116    	; 0x644e <malloc+0x128>
    63da:	20 91 4c 07 	lds	r18, 0x074C
    63de:	30 91 4d 07 	lds	r19, 0x074D
    63e2:	23 2b       	or	r18, r19
    63e4:	41 f4       	brne	.+16     	; 0x63f6 <malloc+0xd0>
    63e6:	20 91 02 01 	lds	r18, 0x0102
    63ea:	30 91 03 01 	lds	r19, 0x0103
    63ee:	30 93 4d 07 	sts	0x074D, r19
    63f2:	20 93 4c 07 	sts	0x074C, r18
    63f6:	20 91 00 01 	lds	r18, 0x0100
    63fa:	30 91 01 01 	lds	r19, 0x0101
    63fe:	21 15       	cp	r18, r1
    6400:	31 05       	cpc	r19, r1
    6402:	41 f4       	brne	.+16     	; 0x6414 <malloc+0xee>
    6404:	2d b7       	in	r18, 0x3d	; 61
    6406:	3e b7       	in	r19, 0x3e	; 62
    6408:	40 91 04 01 	lds	r20, 0x0104
    640c:	50 91 05 01 	lds	r21, 0x0105
    6410:	24 1b       	sub	r18, r20
    6412:	35 0b       	sbc	r19, r21
    6414:	e0 91 4c 07 	lds	r30, 0x074C
    6418:	f0 91 4d 07 	lds	r31, 0x074D
    641c:	e2 17       	cp	r30, r18
    641e:	f3 07       	cpc	r31, r19
    6420:	a0 f4       	brcc	.+40     	; 0x644a <malloc+0x124>
    6422:	2e 1b       	sub	r18, r30
    6424:	3f 0b       	sbc	r19, r31
    6426:	28 17       	cp	r18, r24
    6428:	39 07       	cpc	r19, r25
    642a:	78 f0       	brcs	.+30     	; 0x644a <malloc+0x124>
    642c:	ac 01       	movw	r20, r24
    642e:	4e 5f       	subi	r20, 0xFE	; 254
    6430:	5f 4f       	sbci	r21, 0xFF	; 255
    6432:	24 17       	cp	r18, r20
    6434:	35 07       	cpc	r19, r21
    6436:	48 f0       	brcs	.+18     	; 0x644a <malloc+0x124>
    6438:	4e 0f       	add	r20, r30
    643a:	5f 1f       	adc	r21, r31
    643c:	50 93 4d 07 	sts	0x074D, r21
    6440:	40 93 4c 07 	sts	0x074C, r20
    6444:	81 93       	st	Z+, r24
    6446:	91 93       	st	Z+, r25
    6448:	02 c0       	rjmp	.+4      	; 0x644e <malloc+0x128>
    644a:	e0 e0       	ldi	r30, 0x00	; 0
    644c:	f0 e0       	ldi	r31, 0x00	; 0
    644e:	cf 01       	movw	r24, r30
    6450:	df 91       	pop	r29
    6452:	cf 91       	pop	r28
    6454:	08 95       	ret

00006456 <free>:
    6456:	cf 93       	push	r28
    6458:	df 93       	push	r29
    645a:	00 97       	sbiw	r24, 0x00	; 0
    645c:	09 f4       	brne	.+2      	; 0x6460 <free+0xa>
    645e:	87 c0       	rjmp	.+270    	; 0x656e <free+0x118>
    6460:	fc 01       	movw	r30, r24
    6462:	32 97       	sbiw	r30, 0x02	; 2
    6464:	13 82       	std	Z+3, r1	; 0x03
    6466:	12 82       	std	Z+2, r1	; 0x02
    6468:	c0 91 4e 07 	lds	r28, 0x074E
    646c:	d0 91 4f 07 	lds	r29, 0x074F
    6470:	20 97       	sbiw	r28, 0x00	; 0
    6472:	81 f4       	brne	.+32     	; 0x6494 <free+0x3e>
    6474:	20 81       	ld	r18, Z
    6476:	31 81       	ldd	r19, Z+1	; 0x01
    6478:	28 0f       	add	r18, r24
    647a:	39 1f       	adc	r19, r25
    647c:	80 91 4c 07 	lds	r24, 0x074C
    6480:	90 91 4d 07 	lds	r25, 0x074D
    6484:	82 17       	cp	r24, r18
    6486:	93 07       	cpc	r25, r19
    6488:	79 f5       	brne	.+94     	; 0x64e8 <free+0x92>
    648a:	f0 93 4d 07 	sts	0x074D, r31
    648e:	e0 93 4c 07 	sts	0x074C, r30
    6492:	6d c0       	rjmp	.+218    	; 0x656e <free+0x118>
    6494:	de 01       	movw	r26, r28
    6496:	20 e0       	ldi	r18, 0x00	; 0
    6498:	30 e0       	ldi	r19, 0x00	; 0
    649a:	ae 17       	cp	r26, r30
    649c:	bf 07       	cpc	r27, r31
    649e:	50 f4       	brcc	.+20     	; 0x64b4 <free+0x5e>
    64a0:	12 96       	adiw	r26, 0x02	; 2
    64a2:	4d 91       	ld	r20, X+
    64a4:	5c 91       	ld	r21, X
    64a6:	13 97       	sbiw	r26, 0x03	; 3
    64a8:	9d 01       	movw	r18, r26
    64aa:	41 15       	cp	r20, r1
    64ac:	51 05       	cpc	r21, r1
    64ae:	09 f1       	breq	.+66     	; 0x64f2 <free+0x9c>
    64b0:	da 01       	movw	r26, r20
    64b2:	f3 cf       	rjmp	.-26     	; 0x649a <free+0x44>
    64b4:	b3 83       	std	Z+3, r27	; 0x03
    64b6:	a2 83       	std	Z+2, r26	; 0x02
    64b8:	40 81       	ld	r20, Z
    64ba:	51 81       	ldd	r21, Z+1	; 0x01
    64bc:	84 0f       	add	r24, r20
    64be:	95 1f       	adc	r25, r21
    64c0:	8a 17       	cp	r24, r26
    64c2:	9b 07       	cpc	r25, r27
    64c4:	71 f4       	brne	.+28     	; 0x64e2 <free+0x8c>
    64c6:	8d 91       	ld	r24, X+
    64c8:	9c 91       	ld	r25, X
    64ca:	11 97       	sbiw	r26, 0x01	; 1
    64cc:	84 0f       	add	r24, r20
    64ce:	95 1f       	adc	r25, r21
    64d0:	02 96       	adiw	r24, 0x02	; 2
    64d2:	91 83       	std	Z+1, r25	; 0x01
    64d4:	80 83       	st	Z, r24
    64d6:	12 96       	adiw	r26, 0x02	; 2
    64d8:	8d 91       	ld	r24, X+
    64da:	9c 91       	ld	r25, X
    64dc:	13 97       	sbiw	r26, 0x03	; 3
    64de:	93 83       	std	Z+3, r25	; 0x03
    64e0:	82 83       	std	Z+2, r24	; 0x02
    64e2:	21 15       	cp	r18, r1
    64e4:	31 05       	cpc	r19, r1
    64e6:	29 f4       	brne	.+10     	; 0x64f2 <free+0x9c>
    64e8:	f0 93 4f 07 	sts	0x074F, r31
    64ec:	e0 93 4e 07 	sts	0x074E, r30
    64f0:	3e c0       	rjmp	.+124    	; 0x656e <free+0x118>
    64f2:	d9 01       	movw	r26, r18
    64f4:	13 96       	adiw	r26, 0x03	; 3
    64f6:	fc 93       	st	X, r31
    64f8:	ee 93       	st	-X, r30
    64fa:	12 97       	sbiw	r26, 0x02	; 2
    64fc:	4d 91       	ld	r20, X+
    64fe:	5d 91       	ld	r21, X+
    6500:	a4 0f       	add	r26, r20
    6502:	b5 1f       	adc	r27, r21
    6504:	ea 17       	cp	r30, r26
    6506:	fb 07       	cpc	r31, r27
    6508:	79 f4       	brne	.+30     	; 0x6528 <free+0xd2>
    650a:	80 81       	ld	r24, Z
    650c:	91 81       	ldd	r25, Z+1	; 0x01
    650e:	84 0f       	add	r24, r20
    6510:	95 1f       	adc	r25, r21
    6512:	02 96       	adiw	r24, 0x02	; 2
    6514:	d9 01       	movw	r26, r18
    6516:	11 96       	adiw	r26, 0x01	; 1
    6518:	9c 93       	st	X, r25
    651a:	8e 93       	st	-X, r24
    651c:	82 81       	ldd	r24, Z+2	; 0x02
    651e:	93 81       	ldd	r25, Z+3	; 0x03
    6520:	13 96       	adiw	r26, 0x03	; 3
    6522:	9c 93       	st	X, r25
    6524:	8e 93       	st	-X, r24
    6526:	12 97       	sbiw	r26, 0x02	; 2
    6528:	e0 e0       	ldi	r30, 0x00	; 0
    652a:	f0 e0       	ldi	r31, 0x00	; 0
    652c:	8a 81       	ldd	r24, Y+2	; 0x02
    652e:	9b 81       	ldd	r25, Y+3	; 0x03
    6530:	00 97       	sbiw	r24, 0x00	; 0
    6532:	19 f0       	breq	.+6      	; 0x653a <free+0xe4>
    6534:	fe 01       	movw	r30, r28
    6536:	ec 01       	movw	r28, r24
    6538:	f9 cf       	rjmp	.-14     	; 0x652c <free+0xd6>
    653a:	ce 01       	movw	r24, r28
    653c:	02 96       	adiw	r24, 0x02	; 2
    653e:	28 81       	ld	r18, Y
    6540:	39 81       	ldd	r19, Y+1	; 0x01
    6542:	82 0f       	add	r24, r18
    6544:	93 1f       	adc	r25, r19
    6546:	20 91 4c 07 	lds	r18, 0x074C
    654a:	30 91 4d 07 	lds	r19, 0x074D
    654e:	28 17       	cp	r18, r24
    6550:	39 07       	cpc	r19, r25
    6552:	69 f4       	brne	.+26     	; 0x656e <free+0x118>
    6554:	30 97       	sbiw	r30, 0x00	; 0
    6556:	29 f4       	brne	.+10     	; 0x6562 <free+0x10c>
    6558:	10 92 4f 07 	sts	0x074F, r1
    655c:	10 92 4e 07 	sts	0x074E, r1
    6560:	02 c0       	rjmp	.+4      	; 0x6566 <free+0x110>
    6562:	13 82       	std	Z+3, r1	; 0x03
    6564:	12 82       	std	Z+2, r1	; 0x02
    6566:	d0 93 4d 07 	sts	0x074D, r29
    656a:	c0 93 4c 07 	sts	0x074C, r28
    656e:	df 91       	pop	r29
    6570:	cf 91       	pop	r28
    6572:	08 95       	ret

00006574 <strtoul>:
    6574:	2f 92       	push	r2
    6576:	3f 92       	push	r3
    6578:	5f 92       	push	r5
    657a:	6f 92       	push	r6
    657c:	7f 92       	push	r7
    657e:	8f 92       	push	r8
    6580:	9f 92       	push	r9
    6582:	af 92       	push	r10
    6584:	bf 92       	push	r11
    6586:	cf 92       	push	r12
    6588:	df 92       	push	r13
    658a:	ef 92       	push	r14
    658c:	ff 92       	push	r15
    658e:	0f 93       	push	r16
    6590:	1f 93       	push	r17
    6592:	cf 93       	push	r28
    6594:	df 93       	push	r29
    6596:	8b 01       	movw	r16, r22
    6598:	ea 01       	movw	r28, r20
    659a:	61 15       	cp	r22, r1
    659c:	71 05       	cpc	r23, r1
    659e:	21 f0       	breq	.+8      	; 0x65a8 <strtoul+0x34>
    65a0:	db 01       	movw	r26, r22
    65a2:	8c 93       	st	X, r24
    65a4:	11 96       	adiw	r26, 0x01	; 1
    65a6:	9c 93       	st	X, r25
    65a8:	20 97       	sbiw	r28, 0x00	; 0
    65aa:	39 f0       	breq	.+14     	; 0x65ba <strtoul+0x46>
    65ac:	9e 01       	movw	r18, r28
    65ae:	22 50       	subi	r18, 0x02	; 2
    65b0:	31 09       	sbc	r19, r1
    65b2:	23 32       	cpi	r18, 0x23	; 35
    65b4:	31 05       	cpc	r19, r1
    65b6:	08 f0       	brcs	.+2      	; 0x65ba <strtoul+0x46>
    65b8:	d5 c0       	rjmp	.+426    	; 0x6764 <strtoul+0x1f0>
    65ba:	7c 01       	movw	r14, r24
    65bc:	67 01       	movw	r12, r14
    65be:	bf ef       	ldi	r27, 0xFF	; 255
    65c0:	cb 1a       	sub	r12, r27
    65c2:	db 0a       	sbc	r13, r27
    65c4:	56 01       	movw	r10, r12
    65c6:	f7 01       	movw	r30, r14
    65c8:	60 80       	ld	r6, Z
    65ca:	86 2d       	mov	r24, r6
    65cc:	90 e0       	ldi	r25, 0x00	; 0
    65ce:	09 d1       	rcall	.+530    	; 0x67e2 <isspace>
    65d0:	89 2b       	or	r24, r25
    65d2:	11 f0       	breq	.+4      	; 0x65d8 <strtoul+0x64>
    65d4:	76 01       	movw	r14, r12
    65d6:	f2 cf       	rjmp	.-28     	; 0x65bc <strtoul+0x48>
    65d8:	fd e2       	ldi	r31, 0x2D	; 45
    65da:	6f 12       	cpse	r6, r31
    65dc:	0a c0       	rjmp	.+20     	; 0x65f2 <strtoul+0x7e>
    65de:	57 01       	movw	r10, r14
    65e0:	82 e0       	ldi	r24, 0x02	; 2
    65e2:	a8 0e       	add	r10, r24
    65e4:	b1 1c       	adc	r11, r1
    65e6:	d7 01       	movw	r26, r14
    65e8:	11 96       	adiw	r26, 0x01	; 1
    65ea:	6c 90       	ld	r6, X
    65ec:	77 24       	eor	r7, r7
    65ee:	73 94       	inc	r7
    65f0:	0b c0       	rjmp	.+22     	; 0x6608 <strtoul+0x94>
    65f2:	bb e2       	ldi	r27, 0x2B	; 43
    65f4:	6b 12       	cpse	r6, r27
    65f6:	07 c0       	rjmp	.+14     	; 0x6606 <strtoul+0x92>
    65f8:	57 01       	movw	r10, r14
    65fa:	e2 e0       	ldi	r30, 0x02	; 2
    65fc:	ae 0e       	add	r10, r30
    65fe:	b1 1c       	adc	r11, r1
    6600:	d7 01       	movw	r26, r14
    6602:	11 96       	adiw	r26, 0x01	; 1
    6604:	6c 90       	ld	r6, X
    6606:	71 2c       	mov	r7, r1
    6608:	ce 01       	movw	r24, r28
    660a:	8f 7e       	andi	r24, 0xEF	; 239
    660c:	89 2b       	or	r24, r25
    660e:	89 f4       	brne	.+34     	; 0x6632 <strtoul+0xbe>
    6610:	b0 e3       	ldi	r27, 0x30	; 48
    6612:	6b 12       	cpse	r6, r27
    6614:	36 c0       	rjmp	.+108    	; 0x6682 <strtoul+0x10e>
    6616:	f5 01       	movw	r30, r10
    6618:	80 81       	ld	r24, Z
    661a:	8f 7d       	andi	r24, 0xDF	; 223
    661c:	88 35       	cpi	r24, 0x58	; 88
    661e:	d1 f4       	brne	.+52     	; 0x6654 <strtoul+0xe0>
    6620:	61 80       	ldd	r6, Z+1	; 0x01
    6622:	f2 e0       	ldi	r31, 0x02	; 2
    6624:	af 0e       	add	r10, r31
    6626:	b1 1c       	adc	r11, r1
    6628:	87 2d       	mov	r24, r7
    662a:	82 60       	ori	r24, 0x02	; 2
    662c:	78 2e       	mov	r7, r24
    662e:	c0 e1       	ldi	r28, 0x10	; 16
    6630:	d0 e0       	ldi	r29, 0x00	; 0
    6632:	ca 30       	cpi	r28, 0x0A	; 10
    6634:	d1 05       	cpc	r29, r1
    6636:	49 f1       	breq	.+82     	; 0x668a <strtoul+0x116>
    6638:	c0 31       	cpi	r28, 0x10	; 16
    663a:	d1 05       	cpc	r29, r1
    663c:	21 f0       	breq	.+8      	; 0x6646 <strtoul+0xd2>
    663e:	c8 30       	cpi	r28, 0x08	; 8
    6640:	d1 05       	cpc	r29, r1
    6642:	99 f4       	brne	.+38     	; 0x666a <strtoul+0xf6>
    6644:	09 c0       	rjmp	.+18     	; 0x6658 <strtoul+0xe4>
    6646:	cc 24       	eor	r12, r12
    6648:	ca 94       	dec	r12
    664a:	dc 2c       	mov	r13, r12
    664c:	ec 2c       	mov	r14, r12
    664e:	af e0       	ldi	r26, 0x0F	; 15
    6650:	fa 2e       	mov	r15, r26
    6652:	21 c0       	rjmp	.+66     	; 0x6696 <strtoul+0x122>
    6654:	20 97       	sbiw	r28, 0x00	; 0
    6656:	69 f7       	brne	.-38     	; 0x6632 <strtoul+0xbe>
    6658:	c8 e0       	ldi	r28, 0x08	; 8
    665a:	d0 e0       	ldi	r29, 0x00	; 0
    665c:	cc 24       	eor	r12, r12
    665e:	ca 94       	dec	r12
    6660:	dc 2c       	mov	r13, r12
    6662:	ec 2c       	mov	r14, r12
    6664:	ff e1       	ldi	r31, 0x1F	; 31
    6666:	ff 2e       	mov	r15, r31
    6668:	16 c0       	rjmp	.+44     	; 0x6696 <strtoul+0x122>
    666a:	6f ef       	ldi	r22, 0xFF	; 255
    666c:	7f ef       	ldi	r23, 0xFF	; 255
    666e:	cb 01       	movw	r24, r22
    6670:	9e 01       	movw	r18, r28
    6672:	44 27       	eor	r20, r20
    6674:	37 fd       	sbrc	r19, 7
    6676:	40 95       	com	r20
    6678:	54 2f       	mov	r21, r20
    667a:	fa dd       	rcall	.-1036   	; 0x6270 <__udivmodsi4>
    667c:	69 01       	movw	r12, r18
    667e:	7a 01       	movw	r14, r20
    6680:	0a c0       	rjmp	.+20     	; 0x6696 <strtoul+0x122>
    6682:	20 97       	sbiw	r28, 0x00	; 0
    6684:	b1 f6       	brne	.-84     	; 0x6632 <strtoul+0xbe>
    6686:	ca e0       	ldi	r28, 0x0A	; 10
    6688:	d0 e0       	ldi	r29, 0x00	; 0
    668a:	e9 e9       	ldi	r30, 0x99	; 153
    668c:	ce 2e       	mov	r12, r30
    668e:	dc 2c       	mov	r13, r12
    6690:	ec 2c       	mov	r14, r12
    6692:	e9 e1       	ldi	r30, 0x19	; 25
    6694:	fe 2e       	mov	r15, r30
    6696:	f5 01       	movw	r30, r10
    6698:	60 e0       	ldi	r22, 0x00	; 0
    669a:	20 e0       	ldi	r18, 0x00	; 0
    669c:	30 e0       	ldi	r19, 0x00	; 0
    669e:	a9 01       	movw	r20, r18
    66a0:	4e 01       	movw	r8, r28
    66a2:	aa 24       	eor	r10, r10
    66a4:	97 fc       	sbrc	r9, 7
    66a6:	a0 94       	com	r10
    66a8:	ba 2c       	mov	r11, r10
    66aa:	1f 01       	movw	r2, r30
    66ac:	70 ed       	ldi	r23, 0xD0	; 208
    66ae:	57 2e       	mov	r5, r23
    66b0:	56 0c       	add	r5, r6
    66b2:	a9 e0       	ldi	r26, 0x09	; 9
    66b4:	a5 15       	cp	r26, r5
    66b6:	70 f4       	brcc	.+28     	; 0x66d4 <strtoul+0x160>
    66b8:	8f eb       	ldi	r24, 0xBF	; 191
    66ba:	86 0d       	add	r24, r6
    66bc:	8a 31       	cpi	r24, 0x1A	; 26
    66be:	18 f4       	brcc	.+6      	; 0x66c6 <strtoul+0x152>
    66c0:	99 ec       	ldi	r25, 0xC9	; 201
    66c2:	59 2e       	mov	r5, r25
    66c4:	06 c0       	rjmp	.+12     	; 0x66d2 <strtoul+0x15e>
    66c6:	8f e9       	ldi	r24, 0x9F	; 159
    66c8:	86 0d       	add	r24, r6
    66ca:	8a 31       	cpi	r24, 0x1A	; 26
    66cc:	40 f5       	brcc	.+80     	; 0x671e <strtoul+0x1aa>
    66ce:	89 ea       	ldi	r24, 0xA9	; 169
    66d0:	58 2e       	mov	r5, r24
    66d2:	56 0c       	add	r5, r6
    66d4:	85 2d       	mov	r24, r5
    66d6:	90 e0       	ldi	r25, 0x00	; 0
    66d8:	8c 17       	cp	r24, r28
    66da:	9d 07       	cpc	r25, r29
    66dc:	04 f5       	brge	.+64     	; 0x671e <strtoul+0x1aa>
    66de:	6f 3f       	cpi	r22, 0xFF	; 255
    66e0:	d1 f0       	breq	.+52     	; 0x6716 <strtoul+0x1a2>
    66e2:	c2 16       	cp	r12, r18
    66e4:	d3 06       	cpc	r13, r19
    66e6:	e4 06       	cpc	r14, r20
    66e8:	f5 06       	cpc	r15, r21
    66ea:	90 f0       	brcs	.+36     	; 0x6710 <strtoul+0x19c>
    66ec:	c5 01       	movw	r24, r10
    66ee:	b4 01       	movw	r22, r8
    66f0:	52 d6       	rcall	.+3236   	; 0x7396 <__mulsi3>
    66f2:	9b 01       	movw	r18, r22
    66f4:	ac 01       	movw	r20, r24
    66f6:	85 2d       	mov	r24, r5
    66f8:	90 e0       	ldi	r25, 0x00	; 0
    66fa:	a0 e0       	ldi	r26, 0x00	; 0
    66fc:	b0 e0       	ldi	r27, 0x00	; 0
    66fe:	28 0f       	add	r18, r24
    6700:	39 1f       	adc	r19, r25
    6702:	4a 1f       	adc	r20, r26
    6704:	5b 1f       	adc	r21, r27
    6706:	28 17       	cp	r18, r24
    6708:	39 07       	cpc	r19, r25
    670a:	4a 07       	cpc	r20, r26
    670c:	5b 07       	cpc	r21, r27
    670e:	10 f4       	brcc	.+4      	; 0x6714 <strtoul+0x1a0>
    6710:	6f ef       	ldi	r22, 0xFF	; 255
    6712:	01 c0       	rjmp	.+2      	; 0x6716 <strtoul+0x1a2>
    6714:	61 e0       	ldi	r22, 0x01	; 1
    6716:	31 96       	adiw	r30, 0x01	; 1
    6718:	d1 01       	movw	r26, r2
    671a:	6c 90       	ld	r6, X
    671c:	c6 cf       	rjmp	.-116    	; 0x66aa <strtoul+0x136>
    671e:	01 15       	cp	r16, r1
    6720:	11 05       	cpc	r17, r1
    6722:	51 f0       	breq	.+20     	; 0x6738 <strtoul+0x1c4>
    6724:	66 23       	and	r22, r22
    6726:	11 f0       	breq	.+4      	; 0x672c <strtoul+0x1b8>
    6728:	31 97       	sbiw	r30, 0x01	; 1
    672a:	03 c0       	rjmp	.+6      	; 0x6732 <strtoul+0x1be>
    672c:	71 fe       	sbrs	r7, 1
    672e:	04 c0       	rjmp	.+8      	; 0x6738 <strtoul+0x1c4>
    6730:	32 97       	sbiw	r30, 0x02	; 2
    6732:	d8 01       	movw	r26, r16
    6734:	ed 93       	st	X+, r30
    6736:	fc 93       	st	X, r31
    6738:	70 fe       	sbrs	r7, 0
    673a:	07 c0       	rjmp	.+14     	; 0x674a <strtoul+0x1d6>
    673c:	50 95       	com	r21
    673e:	40 95       	com	r20
    6740:	30 95       	com	r19
    6742:	21 95       	neg	r18
    6744:	3f 4f       	sbci	r19, 0xFF	; 255
    6746:	4f 4f       	sbci	r20, 0xFF	; 255
    6748:	5f 4f       	sbci	r21, 0xFF	; 255
    674a:	67 ff       	sbrs	r22, 7
    674c:	10 c0       	rjmp	.+32     	; 0x676e <strtoul+0x1fa>
    674e:	82 e2       	ldi	r24, 0x22	; 34
    6750:	90 e0       	ldi	r25, 0x00	; 0
    6752:	90 93 57 07 	sts	0x0757, r25
    6756:	80 93 56 07 	sts	0x0756, r24
    675a:	6f ef       	ldi	r22, 0xFF	; 255
    675c:	7f ef       	ldi	r23, 0xFF	; 255
    675e:	8f ef       	ldi	r24, 0xFF	; 255
    6760:	9f ef       	ldi	r25, 0xFF	; 255
    6762:	07 c0       	rjmp	.+14     	; 0x6772 <strtoul+0x1fe>
    6764:	60 e0       	ldi	r22, 0x00	; 0
    6766:	70 e0       	ldi	r23, 0x00	; 0
    6768:	80 e0       	ldi	r24, 0x00	; 0
    676a:	90 e0       	ldi	r25, 0x00	; 0
    676c:	02 c0       	rjmp	.+4      	; 0x6772 <strtoul+0x1fe>
    676e:	b9 01       	movw	r22, r18
    6770:	ca 01       	movw	r24, r20
    6772:	df 91       	pop	r29
    6774:	cf 91       	pop	r28
    6776:	1f 91       	pop	r17
    6778:	0f 91       	pop	r16
    677a:	ff 90       	pop	r15
    677c:	ef 90       	pop	r14
    677e:	df 90       	pop	r13
    6780:	cf 90       	pop	r12
    6782:	bf 90       	pop	r11
    6784:	af 90       	pop	r10
    6786:	9f 90       	pop	r9
    6788:	8f 90       	pop	r8
    678a:	7f 90       	pop	r7
    678c:	6f 90       	pop	r6
    678e:	5f 90       	pop	r5
    6790:	3f 90       	pop	r3
    6792:	2f 90       	pop	r2
    6794:	08 95       	ret

00006796 <atoi>:
    6796:	fc 01       	movw	r30, r24
    6798:	88 27       	eor	r24, r24
    679a:	99 27       	eor	r25, r25
    679c:	e8 94       	clt
    679e:	21 91       	ld	r18, Z+
    67a0:	20 32       	cpi	r18, 0x20	; 32
    67a2:	e9 f3       	breq	.-6      	; 0x679e <atoi+0x8>
    67a4:	29 30       	cpi	r18, 0x09	; 9
    67a6:	10 f0       	brcs	.+4      	; 0x67ac <atoi+0x16>
    67a8:	2e 30       	cpi	r18, 0x0E	; 14
    67aa:	c8 f3       	brcs	.-14     	; 0x679e <atoi+0x8>
    67ac:	2b 32       	cpi	r18, 0x2B	; 43
    67ae:	39 f0       	breq	.+14     	; 0x67be <atoi+0x28>
    67b0:	2d 32       	cpi	r18, 0x2D	; 45
    67b2:	31 f4       	brne	.+12     	; 0x67c0 <atoi+0x2a>
    67b4:	68 94       	set
    67b6:	03 c0       	rjmp	.+6      	; 0x67be <atoi+0x28>
    67b8:	51 d0       	rcall	.+162    	; 0x685c <__mulhi_const_10>
    67ba:	82 0f       	add	r24, r18
    67bc:	91 1d       	adc	r25, r1
    67be:	21 91       	ld	r18, Z+
    67c0:	20 53       	subi	r18, 0x30	; 48
    67c2:	2a 30       	cpi	r18, 0x0A	; 10
    67c4:	c8 f3       	brcs	.-14     	; 0x67b8 <atoi+0x22>
    67c6:	1e f4       	brtc	.+6      	; 0x67ce <atoi+0x38>
    67c8:	90 95       	com	r25
    67ca:	81 95       	neg	r24
    67cc:	9f 4f       	sbci	r25, 0xFF	; 255
    67ce:	08 95       	ret

000067d0 <isupper>:
    67d0:	85 fd       	sbrc	r24, 5
    67d2:	31 c5       	rjmp	.+2658   	; 0x7236 <__ctype_isfalse>

000067d4 <isalpha>:
    67d4:	80 62       	ori	r24, 0x20	; 32

000067d6 <islower>:
    67d6:	91 11       	cpse	r25, r1
    67d8:	2e c5       	rjmp	.+2652   	; 0x7236 <__ctype_isfalse>
    67da:	81 56       	subi	r24, 0x61	; 97
    67dc:	8a 51       	subi	r24, 0x1A	; 26
    67de:	e0 f7       	brcc	.-8      	; 0x67d8 <islower+0x2>
    67e0:	08 95       	ret

000067e2 <isspace>:
    67e2:	91 11       	cpse	r25, r1
    67e4:	28 c5       	rjmp	.+2640   	; 0x7236 <__ctype_isfalse>
    67e6:	80 32       	cpi	r24, 0x20	; 32
    67e8:	19 f0       	breq	.+6      	; 0x67f0 <isspace+0xe>
    67ea:	89 50       	subi	r24, 0x09	; 9
    67ec:	85 50       	subi	r24, 0x05	; 5
    67ee:	d0 f7       	brcc	.-12     	; 0x67e4 <isspace+0x2>
    67f0:	08 95       	ret

000067f2 <tolower>:
    67f2:	91 11       	cpse	r25, r1
    67f4:	08 95       	ret
    67f6:	81 54       	subi	r24, 0x41	; 65
    67f8:	8a 51       	subi	r24, 0x1A	; 26
    67fa:	08 f4       	brcc	.+2      	; 0x67fe <tolower+0xc>
    67fc:	80 5e       	subi	r24, 0xE0	; 224
    67fe:	85 5a       	subi	r24, 0xA5	; 165
    6800:	08 95       	ret

00006802 <strcpy>:
    6802:	fb 01       	movw	r30, r22
    6804:	dc 01       	movw	r26, r24
    6806:	01 90       	ld	r0, Z+
    6808:	0d 92       	st	X+, r0
    680a:	00 20       	and	r0, r0
    680c:	e1 f7       	brne	.-8      	; 0x6806 <strcpy+0x4>
    680e:	08 95       	ret

00006810 <strncasecmp>:
    6810:	fb 01       	movw	r30, r22
    6812:	dc 01       	movw	r26, r24
    6814:	41 50       	subi	r20, 0x01	; 1
    6816:	50 40       	sbci	r21, 0x00	; 0
    6818:	88 f0       	brcs	.+34     	; 0x683c <strncasecmp+0x2c>
    681a:	8d 91       	ld	r24, X+
    681c:	81 34       	cpi	r24, 0x41	; 65
    681e:	1c f0       	brlt	.+6      	; 0x6826 <strncasecmp+0x16>
    6820:	8b 35       	cpi	r24, 0x5B	; 91
    6822:	0c f4       	brge	.+2      	; 0x6826 <strncasecmp+0x16>
    6824:	80 5e       	subi	r24, 0xE0	; 224
    6826:	61 91       	ld	r22, Z+
    6828:	61 34       	cpi	r22, 0x41	; 65
    682a:	1c f0       	brlt	.+6      	; 0x6832 <strncasecmp+0x22>
    682c:	6b 35       	cpi	r22, 0x5B	; 91
    682e:	0c f4       	brge	.+2      	; 0x6832 <strncasecmp+0x22>
    6830:	60 5e       	subi	r22, 0xE0	; 224
    6832:	86 1b       	sub	r24, r22
    6834:	61 11       	cpse	r22, r1
    6836:	71 f3       	breq	.-36     	; 0x6814 <strncasecmp+0x4>
    6838:	99 0b       	sbc	r25, r25
    683a:	08 95       	ret
    683c:	88 1b       	sub	r24, r24
    683e:	fc cf       	rjmp	.-8      	; 0x6838 <strncasecmp+0x28>

00006840 <strncmp>:
    6840:	fb 01       	movw	r30, r22
    6842:	dc 01       	movw	r26, r24
    6844:	41 50       	subi	r20, 0x01	; 1
    6846:	50 40       	sbci	r21, 0x00	; 0
    6848:	30 f0       	brcs	.+12     	; 0x6856 <strncmp+0x16>
    684a:	8d 91       	ld	r24, X+
    684c:	01 90       	ld	r0, Z+
    684e:	80 19       	sub	r24, r0
    6850:	19 f4       	brne	.+6      	; 0x6858 <strncmp+0x18>
    6852:	00 20       	and	r0, r0
    6854:	b9 f7       	brne	.-18     	; 0x6844 <strncmp+0x4>
    6856:	88 1b       	sub	r24, r24
    6858:	99 0b       	sbc	r25, r25
    685a:	08 95       	ret

0000685c <__mulhi_const_10>:
    685c:	7a e0       	ldi	r23, 0x0A	; 10
    685e:	97 9f       	mul	r25, r23
    6860:	90 2d       	mov	r25, r0
    6862:	87 9f       	mul	r24, r23
    6864:	80 2d       	mov	r24, r0
    6866:	91 0d       	add	r25, r1
    6868:	11 24       	eor	r1, r1
    686a:	08 95       	ret

0000686c <fdevopen>:
    686c:	0f 93       	push	r16
    686e:	1f 93       	push	r17
    6870:	cf 93       	push	r28
    6872:	df 93       	push	r29
    6874:	ec 01       	movw	r28, r24
    6876:	8b 01       	movw	r16, r22
    6878:	00 97       	sbiw	r24, 0x00	; 0
    687a:	31 f4       	brne	.+12     	; 0x6888 <fdevopen+0x1c>
    687c:	61 15       	cp	r22, r1
    687e:	71 05       	cpc	r23, r1
    6880:	19 f4       	brne	.+6      	; 0x6888 <fdevopen+0x1c>
    6882:	80 e0       	ldi	r24, 0x00	; 0
    6884:	90 e0       	ldi	r25, 0x00	; 0
    6886:	37 c0       	rjmp	.+110    	; 0x68f6 <fdevopen+0x8a>
    6888:	6e e0       	ldi	r22, 0x0E	; 14
    688a:	70 e0       	ldi	r23, 0x00	; 0
    688c:	81 e0       	ldi	r24, 0x01	; 1
    688e:	90 e0       	ldi	r25, 0x00	; 0
    6890:	63 d2       	rcall	.+1222   	; 0x6d58 <calloc>
    6892:	fc 01       	movw	r30, r24
    6894:	00 97       	sbiw	r24, 0x00	; 0
    6896:	a9 f3       	breq	.-22     	; 0x6882 <fdevopen+0x16>
    6898:	80 e8       	ldi	r24, 0x80	; 128
    689a:	83 83       	std	Z+3, r24	; 0x03
    689c:	01 15       	cp	r16, r1
    689e:	11 05       	cpc	r17, r1
    68a0:	71 f0       	breq	.+28     	; 0x68be <fdevopen+0x52>
    68a2:	13 87       	std	Z+11, r17	; 0x0b
    68a4:	02 87       	std	Z+10, r16	; 0x0a
    68a6:	81 e8       	ldi	r24, 0x81	; 129
    68a8:	83 83       	std	Z+3, r24	; 0x03
    68aa:	80 91 50 07 	lds	r24, 0x0750
    68ae:	90 91 51 07 	lds	r25, 0x0751
    68b2:	89 2b       	or	r24, r25
    68b4:	21 f4       	brne	.+8      	; 0x68be <fdevopen+0x52>
    68b6:	f0 93 51 07 	sts	0x0751, r31
    68ba:	e0 93 50 07 	sts	0x0750, r30
    68be:	20 97       	sbiw	r28, 0x00	; 0
    68c0:	c9 f0       	breq	.+50     	; 0x68f4 <fdevopen+0x88>
    68c2:	d1 87       	std	Z+9, r29	; 0x09
    68c4:	c0 87       	std	Z+8, r28	; 0x08
    68c6:	83 81       	ldd	r24, Z+3	; 0x03
    68c8:	82 60       	ori	r24, 0x02	; 2
    68ca:	83 83       	std	Z+3, r24	; 0x03
    68cc:	80 91 52 07 	lds	r24, 0x0752
    68d0:	90 91 53 07 	lds	r25, 0x0753
    68d4:	89 2b       	or	r24, r25
    68d6:	71 f4       	brne	.+28     	; 0x68f4 <fdevopen+0x88>
    68d8:	f0 93 53 07 	sts	0x0753, r31
    68dc:	e0 93 52 07 	sts	0x0752, r30
    68e0:	80 91 54 07 	lds	r24, 0x0754
    68e4:	90 91 55 07 	lds	r25, 0x0755
    68e8:	89 2b       	or	r24, r25
    68ea:	21 f4       	brne	.+8      	; 0x68f4 <fdevopen+0x88>
    68ec:	f0 93 55 07 	sts	0x0755, r31
    68f0:	e0 93 54 07 	sts	0x0754, r30
    68f4:	cf 01       	movw	r24, r30
    68f6:	df 91       	pop	r29
    68f8:	cf 91       	pop	r28
    68fa:	1f 91       	pop	r17
    68fc:	0f 91       	pop	r16
    68fe:	08 95       	ret

00006900 <printf>:
    6900:	cf 93       	push	r28
    6902:	df 93       	push	r29
    6904:	cd b7       	in	r28, 0x3d	; 61
    6906:	de b7       	in	r29, 0x3e	; 62
    6908:	fe 01       	movw	r30, r28
    690a:	35 96       	adiw	r30, 0x05	; 5
    690c:	61 91       	ld	r22, Z+
    690e:	71 91       	ld	r23, Z+
    6910:	af 01       	movw	r20, r30
    6912:	80 91 52 07 	lds	r24, 0x0752
    6916:	90 91 53 07 	lds	r25, 0x0753
    691a:	30 d0       	rcall	.+96     	; 0x697c <vfprintf>
    691c:	df 91       	pop	r29
    691e:	cf 91       	pop	r28
    6920:	08 95       	ret

00006922 <puts>:
    6922:	0f 93       	push	r16
    6924:	1f 93       	push	r17
    6926:	cf 93       	push	r28
    6928:	df 93       	push	r29
    692a:	e0 91 52 07 	lds	r30, 0x0752
    692e:	f0 91 53 07 	lds	r31, 0x0753
    6932:	23 81       	ldd	r18, Z+3	; 0x03
    6934:	21 ff       	sbrs	r18, 1
    6936:	1b c0       	rjmp	.+54     	; 0x696e <puts+0x4c>
    6938:	ec 01       	movw	r28, r24
    693a:	00 e0       	ldi	r16, 0x00	; 0
    693c:	10 e0       	ldi	r17, 0x00	; 0
    693e:	89 91       	ld	r24, Y+
    6940:	60 91 52 07 	lds	r22, 0x0752
    6944:	70 91 53 07 	lds	r23, 0x0753
    6948:	db 01       	movw	r26, r22
    694a:	18 96       	adiw	r26, 0x08	; 8
    694c:	ed 91       	ld	r30, X+
    694e:	fc 91       	ld	r31, X
    6950:	19 97       	sbiw	r26, 0x09	; 9
    6952:	88 23       	and	r24, r24
    6954:	31 f0       	breq	.+12     	; 0x6962 <puts+0x40>
    6956:	09 95       	icall
    6958:	89 2b       	or	r24, r25
    695a:	89 f3       	breq	.-30     	; 0x693e <puts+0x1c>
    695c:	0f ef       	ldi	r16, 0xFF	; 255
    695e:	1f ef       	ldi	r17, 0xFF	; 255
    6960:	ee cf       	rjmp	.-36     	; 0x693e <puts+0x1c>
    6962:	8a e0       	ldi	r24, 0x0A	; 10
    6964:	09 95       	icall
    6966:	89 2b       	or	r24, r25
    6968:	11 f4       	brne	.+4      	; 0x696e <puts+0x4c>
    696a:	c8 01       	movw	r24, r16
    696c:	02 c0       	rjmp	.+4      	; 0x6972 <puts+0x50>
    696e:	8f ef       	ldi	r24, 0xFF	; 255
    6970:	9f ef       	ldi	r25, 0xFF	; 255
    6972:	df 91       	pop	r29
    6974:	cf 91       	pop	r28
    6976:	1f 91       	pop	r17
    6978:	0f 91       	pop	r16
    697a:	08 95       	ret

0000697c <vfprintf>:
    697c:	2f 92       	push	r2
    697e:	3f 92       	push	r3
    6980:	4f 92       	push	r4
    6982:	5f 92       	push	r5
    6984:	6f 92       	push	r6
    6986:	7f 92       	push	r7
    6988:	8f 92       	push	r8
    698a:	9f 92       	push	r9
    698c:	af 92       	push	r10
    698e:	bf 92       	push	r11
    6990:	cf 92       	push	r12
    6992:	df 92       	push	r13
    6994:	ef 92       	push	r14
    6996:	ff 92       	push	r15
    6998:	0f 93       	push	r16
    699a:	1f 93       	push	r17
    699c:	cf 93       	push	r28
    699e:	df 93       	push	r29
    69a0:	cd b7       	in	r28, 0x3d	; 61
    69a2:	de b7       	in	r29, 0x3e	; 62
    69a4:	2c 97       	sbiw	r28, 0x0c	; 12
    69a6:	0f b6       	in	r0, 0x3f	; 63
    69a8:	f8 94       	cli
    69aa:	de bf       	out	0x3e, r29	; 62
    69ac:	0f be       	out	0x3f, r0	; 63
    69ae:	cd bf       	out	0x3d, r28	; 61
    69b0:	7c 01       	movw	r14, r24
    69b2:	6b 01       	movw	r12, r22
    69b4:	8a 01       	movw	r16, r20
    69b6:	fc 01       	movw	r30, r24
    69b8:	17 82       	std	Z+7, r1	; 0x07
    69ba:	16 82       	std	Z+6, r1	; 0x06
    69bc:	83 81       	ldd	r24, Z+3	; 0x03
    69be:	81 ff       	sbrs	r24, 1
    69c0:	b0 c1       	rjmp	.+864    	; 0x6d22 <vfprintf+0x3a6>
    69c2:	ce 01       	movw	r24, r28
    69c4:	01 96       	adiw	r24, 0x01	; 1
    69c6:	4c 01       	movw	r8, r24
    69c8:	f7 01       	movw	r30, r14
    69ca:	93 81       	ldd	r25, Z+3	; 0x03
    69cc:	f6 01       	movw	r30, r12
    69ce:	93 fd       	sbrc	r25, 3
    69d0:	85 91       	lpm	r24, Z+
    69d2:	93 ff       	sbrs	r25, 3
    69d4:	81 91       	ld	r24, Z+
    69d6:	6f 01       	movw	r12, r30
    69d8:	88 23       	and	r24, r24
    69da:	09 f4       	brne	.+2      	; 0x69de <vfprintf+0x62>
    69dc:	9e c1       	rjmp	.+828    	; 0x6d1a <vfprintf+0x39e>
    69de:	85 32       	cpi	r24, 0x25	; 37
    69e0:	39 f4       	brne	.+14     	; 0x69f0 <vfprintf+0x74>
    69e2:	93 fd       	sbrc	r25, 3
    69e4:	85 91       	lpm	r24, Z+
    69e6:	93 ff       	sbrs	r25, 3
    69e8:	81 91       	ld	r24, Z+
    69ea:	6f 01       	movw	r12, r30
    69ec:	85 32       	cpi	r24, 0x25	; 37
    69ee:	21 f4       	brne	.+8      	; 0x69f8 <vfprintf+0x7c>
    69f0:	b7 01       	movw	r22, r14
    69f2:	90 e0       	ldi	r25, 0x00	; 0
    69f4:	40 d4       	rcall	.+2176   	; 0x7276 <fputc>
    69f6:	e8 cf       	rjmp	.-48     	; 0x69c8 <vfprintf+0x4c>
    69f8:	51 2c       	mov	r5, r1
    69fa:	31 2c       	mov	r3, r1
    69fc:	20 e0       	ldi	r18, 0x00	; 0
    69fe:	20 32       	cpi	r18, 0x20	; 32
    6a00:	a0 f4       	brcc	.+40     	; 0x6a2a <vfprintf+0xae>
    6a02:	8b 32       	cpi	r24, 0x2B	; 43
    6a04:	69 f0       	breq	.+26     	; 0x6a20 <vfprintf+0xa4>
    6a06:	30 f4       	brcc	.+12     	; 0x6a14 <vfprintf+0x98>
    6a08:	80 32       	cpi	r24, 0x20	; 32
    6a0a:	59 f0       	breq	.+22     	; 0x6a22 <vfprintf+0xa6>
    6a0c:	83 32       	cpi	r24, 0x23	; 35
    6a0e:	69 f4       	brne	.+26     	; 0x6a2a <vfprintf+0xae>
    6a10:	20 61       	ori	r18, 0x10	; 16
    6a12:	2c c0       	rjmp	.+88     	; 0x6a6c <vfprintf+0xf0>
    6a14:	8d 32       	cpi	r24, 0x2D	; 45
    6a16:	39 f0       	breq	.+14     	; 0x6a26 <vfprintf+0xaa>
    6a18:	80 33       	cpi	r24, 0x30	; 48
    6a1a:	39 f4       	brne	.+14     	; 0x6a2a <vfprintf+0xae>
    6a1c:	21 60       	ori	r18, 0x01	; 1
    6a1e:	26 c0       	rjmp	.+76     	; 0x6a6c <vfprintf+0xf0>
    6a20:	22 60       	ori	r18, 0x02	; 2
    6a22:	24 60       	ori	r18, 0x04	; 4
    6a24:	23 c0       	rjmp	.+70     	; 0x6a6c <vfprintf+0xf0>
    6a26:	28 60       	ori	r18, 0x08	; 8
    6a28:	21 c0       	rjmp	.+66     	; 0x6a6c <vfprintf+0xf0>
    6a2a:	27 fd       	sbrc	r18, 7
    6a2c:	27 c0       	rjmp	.+78     	; 0x6a7c <vfprintf+0x100>
    6a2e:	30 ed       	ldi	r19, 0xD0	; 208
    6a30:	38 0f       	add	r19, r24
    6a32:	3a 30       	cpi	r19, 0x0A	; 10
    6a34:	78 f4       	brcc	.+30     	; 0x6a54 <vfprintf+0xd8>
    6a36:	26 ff       	sbrs	r18, 6
    6a38:	06 c0       	rjmp	.+12     	; 0x6a46 <vfprintf+0xca>
    6a3a:	fa e0       	ldi	r31, 0x0A	; 10
    6a3c:	5f 9e       	mul	r5, r31
    6a3e:	30 0d       	add	r19, r0
    6a40:	11 24       	eor	r1, r1
    6a42:	53 2e       	mov	r5, r19
    6a44:	13 c0       	rjmp	.+38     	; 0x6a6c <vfprintf+0xf0>
    6a46:	8a e0       	ldi	r24, 0x0A	; 10
    6a48:	38 9e       	mul	r3, r24
    6a4a:	30 0d       	add	r19, r0
    6a4c:	11 24       	eor	r1, r1
    6a4e:	33 2e       	mov	r3, r19
    6a50:	20 62       	ori	r18, 0x20	; 32
    6a52:	0c c0       	rjmp	.+24     	; 0x6a6c <vfprintf+0xf0>
    6a54:	8e 32       	cpi	r24, 0x2E	; 46
    6a56:	21 f4       	brne	.+8      	; 0x6a60 <vfprintf+0xe4>
    6a58:	26 fd       	sbrc	r18, 6
    6a5a:	5f c1       	rjmp	.+702    	; 0x6d1a <vfprintf+0x39e>
    6a5c:	20 64       	ori	r18, 0x40	; 64
    6a5e:	06 c0       	rjmp	.+12     	; 0x6a6c <vfprintf+0xf0>
    6a60:	8c 36       	cpi	r24, 0x6C	; 108
    6a62:	11 f4       	brne	.+4      	; 0x6a68 <vfprintf+0xec>
    6a64:	20 68       	ori	r18, 0x80	; 128
    6a66:	02 c0       	rjmp	.+4      	; 0x6a6c <vfprintf+0xf0>
    6a68:	88 36       	cpi	r24, 0x68	; 104
    6a6a:	41 f4       	brne	.+16     	; 0x6a7c <vfprintf+0x100>
    6a6c:	f6 01       	movw	r30, r12
    6a6e:	93 fd       	sbrc	r25, 3
    6a70:	85 91       	lpm	r24, Z+
    6a72:	93 ff       	sbrs	r25, 3
    6a74:	81 91       	ld	r24, Z+
    6a76:	6f 01       	movw	r12, r30
    6a78:	81 11       	cpse	r24, r1
    6a7a:	c1 cf       	rjmp	.-126    	; 0x69fe <vfprintf+0x82>
    6a7c:	98 2f       	mov	r25, r24
    6a7e:	9f 7d       	andi	r25, 0xDF	; 223
    6a80:	95 54       	subi	r25, 0x45	; 69
    6a82:	93 30       	cpi	r25, 0x03	; 3
    6a84:	28 f4       	brcc	.+10     	; 0x6a90 <vfprintf+0x114>
    6a86:	0c 5f       	subi	r16, 0xFC	; 252
    6a88:	1f 4f       	sbci	r17, 0xFF	; 255
    6a8a:	ff e3       	ldi	r31, 0x3F	; 63
    6a8c:	f9 83       	std	Y+1, r31	; 0x01
    6a8e:	0d c0       	rjmp	.+26     	; 0x6aaa <vfprintf+0x12e>
    6a90:	83 36       	cpi	r24, 0x63	; 99
    6a92:	31 f0       	breq	.+12     	; 0x6aa0 <vfprintf+0x124>
    6a94:	83 37       	cpi	r24, 0x73	; 115
    6a96:	71 f0       	breq	.+28     	; 0x6ab4 <vfprintf+0x138>
    6a98:	83 35       	cpi	r24, 0x53	; 83
    6a9a:	09 f0       	breq	.+2      	; 0x6a9e <vfprintf+0x122>
    6a9c:	57 c0       	rjmp	.+174    	; 0x6b4c <vfprintf+0x1d0>
    6a9e:	21 c0       	rjmp	.+66     	; 0x6ae2 <vfprintf+0x166>
    6aa0:	f8 01       	movw	r30, r16
    6aa2:	80 81       	ld	r24, Z
    6aa4:	89 83       	std	Y+1, r24	; 0x01
    6aa6:	0e 5f       	subi	r16, 0xFE	; 254
    6aa8:	1f 4f       	sbci	r17, 0xFF	; 255
    6aaa:	44 24       	eor	r4, r4
    6aac:	43 94       	inc	r4
    6aae:	51 2c       	mov	r5, r1
    6ab0:	54 01       	movw	r10, r8
    6ab2:	14 c0       	rjmp	.+40     	; 0x6adc <vfprintf+0x160>
    6ab4:	38 01       	movw	r6, r16
    6ab6:	f2 e0       	ldi	r31, 0x02	; 2
    6ab8:	6f 0e       	add	r6, r31
    6aba:	71 1c       	adc	r7, r1
    6abc:	f8 01       	movw	r30, r16
    6abe:	a0 80       	ld	r10, Z
    6ac0:	b1 80       	ldd	r11, Z+1	; 0x01
    6ac2:	26 ff       	sbrs	r18, 6
    6ac4:	03 c0       	rjmp	.+6      	; 0x6acc <vfprintf+0x150>
    6ac6:	65 2d       	mov	r22, r5
    6ac8:	70 e0       	ldi	r23, 0x00	; 0
    6aca:	02 c0       	rjmp	.+4      	; 0x6ad0 <vfprintf+0x154>
    6acc:	6f ef       	ldi	r22, 0xFF	; 255
    6ace:	7f ef       	ldi	r23, 0xFF	; 255
    6ad0:	c5 01       	movw	r24, r10
    6ad2:	2c 87       	std	Y+12, r18	; 0x0c
    6ad4:	c5 d3       	rcall	.+1930   	; 0x7260 <strnlen>
    6ad6:	2c 01       	movw	r4, r24
    6ad8:	83 01       	movw	r16, r6
    6ada:	2c 85       	ldd	r18, Y+12	; 0x0c
    6adc:	2f 77       	andi	r18, 0x7F	; 127
    6ade:	22 2e       	mov	r2, r18
    6ae0:	16 c0       	rjmp	.+44     	; 0x6b0e <vfprintf+0x192>
    6ae2:	38 01       	movw	r6, r16
    6ae4:	f2 e0       	ldi	r31, 0x02	; 2
    6ae6:	6f 0e       	add	r6, r31
    6ae8:	71 1c       	adc	r7, r1
    6aea:	f8 01       	movw	r30, r16
    6aec:	a0 80       	ld	r10, Z
    6aee:	b1 80       	ldd	r11, Z+1	; 0x01
    6af0:	26 ff       	sbrs	r18, 6
    6af2:	03 c0       	rjmp	.+6      	; 0x6afa <vfprintf+0x17e>
    6af4:	65 2d       	mov	r22, r5
    6af6:	70 e0       	ldi	r23, 0x00	; 0
    6af8:	02 c0       	rjmp	.+4      	; 0x6afe <vfprintf+0x182>
    6afa:	6f ef       	ldi	r22, 0xFF	; 255
    6afc:	7f ef       	ldi	r23, 0xFF	; 255
    6afe:	c5 01       	movw	r24, r10
    6b00:	2c 87       	std	Y+12, r18	; 0x0c
    6b02:	9c d3       	rcall	.+1848   	; 0x723c <strnlen_P>
    6b04:	2c 01       	movw	r4, r24
    6b06:	2c 85       	ldd	r18, Y+12	; 0x0c
    6b08:	20 68       	ori	r18, 0x80	; 128
    6b0a:	22 2e       	mov	r2, r18
    6b0c:	83 01       	movw	r16, r6
    6b0e:	23 fc       	sbrc	r2, 3
    6b10:	19 c0       	rjmp	.+50     	; 0x6b44 <vfprintf+0x1c8>
    6b12:	83 2d       	mov	r24, r3
    6b14:	90 e0       	ldi	r25, 0x00	; 0
    6b16:	48 16       	cp	r4, r24
    6b18:	59 06       	cpc	r5, r25
    6b1a:	a0 f4       	brcc	.+40     	; 0x6b44 <vfprintf+0x1c8>
    6b1c:	b7 01       	movw	r22, r14
    6b1e:	80 e2       	ldi	r24, 0x20	; 32
    6b20:	90 e0       	ldi	r25, 0x00	; 0
    6b22:	a9 d3       	rcall	.+1874   	; 0x7276 <fputc>
    6b24:	3a 94       	dec	r3
    6b26:	f5 cf       	rjmp	.-22     	; 0x6b12 <vfprintf+0x196>
    6b28:	f5 01       	movw	r30, r10
    6b2a:	27 fc       	sbrc	r2, 7
    6b2c:	85 91       	lpm	r24, Z+
    6b2e:	27 fe       	sbrs	r2, 7
    6b30:	81 91       	ld	r24, Z+
    6b32:	5f 01       	movw	r10, r30
    6b34:	b7 01       	movw	r22, r14
    6b36:	90 e0       	ldi	r25, 0x00	; 0
    6b38:	9e d3       	rcall	.+1852   	; 0x7276 <fputc>
    6b3a:	31 10       	cpse	r3, r1
    6b3c:	3a 94       	dec	r3
    6b3e:	f1 e0       	ldi	r31, 0x01	; 1
    6b40:	4f 1a       	sub	r4, r31
    6b42:	51 08       	sbc	r5, r1
    6b44:	41 14       	cp	r4, r1
    6b46:	51 04       	cpc	r5, r1
    6b48:	79 f7       	brne	.-34     	; 0x6b28 <vfprintf+0x1ac>
    6b4a:	de c0       	rjmp	.+444    	; 0x6d08 <vfprintf+0x38c>
    6b4c:	84 36       	cpi	r24, 0x64	; 100
    6b4e:	11 f0       	breq	.+4      	; 0x6b54 <vfprintf+0x1d8>
    6b50:	89 36       	cpi	r24, 0x69	; 105
    6b52:	31 f5       	brne	.+76     	; 0x6ba0 <vfprintf+0x224>
    6b54:	f8 01       	movw	r30, r16
    6b56:	27 ff       	sbrs	r18, 7
    6b58:	07 c0       	rjmp	.+14     	; 0x6b68 <vfprintf+0x1ec>
    6b5a:	60 81       	ld	r22, Z
    6b5c:	71 81       	ldd	r23, Z+1	; 0x01
    6b5e:	82 81       	ldd	r24, Z+2	; 0x02
    6b60:	93 81       	ldd	r25, Z+3	; 0x03
    6b62:	0c 5f       	subi	r16, 0xFC	; 252
    6b64:	1f 4f       	sbci	r17, 0xFF	; 255
    6b66:	08 c0       	rjmp	.+16     	; 0x6b78 <vfprintf+0x1fc>
    6b68:	60 81       	ld	r22, Z
    6b6a:	71 81       	ldd	r23, Z+1	; 0x01
    6b6c:	88 27       	eor	r24, r24
    6b6e:	77 fd       	sbrc	r23, 7
    6b70:	80 95       	com	r24
    6b72:	98 2f       	mov	r25, r24
    6b74:	0e 5f       	subi	r16, 0xFE	; 254
    6b76:	1f 4f       	sbci	r17, 0xFF	; 255
    6b78:	2f 76       	andi	r18, 0x6F	; 111
    6b7a:	b2 2e       	mov	r11, r18
    6b7c:	97 ff       	sbrs	r25, 7
    6b7e:	09 c0       	rjmp	.+18     	; 0x6b92 <vfprintf+0x216>
    6b80:	90 95       	com	r25
    6b82:	80 95       	com	r24
    6b84:	70 95       	com	r23
    6b86:	61 95       	neg	r22
    6b88:	7f 4f       	sbci	r23, 0xFF	; 255
    6b8a:	8f 4f       	sbci	r24, 0xFF	; 255
    6b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    6b8e:	20 68       	ori	r18, 0x80	; 128
    6b90:	b2 2e       	mov	r11, r18
    6b92:	2a e0       	ldi	r18, 0x0A	; 10
    6b94:	30 e0       	ldi	r19, 0x00	; 0
    6b96:	a4 01       	movw	r20, r8
    6b98:	a0 d3       	rcall	.+1856   	; 0x72da <__ultoa_invert>
    6b9a:	a8 2e       	mov	r10, r24
    6b9c:	a8 18       	sub	r10, r8
    6b9e:	43 c0       	rjmp	.+134    	; 0x6c26 <vfprintf+0x2aa>
    6ba0:	85 37       	cpi	r24, 0x75	; 117
    6ba2:	29 f4       	brne	.+10     	; 0x6bae <vfprintf+0x232>
    6ba4:	2f 7e       	andi	r18, 0xEF	; 239
    6ba6:	b2 2e       	mov	r11, r18
    6ba8:	2a e0       	ldi	r18, 0x0A	; 10
    6baa:	30 e0       	ldi	r19, 0x00	; 0
    6bac:	25 c0       	rjmp	.+74     	; 0x6bf8 <vfprintf+0x27c>
    6bae:	f2 2f       	mov	r31, r18
    6bb0:	f9 7f       	andi	r31, 0xF9	; 249
    6bb2:	bf 2e       	mov	r11, r31
    6bb4:	8f 36       	cpi	r24, 0x6F	; 111
    6bb6:	c1 f0       	breq	.+48     	; 0x6be8 <vfprintf+0x26c>
    6bb8:	18 f4       	brcc	.+6      	; 0x6bc0 <vfprintf+0x244>
    6bba:	88 35       	cpi	r24, 0x58	; 88
    6bbc:	79 f0       	breq	.+30     	; 0x6bdc <vfprintf+0x260>
    6bbe:	ad c0       	rjmp	.+346    	; 0x6d1a <vfprintf+0x39e>
    6bc0:	80 37       	cpi	r24, 0x70	; 112
    6bc2:	19 f0       	breq	.+6      	; 0x6bca <vfprintf+0x24e>
    6bc4:	88 37       	cpi	r24, 0x78	; 120
    6bc6:	21 f0       	breq	.+8      	; 0x6bd0 <vfprintf+0x254>
    6bc8:	a8 c0       	rjmp	.+336    	; 0x6d1a <vfprintf+0x39e>
    6bca:	2f 2f       	mov	r18, r31
    6bcc:	20 61       	ori	r18, 0x10	; 16
    6bce:	b2 2e       	mov	r11, r18
    6bd0:	b4 fe       	sbrs	r11, 4
    6bd2:	0d c0       	rjmp	.+26     	; 0x6bee <vfprintf+0x272>
    6bd4:	8b 2d       	mov	r24, r11
    6bd6:	84 60       	ori	r24, 0x04	; 4
    6bd8:	b8 2e       	mov	r11, r24
    6bda:	09 c0       	rjmp	.+18     	; 0x6bee <vfprintf+0x272>
    6bdc:	24 ff       	sbrs	r18, 4
    6bde:	0a c0       	rjmp	.+20     	; 0x6bf4 <vfprintf+0x278>
    6be0:	9f 2f       	mov	r25, r31
    6be2:	96 60       	ori	r25, 0x06	; 6
    6be4:	b9 2e       	mov	r11, r25
    6be6:	06 c0       	rjmp	.+12     	; 0x6bf4 <vfprintf+0x278>
    6be8:	28 e0       	ldi	r18, 0x08	; 8
    6bea:	30 e0       	ldi	r19, 0x00	; 0
    6bec:	05 c0       	rjmp	.+10     	; 0x6bf8 <vfprintf+0x27c>
    6bee:	20 e1       	ldi	r18, 0x10	; 16
    6bf0:	30 e0       	ldi	r19, 0x00	; 0
    6bf2:	02 c0       	rjmp	.+4      	; 0x6bf8 <vfprintf+0x27c>
    6bf4:	20 e1       	ldi	r18, 0x10	; 16
    6bf6:	32 e0       	ldi	r19, 0x02	; 2
    6bf8:	f8 01       	movw	r30, r16
    6bfa:	b7 fe       	sbrs	r11, 7
    6bfc:	07 c0       	rjmp	.+14     	; 0x6c0c <vfprintf+0x290>
    6bfe:	60 81       	ld	r22, Z
    6c00:	71 81       	ldd	r23, Z+1	; 0x01
    6c02:	82 81       	ldd	r24, Z+2	; 0x02
    6c04:	93 81       	ldd	r25, Z+3	; 0x03
    6c06:	0c 5f       	subi	r16, 0xFC	; 252
    6c08:	1f 4f       	sbci	r17, 0xFF	; 255
    6c0a:	06 c0       	rjmp	.+12     	; 0x6c18 <vfprintf+0x29c>
    6c0c:	60 81       	ld	r22, Z
    6c0e:	71 81       	ldd	r23, Z+1	; 0x01
    6c10:	80 e0       	ldi	r24, 0x00	; 0
    6c12:	90 e0       	ldi	r25, 0x00	; 0
    6c14:	0e 5f       	subi	r16, 0xFE	; 254
    6c16:	1f 4f       	sbci	r17, 0xFF	; 255
    6c18:	a4 01       	movw	r20, r8
    6c1a:	5f d3       	rcall	.+1726   	; 0x72da <__ultoa_invert>
    6c1c:	a8 2e       	mov	r10, r24
    6c1e:	a8 18       	sub	r10, r8
    6c20:	fb 2d       	mov	r31, r11
    6c22:	ff 77       	andi	r31, 0x7F	; 127
    6c24:	bf 2e       	mov	r11, r31
    6c26:	b6 fe       	sbrs	r11, 6
    6c28:	0b c0       	rjmp	.+22     	; 0x6c40 <vfprintf+0x2c4>
    6c2a:	2b 2d       	mov	r18, r11
    6c2c:	2e 7f       	andi	r18, 0xFE	; 254
    6c2e:	a5 14       	cp	r10, r5
    6c30:	50 f4       	brcc	.+20     	; 0x6c46 <vfprintf+0x2ca>
    6c32:	b4 fe       	sbrs	r11, 4
    6c34:	0a c0       	rjmp	.+20     	; 0x6c4a <vfprintf+0x2ce>
    6c36:	b2 fc       	sbrc	r11, 2
    6c38:	08 c0       	rjmp	.+16     	; 0x6c4a <vfprintf+0x2ce>
    6c3a:	2b 2d       	mov	r18, r11
    6c3c:	2e 7e       	andi	r18, 0xEE	; 238
    6c3e:	05 c0       	rjmp	.+10     	; 0x6c4a <vfprintf+0x2ce>
    6c40:	7a 2c       	mov	r7, r10
    6c42:	2b 2d       	mov	r18, r11
    6c44:	03 c0       	rjmp	.+6      	; 0x6c4c <vfprintf+0x2d0>
    6c46:	7a 2c       	mov	r7, r10
    6c48:	01 c0       	rjmp	.+2      	; 0x6c4c <vfprintf+0x2d0>
    6c4a:	75 2c       	mov	r7, r5
    6c4c:	24 ff       	sbrs	r18, 4
    6c4e:	0d c0       	rjmp	.+26     	; 0x6c6a <vfprintf+0x2ee>
    6c50:	fe 01       	movw	r30, r28
    6c52:	ea 0d       	add	r30, r10
    6c54:	f1 1d       	adc	r31, r1
    6c56:	80 81       	ld	r24, Z
    6c58:	80 33       	cpi	r24, 0x30	; 48
    6c5a:	11 f4       	brne	.+4      	; 0x6c60 <vfprintf+0x2e4>
    6c5c:	29 7e       	andi	r18, 0xE9	; 233
    6c5e:	09 c0       	rjmp	.+18     	; 0x6c72 <vfprintf+0x2f6>
    6c60:	22 ff       	sbrs	r18, 2
    6c62:	06 c0       	rjmp	.+12     	; 0x6c70 <vfprintf+0x2f4>
    6c64:	73 94       	inc	r7
    6c66:	73 94       	inc	r7
    6c68:	04 c0       	rjmp	.+8      	; 0x6c72 <vfprintf+0x2f6>
    6c6a:	82 2f       	mov	r24, r18
    6c6c:	86 78       	andi	r24, 0x86	; 134
    6c6e:	09 f0       	breq	.+2      	; 0x6c72 <vfprintf+0x2f6>
    6c70:	73 94       	inc	r7
    6c72:	23 fd       	sbrc	r18, 3
    6c74:	12 c0       	rjmp	.+36     	; 0x6c9a <vfprintf+0x31e>
    6c76:	20 ff       	sbrs	r18, 0
    6c78:	06 c0       	rjmp	.+12     	; 0x6c86 <vfprintf+0x30a>
    6c7a:	5a 2c       	mov	r5, r10
    6c7c:	73 14       	cp	r7, r3
    6c7e:	18 f4       	brcc	.+6      	; 0x6c86 <vfprintf+0x30a>
    6c80:	53 0c       	add	r5, r3
    6c82:	57 18       	sub	r5, r7
    6c84:	73 2c       	mov	r7, r3
    6c86:	73 14       	cp	r7, r3
    6c88:	60 f4       	brcc	.+24     	; 0x6ca2 <vfprintf+0x326>
    6c8a:	b7 01       	movw	r22, r14
    6c8c:	80 e2       	ldi	r24, 0x20	; 32
    6c8e:	90 e0       	ldi	r25, 0x00	; 0
    6c90:	2c 87       	std	Y+12, r18	; 0x0c
    6c92:	f1 d2       	rcall	.+1506   	; 0x7276 <fputc>
    6c94:	73 94       	inc	r7
    6c96:	2c 85       	ldd	r18, Y+12	; 0x0c
    6c98:	f6 cf       	rjmp	.-20     	; 0x6c86 <vfprintf+0x30a>
    6c9a:	73 14       	cp	r7, r3
    6c9c:	10 f4       	brcc	.+4      	; 0x6ca2 <vfprintf+0x326>
    6c9e:	37 18       	sub	r3, r7
    6ca0:	01 c0       	rjmp	.+2      	; 0x6ca4 <vfprintf+0x328>
    6ca2:	31 2c       	mov	r3, r1
    6ca4:	24 ff       	sbrs	r18, 4
    6ca6:	11 c0       	rjmp	.+34     	; 0x6cca <vfprintf+0x34e>
    6ca8:	b7 01       	movw	r22, r14
    6caa:	80 e3       	ldi	r24, 0x30	; 48
    6cac:	90 e0       	ldi	r25, 0x00	; 0
    6cae:	2c 87       	std	Y+12, r18	; 0x0c
    6cb0:	e2 d2       	rcall	.+1476   	; 0x7276 <fputc>
    6cb2:	2c 85       	ldd	r18, Y+12	; 0x0c
    6cb4:	22 ff       	sbrs	r18, 2
    6cb6:	16 c0       	rjmp	.+44     	; 0x6ce4 <vfprintf+0x368>
    6cb8:	21 ff       	sbrs	r18, 1
    6cba:	03 c0       	rjmp	.+6      	; 0x6cc2 <vfprintf+0x346>
    6cbc:	88 e5       	ldi	r24, 0x58	; 88
    6cbe:	90 e0       	ldi	r25, 0x00	; 0
    6cc0:	02 c0       	rjmp	.+4      	; 0x6cc6 <vfprintf+0x34a>
    6cc2:	88 e7       	ldi	r24, 0x78	; 120
    6cc4:	90 e0       	ldi	r25, 0x00	; 0
    6cc6:	b7 01       	movw	r22, r14
    6cc8:	0c c0       	rjmp	.+24     	; 0x6ce2 <vfprintf+0x366>
    6cca:	82 2f       	mov	r24, r18
    6ccc:	86 78       	andi	r24, 0x86	; 134
    6cce:	51 f0       	breq	.+20     	; 0x6ce4 <vfprintf+0x368>
    6cd0:	21 fd       	sbrc	r18, 1
    6cd2:	02 c0       	rjmp	.+4      	; 0x6cd8 <vfprintf+0x35c>
    6cd4:	80 e2       	ldi	r24, 0x20	; 32
    6cd6:	01 c0       	rjmp	.+2      	; 0x6cda <vfprintf+0x35e>
    6cd8:	8b e2       	ldi	r24, 0x2B	; 43
    6cda:	27 fd       	sbrc	r18, 7
    6cdc:	8d e2       	ldi	r24, 0x2D	; 45
    6cde:	b7 01       	movw	r22, r14
    6ce0:	90 e0       	ldi	r25, 0x00	; 0
    6ce2:	c9 d2       	rcall	.+1426   	; 0x7276 <fputc>
    6ce4:	a5 14       	cp	r10, r5
    6ce6:	30 f4       	brcc	.+12     	; 0x6cf4 <vfprintf+0x378>
    6ce8:	b7 01       	movw	r22, r14
    6cea:	80 e3       	ldi	r24, 0x30	; 48
    6cec:	90 e0       	ldi	r25, 0x00	; 0
    6cee:	c3 d2       	rcall	.+1414   	; 0x7276 <fputc>
    6cf0:	5a 94       	dec	r5
    6cf2:	f8 cf       	rjmp	.-16     	; 0x6ce4 <vfprintf+0x368>
    6cf4:	aa 94       	dec	r10
    6cf6:	f4 01       	movw	r30, r8
    6cf8:	ea 0d       	add	r30, r10
    6cfa:	f1 1d       	adc	r31, r1
    6cfc:	80 81       	ld	r24, Z
    6cfe:	b7 01       	movw	r22, r14
    6d00:	90 e0       	ldi	r25, 0x00	; 0
    6d02:	b9 d2       	rcall	.+1394   	; 0x7276 <fputc>
    6d04:	a1 10       	cpse	r10, r1
    6d06:	f6 cf       	rjmp	.-20     	; 0x6cf4 <vfprintf+0x378>
    6d08:	33 20       	and	r3, r3
    6d0a:	09 f4       	brne	.+2      	; 0x6d0e <vfprintf+0x392>
    6d0c:	5d ce       	rjmp	.-838    	; 0x69c8 <vfprintf+0x4c>
    6d0e:	b7 01       	movw	r22, r14
    6d10:	80 e2       	ldi	r24, 0x20	; 32
    6d12:	90 e0       	ldi	r25, 0x00	; 0
    6d14:	b0 d2       	rcall	.+1376   	; 0x7276 <fputc>
    6d16:	3a 94       	dec	r3
    6d18:	f7 cf       	rjmp	.-18     	; 0x6d08 <vfprintf+0x38c>
    6d1a:	f7 01       	movw	r30, r14
    6d1c:	86 81       	ldd	r24, Z+6	; 0x06
    6d1e:	97 81       	ldd	r25, Z+7	; 0x07
    6d20:	02 c0       	rjmp	.+4      	; 0x6d26 <vfprintf+0x3aa>
    6d22:	8f ef       	ldi	r24, 0xFF	; 255
    6d24:	9f ef       	ldi	r25, 0xFF	; 255
    6d26:	2c 96       	adiw	r28, 0x0c	; 12
    6d28:	0f b6       	in	r0, 0x3f	; 63
    6d2a:	f8 94       	cli
    6d2c:	de bf       	out	0x3e, r29	; 62
    6d2e:	0f be       	out	0x3f, r0	; 63
    6d30:	cd bf       	out	0x3d, r28	; 61
    6d32:	df 91       	pop	r29
    6d34:	cf 91       	pop	r28
    6d36:	1f 91       	pop	r17
    6d38:	0f 91       	pop	r16
    6d3a:	ff 90       	pop	r15
    6d3c:	ef 90       	pop	r14
    6d3e:	df 90       	pop	r13
    6d40:	cf 90       	pop	r12
    6d42:	bf 90       	pop	r11
    6d44:	af 90       	pop	r10
    6d46:	9f 90       	pop	r9
    6d48:	8f 90       	pop	r8
    6d4a:	7f 90       	pop	r7
    6d4c:	6f 90       	pop	r6
    6d4e:	5f 90       	pop	r5
    6d50:	4f 90       	pop	r4
    6d52:	3f 90       	pop	r3
    6d54:	2f 90       	pop	r2
    6d56:	08 95       	ret

00006d58 <calloc>:
    6d58:	0f 93       	push	r16
    6d5a:	1f 93       	push	r17
    6d5c:	cf 93       	push	r28
    6d5e:	df 93       	push	r29
    6d60:	86 9f       	mul	r24, r22
    6d62:	80 01       	movw	r16, r0
    6d64:	87 9f       	mul	r24, r23
    6d66:	10 0d       	add	r17, r0
    6d68:	96 9f       	mul	r25, r22
    6d6a:	10 0d       	add	r17, r0
    6d6c:	11 24       	eor	r1, r1
    6d6e:	c8 01       	movw	r24, r16
    6d70:	da da       	rcall	.-2636   	; 0x6326 <malloc>
    6d72:	ec 01       	movw	r28, r24
    6d74:	00 97       	sbiw	r24, 0x00	; 0
    6d76:	21 f0       	breq	.+8      	; 0x6d80 <calloc+0x28>
    6d78:	a8 01       	movw	r20, r16
    6d7a:	60 e0       	ldi	r22, 0x00	; 0
    6d7c:	70 e0       	ldi	r23, 0x00	; 0
    6d7e:	69 d2       	rcall	.+1234   	; 0x7252 <memset>
    6d80:	ce 01       	movw	r24, r28
    6d82:	df 91       	pop	r29
    6d84:	cf 91       	pop	r28
    6d86:	1f 91       	pop	r17
    6d88:	0f 91       	pop	r16
    6d8a:	08 95       	ret

00006d8c <dtoa_prf>:
    6d8c:	6f 92       	push	r6
    6d8e:	7f 92       	push	r7
    6d90:	9f 92       	push	r9
    6d92:	af 92       	push	r10
    6d94:	bf 92       	push	r11
    6d96:	cf 92       	push	r12
    6d98:	df 92       	push	r13
    6d9a:	ef 92       	push	r14
    6d9c:	ff 92       	push	r15
    6d9e:	0f 93       	push	r16
    6da0:	1f 93       	push	r17
    6da2:	cf 93       	push	r28
    6da4:	df 93       	push	r29
    6da6:	cd b7       	in	r28, 0x3d	; 61
    6da8:	de b7       	in	r29, 0x3e	; 62
    6daa:	29 97       	sbiw	r28, 0x09	; 9
    6dac:	0f b6       	in	r0, 0x3f	; 63
    6dae:	f8 94       	cli
    6db0:	de bf       	out	0x3e, r29	; 62
    6db2:	0f be       	out	0x3f, r0	; 63
    6db4:	cd bf       	out	0x3d, r28	; 61
    6db6:	6a 01       	movw	r12, r20
    6db8:	b2 2e       	mov	r11, r18
    6dba:	10 2f       	mov	r17, r16
    6dbc:	0c 33       	cpi	r16, 0x3C	; 60
    6dbe:	20 f4       	brcc	.+8      	; 0x6dc8 <dtoa_prf+0x3c>
    6dc0:	ff 24       	eor	r15, r15
    6dc2:	f3 94       	inc	r15
    6dc4:	f0 0e       	add	r15, r16
    6dc6:	02 c0       	rjmp	.+4      	; 0x6dcc <dtoa_prf+0x40>
    6dc8:	4c e3       	ldi	r20, 0x3C	; 60
    6dca:	f4 2e       	mov	r15, r20
    6dcc:	0f 2d       	mov	r16, r15
    6dce:	27 e0       	ldi	r18, 0x07	; 7
    6dd0:	ae 01       	movw	r20, r28
    6dd2:	4f 5f       	subi	r20, 0xFF	; 255
    6dd4:	5f 4f       	sbci	r21, 0xFF	; 255
    6dd6:	57 d1       	rcall	.+686    	; 0x7086 <__ftoa_engine>
    6dd8:	79 81       	ldd	r23, Y+1	; 0x01
    6dda:	27 2f       	mov	r18, r23
    6ddc:	29 70       	andi	r18, 0x09	; 9
    6dde:	21 30       	cpi	r18, 0x01	; 1
    6de0:	31 f0       	breq	.+12     	; 0x6dee <dtoa_prf+0x62>
    6de2:	e1 fc       	sbrc	r14, 1
    6de4:	06 c0       	rjmp	.+12     	; 0x6df2 <dtoa_prf+0x66>
    6de6:	e0 fc       	sbrc	r14, 0
    6de8:	06 c0       	rjmp	.+12     	; 0x6df6 <dtoa_prf+0x6a>
    6dea:	60 e0       	ldi	r22, 0x00	; 0
    6dec:	05 c0       	rjmp	.+10     	; 0x6df8 <dtoa_prf+0x6c>
    6dee:	6d e2       	ldi	r22, 0x2D	; 45
    6df0:	03 c0       	rjmp	.+6      	; 0x6df8 <dtoa_prf+0x6c>
    6df2:	6b e2       	ldi	r22, 0x2B	; 43
    6df4:	01 c0       	rjmp	.+2      	; 0x6df8 <dtoa_prf+0x6c>
    6df6:	60 e2       	ldi	r22, 0x20	; 32
    6df8:	ae 2d       	mov	r26, r14
    6dfa:	a0 71       	andi	r26, 0x10	; 16
    6dfc:	73 ff       	sbrs	r23, 3
    6dfe:	36 c0       	rjmp	.+108    	; 0x6e6c <dtoa_prf+0xe0>
    6e00:	66 23       	and	r22, r22
    6e02:	11 f0       	breq	.+4      	; 0x6e08 <dtoa_prf+0x7c>
    6e04:	84 e0       	ldi	r24, 0x04	; 4
    6e06:	01 c0       	rjmp	.+2      	; 0x6e0a <dtoa_prf+0x7e>
    6e08:	83 e0       	ldi	r24, 0x03	; 3
    6e0a:	8b 15       	cp	r24, r11
    6e0c:	10 f4       	brcc	.+4      	; 0x6e12 <dtoa_prf+0x86>
    6e0e:	b8 1a       	sub	r11, r24
    6e10:	01 c0       	rjmp	.+2      	; 0x6e14 <dtoa_prf+0x88>
    6e12:	b1 2c       	mov	r11, r1
    6e14:	a1 11       	cpse	r26, r1
    6e16:	0b c0       	rjmp	.+22     	; 0x6e2e <dtoa_prf+0xa2>
    6e18:	f6 01       	movw	r30, r12
    6e1a:	8b 2d       	mov	r24, r11
    6e1c:	90 e2       	ldi	r25, 0x20	; 32
    6e1e:	88 23       	and	r24, r24
    6e20:	19 f0       	breq	.+6      	; 0x6e28 <dtoa_prf+0x9c>
    6e22:	91 93       	st	Z+, r25
    6e24:	81 50       	subi	r24, 0x01	; 1
    6e26:	fb cf       	rjmp	.-10     	; 0x6e1e <dtoa_prf+0x92>
    6e28:	cb 0c       	add	r12, r11
    6e2a:	d1 1c       	adc	r13, r1
    6e2c:	b1 2c       	mov	r11, r1
    6e2e:	66 23       	and	r22, r22
    6e30:	31 f0       	breq	.+12     	; 0x6e3e <dtoa_prf+0xb2>
    6e32:	f6 01       	movw	r30, r12
    6e34:	60 83       	st	Z, r22
    6e36:	96 01       	movw	r18, r12
    6e38:	2f 5f       	subi	r18, 0xFF	; 255
    6e3a:	3f 4f       	sbci	r19, 0xFF	; 255
    6e3c:	69 01       	movw	r12, r18
    6e3e:	c6 01       	movw	r24, r12
    6e40:	03 96       	adiw	r24, 0x03	; 3
    6e42:	e2 fe       	sbrs	r14, 2
    6e44:	05 c0       	rjmp	.+10     	; 0x6e50 <dtoa_prf+0xc4>
    6e46:	2e e4       	ldi	r18, 0x4E	; 78
    6e48:	f6 01       	movw	r30, r12
    6e4a:	20 83       	st	Z, r18
    6e4c:	31 e4       	ldi	r19, 0x41	; 65
    6e4e:	04 c0       	rjmp	.+8      	; 0x6e58 <dtoa_prf+0xcc>
    6e50:	2e e6       	ldi	r18, 0x6E	; 110
    6e52:	f6 01       	movw	r30, r12
    6e54:	20 83       	st	Z, r18
    6e56:	31 e6       	ldi	r19, 0x61	; 97
    6e58:	31 83       	std	Z+1, r19	; 0x01
    6e5a:	22 83       	std	Z+2, r18	; 0x02
    6e5c:	fc 01       	movw	r30, r24
    6e5e:	2b 2d       	mov	r18, r11
    6e60:	30 e2       	ldi	r19, 0x20	; 32
    6e62:	22 23       	and	r18, r18
    6e64:	f1 f1       	breq	.+124    	; 0x6ee2 <dtoa_prf+0x156>
    6e66:	31 93       	st	Z+, r19
    6e68:	21 50       	subi	r18, 0x01	; 1
    6e6a:	fb cf       	rjmp	.-10     	; 0x6e62 <dtoa_prf+0xd6>
    6e6c:	72 ff       	sbrs	r23, 2
    6e6e:	40 c0       	rjmp	.+128    	; 0x6ef0 <dtoa_prf+0x164>
    6e70:	66 23       	and	r22, r22
    6e72:	11 f0       	breq	.+4      	; 0x6e78 <dtoa_prf+0xec>
    6e74:	84 e0       	ldi	r24, 0x04	; 4
    6e76:	01 c0       	rjmp	.+2      	; 0x6e7a <dtoa_prf+0xee>
    6e78:	83 e0       	ldi	r24, 0x03	; 3
    6e7a:	8b 15       	cp	r24, r11
    6e7c:	10 f4       	brcc	.+4      	; 0x6e82 <dtoa_prf+0xf6>
    6e7e:	b8 1a       	sub	r11, r24
    6e80:	01 c0       	rjmp	.+2      	; 0x6e84 <dtoa_prf+0xf8>
    6e82:	b1 2c       	mov	r11, r1
    6e84:	a1 11       	cpse	r26, r1
    6e86:	0b c0       	rjmp	.+22     	; 0x6e9e <dtoa_prf+0x112>
    6e88:	f6 01       	movw	r30, r12
    6e8a:	8b 2d       	mov	r24, r11
    6e8c:	90 e2       	ldi	r25, 0x20	; 32
    6e8e:	88 23       	and	r24, r24
    6e90:	19 f0       	breq	.+6      	; 0x6e98 <dtoa_prf+0x10c>
    6e92:	91 93       	st	Z+, r25
    6e94:	81 50       	subi	r24, 0x01	; 1
    6e96:	fb cf       	rjmp	.-10     	; 0x6e8e <dtoa_prf+0x102>
    6e98:	cb 0c       	add	r12, r11
    6e9a:	d1 1c       	adc	r13, r1
    6e9c:	b1 2c       	mov	r11, r1
    6e9e:	66 23       	and	r22, r22
    6ea0:	31 f0       	breq	.+12     	; 0x6eae <dtoa_prf+0x122>
    6ea2:	f6 01       	movw	r30, r12
    6ea4:	60 83       	st	Z, r22
    6ea6:	96 01       	movw	r18, r12
    6ea8:	2f 5f       	subi	r18, 0xFF	; 255
    6eaa:	3f 4f       	sbci	r19, 0xFF	; 255
    6eac:	69 01       	movw	r12, r18
    6eae:	c6 01       	movw	r24, r12
    6eb0:	03 96       	adiw	r24, 0x03	; 3
    6eb2:	e2 fe       	sbrs	r14, 2
    6eb4:	07 c0       	rjmp	.+14     	; 0x6ec4 <dtoa_prf+0x138>
    6eb6:	29 e4       	ldi	r18, 0x49	; 73
    6eb8:	f6 01       	movw	r30, r12
    6eba:	20 83       	st	Z, r18
    6ebc:	2e e4       	ldi	r18, 0x4E	; 78
    6ebe:	21 83       	std	Z+1, r18	; 0x01
    6ec0:	26 e4       	ldi	r18, 0x46	; 70
    6ec2:	06 c0       	rjmp	.+12     	; 0x6ed0 <dtoa_prf+0x144>
    6ec4:	29 e6       	ldi	r18, 0x69	; 105
    6ec6:	f6 01       	movw	r30, r12
    6ec8:	20 83       	st	Z, r18
    6eca:	2e e6       	ldi	r18, 0x6E	; 110
    6ecc:	21 83       	std	Z+1, r18	; 0x01
    6ece:	26 e6       	ldi	r18, 0x66	; 102
    6ed0:	22 83       	std	Z+2, r18	; 0x02
    6ed2:	fc 01       	movw	r30, r24
    6ed4:	2b 2d       	mov	r18, r11
    6ed6:	30 e2       	ldi	r19, 0x20	; 32
    6ed8:	22 23       	and	r18, r18
    6eda:	19 f0       	breq	.+6      	; 0x6ee2 <dtoa_prf+0x156>
    6edc:	31 93       	st	Z+, r19
    6ede:	21 50       	subi	r18, 0x01	; 1
    6ee0:	fb cf       	rjmp	.-10     	; 0x6ed8 <dtoa_prf+0x14c>
    6ee2:	fc 01       	movw	r30, r24
    6ee4:	eb 0d       	add	r30, r11
    6ee6:	f1 1d       	adc	r31, r1
    6ee8:	10 82       	st	Z, r1
    6eea:	8e ef       	ldi	r24, 0xFE	; 254
    6eec:	9f ef       	ldi	r25, 0xFF	; 255
    6eee:	b7 c0       	rjmp	.+366    	; 0x705e <dtoa_prf+0x2d2>
    6ef0:	b1 e0       	ldi	r27, 0x01	; 1
    6ef2:	61 11       	cpse	r22, r1
    6ef4:	01 c0       	rjmp	.+2      	; 0x6ef8 <dtoa_prf+0x16c>
    6ef6:	b0 e0       	ldi	r27, 0x00	; 0
    6ef8:	4b 2f       	mov	r20, r27
    6efa:	50 e0       	ldi	r21, 0x00	; 0
    6efc:	18 16       	cp	r1, r24
    6efe:	19 06       	cpc	r1, r25
    6f00:	24 f4       	brge	.+8      	; 0x6f0a <dtoa_prf+0x17e>
    6f02:	9c 01       	movw	r18, r24
    6f04:	2f 5f       	subi	r18, 0xFF	; 255
    6f06:	3f 4f       	sbci	r19, 0xFF	; 255
    6f08:	02 c0       	rjmp	.+4      	; 0x6f0e <dtoa_prf+0x182>
    6f0a:	21 e0       	ldi	r18, 0x01	; 1
    6f0c:	30 e0       	ldi	r19, 0x00	; 0
    6f0e:	24 0f       	add	r18, r20
    6f10:	35 1f       	adc	r19, r21
    6f12:	11 23       	and	r17, r17
    6f14:	29 f0       	breq	.+10     	; 0x6f20 <dtoa_prf+0x194>
    6f16:	41 2f       	mov	r20, r17
    6f18:	50 e0       	ldi	r21, 0x00	; 0
    6f1a:	4f 5f       	subi	r20, 0xFF	; 255
    6f1c:	5f 4f       	sbci	r21, 0xFF	; 255
    6f1e:	02 c0       	rjmp	.+4      	; 0x6f24 <dtoa_prf+0x198>
    6f20:	40 e0       	ldi	r20, 0x00	; 0
    6f22:	50 e0       	ldi	r21, 0x00	; 0
    6f24:	42 0f       	add	r20, r18
    6f26:	53 1f       	adc	r21, r19
    6f28:	2b 2d       	mov	r18, r11
    6f2a:	30 e0       	ldi	r19, 0x00	; 0
    6f2c:	42 17       	cp	r20, r18
    6f2e:	53 07       	cpc	r21, r19
    6f30:	14 f4       	brge	.+4      	; 0x6f36 <dtoa_prf+0x1aa>
    6f32:	b4 1a       	sub	r11, r20
    6f34:	01 c0       	rjmp	.+2      	; 0x6f38 <dtoa_prf+0x1ac>
    6f36:	b1 2c       	mov	r11, r1
    6f38:	2e 2d       	mov	r18, r14
    6f3a:	28 71       	andi	r18, 0x18	; 24
    6f3c:	59 f4       	brne	.+22     	; 0x6f54 <dtoa_prf+0x1c8>
    6f3e:	f6 01       	movw	r30, r12
    6f40:	2b 2d       	mov	r18, r11
    6f42:	30 e2       	ldi	r19, 0x20	; 32
    6f44:	22 23       	and	r18, r18
    6f46:	19 f0       	breq	.+6      	; 0x6f4e <dtoa_prf+0x1c2>
    6f48:	31 93       	st	Z+, r19
    6f4a:	21 50       	subi	r18, 0x01	; 1
    6f4c:	fb cf       	rjmp	.-10     	; 0x6f44 <dtoa_prf+0x1b8>
    6f4e:	cb 0c       	add	r12, r11
    6f50:	d1 1c       	adc	r13, r1
    6f52:	b1 2c       	mov	r11, r1
    6f54:	bb 23       	and	r27, r27
    6f56:	31 f0       	breq	.+12     	; 0x6f64 <dtoa_prf+0x1d8>
    6f58:	f6 01       	movw	r30, r12
    6f5a:	60 83       	st	Z, r22
    6f5c:	96 01       	movw	r18, r12
    6f5e:	2f 5f       	subi	r18, 0xFF	; 255
    6f60:	3f 4f       	sbci	r19, 0xFF	; 255
    6f62:	69 01       	movw	r12, r18
    6f64:	a1 11       	cpse	r26, r1
    6f66:	0b c0       	rjmp	.+22     	; 0x6f7e <dtoa_prf+0x1f2>
    6f68:	f6 01       	movw	r30, r12
    6f6a:	2b 2d       	mov	r18, r11
    6f6c:	30 e3       	ldi	r19, 0x30	; 48
    6f6e:	22 23       	and	r18, r18
    6f70:	19 f0       	breq	.+6      	; 0x6f78 <dtoa_prf+0x1ec>
    6f72:	31 93       	st	Z+, r19
    6f74:	21 50       	subi	r18, 0x01	; 1
    6f76:	fb cf       	rjmp	.-10     	; 0x6f6e <dtoa_prf+0x1e2>
    6f78:	cb 0c       	add	r12, r11
    6f7a:	d1 1c       	adc	r13, r1
    6f7c:	b1 2c       	mov	r11, r1
    6f7e:	f8 0e       	add	r15, r24
    6f80:	0a 81       	ldd	r16, Y+2	; 0x02
    6f82:	37 2f       	mov	r19, r23
    6f84:	30 71       	andi	r19, 0x10	; 16
    6f86:	a3 2e       	mov	r10, r19
    6f88:	74 ff       	sbrs	r23, 4
    6f8a:	03 c0       	rjmp	.+6      	; 0x6f92 <dtoa_prf+0x206>
    6f8c:	01 33       	cpi	r16, 0x31	; 49
    6f8e:	09 f4       	brne	.+2      	; 0x6f92 <dtoa_prf+0x206>
    6f90:	fa 94       	dec	r15
    6f92:	1f 14       	cp	r1, r15
    6f94:	2c f4       	brge	.+10     	; 0x6fa0 <dtoa_prf+0x214>
    6f96:	2f 2d       	mov	r18, r15
    6f98:	29 30       	cpi	r18, 0x09	; 9
    6f9a:	18 f0       	brcs	.+6      	; 0x6fa2 <dtoa_prf+0x216>
    6f9c:	28 e0       	ldi	r18, 0x08	; 8
    6f9e:	01 c0       	rjmp	.+2      	; 0x6fa2 <dtoa_prf+0x216>
    6fa0:	21 e0       	ldi	r18, 0x01	; 1
    6fa2:	68 2f       	mov	r22, r24
    6fa4:	39 2f       	mov	r19, r25
    6fa6:	97 ff       	sbrs	r25, 7
    6fa8:	02 c0       	rjmp	.+4      	; 0x6fae <dtoa_prf+0x222>
    6faa:	60 e0       	ldi	r22, 0x00	; 0
    6fac:	30 e0       	ldi	r19, 0x00	; 0
    6fae:	46 2f       	mov	r20, r22
    6fb0:	53 2f       	mov	r21, r19
    6fb2:	61 2c       	mov	r6, r1
    6fb4:	71 2c       	mov	r7, r1
    6fb6:	3e e2       	ldi	r19, 0x2E	; 46
    6fb8:	93 2e       	mov	r9, r19
    6fba:	bc 01       	movw	r22, r24
    6fbc:	62 1b       	sub	r22, r18
    6fbe:	71 09       	sbc	r23, r1
    6fc0:	9b 01       	movw	r18, r22
    6fc2:	dc 01       	movw	r26, r24
    6fc4:	a4 1b       	sub	r26, r20
    6fc6:	b5 0b       	sbc	r27, r21
    6fc8:	e1 e0       	ldi	r30, 0x01	; 1
    6fca:	f0 e0       	ldi	r31, 0x00	; 0
    6fcc:	ec 0f       	add	r30, r28
    6fce:	fd 1f       	adc	r31, r29
    6fd0:	ae 0f       	add	r26, r30
    6fd2:	bf 1f       	adc	r27, r31
    6fd4:	e1 2e       	mov	r14, r17
    6fd6:	f1 2c       	mov	r15, r1
    6fd8:	f1 94       	neg	r15
    6fda:	e1 94       	neg	r14
    6fdc:	f1 08       	sbc	r15, r1
    6fde:	4f 3f       	cpi	r20, 0xFF	; 255
    6fe0:	ff ef       	ldi	r31, 0xFF	; 255
    6fe2:	5f 07       	cpc	r21, r31
    6fe4:	31 f4       	brne	.+12     	; 0x6ff2 <dtoa_prf+0x266>
    6fe6:	f6 01       	movw	r30, r12
    6fe8:	90 82       	st	Z, r9
    6fea:	b6 01       	movw	r22, r12
    6fec:	6f 5f       	subi	r22, 0xFF	; 255
    6fee:	7f 4f       	sbci	r23, 0xFF	; 255
    6ff0:	6b 01       	movw	r12, r22
    6ff2:	84 17       	cp	r24, r20
    6ff4:	95 07       	cpc	r25, r21
    6ff6:	4c f0       	brlt	.+18     	; 0x700a <dtoa_prf+0x27e>
    6ff8:	24 17       	cp	r18, r20
    6ffa:	35 07       	cpc	r19, r21
    6ffc:	34 f4       	brge	.+12     	; 0x700a <dtoa_prf+0x27e>
    6ffe:	bd 01       	movw	r22, r26
    7000:	66 0d       	add	r22, r6
    7002:	77 1d       	adc	r23, r7
    7004:	fb 01       	movw	r30, r22
    7006:	11 81       	ldd	r17, Z+1	; 0x01
    7008:	01 c0       	rjmp	.+2      	; 0x700c <dtoa_prf+0x280>
    700a:	10 e3       	ldi	r17, 0x30	; 48
    700c:	41 50       	subi	r20, 0x01	; 1
    700e:	51 09       	sbc	r21, r1
    7010:	ff ef       	ldi	r31, 0xFF	; 255
    7012:	6f 1a       	sub	r6, r31
    7014:	7f 0a       	sbc	r7, r31
    7016:	b6 01       	movw	r22, r12
    7018:	6f 5f       	subi	r22, 0xFF	; 255
    701a:	7f 4f       	sbci	r23, 0xFF	; 255
    701c:	4e 15       	cp	r20, r14
    701e:	5f 05       	cpc	r21, r15
    7020:	24 f0       	brlt	.+8      	; 0x702a <dtoa_prf+0x29e>
    7022:	f6 01       	movw	r30, r12
    7024:	10 83       	st	Z, r17
    7026:	6b 01       	movw	r12, r22
    7028:	da cf       	rjmp	.-76     	; 0x6fde <dtoa_prf+0x252>
    702a:	48 17       	cp	r20, r24
    702c:	59 07       	cpc	r21, r25
    702e:	39 f4       	brne	.+14     	; 0x703e <dtoa_prf+0x2b2>
    7030:	06 33       	cpi	r16, 0x36	; 54
    7032:	20 f4       	brcc	.+8      	; 0x703c <dtoa_prf+0x2b0>
    7034:	05 33       	cpi	r16, 0x35	; 53
    7036:	19 f4       	brne	.+6      	; 0x703e <dtoa_prf+0x2b2>
    7038:	a1 10       	cpse	r10, r1
    703a:	01 c0       	rjmp	.+2      	; 0x703e <dtoa_prf+0x2b2>
    703c:	11 e3       	ldi	r17, 0x31	; 49
    703e:	f6 01       	movw	r30, r12
    7040:	10 83       	st	Z, r17
    7042:	fb 01       	movw	r30, r22
    7044:	8b 2d       	mov	r24, r11
    7046:	90 e2       	ldi	r25, 0x20	; 32
    7048:	88 23       	and	r24, r24
    704a:	19 f0       	breq	.+6      	; 0x7052 <dtoa_prf+0x2c6>
    704c:	91 93       	st	Z+, r25
    704e:	81 50       	subi	r24, 0x01	; 1
    7050:	fb cf       	rjmp	.-10     	; 0x7048 <dtoa_prf+0x2bc>
    7052:	fb 01       	movw	r30, r22
    7054:	eb 0d       	add	r30, r11
    7056:	f1 1d       	adc	r31, r1
    7058:	10 82       	st	Z, r1
    705a:	80 e0       	ldi	r24, 0x00	; 0
    705c:	90 e0       	ldi	r25, 0x00	; 0
    705e:	29 96       	adiw	r28, 0x09	; 9
    7060:	0f b6       	in	r0, 0x3f	; 63
    7062:	f8 94       	cli
    7064:	de bf       	out	0x3e, r29	; 62
    7066:	0f be       	out	0x3f, r0	; 63
    7068:	cd bf       	out	0x3d, r28	; 61
    706a:	df 91       	pop	r29
    706c:	cf 91       	pop	r28
    706e:	1f 91       	pop	r17
    7070:	0f 91       	pop	r16
    7072:	ff 90       	pop	r15
    7074:	ef 90       	pop	r14
    7076:	df 90       	pop	r13
    7078:	cf 90       	pop	r12
    707a:	bf 90       	pop	r11
    707c:	af 90       	pop	r10
    707e:	9f 90       	pop	r9
    7080:	7f 90       	pop	r7
    7082:	6f 90       	pop	r6
    7084:	08 95       	ret

00007086 <__ftoa_engine>:
    7086:	28 30       	cpi	r18, 0x08	; 8
    7088:	08 f0       	brcs	.+2      	; 0x708c <__ftoa_engine+0x6>
    708a:	27 e0       	ldi	r18, 0x07	; 7
    708c:	33 27       	eor	r19, r19
    708e:	da 01       	movw	r26, r20
    7090:	99 0f       	add	r25, r25
    7092:	31 1d       	adc	r19, r1
    7094:	87 fd       	sbrc	r24, 7
    7096:	91 60       	ori	r25, 0x01	; 1
    7098:	00 96       	adiw	r24, 0x00	; 0
    709a:	61 05       	cpc	r22, r1
    709c:	71 05       	cpc	r23, r1
    709e:	39 f4       	brne	.+14     	; 0x70ae <__ftoa_engine+0x28>
    70a0:	32 60       	ori	r19, 0x02	; 2
    70a2:	2e 5f       	subi	r18, 0xFE	; 254
    70a4:	3d 93       	st	X+, r19
    70a6:	30 e3       	ldi	r19, 0x30	; 48
    70a8:	2a 95       	dec	r18
    70aa:	e1 f7       	brne	.-8      	; 0x70a4 <__ftoa_engine+0x1e>
    70ac:	08 95       	ret
    70ae:	9f 3f       	cpi	r25, 0xFF	; 255
    70b0:	30 f0       	brcs	.+12     	; 0x70be <__ftoa_engine+0x38>
    70b2:	80 38       	cpi	r24, 0x80	; 128
    70b4:	71 05       	cpc	r23, r1
    70b6:	61 05       	cpc	r22, r1
    70b8:	09 f0       	breq	.+2      	; 0x70bc <__ftoa_engine+0x36>
    70ba:	3c 5f       	subi	r19, 0xFC	; 252
    70bc:	3c 5f       	subi	r19, 0xFC	; 252
    70be:	3d 93       	st	X+, r19
    70c0:	91 30       	cpi	r25, 0x01	; 1
    70c2:	08 f0       	brcs	.+2      	; 0x70c6 <__ftoa_engine+0x40>
    70c4:	80 68       	ori	r24, 0x80	; 128
    70c6:	91 1d       	adc	r25, r1
    70c8:	df 93       	push	r29
    70ca:	cf 93       	push	r28
    70cc:	1f 93       	push	r17
    70ce:	0f 93       	push	r16
    70d0:	ff 92       	push	r15
    70d2:	ef 92       	push	r14
    70d4:	19 2f       	mov	r17, r25
    70d6:	98 7f       	andi	r25, 0xF8	; 248
    70d8:	96 95       	lsr	r25
    70da:	e9 2f       	mov	r30, r25
    70dc:	96 95       	lsr	r25
    70de:	96 95       	lsr	r25
    70e0:	e9 0f       	add	r30, r25
    70e2:	ff 27       	eor	r31, r31
    70e4:	ea 51       	subi	r30, 0x1A	; 26
    70e6:	ff 4f       	sbci	r31, 0xFF	; 255
    70e8:	99 27       	eor	r25, r25
    70ea:	33 27       	eor	r19, r19
    70ec:	ee 24       	eor	r14, r14
    70ee:	ff 24       	eor	r15, r15
    70f0:	a7 01       	movw	r20, r14
    70f2:	e7 01       	movw	r28, r14
    70f4:	05 90       	lpm	r0, Z+
    70f6:	08 94       	sec
    70f8:	07 94       	ror	r0
    70fa:	28 f4       	brcc	.+10     	; 0x7106 <__ftoa_engine+0x80>
    70fc:	36 0f       	add	r19, r22
    70fe:	e7 1e       	adc	r14, r23
    7100:	f8 1e       	adc	r15, r24
    7102:	49 1f       	adc	r20, r25
    7104:	51 1d       	adc	r21, r1
    7106:	66 0f       	add	r22, r22
    7108:	77 1f       	adc	r23, r23
    710a:	88 1f       	adc	r24, r24
    710c:	99 1f       	adc	r25, r25
    710e:	06 94       	lsr	r0
    7110:	a1 f7       	brne	.-24     	; 0x70fa <__ftoa_engine+0x74>
    7112:	05 90       	lpm	r0, Z+
    7114:	07 94       	ror	r0
    7116:	28 f4       	brcc	.+10     	; 0x7122 <__ftoa_engine+0x9c>
    7118:	e7 0e       	add	r14, r23
    711a:	f8 1e       	adc	r15, r24
    711c:	49 1f       	adc	r20, r25
    711e:	56 1f       	adc	r21, r22
    7120:	c1 1d       	adc	r28, r1
    7122:	77 0f       	add	r23, r23
    7124:	88 1f       	adc	r24, r24
    7126:	99 1f       	adc	r25, r25
    7128:	66 1f       	adc	r22, r22
    712a:	06 94       	lsr	r0
    712c:	a1 f7       	brne	.-24     	; 0x7116 <__ftoa_engine+0x90>
    712e:	05 90       	lpm	r0, Z+
    7130:	07 94       	ror	r0
    7132:	28 f4       	brcc	.+10     	; 0x713e <__ftoa_engine+0xb8>
    7134:	f8 0e       	add	r15, r24
    7136:	49 1f       	adc	r20, r25
    7138:	56 1f       	adc	r21, r22
    713a:	c7 1f       	adc	r28, r23
    713c:	d1 1d       	adc	r29, r1
    713e:	88 0f       	add	r24, r24
    7140:	99 1f       	adc	r25, r25
    7142:	66 1f       	adc	r22, r22
    7144:	77 1f       	adc	r23, r23
    7146:	06 94       	lsr	r0
    7148:	a1 f7       	brne	.-24     	; 0x7132 <__ftoa_engine+0xac>
    714a:	05 90       	lpm	r0, Z+
    714c:	07 94       	ror	r0
    714e:	20 f4       	brcc	.+8      	; 0x7158 <__ftoa_engine+0xd2>
    7150:	49 0f       	add	r20, r25
    7152:	56 1f       	adc	r21, r22
    7154:	c7 1f       	adc	r28, r23
    7156:	d8 1f       	adc	r29, r24
    7158:	99 0f       	add	r25, r25
    715a:	66 1f       	adc	r22, r22
    715c:	77 1f       	adc	r23, r23
    715e:	88 1f       	adc	r24, r24
    7160:	06 94       	lsr	r0
    7162:	a9 f7       	brne	.-22     	; 0x714e <__ftoa_engine+0xc8>
    7164:	84 91       	lpm	r24, Z
    7166:	10 95       	com	r17
    7168:	17 70       	andi	r17, 0x07	; 7
    716a:	41 f0       	breq	.+16     	; 0x717c <__ftoa_engine+0xf6>
    716c:	d6 95       	lsr	r29
    716e:	c7 95       	ror	r28
    7170:	57 95       	ror	r21
    7172:	47 95       	ror	r20
    7174:	f7 94       	ror	r15
    7176:	e7 94       	ror	r14
    7178:	1a 95       	dec	r17
    717a:	c1 f7       	brne	.-16     	; 0x716c <__ftoa_engine+0xe6>
    717c:	ec e8       	ldi	r30, 0x8C	; 140
    717e:	f0 e0       	ldi	r31, 0x00	; 0
    7180:	68 94       	set
    7182:	15 90       	lpm	r1, Z+
    7184:	15 91       	lpm	r17, Z+
    7186:	35 91       	lpm	r19, Z+
    7188:	65 91       	lpm	r22, Z+
    718a:	95 91       	lpm	r25, Z+
    718c:	05 90       	lpm	r0, Z+
    718e:	7f e2       	ldi	r23, 0x2F	; 47
    7190:	73 95       	inc	r23
    7192:	e1 18       	sub	r14, r1
    7194:	f1 0a       	sbc	r15, r17
    7196:	43 0b       	sbc	r20, r19
    7198:	56 0b       	sbc	r21, r22
    719a:	c9 0b       	sbc	r28, r25
    719c:	d0 09       	sbc	r29, r0
    719e:	c0 f7       	brcc	.-16     	; 0x7190 <__ftoa_engine+0x10a>
    71a0:	e1 0c       	add	r14, r1
    71a2:	f1 1e       	adc	r15, r17
    71a4:	43 1f       	adc	r20, r19
    71a6:	56 1f       	adc	r21, r22
    71a8:	c9 1f       	adc	r28, r25
    71aa:	d0 1d       	adc	r29, r0
    71ac:	7e f4       	brtc	.+30     	; 0x71cc <__ftoa_engine+0x146>
    71ae:	70 33       	cpi	r23, 0x30	; 48
    71b0:	11 f4       	brne	.+4      	; 0x71b6 <__ftoa_engine+0x130>
    71b2:	8a 95       	dec	r24
    71b4:	e6 cf       	rjmp	.-52     	; 0x7182 <__ftoa_engine+0xfc>
    71b6:	e8 94       	clt
    71b8:	01 50       	subi	r16, 0x01	; 1
    71ba:	30 f0       	brcs	.+12     	; 0x71c8 <__ftoa_engine+0x142>
    71bc:	08 0f       	add	r16, r24
    71be:	0a f4       	brpl	.+2      	; 0x71c2 <__ftoa_engine+0x13c>
    71c0:	00 27       	eor	r16, r16
    71c2:	02 17       	cp	r16, r18
    71c4:	08 f4       	brcc	.+2      	; 0x71c8 <__ftoa_engine+0x142>
    71c6:	20 2f       	mov	r18, r16
    71c8:	23 95       	inc	r18
    71ca:	02 2f       	mov	r16, r18
    71cc:	7a 33       	cpi	r23, 0x3A	; 58
    71ce:	28 f0       	brcs	.+10     	; 0x71da <__ftoa_engine+0x154>
    71d0:	79 e3       	ldi	r23, 0x39	; 57
    71d2:	7d 93       	st	X+, r23
    71d4:	2a 95       	dec	r18
    71d6:	e9 f7       	brne	.-6      	; 0x71d2 <__ftoa_engine+0x14c>
    71d8:	10 c0       	rjmp	.+32     	; 0x71fa <__ftoa_engine+0x174>
    71da:	7d 93       	st	X+, r23
    71dc:	2a 95       	dec	r18
    71de:	89 f6       	brne	.-94     	; 0x7182 <__ftoa_engine+0xfc>
    71e0:	06 94       	lsr	r0
    71e2:	97 95       	ror	r25
    71e4:	67 95       	ror	r22
    71e6:	37 95       	ror	r19
    71e8:	17 95       	ror	r17
    71ea:	17 94       	ror	r1
    71ec:	e1 18       	sub	r14, r1
    71ee:	f1 0a       	sbc	r15, r17
    71f0:	43 0b       	sbc	r20, r19
    71f2:	56 0b       	sbc	r21, r22
    71f4:	c9 0b       	sbc	r28, r25
    71f6:	d0 09       	sbc	r29, r0
    71f8:	98 f0       	brcs	.+38     	; 0x7220 <__ftoa_engine+0x19a>
    71fa:	23 95       	inc	r18
    71fc:	7e 91       	ld	r23, -X
    71fe:	73 95       	inc	r23
    7200:	7a 33       	cpi	r23, 0x3A	; 58
    7202:	08 f0       	brcs	.+2      	; 0x7206 <__ftoa_engine+0x180>
    7204:	70 e3       	ldi	r23, 0x30	; 48
    7206:	7c 93       	st	X, r23
    7208:	20 13       	cpse	r18, r16
    720a:	b8 f7       	brcc	.-18     	; 0x71fa <__ftoa_engine+0x174>
    720c:	7e 91       	ld	r23, -X
    720e:	70 61       	ori	r23, 0x10	; 16
    7210:	7d 93       	st	X+, r23
    7212:	30 f0       	brcs	.+12     	; 0x7220 <__ftoa_engine+0x19a>
    7214:	83 95       	inc	r24
    7216:	71 e3       	ldi	r23, 0x31	; 49
    7218:	7d 93       	st	X+, r23
    721a:	70 e3       	ldi	r23, 0x30	; 48
    721c:	2a 95       	dec	r18
    721e:	e1 f7       	brne	.-8      	; 0x7218 <__ftoa_engine+0x192>
    7220:	11 24       	eor	r1, r1
    7222:	ef 90       	pop	r14
    7224:	ff 90       	pop	r15
    7226:	0f 91       	pop	r16
    7228:	1f 91       	pop	r17
    722a:	cf 91       	pop	r28
    722c:	df 91       	pop	r29
    722e:	99 27       	eor	r25, r25
    7230:	87 fd       	sbrc	r24, 7
    7232:	90 95       	com	r25
    7234:	08 95       	ret

00007236 <__ctype_isfalse>:
    7236:	99 27       	eor	r25, r25
    7238:	88 27       	eor	r24, r24

0000723a <__ctype_istrue>:
    723a:	08 95       	ret

0000723c <strnlen_P>:
    723c:	fc 01       	movw	r30, r24
    723e:	05 90       	lpm	r0, Z+
    7240:	61 50       	subi	r22, 0x01	; 1
    7242:	70 40       	sbci	r23, 0x00	; 0
    7244:	01 10       	cpse	r0, r1
    7246:	d8 f7       	brcc	.-10     	; 0x723e <strnlen_P+0x2>
    7248:	80 95       	com	r24
    724a:	90 95       	com	r25
    724c:	8e 0f       	add	r24, r30
    724e:	9f 1f       	adc	r25, r31
    7250:	08 95       	ret

00007252 <memset>:
    7252:	dc 01       	movw	r26, r24
    7254:	01 c0       	rjmp	.+2      	; 0x7258 <memset+0x6>
    7256:	6d 93       	st	X+, r22
    7258:	41 50       	subi	r20, 0x01	; 1
    725a:	50 40       	sbci	r21, 0x00	; 0
    725c:	e0 f7       	brcc	.-8      	; 0x7256 <memset+0x4>
    725e:	08 95       	ret

00007260 <strnlen>:
    7260:	fc 01       	movw	r30, r24
    7262:	61 50       	subi	r22, 0x01	; 1
    7264:	70 40       	sbci	r23, 0x00	; 0
    7266:	01 90       	ld	r0, Z+
    7268:	01 10       	cpse	r0, r1
    726a:	d8 f7       	brcc	.-10     	; 0x7262 <strnlen+0x2>
    726c:	80 95       	com	r24
    726e:	90 95       	com	r25
    7270:	8e 0f       	add	r24, r30
    7272:	9f 1f       	adc	r25, r31
    7274:	08 95       	ret

00007276 <fputc>:
    7276:	0f 93       	push	r16
    7278:	1f 93       	push	r17
    727a:	cf 93       	push	r28
    727c:	df 93       	push	r29
    727e:	18 2f       	mov	r17, r24
    7280:	09 2f       	mov	r16, r25
    7282:	eb 01       	movw	r28, r22
    7284:	8b 81       	ldd	r24, Y+3	; 0x03
    7286:	81 fd       	sbrc	r24, 1
    7288:	03 c0       	rjmp	.+6      	; 0x7290 <fputc+0x1a>
    728a:	8f ef       	ldi	r24, 0xFF	; 255
    728c:	9f ef       	ldi	r25, 0xFF	; 255
    728e:	20 c0       	rjmp	.+64     	; 0x72d0 <fputc+0x5a>
    7290:	82 ff       	sbrs	r24, 2
    7292:	10 c0       	rjmp	.+32     	; 0x72b4 <fputc+0x3e>
    7294:	4e 81       	ldd	r20, Y+6	; 0x06
    7296:	5f 81       	ldd	r21, Y+7	; 0x07
    7298:	2c 81       	ldd	r18, Y+4	; 0x04
    729a:	3d 81       	ldd	r19, Y+5	; 0x05
    729c:	42 17       	cp	r20, r18
    729e:	53 07       	cpc	r21, r19
    72a0:	7c f4       	brge	.+30     	; 0x72c0 <fputc+0x4a>
    72a2:	e8 81       	ld	r30, Y
    72a4:	f9 81       	ldd	r31, Y+1	; 0x01
    72a6:	9f 01       	movw	r18, r30
    72a8:	2f 5f       	subi	r18, 0xFF	; 255
    72aa:	3f 4f       	sbci	r19, 0xFF	; 255
    72ac:	39 83       	std	Y+1, r19	; 0x01
    72ae:	28 83       	st	Y, r18
    72b0:	10 83       	st	Z, r17
    72b2:	06 c0       	rjmp	.+12     	; 0x72c0 <fputc+0x4a>
    72b4:	e8 85       	ldd	r30, Y+8	; 0x08
    72b6:	f9 85       	ldd	r31, Y+9	; 0x09
    72b8:	81 2f       	mov	r24, r17
    72ba:	09 95       	icall
    72bc:	89 2b       	or	r24, r25
    72be:	29 f7       	brne	.-54     	; 0x728a <fputc+0x14>
    72c0:	2e 81       	ldd	r18, Y+6	; 0x06
    72c2:	3f 81       	ldd	r19, Y+7	; 0x07
    72c4:	2f 5f       	subi	r18, 0xFF	; 255
    72c6:	3f 4f       	sbci	r19, 0xFF	; 255
    72c8:	3f 83       	std	Y+7, r19	; 0x07
    72ca:	2e 83       	std	Y+6, r18	; 0x06
    72cc:	81 2f       	mov	r24, r17
    72ce:	90 2f       	mov	r25, r16
    72d0:	df 91       	pop	r29
    72d2:	cf 91       	pop	r28
    72d4:	1f 91       	pop	r17
    72d6:	0f 91       	pop	r16
    72d8:	08 95       	ret

000072da <__ultoa_invert>:
    72da:	fa 01       	movw	r30, r20
    72dc:	aa 27       	eor	r26, r26
    72de:	28 30       	cpi	r18, 0x08	; 8
    72e0:	51 f1       	breq	.+84     	; 0x7336 <__ultoa_invert+0x5c>
    72e2:	20 31       	cpi	r18, 0x10	; 16
    72e4:	81 f1       	breq	.+96     	; 0x7346 <__ultoa_invert+0x6c>
    72e6:	e8 94       	clt
    72e8:	6f 93       	push	r22
    72ea:	6e 7f       	andi	r22, 0xFE	; 254
    72ec:	6e 5f       	subi	r22, 0xFE	; 254
    72ee:	7f 4f       	sbci	r23, 0xFF	; 255
    72f0:	8f 4f       	sbci	r24, 0xFF	; 255
    72f2:	9f 4f       	sbci	r25, 0xFF	; 255
    72f4:	af 4f       	sbci	r26, 0xFF	; 255
    72f6:	b1 e0       	ldi	r27, 0x01	; 1
    72f8:	3e d0       	rcall	.+124    	; 0x7376 <__ultoa_invert+0x9c>
    72fa:	b4 e0       	ldi	r27, 0x04	; 4
    72fc:	3c d0       	rcall	.+120    	; 0x7376 <__ultoa_invert+0x9c>
    72fe:	67 0f       	add	r22, r23
    7300:	78 1f       	adc	r23, r24
    7302:	89 1f       	adc	r24, r25
    7304:	9a 1f       	adc	r25, r26
    7306:	a1 1d       	adc	r26, r1
    7308:	68 0f       	add	r22, r24
    730a:	79 1f       	adc	r23, r25
    730c:	8a 1f       	adc	r24, r26
    730e:	91 1d       	adc	r25, r1
    7310:	a1 1d       	adc	r26, r1
    7312:	6a 0f       	add	r22, r26
    7314:	71 1d       	adc	r23, r1
    7316:	81 1d       	adc	r24, r1
    7318:	91 1d       	adc	r25, r1
    731a:	a1 1d       	adc	r26, r1
    731c:	20 d0       	rcall	.+64     	; 0x735e <__ultoa_invert+0x84>
    731e:	09 f4       	brne	.+2      	; 0x7322 <__ultoa_invert+0x48>
    7320:	68 94       	set
    7322:	3f 91       	pop	r19
    7324:	2a e0       	ldi	r18, 0x0A	; 10
    7326:	26 9f       	mul	r18, r22
    7328:	11 24       	eor	r1, r1
    732a:	30 19       	sub	r19, r0
    732c:	30 5d       	subi	r19, 0xD0	; 208
    732e:	31 93       	st	Z+, r19
    7330:	de f6       	brtc	.-74     	; 0x72e8 <__ultoa_invert+0xe>
    7332:	cf 01       	movw	r24, r30
    7334:	08 95       	ret
    7336:	46 2f       	mov	r20, r22
    7338:	47 70       	andi	r20, 0x07	; 7
    733a:	40 5d       	subi	r20, 0xD0	; 208
    733c:	41 93       	st	Z+, r20
    733e:	b3 e0       	ldi	r27, 0x03	; 3
    7340:	0f d0       	rcall	.+30     	; 0x7360 <__ultoa_invert+0x86>
    7342:	c9 f7       	brne	.-14     	; 0x7336 <__ultoa_invert+0x5c>
    7344:	f6 cf       	rjmp	.-20     	; 0x7332 <__ultoa_invert+0x58>
    7346:	46 2f       	mov	r20, r22
    7348:	4f 70       	andi	r20, 0x0F	; 15
    734a:	40 5d       	subi	r20, 0xD0	; 208
    734c:	4a 33       	cpi	r20, 0x3A	; 58
    734e:	18 f0       	brcs	.+6      	; 0x7356 <__ultoa_invert+0x7c>
    7350:	49 5d       	subi	r20, 0xD9	; 217
    7352:	31 fd       	sbrc	r19, 1
    7354:	40 52       	subi	r20, 0x20	; 32
    7356:	41 93       	st	Z+, r20
    7358:	02 d0       	rcall	.+4      	; 0x735e <__ultoa_invert+0x84>
    735a:	a9 f7       	brne	.-22     	; 0x7346 <__ultoa_invert+0x6c>
    735c:	ea cf       	rjmp	.-44     	; 0x7332 <__ultoa_invert+0x58>
    735e:	b4 e0       	ldi	r27, 0x04	; 4
    7360:	a6 95       	lsr	r26
    7362:	97 95       	ror	r25
    7364:	87 95       	ror	r24
    7366:	77 95       	ror	r23
    7368:	67 95       	ror	r22
    736a:	ba 95       	dec	r27
    736c:	c9 f7       	brne	.-14     	; 0x7360 <__ultoa_invert+0x86>
    736e:	00 97       	sbiw	r24, 0x00	; 0
    7370:	61 05       	cpc	r22, r1
    7372:	71 05       	cpc	r23, r1
    7374:	08 95       	ret
    7376:	9b 01       	movw	r18, r22
    7378:	ac 01       	movw	r20, r24
    737a:	0a 2e       	mov	r0, r26
    737c:	06 94       	lsr	r0
    737e:	57 95       	ror	r21
    7380:	47 95       	ror	r20
    7382:	37 95       	ror	r19
    7384:	27 95       	ror	r18
    7386:	ba 95       	dec	r27
    7388:	c9 f7       	brne	.-14     	; 0x737c <__ultoa_invert+0xa2>
    738a:	62 0f       	add	r22, r18
    738c:	73 1f       	adc	r23, r19
    738e:	84 1f       	adc	r24, r20
    7390:	95 1f       	adc	r25, r21
    7392:	a0 1d       	adc	r26, r0
    7394:	08 95       	ret

00007396 <__mulsi3>:
    7396:	db 01       	movw	r26, r22
    7398:	8f 93       	push	r24
    739a:	9f 93       	push	r25
    739c:	0e 94 69 31 	call	0x62d2	; 0x62d2 <__muluhisi3>
    73a0:	bf 91       	pop	r27
    73a2:	af 91       	pop	r26
    73a4:	a2 9f       	mul	r26, r18
    73a6:	80 0d       	add	r24, r0
    73a8:	91 1d       	adc	r25, r1
    73aa:	a3 9f       	mul	r26, r19
    73ac:	90 0d       	add	r25, r0
    73ae:	b2 9f       	mul	r27, r18
    73b0:	90 0d       	add	r25, r0
    73b2:	11 24       	eor	r1, r1
    73b4:	08 95       	ret

000073b6 <_exit>:
    73b6:	f8 94       	cli

000073b8 <__stop_program>:
    73b8:	ff cf       	rjmp	.-2      	; 0x73b8 <__stop_program>
